//! vqlui.debug.js
//

// Include iScroll inline here since it's so small
/*! iScroll v5.0.6 ~ (c) 2008-2013 Matteo Spinelli ~ http://cubiq.org/license */
var IScroll = (function (window, document, Math) {
var rAF = window.requestAnimationFrame	||
	window.webkitRequestAnimationFrame	||
	window.mozRequestAnimationFrame		||
	window.oRequestAnimationFrame		||
	window.msRequestAnimationFrame		||
	function (callback) { window.setTimeout(callback, 1000 / 60); };

var utils = (function () {
	var me = {};

	var _elementStyle = document.createElement('div').style;
	var _vendor = (function () {
		var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
			transform,
			i = 0,
			l = vendors.length;

		for ( ; i < l; i++ ) {
			transform = vendors[i] + 'ransform';
			if ( transform in _elementStyle ) return vendors[i].substr(0, vendors[i].length-1);
		}

		return false;
	})();

	function _prefixStyle (style) {
		if ( _vendor === false ) return false;
		if ( _vendor === '' ) return style;
		return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	}

	me.getTime = Date.now || function getTime () { return new Date().getTime(); };

	me.extend = function (target, obj) {
		for ( var i in obj ) {
			target[i] = obj[i];
		}
	};

	me.addEvent = function (el, type, fn, capture) {
		el.addEventListener(type, fn, !!capture);
	};

	me.removeEvent = function (el, type, fn, capture) {
		el.removeEventListener(type, fn, !!capture);
	};

	me.momentum = function (current, start, time, lowerMargin, wrapperSize) {
		var distance = current - start,
			speed = Math.abs(distance) / time,
			destination,
			duration,
			deceleration = 0.0006;

		destination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? -1 : 1 );
		duration = speed / deceleration;

		if ( destination < lowerMargin ) {
			destination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;
			distance = Math.abs(destination - current);
			duration = distance / speed;
		} else if ( destination > 0 ) {
			destination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;
			distance = Math.abs(current) + destination;
			duration = distance / speed;
		}

		return {
			destination: Math.round(destination),
			duration: duration
		};
	};

	var _transform = _prefixStyle('transform');

	me.extend(me, {
		hasTransform: _transform !== false,
		hasPerspective: _prefixStyle('perspective') in _elementStyle,
		hasTouch: 'ontouchstart' in window,
		hasPointer: navigator.msPointerEnabled,
		hasTransition: _prefixStyle('transition') in _elementStyle
	});

	me.isAndroidBrowser = /Android/.test(window.navigator.appVersion) && /Version\/\d/.test(window.navigator.appVersion);

	me.extend(me.style = {}, {
		transform: _transform,
		transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
		transitionDuration: _prefixStyle('transitionDuration'),
		transformOrigin: _prefixStyle('transformOrigin')
	});

	me.hasClass = function (e, c) {
		var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
		return re.test(e.className);
	};

	me.addClass = function (e, c) {
		if ( me.hasClass(e, c) ) {
			return;
		}

		var newclass = e.className.split(' ');
		newclass.push(c);
		e.className = newclass.join(' ');
	};

	me.removeClass = function (e, c) {
		if ( !me.hasClass(e, c) ) {
			return;
		}

		var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
		e.className = e.className.replace(re, ' ');
	};

	me.offset = function (el) {
		var left = -el.offsetLeft,
			top = -el.offsetTop;

		// jshint -W084
		while (el = el.offsetParent) {
			left -= el.offsetLeft;
			top -= el.offsetTop;
		}
		// jshint +W084

		return {
			left: left,
			top: top
		};
	};

	me.preventDefaultException = function (el, exceptions) {
		for ( var i in exceptions ) {
			if ( exceptions[i].test(el[i]) ) {
				return true;
			}
		}

		return false;
	};

	me.extend(me.eventType = {}, {
		touchstart: 1,
		touchmove: 1,
		touchend: 1,

		mousedown: 2,
		mousemove: 2,
		mouseup: 2,

		MSPointerDown: 3,
		MSPointerMove: 3,
		MSPointerUp: 3
	});

	me.extend(me.ease = {}, {
		quadratic: {
			style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
			fn: function (k) {
				return k * ( 2 - k );
			}
		},
		circular: {
			style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',	// Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
			fn: function (k) {
				return Math.sqrt( 1 - ( --k * k ) );
			}
		},
		back: {
			style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
			fn: function (k) {
				var b = 4;
				return ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;
			}
		},
		bounce: {
			style: '',
			fn: function (k) {
				if ( ( k /= 1 ) < ( 1 / 2.75 ) ) {
					return 7.5625 * k * k;
				} else if ( k < ( 2 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;
				} else if ( k < ( 2.5 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;
				} else {
					return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;
				}
			}
		},
		elastic: {
			style: '',
			fn: function (k) {
				var f = 0.22,
					e = 0.4;

				if ( k === 0 ) { return 0; }
				if ( k == 1 ) { return 1; }

				return ( e * Math.pow( 2, - 10 * k ) * Math.sin( ( k - f / 4 ) * ( 2 * Math.PI ) / f ) + 1 );
			}
		}
	});

	me.tap = function (e, eventName) {
		var ev = document.createEvent('Event');
		ev.initEvent(eventName, true, true);
		ev.pageX = e.pageX;
		ev.pageY = e.pageY;
		e.target.dispatchEvent(ev);
	};

	me.click = function (e) {
		var target = e.target,
			ev;

		if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {
			ev = document.createEvent('MouseEvents');
			ev.initMouseEvent('click', true, true, e.view, 1,
				target.screenX, target.screenY, target.clientX, target.clientY,
				e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,
				0, null);

			ev._constructed = true;
			target.dispatchEvent(ev);
		}
	};

	return me;
})();

function IScroll (el, options) {
	this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
	this.scroller = this.wrapper.children[0];
	this.scrollerStyle = this.scroller.style;		// cache style for better performance

	this.options = {

		resizeIndicator: true,

		mouseWheelSpeed: 20,

		snapThreshold: 0.334,

// INSERT POINT: OPTIONS 

		startX: 0,
		startY: 0,
		scrollY: true,
		directionLockThreshold: 5,
		momentum: true,

		bounce: true,
		bounceTime: 600,
		bounceEasing: '',

		preventDefault: true,
		preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },

		HWCompositing: true,
		useTransition: true,
		useTransform: true
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	// Normalize options
	this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

	this.options.useTransition = utils.hasTransition && this.options.useTransition;
	this.options.useTransform = utils.hasTransform && this.options.useTransform;

	this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
	this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

	// If you want eventPassthrough I have to lock one of the axes
	this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
	this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

	// With eventPassthrough we also need lockDirection mechanism
	this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
	this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

	this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

	this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

	if ( this.options.tap === true ) {
		this.options.tap = 'tap';
	}

	this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

// INSERT POINT: NORMALIZATION

	// Some defaults	
	this.x = 0;
	this.y = 0;
	this.directionX = 0;
	this.directionY = 0;
	this._events = {};

// INSERT POINT: DEFAULTS

	this._init();
	this.refresh();

	this.scrollTo(this.options.startX, this.options.startY);
	this.enable();
}

IScroll.prototype = {
	version: '5.0.6',

	_init: function () {
		this._initEvents();

		if ( this.options.scrollbars || this.options.indicators ) {
			this._initIndicators();
		}

		if ( this.options.mouseWheel ) {
			this._initWheel();
		}

		if ( this.options.snap ) {
			this._initSnap();
		}

		if ( this.options.keyBindings ) {
			this._initKeys();
		}

// INSERT POINT: _init

	},

	destroy: function () {
		this._initEvents(true);

		this._execEvent('destroy');
	},

	_transitionEnd: function (e) {
		if ( e.target != this.scroller ) {
			return;
		}

		this._transitionTime(0);
		if ( !this.resetPosition(this.options.bounceTime) ) {
			this._execEvent('scrollEnd');
		}
	},

	_start: function (e) {
		// React to left mouse button only
		if ( utils.eventType[e.type] != 1 ) {
			if ( e.button !== 0 ) {
				return;
			}
		}

		if ( !this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated) ) {
			return;
		}

		if ( this.options.preventDefault && !utils.isAndroidBrowser && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();		// This seems to break default Android browser
		}

		var point = e.touches ? e.touches[0] : e,
			pos;

		this.initiated	= utils.eventType[e.type];
		this.moved		= false;
		this.distX		= 0;
		this.distY		= 0;
		this.directionX = 0;
		this.directionY = 0;
		this.directionLocked = 0;

		this._transitionTime();

		this.isAnimating = false;
		this.startTime = utils.getTime();

		if ( this.options.useTransition && this.isInTransition ) {
			pos = this.getComputedPosition();

			this._translate(Math.round(pos.x), Math.round(pos.y));
			this._execEvent('scrollEnd');
			this.isInTransition = false;
		}

		this.startX    = this.x;
		this.startY    = this.y;
		this.absStartX = this.x;
		this.absStartY = this.y;
		this.pointX    = point.pageX;
		this.pointY    = point.pageY;

		this._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault ) {	// increases performance on Android? TODO: check!
			e.preventDefault();
		}

		var point		= e.touches ? e.touches[0] : e,
			deltaX		= point.pageX - this.pointX,
			deltaY		= point.pageY - this.pointY,
			timestamp	= utils.getTime(),
			newX, newY,
			absDistX, absDistY;

		this.pointX		= point.pageX;
		this.pointY		= point.pageY;

		this.distX		+= deltaX;
		this.distY		+= deltaY;
		absDistX		= Math.abs(this.distX);
		absDistY		= Math.abs(this.distY);

		// We need to move at least 10 pixels for the scrolling to initiate
		if ( timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10) ) {
			return;
		}

		// If you are scrolling in one direction lock the other
		if ( !this.directionLocked && !this.options.freeScroll ) {
			if ( absDistX > absDistY + this.options.directionLockThreshold ) {
				this.directionLocked = 'h';		// lock horizontally
			} else if ( absDistY >= absDistX + this.options.directionLockThreshold ) {
				this.directionLocked = 'v';		// lock vertically
			} else {
				this.directionLocked = 'n';		// no lock
			}
		}

		if ( this.directionLocked == 'h' ) {
			if ( this.options.eventPassthrough == 'vertical' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'horizontal' ) {
				this.initiated = false;
				return;
			}

			deltaY = 0;
		} else if ( this.directionLocked == 'v' ) {
			if ( this.options.eventPassthrough == 'horizontal' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'vertical' ) {
				this.initiated = false;
				return;
			}

			deltaX = 0;
		}

		deltaX = this.hasHorizontalScroll ? deltaX : 0;
		deltaY = this.hasVerticalScroll ? deltaY : 0;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		// Slow down if outside of the boundaries
		if ( newX > 0 || newX < this.maxScrollX ) {
			newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
		}
		if ( newY > 0 || newY < this.maxScrollY ) {
			newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
		}

		this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
		this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

		if ( !this.moved ) {
			this._execEvent('scrollStart');
		}

		this.moved = true;

		this._translate(newX, newY);

/* REPLACE START: _move */

		if ( timestamp - this.startTime > 300 ) {
			this.startTime = timestamp;
			this.startX = this.x;
			this.startY = this.y;
		}

/* REPLACE END: _move */

	},

	_end: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();
		}

		var point = e.changedTouches ? e.changedTouches[0] : e,
			momentumX,
			momentumY,
			duration = utils.getTime() - this.startTime,
			newX = Math.round(this.x),
			newY = Math.round(this.y),
			distanceX = Math.abs(newX - this.startX),
			distanceY = Math.abs(newY - this.startY),
			time = 0,
			easing = '';

		this.scrollTo(newX, newY);	// ensures that the last position is rounded

		this.isInTransition = 0;
		this.initiated = 0;
		this.endTime = utils.getTime();

		// reset if we are outside of the boundaries
		if ( this.resetPosition(this.options.bounceTime) ) {
			return;
		}

		// we scrolled less than 10 pixels
		if ( !this.moved ) {
			if ( this.options.tap ) {
				utils.tap(e, this.options.tap);
			}

			if ( this.options.click ) {
				utils.click(e);
			}

			return;
		}

		if ( this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100 ) {
			this._execEvent('flick');
			return;
		}

		// start momentum animation if needed
		if ( this.options.momentum && duration < 300 ) {
			momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0) : { destination: newX, duration: 0 };
			momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0) : { destination: newY, duration: 0 };
			newX = momentumX.destination;
			newY = momentumY.destination;
			time = Math.max(momentumX.duration, momentumY.duration);
			this.isInTransition = 1;
		}


		if ( this.options.snap ) {
			var snap = this._nearestSnap(newX, newY);
			this.currentPage = snap;
			time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(newX - snap.x), 1000),
						Math.min(Math.abs(newY - snap.y), 1000)
					), 300);
			newX = snap.x;
			newY = snap.y;

			this.directionX = 0;
			this.directionY = 0;
			easing = this.options.bounceEasing;
		}

// INSERT POINT: _end

		if ( newX != this.x || newY != this.y ) {
			// change easing function when scroller goes out of the boundaries
			if ( newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY ) {
				easing = utils.ease.quadratic;
			}

			this.scrollTo(newX, newY, time, easing);
			return;
		}

		this._execEvent('scrollEnd');
	},

	_resize: function () {
		var that = this;

		clearTimeout(this.resizeTimeout);

		this.resizeTimeout = setTimeout(function () {
			that.refresh();
		}, this.options.resizePolling);
	},

	resetPosition: function (time) {
		var x = this.x,
			y = this.y;

		time = time || 0;

		if ( !this.hasHorizontalScroll || this.x > 0 ) {
			x = 0;
		} else if ( this.x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( !this.hasVerticalScroll || this.y > 0 ) {
			y = 0;
		} else if ( this.y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		if ( x == this.x && y == this.y ) {
			return false;
		}

		this.scrollTo(x, y, time, this.options.bounceEasing);

		return true;
	},

	disable: function () {
		this.enabled = false;
	},

	enable: function () {
		this.enabled = true;
	},

	refresh: function () {
		var rf = this.wrapper.offsetHeight;		// Force reflow

		this.wrapperWidth	= this.wrapper.clientWidth;
		this.wrapperHeight	= this.wrapper.clientHeight;

/* REPLACE START: refresh */

		this.scrollerWidth	= this.scroller.offsetWidth;
		this.scrollerHeight	= this.scroller.offsetHeight;

/* REPLACE END: refresh */

		this.maxScrollX		= this.wrapperWidth - this.scrollerWidth;
		this.maxScrollY		= this.wrapperHeight - this.scrollerHeight;

		this.hasHorizontalScroll	= this.options.scrollX && this.maxScrollX < 0;
		this.hasVerticalScroll		= this.options.scrollY && this.maxScrollY < 0;

		if ( !this.hasHorizontalScroll ) {
			this.maxScrollX = 0;
			this.scrollerWidth = this.wrapperWidth;
		}

		if ( !this.hasVerticalScroll ) {
			this.maxScrollY = 0;
			this.scrollerHeight = this.wrapperHeight;
		}

		this.endTime = 0;
		this.directionX = 0;
		this.directionY = 0;

		this.wrapperOffset = utils.offset(this.wrapper);

		this._execEvent('refresh');

		this.resetPosition();

// INSERT POINT: _refresh

	},

	on: function (type, fn) {
		if ( !this._events[type] ) {
			this._events[type] = [];
		}

		this._events[type].push(fn);
	},

	_execEvent: function (type) {
		if ( !this._events[type] ) {
			return;
		}

		var i = 0,
			l = this._events[type].length;

		if ( !l ) {
			return;
		}

		for ( ; i < l; i++ ) {
			this._events[type][i].call(this);
		}
	},

	scrollBy: function (x, y, time, easing) {
		x = this.x + x;
		y = this.y + y;
		time = time || 0;

		this.scrollTo(x, y, time, easing);
	},

	scrollTo: function (x, y, time, easing) {
		easing = easing || utils.ease.circular;

		if ( !time || (this.options.useTransition && easing.style) ) {
			this._transitionTimingFunction(easing.style);
			this._transitionTime(time);
			this._translate(x, y);
		} else {
			this._animate(x, y, time, easing.fn);
		}
	},

	scrollToElement: function (el, time, offsetX, offsetY, easing) {
		el = el.nodeType ? el : this.scroller.querySelector(el);

		if ( !el ) {
			return;
		}

		var pos = utils.offset(el);

		pos.left -= this.wrapperOffset.left;
		pos.top  -= this.wrapperOffset.top;

		// if offsetX/Y are true we center the element to the screen
		if ( offsetX === true ) {
			offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
		}
		if ( offsetY === true ) {
			offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
		}

		pos.left -= offsetX || 0;
		pos.top  -= offsetY || 0;

		pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
		pos.top  = pos.top  > 0 ? 0 : pos.top  < this.maxScrollY ? this.maxScrollY : pos.top;

		time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x-pos.left), Math.abs(this.y-pos.top)) : time;

		this.scrollTo(pos.left, pos.top, time, easing);
	},

	_transitionTime: function (time) {
		time = time || 0;
		this.scrollerStyle[utils.style.transitionDuration] = time + 'ms';


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTime(time);
			}
		}


// INSERT POINT: _transitionTime

	},

	_transitionTimingFunction: function (easing) {
		this.scrollerStyle[utils.style.transitionTimingFunction] = easing;


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTimingFunction(easing);
			}
		}


// INSERT POINT: _transitionTimingFunction

	},

	_translate: function (x, y) {
		if ( this.options.useTransform ) {

/* REPLACE START: _translate */

			this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

/* REPLACE END: _translate */

		} else {
			x = Math.round(x);
			y = Math.round(y);
			this.scrollerStyle.left = x + 'px';
			this.scrollerStyle.top = y + 'px';
		}

		this.x = x;
		this.y = y;


	if ( this.indicators ) {
		for ( var i = this.indicators.length; i--; ) {
			this.indicators[i].updatePosition();
		}
	}


// INSERT POINT: _translate

	},

	_initEvents: function (remove) {
		var eventType = remove ? utils.removeEvent : utils.addEvent,
			target = this.options.bindToWrapper ? this.wrapper : window;

		eventType(window, 'orientationchange', this);
		eventType(window, 'resize', this);

		if ( this.options.click ) {
			eventType(this.wrapper, 'click', this, true);
		}

		if ( !this.options.disableMouse ) {
			eventType(this.wrapper, 'mousedown', this);
			eventType(target, 'mousemove', this);
			eventType(target, 'mousecancel', this);
			eventType(target, 'mouseup', this);
		}

		if ( utils.hasPointer && !this.options.disablePointer ) {
			if (window.PointerEvent) {
				eventType(this.wrapper, 'pointerdown', this);
				eventType(target, 'pointermove', this);
				eventType(target, 'pointercancel', this);
				eventType(target, 'pointerup', this);
				}
			else if (window.MSPointerEvent) {
				eventType(this.wrapper, 'MSPointerDown', this);
				eventType(target, 'MSPointerMove', this);
				eventType(target, 'MSPointerCancel', this);
				eventType(target, 'MSPointerUp', this);
			}
		}

		if ( utils.hasTouch && !this.options.disableTouch ) {
			eventType(this.wrapper, 'touchstart', this);
			eventType(target, 'touchmove', this);
			eventType(target, 'touchcancel', this);
			eventType(target, 'touchend', this);
		}

		eventType(this.scroller, 'transitionend', this);
		eventType(this.scroller, 'webkitTransitionEnd', this);
		eventType(this.scroller, 'oTransitionEnd', this);
		eventType(this.scroller, 'MSTransitionEnd', this);
	},

	getComputedPosition: function () {
		var matrix = window.getComputedStyle(this.scroller, null),
			x, y;

		if ( this.options.useTransform ) {
			matrix = matrix[utils.style.transform].split(')')[0].split(', ');
			x = +(matrix[12] || matrix[4]);
			y = +(matrix[13] || matrix[5]);
		} else {
			x = +matrix.left.replace(/[^-\d]/g, '');
			y = +matrix.top.replace(/[^-\d]/g, '');
		}

		return { x: x, y: y };
	},

	_initIndicators: function () {
		var interactive = this.options.interactiveScrollbars,
			defaultScrollbars = typeof this.options.scrollbars != 'object',
			customStyle = typeof this.options.scrollbars != 'string',
			indicators = [],
			indicator;

		this.indicators = [];

		if ( this.options.scrollbars ) {
			// Vertical scrollbar
			if ( this.options.scrollY ) {
				indicator = {
					el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeIndicator,
					listenX: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}

			// Horizontal scrollbar
			if ( this.options.scrollX ) {
				indicator = {
					el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeIndicator,
					listenY: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}
		}

		if ( this.options.indicators ) {
			// works fine for arrays and non-arrays
			indicators = indicators.concat(this.options.indicators);
		}

		for ( var i = indicators.length; i--; ) {
			this.indicators[i] = new Indicator(this, indicators[i]);
		}

		this.on('refresh', function () {
			if ( this.indicators ) {
				for ( var i = this.indicators.length; i--; ) {
					this.indicators[i].refresh();
				}
			}
		});

		this.on('destroy', function () {
			if ( this.indicators ) {
				for ( var i = this.indicators.length; i--; ) {
					this.indicators[i].destroy();
				}
			}

			delete this.indicators;
		});
	},

	_initWheel: function () {
		utils.addEvent(this.wrapper, 'mousewheel', this);
		utils.addEvent(this.wrapper, 'DOMMouseScroll', this);

		this.on('destroy', function () {
			utils.removeEvent(this.wrapper, 'mousewheel', this);
			utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
		});
	},

	_wheel: function (e) {
		if ( !this.enabled ) {
			return;
		}

		e.preventDefault();

		var wheelDeltaX, wheelDeltaY,
			newX, newY,
			that = this;

		// Execute the scrollEnd event after 400ms the wheel stopped scrolling
		clearTimeout(this.wheelTimeout);
		this.wheelTimeout = setTimeout(function () {
			that._execEvent('scrollEnd');
		}, 400);

		if ( 'wheelDeltaX' in e ) {
			wheelDeltaX = e.wheelDeltaX / 120;
			wheelDeltaY = e.wheelDeltaY / 120;
		} else if ( 'wheelDelta' in e ) {
			wheelDeltaX = wheelDeltaY = e.wheelDelta / 120;
		} else if ( 'detail' in e ) {
			wheelDeltaX = wheelDeltaY = -e.detail / 3;
		} else {
			return;
		}

		wheelDeltaX *= this.options.mouseWheelSpeed;
		wheelDeltaY *= this.options.mouseWheelSpeed;

		if ( !this.hasVerticalScroll ) {
			wheelDeltaX = wheelDeltaY;
			wheelDeltaY = 0;
		}

		if ( this.options.snap ) {
			newX = this.currentPage.pageX;
			newY = this.currentPage.pageY;

			if ( wheelDeltaX > 0 ) {
				newX--;
			} else if ( wheelDeltaX < 0 ) {
				newX++;
			}

			if ( wheelDeltaY > 0 ) {
				newY--;
			} else if ( wheelDeltaY < 0 ) {
				newY++;
			}

			this.goToPage(newX, newY);

			return;
		}

		newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX * this.options.invertWheelDirection : 0);
		newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY * this.options.invertWheelDirection : 0);

		if ( newX > 0 ) {
			newX = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
		}

		if ( newY > 0 ) {
			newY = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
		}

		this.scrollTo(newX, newY, 0);

// INSERT POINT: _wheel
	},

	_initSnap: function () {
		this.currentPage = {};

		if ( typeof this.options.snap == 'string' ) {
			this.options.snap = this.scroller.querySelectorAll(this.options.snap);
		}

		this.on('refresh', function () {
			var i = 0, l,
				m = 0, n,
				cx, cy,
				x = 0, y,
				stepX = this.options.snapStepX || this.wrapperWidth,
				stepY = this.options.snapStepY || this.wrapperHeight,
				el;

			this.pages = [];

			if ( !this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight ) {
				return;
			}

			if ( this.options.snap === true ) {
				cx = Math.round( stepX / 2 );
				cy = Math.round( stepY / 2 );

				while ( x > -this.scrollerWidth ) {
					this.pages[i] = [];
					l = 0;
					y = 0;

					while ( y > -this.scrollerHeight ) {
						this.pages[i][l] = {
							x: Math.max(x, this.maxScrollX),
							y: Math.max(y, this.maxScrollY),
							width: stepX,
							height: stepY,
							cx: x - cx,
							cy: y - cy
						};

						y -= stepY;
						l++;
					}

					x -= stepX;
					i++;
				}
			} else {
				el = this.options.snap;
				l = el.length;
				n = -1;

				for ( ; i < l; i++ ) {
					if ( i === 0 || el[i].offsetLeft <= el[i-1].offsetLeft ) {
						m = 0;
						n++;
					}

					if ( !this.pages[m] ) {
						this.pages[m] = [];
					}

					x = Math.max(-el[i].offsetLeft, this.maxScrollX);
					y = Math.max(-el[i].offsetTop, this.maxScrollY);
					cx = x - Math.round(el[i].offsetWidth / 2);
					cy = y - Math.round(el[i].offsetHeight / 2);

					this.pages[m][n] = {
						x: x,
						y: y,
						width: el[i].offsetWidth,
						height: el[i].offsetHeight,
						cx: cx,
						cy: cy
					};

					if ( x > this.maxScrollX ) {
						m++;
					}
				}
			}

			this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

			// Update snap threshold if needed
			if ( this.options.snapThreshold % 1 === 0 ) {
				this.snapThresholdX = this.options.snapThreshold;
				this.snapThresholdY = this.options.snapThreshold;
			} else {
				this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
				this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
			}
		});

		this.on('flick', function () {
			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.x - this.startX), 1000),
						Math.min(Math.abs(this.y - this.startY), 1000)
					), 300);

			this.goToPage(
				this.currentPage.pageX + this.directionX,
				this.currentPage.pageY + this.directionY,
				time
			);
		});
	},

	_nearestSnap: function (x, y) {
		if ( !this.pages.length ) {
			return { x: 0, y: 0, pageX: 0, pageY: 0 };
		}

		var i = 0,
			l = this.pages.length,
			m = 0;

		// Check if we exceeded the snap threshold
		if ( Math.abs(x - this.absStartX) < this.snapThresholdX &&
			Math.abs(y - this.absStartY) < this.snapThresholdY ) {
			return this.currentPage;
		}

		if ( x > 0 ) {
			x = 0;
		} else if ( x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( y > 0 ) {
			y = 0;
		} else if ( y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		for ( ; i < l; i++ ) {
			if ( x >= this.pages[i][0].cx ) {
				x = this.pages[i][0].x;
				break;
			}
		}

		l = this.pages[i].length;

		for ( ; m < l; m++ ) {
			if ( y >= this.pages[0][m].cy ) {
				y = this.pages[0][m].y;
				break;
			}
		}

		if ( i == this.currentPage.pageX ) {
			i += this.directionX;

			if ( i < 0 ) {
				i = 0;
			} else if ( i >= this.pages.length ) {
				i = this.pages.length - 1;
			}

			x = this.pages[i][0].x;
		}

		if ( m == this.currentPage.pageY ) {
			m += this.directionY;

			if ( m < 0 ) {
				m = 0;
			} else if ( m >= this.pages[0].length ) {
				m = this.pages[0].length - 1;
			}

			y = this.pages[0][m].y;
		}

		return {
			x: x,
			y: y,
			pageX: i,
			pageY: m
		};
	},

	goToPage: function (x, y, time, easing) {
		easing = easing || this.options.bounceEasing;

		if ( x >= this.pages.length ) {
			x = this.pages.length - 1;
		} else if ( x < 0 ) {
			x = 0;
		}

		if ( y >= this.pages[x].length ) {
			y = this.pages[x].length - 1;
		} else if ( y < 0 ) {
			y = 0;
		}

		var posX = this.pages[x][y].x,
			posY = this.pages[x][y].y;

		time = time === undefined ? this.options.snapSpeed || Math.max(
			Math.max(
				Math.min(Math.abs(posX - this.x), 1000),
				Math.min(Math.abs(posY - this.y), 1000)
			), 300) : time;

		this.currentPage = {
			x: posX,
			y: posY,
			pageX: x,
			pageY: y
		};

		this.scrollTo(posX, posY, time, easing);
	},

	next: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x++;

		if ( x >= this.pages.length && this.hasVerticalScroll ) {
			x = 0;
			y++;
		}

		this.goToPage(x, y, time, easing);
	},

	prev: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x--;

		if ( x < 0 && this.hasVerticalScroll ) {
			x = 0;
			y--;
		}

		this.goToPage(x, y, time, easing);
	},

	_initKeys: function (e) {
		// default key bindings
		var keys = {
			pageUp: 33,
			pageDown: 34,
			end: 35,
			home: 36,
			left: 37,
			up: 38,
			right: 39,
			down: 40
		};
		var i;

		// if you give me characters I give you keycode
		if ( typeof this.options.keyBindings == 'object' ) {
			for ( i in this.options.keyBindings ) {
				if ( typeof this.options.keyBindings[i] == 'string' ) {
					this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
				}
			}
		} else {
			this.options.keyBindings = {};
		}

		for ( i in keys ) {
			this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
		}

		utils.addEvent(window, 'keydown', this);

		this.on('destroy', function () {
			utils.removeEvent(window, 'keydown', this);
		});
	},

	_key: function (e) {
		if ( !this.enabled ) {
			return;
		}

		var snap = this.options.snap,	// we are using this alot, better to cache it
			newX = snap ? this.currentPage.pageX : this.x,
			newY = snap ? this.currentPage.pageY : this.y,
			now = utils.getTime(),
			prevTime = this.keyTime || 0,
			acceleration = 0.250,
			pos;

		if ( this.options.useTransition && this.isInTransition ) {
			pos = this.getComputedPosition();

			this._translate(Math.round(pos.x), Math.round(pos.y));
			this.isInTransition = false;
		}

		this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

		switch ( e.keyCode ) {
			case this.options.keyBindings.pageUp:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX += snap ? 1 : this.wrapperWidth;
				} else {
					newY += snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.pageDown:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX -= snap ? 1 : this.wrapperWidth;
				} else {
					newY -= snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.end:
				newX = snap ? this.pages.length-1 : this.maxScrollX;
				newY = snap ? this.pages[0].length-1 : this.maxScrollY;
				break;
			case this.options.keyBindings.home:
				newX = 0;
				newY = 0;
				break;
			case this.options.keyBindings.left:
				newX += snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.up:
				newY += snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.right:
				newX -= snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.down:
				newY -= snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			default:
				return;
		}

		if ( snap ) {
			this.goToPage(newX, newY);
			return;
		}

		if ( newX > 0 ) {
			newX = 0;
			this.keyAcceleration = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
			this.keyAcceleration = 0;
		}

		if ( newY > 0 ) {
			newY = 0;
			this.keyAcceleration = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
			this.keyAcceleration = 0;
		}

		this.scrollTo(newX, newY, 0);

		this.keyTime = now;
	},

	_animate: function (destX, destY, duration, easingFn) {
		var that = this,
			startX = this.x,
			startY = this.y,
			startTime = utils.getTime(),
			destTime = startTime + duration;

		function step () {
			var now = utils.getTime(),
				newX, newY,
				easing;

			if ( now >= destTime ) {
				that.isAnimating = false;
				that._translate(destX, destY);

				if ( !that.resetPosition(that.options.bounceTime) ) {
					that._execEvent('scrollEnd');
				}

				return;
			}

			now = ( now - startTime ) / duration;
			easing = easingFn(now);
			newX = ( destX - startX ) * easing + startX;
			newY = ( destY - startY ) * easing + startY;
			that._translate(newX, newY);

			if ( that.isAnimating ) {
				rAF(step);
			}
		}

		this.isAnimating = true;
		step();
	},
	handleEvent: function (e) {
		// Tableau: Hack for using MSPointer events
		// We only want to use pointerType != mouse
		if ((e.type == 'MSPointerDown' || e.type == 'MSPointerMove' 
			|| e.type == 'MSPointerCancel' || e.type == 'MSPointerUp'
			|| e.type == 'pointerdown' || e.type == 'pointermove' 
			|| e.type == 'pointercancel' || e.type == 'pointerup')
			&& (e.pointerType == "mouse" || e.pointerType == 4))
			return;
		//End hack

		switch ( e.type ) {
			case 'touchstart':
			case 'MSPointerDown':
			case 'pointerdown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'MSPointerMove':
			case 'pointermove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'MSPointerUp':
			case 'pointerup':
			case 'mouseup':
			case 'touchcancel':
			case 'MSPointerCancel':
			case 'pointercancel':
			case 'mousecancel':
				this._end(e);
				break;
			case 'orientationchange':
			case 'resize':
				this._resize();
				break;
			case 'transitionend':
			case 'webkitTransitionEnd':
			case 'oTransitionEnd':
			case 'MSTransitionEnd':
				this._transitionEnd(e);
				break;
			case 'DOMMouseScroll':
			case 'mousewheel':
				this._wheel(e);
				break;
			case 'keydown':
				this._key(e);
				break;
			case 'click':
				if ( !e._constructed ) {
					e.preventDefault();
					e.stopPropagation();
				}
				break;
		}
	}
};
function createDefaultScrollbar (direction, interactive, type) {
	var scrollbar = document.createElement('div'),
		indicator = document.createElement('div');

	if ( type === true ) {
		scrollbar.style.cssText = 'position:absolute;z-index:9999';
		indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';
	}

	indicator.className = 'iScrollIndicator';

	if ( direction == 'h' ) {
		if ( type === true ) {
			scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
			indicator.style.height = '100%';
		}
		scrollbar.className = 'iScrollHorizontalScrollbar';
	} else {
		if ( type === true ) {
			scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
			indicator.style.width = '100%';
		}
		scrollbar.className = 'iScrollVerticalScrollbar';
	}

	if ( !interactive ) {
		scrollbar.style.pointerEvents = 'none';
	}

	scrollbar.appendChild(indicator);

	return scrollbar;
}

function Indicator (scroller, options) {
	this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
	this.indicator = this.wrapper.children[0];
	this.indicatorStyle = this.indicator.style;
	this.scroller = scroller;

	this.options = {
		listenX: true,
		listenY: true,
		interactive: false,
		resize: true,
		defaultScrollbars: false,
		speedRatioX: 0,
		speedRatioY: 0
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	this.sizeRatioX = 1;
	this.sizeRatioY = 1;
	this.maxPosX = 0;
	this.maxPosY = 0;

	if ( this.options.interactive ) {
		if ( !this.options.disableTouch ) {
			utils.addEvent(this.indicator, 'touchstart', this);
			utils.addEvent(window, 'touchend', this);
		}
		if ( !this.options.disablePointer ) {
			if (window.PointerEvent)
			{
				utils.addEvent(this.indicator, 'pointerdown', this);
				utils.addEvent(window, 'pointerup', this);
			}
			else if (window.MSPointerEvent) {
				utils.addEvent(this.indicator, 'MSPointerDown', this);
				utils.addEvent(window, 'MSPointerUp', this);
			}
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(this.indicator, 'mousedown', this);
			utils.addEvent(window, 'mouseup', this);
		}
	}
}

Indicator.prototype = {
	handleEvent: function (e) {
		switch ( e.type ) {
			case 'touchstart':
			case 'MSPointerDown':
			case 'pointerdown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'MSPointerMove':
			case 'pointermove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'MSPointerUp':
			case 'pointerup':
			case 'mouseup':
			case 'touchcancel':
			case 'MSPointerCancel':
			case 'pointercancel':
			case 'mousecancel':
				this._end(e);
				break;
		}
	},

	destroy: function () {
		if ( this.options.interactive ) {
			utils.removeEvent(this.indicator, 'touchstart', this);
			utils.removeEvent(this.indicator, 'MSPointerDown', this);
			utils.removeEvent(this.indicator, 'pointerdown', this);
			utils.removeEvent(this.indicator, 'mousedown', this);

			utils.removeEvent(window, 'touchmove', this);
			utils.removeEvent(window, 'MSPointerMove', this);
			utils.removeEvent(window, 'pointermove', this);
			utils.removeEvent(window, 'mousemove', this);

			utils.removeEvent(window, 'touchend', this);
			utils.removeEvent(window, 'MSPointerUp', this);
			utils.removeEvent(window, 'pointerup', this);
			utils.removeEvent(window, 'mouseup', this);
		}

		if ( this.options.defaultScrollbars ) {
			this.wrapper.parentNode.removeChild(this.wrapper);
		}
	},

	_start: function (e) {
		var point = e.touches ? e.touches[0] : e;

		e.preventDefault();
		e.stopPropagation();

		this.transitionTime(0);

		this.initiated = true;
		this.moved = false;
		this.lastPointX	= point.pageX;
		this.lastPointY	= point.pageY;

		this.startTime	= utils.getTime();

		if ( !this.options.disableTouch ) {
			utils.addEvent(window, 'touchmove', this);
		}
		if (!this.options.disablePointer) {
			if (window.PointerEvent)
			{
				utils.addEvent(window, 'pointermove', this);
			}
			else if (window.MSPointerEvent)
			{
				utils.addEvent(window, 'MSPointerMove', this);
			}
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(window, 'mousemove', this);
		}

		this.scroller._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		var point = e.touches ? e.touches[0] : e,
			deltaX, deltaY,
			newX, newY,
			timestamp = utils.getTime();

		if ( !this.moved ) {
			this.scroller._execEvent('scrollStart');
		}

		this.moved = true;

		deltaX = point.pageX - this.lastPointX;
		this.lastPointX = point.pageX;

		deltaY = point.pageY - this.lastPointY;
		this.lastPointY = point.pageY;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		this._pos(newX, newY);

		e.preventDefault();
		e.stopPropagation();
	},

	_end: function (e) {
		if ( !this.initiated ) {
			return;
		}

		this.initiated = false;

		e.preventDefault();
		e.stopPropagation();

		utils.removeEvent(window, 'touchmove', this);
		utils.removeEvent(window, 'MSPointerMove', this);
		utils.removeEvent(window, 'pointermove', this);
		utils.removeEvent(window, 'mousemove', this);

		if ( this.scroller.options.snap ) {
			var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.scroller.x - snap.x), 1000),
						Math.min(Math.abs(this.scroller.y - snap.y), 1000)
					), 300);

			if ( this.scroller.x != snap.x || this.scroller.y != snap.y ) {
				this.scroller.directionX = 0;
				this.scroller.directionY = 0;
				this.scroller.currentPage = snap;
				this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
			}
		}

		if ( this.moved ) {
			this.scroller._execEvent('scrollEnd');
		}
	},

	transitionTime: function (time) {
		time = time || 0;
		this.indicatorStyle[utils.style.transitionDuration] = time + 'ms';
	},

	transitionTimingFunction: function (easing) {
		this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
	},

	refresh: function () {
		this.transitionTime(0);

		if ( this.options.listenX && !this.options.listenY ) {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
		} else if ( this.options.listenY && !this.options.listenX ) {
			this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
		} else {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
		}

		if ( this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll ) {
			utils.addClass(this.wrapper, 'iScrollBothScrollbars');
			utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '8px';
				} else {
					this.wrapper.style.bottom = '8px';
				}
			}
		} else {
			utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
			utils.addClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '2px';
				} else {
					this.wrapper.style.bottom = '2px';
				}
			}
		}

		var r = this.wrapper.offsetHeight;	// force refresh

		if ( this.options.listenX ) {
			this.wrapperWidth = this.wrapper.clientWidth;
			if ( this.options.resize ) {
				this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
				this.indicatorStyle.width = this.indicatorWidth + 'px';
			} else {
				this.indicatorWidth = this.indicator.clientWidth;
			}
			this.maxPosX = this.wrapperWidth - this.indicatorWidth;
			this.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX));	
		}

		if ( this.options.listenY ) {
			this.wrapperHeight = this.wrapper.clientHeight;
			if ( this.options.resize ) {
				this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
				this.indicatorStyle.height = this.indicatorHeight + 'px';
			} else {
				this.indicatorHeight = this.indicator.clientHeight;
			}

			this.maxPosY = this.wrapperHeight - this.indicatorHeight;
			this.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY));
		}

		this.updatePosition();
	},

	updatePosition: function () {
		var x = Math.round(this.sizeRatioX * this.scroller.x) || 0,
			y = Math.round(this.sizeRatioY * this.scroller.y) || 0;

		if ( !this.options.ignoreBoundaries ) {
			if ( x < 0 ) {
				x = 0;
			} else if ( x > this.maxPosX ) {
				x = this.maxPosX;
			}

			if ( y < 0 ) {
				y = 0;
			} else if ( y > this.maxPosY ) {
				y = this.maxPosY;
			}		
		}

		this.x = x;
		this.y = y;

		if ( this.scroller.options.useTransform ) {
			this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
		} else {
			this.indicatorStyle.left = x + 'px';
			this.indicatorStyle.top = y + 'px';
		}
	},

	_pos: function (x, y) {
		if ( x < 0 ) {
			x = 0;
		} else if ( x > this.maxPosX ) {
			x = this.maxPosX;
		}

		if ( y < 0 ) {
			y = 0;
		} else if ( y > this.maxPosY ) {
			y = this.maxPosY;
		}

		x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
		y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

		this.scroller.scrollTo(x, y);
	}
};

IScroll.ease = utils.ease;

return IScroll;

})(window, document, Math);

dojo.addOnLoad(function() {

Type.registerNamespace('tab');

////////////////////////////////////////////////////////////////////////////////
// tab.TooltipBehaviorType

tab.TooltipBehaviorType = function() { };
tab.TooltipBehaviorType.prototype = {
    unspecified: 'unspecified', 
    sticky: 'sticky', 
    smooth: 'smooth', 
    disabled: 'disabled'
}
tab.TooltipBehaviorType.registerEnum('tab.TooltipBehaviorType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.FormattingConverters

tab.FormattingConverters = function tab_FormattingConverters() {
}
tab.FormattingConverters.getCSSBorderStyle = function tab_FormattingConverters$getCSSBorderStyle(borderStyle) {
    var toRet = 'solid';
    switch (borderStyle) {
        case 'bs-dashed':
            toRet = 'dashed';
            break;
        case 'bs-dotted':
            toRet = 'dotted';
            break;
        case 'bs-double':
            toRet = 'double';
            break;
        case 'bs-groove':
            toRet = 'groove';
            break;
        case 'bs-hidden':
            toRet = 'hidden';
            break;
        case 'bs-inset':
            toRet = 'inset';
            break;
        case 'bs-outset':
            toRet = 'outset';
            break;
        case 'bs-ridge':
            toRet = 'ridge';
            break;
        case 'bs-solid':
            toRet = 'solid';
            break;
        case 'bs-none':
            toRet = 'none';
            break;
        default:
            ss.Debug.fail('Unknown border style: ' + borderStyle);
            break;
    }
    return toRet;
}
tab.FormattingConverters._makeStyledBoxCssDict = function tab_FormattingConverters$_makeStyledBoxCssDict(sb, allowTransparentFill) {
    var toRet = {};
    if (ss.isValue(sb)) {
        toRet = tab.FormattingConverters._makeBorderStyleDict(sb);
        if (sb.hasFill) {
            var backColor = tab.ColorModel.fromColorCode(sb.fillColor);
            toRet['background-color'] = (allowTransparentFill) ? backColor.toString() : backColor.toRgb();
        }
    }
    return toRet;
}
tab.FormattingConverters._makeFormatStyleDict = function tab_FormattingConverters$_makeFormatStyleDict(textStyle, altTextColor) {
    var toRet = { 'font-family': textStyle.fontName, 'font-size': textStyle.fontSize + 'pt', color: textStyle.color };
    if (ss.isValue(altTextColor)) {
        toRet['color'] = altTextColor;
    }
    if (textStyle.fontStyle === 'font-style-italic') {
        toRet['font-style'] = 'italic';
    }
    if (textStyle.fontWeight === 'font-weight-bold') {
        toRet['font-weight'] = 'bold';
    }
    var textDecoration = null;
    switch (textStyle.textDecoration) {
        case 'text-decoration-overline':
            textDecoration = 'overline';
            break;
        case 'text-decoration-strikethrough':
            textDecoration = 'line-through';
            break;
        case 'text-decoration-underline':
            textDecoration = 'underline';
            break;
    }
    if (ss.isValue(textDecoration)) {
        toRet['text-decoration'] = textDecoration;
    }
    if (ss.isValue(textStyle.wrapMode)) {
        switch (textStyle.wrapMode) {
            case 'text-wrap-off':
                toRet['white-space'] = 'nowrap';
                break;
            case 'text-wrap-truncate':
                toRet['overflow-x'] = 'hidden';
                break;
        }
    }
    return toRet;
}
tab.FormattingConverters._makeBorderStyleDict = function tab_FormattingConverters$_makeBorderStyleDict(styledBox) {
    var toRet = { 'border-width': styledBox.uw.toString() + 'px', 'border-color': styledBox.borderColor, 'border-style': tab.FormattingConverters.getCSSBorderStyle(styledBox.borderStyle) };
    return toRet;
}
tab.FormattingConverters._getTextBaseline = function tab_FormattingConverters$_getTextBaseline(textRegionVAlign) {
    var toRet = 'bottom';
    switch (textRegionVAlign) {
        case 'v-align-bottom':
            toRet = 'bottom';
            break;
        case 'v-align-top':
            toRet = 'top';
            break;
        case 'v-align-center':
            toRet = 'middle';
            break;
        default:
            ss.Debug.fail('Unsupported vertical text alignment: ' + textRegionVAlign);
            break;
    }
    return toRet;
}
tab.FormattingConverters._getTextAlignment = function tab_FormattingConverters$_getTextAlignment(textRegionHAlign) {
    var toRet = 'start';
    switch (textRegionHAlign) {
        case 'h-align-left':
            toRet = 'start';
            break;
        case 'h-align-center':
            toRet = 'center';
            break;
        case 'h-align-right':
            toRet = 'end';
            break;
        default:
            ss.Debug.fail('Unsupported horizontal text alignment: ' + textRegionHAlign);
            break;
    }
    return toRet;
}
tab.FormattingConverters.cleanUpFontFamilyStyles = function tab_FormattingConverters$cleanUpFontFamilyStyles(node) {
    var fontOjects = node.find('span');
    for (var ii = 0; ii < fontOjects.length; ++ii) {
        var obj = fontOjects.eq(ii);
        var fontFamily = obj.css('font-family');
        if (!String.isNullOrEmpty(fontFamily)) {
            var newCss = {};
            var fontFallbacks = [];
            fontFallbacks.push(fontFamily);
            if (fontFamily.startsWith("'") || fontFamily.startsWith('"')) {
                fontFamily = fontFamily.substr(1, fontFamily.length - 2);
            }
            fontFamily = tab.FormattingConverters._pullFontPropertyIntoCSS(obj, fontFallbacks, newCss, fontFamily, tab.FormattingConverters._styleConversionArray, 'font-style', 'fontStyle');
            fontFamily = tab.FormattingConverters._pullFontPropertyIntoCSS(obj, fontFallbacks, newCss, fontFamily, tab.FormattingConverters._weightConversionArray, 'font-weight', 'fontWeight');
            tab.FormattingConverters._pullFontPropertyIntoCSS(obj, fontFallbacks, newCss, fontFamily, tab.FormattingConverters._stretchConversionArray, 'font-stretch', 'fontStretch');
            if (fontFallbacks.length > 1) {
                newCss['font-family'] = fontFallbacks.join(',');
                obj.css(newCss);
            }
        }
    }
}
tab.FormattingConverters._pullFontPropertyIntoCSS = function tab_FormattingConverters$_pullFontPropertyIntoCSS(obj, fontFallbacks, newCss, fontFamily, conversions, cssProperty, javascriptCSSProperty) {
    var lowerFontFamily = fontFamily.toLowerCase();
    var $enum1 = ss.IEnumerator.getEnumerator(conversions);
    while ($enum1.moveNext()) {
        var conversion = $enum1.current;
        if (lowerFontFamily.endsWith(conversion.first)) {
            fontFamily = fontFamily.substr(0, lowerFontFamily.lastIndexOf(conversion.first)).trim();
            fontFallbacks.push("'" + fontFamily + "'");
            if (!tab.FormattingConverters._isCSSPropertySet(obj, javascriptCSSProperty)) {
                newCss[cssProperty] = conversion.second;
            }
        }
    }
    return fontFamily;
}
tab.FormattingConverters._isCSSPropertySet = function tab_FormattingConverters$_isCSSPropertySet(obj, javascriptPropertyName) {
    return (obj.prop('style'))[javascriptPropertyName];
}


////////////////////////////////////////////////////////////////////////////////
// tab.RelativeDateFilterPeriodType

tab.RelativeDateFilterPeriodType = function() { };
tab.RelativeDateFilterPeriodType.prototype = {
    year: 'year', 
    quarter: 'quarter', 
    month: 'month', 
    week: 'week', 
    day: 'day', 
    hour: 'hour', 
    minute: 'minute', 
    second: 'second'
}
tab.RelativeDateFilterPeriodType.registerEnum('tab.RelativeDateFilterPeriodType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.RelativeDateFilterRangeType

tab.RelativeDateFilterRangeType = function() { };
tab.RelativeDateFilterRangeType.prototype = {
    curr: 'curr', 
    todate: 'todate', 
    last: 'last', 
    next: 'next', 
    lastn: 'lastn', 
    nextn: 'nextn', 
    other: 'other', 
    othern: 'othern', 
    invalid: 'invalid'
}
tab.RelativeDateFilterRangeType.registerEnum('tab.RelativeDateFilterRangeType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.ICategoricalSelectionWidget

tab.ICategoricalSelectionWidget = function() { };
tab.ICategoricalSelectionWidget.prototype = {
    get_applyDelay : null,
    get_filterTable : null,
    get_quickFilter : null,
    shouldDeferChanges : null,
    isSingleSelect : null,
    updateStateIfNeeded : null,
    clearRangeAnchorAndSelection : null,
    forEachSelected : null,
    onListItemClick : null,
    fetchChildNodeByIndex : null,
    handleItemClick : null,
    applyChangesByChangelist : null,
    handleClickIfPending : null
}
tab.ICategoricalSelectionWidget.registerInterface('tab.ICategoricalSelectionWidget');


////////////////////////////////////////////////////////////////////////////////
// tab.EventHandlerEvent

tab.$create_EventHandlerEvent = function tab_EventHandlerEvent() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.GeometryWithRegions

tab.$create_GeometryWithRegions = function tab_GeometryWithRegions() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.VisibleGeometry

tab.$create_VisibleGeometry = function tab_VisibleGeometry() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.IClient

tab.IClient = function() { };
tab.IClient.prototype = {
    get_domNode : null,
    get_isDashboard : null,
    get_vizSize : null,
    get_session : null,
    get_viewControllers : null,
    get_applicationPresModel : null,
    get_toolbarContainer : null,
    get_requestURI : null,
    get_toolbarDisplayed : null,
    set_toolbarDisplayed : null,
    get_vFilterList : null,
    get_toolbarCommands : null,
    get_customViewsViewModel : null,
    destroyRecursive : null,
    startup : null,
    doResize : null
}
tab.IClient.registerInterface('tab.IClient');


////////////////////////////////////////////////////////////////////////////////
// tab.IApiStorytellingClient

tab.IApiStorytellingClient = function() { };
tab.IApiStorytellingClient.prototype = {
    get_flipboardNavigatorViewModel : null,
    get_containedSheetName : null,
    get_containedSheetType : null,
    get_containedSheetZoneId : null,
    get_containedDashboardZones : null,
    get_hasContainedSheet : null
}
tab.IApiStorytellingClient.registerInterface('tab.IApiStorytellingClient');


////////////////////////////////////////////////////////////////////////////////
// tab.PaneInfo

tab.$create_PaneInfo = function tab_PaneInfo(canDragH, canDragV, x, y, w, h) {
    var $o = { };
    $o.canDragH = canDragH;
    $o.canDragV = canDragV;
    $o.x = x;
    $o.y = y;
    $o.w = w;
    $o.h = h;
    return $o;
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitResultHitType

tab.HitResultHitType = function() { };
tab.HitResultHitType.prototype = {
    noHit: 0, 
    areaHit: 1, 
    nearHit: 2, 
    exactHit: 3
}
tab.HitResultHitType.registerEnum('tab.HitResultHitType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.HitResultObjectType

tab.HitResultObjectType = function() { };
tab.HitResultObjectType.prototype = {
    none: 0, 
    mark: 1, 
    referenceLine: 2, 
    trendLine: 3
}
tab.HitResultObjectType.registerEnum('tab.HitResultObjectType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.VisualPartTargetState

tab.VisualPartTargetState = function() { };
tab.VisualPartTargetState.prototype = {
    normal: 'normal', 
    hover: 'hover', 
    press: 'press', 
    highlighted: 'highlighted', 
    selected: 'selected'
}
tab.VisualPartTargetState.registerEnum('tab.VisualPartTargetState', false);


////////////////////////////////////////////////////////////////////////////////
// tab.NodeType

tab.NodeType = function() { };
tab.NodeType.prototype = {
    root: 0, 
    pane: 1, 
    bin: 2, 
    mark: 3, 
    lineSegmentUnionRect: 4, 
    trendLineSegment: 5
}
tab.NodeType.registerEnum('tab.NodeType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.HitTargetType

tab.HitTargetType = function() { };
tab.HitTargetType.prototype = {
    rectangle: 0, 
    circle: 1, 
    line: 2, 
    polygon: 3
}
tab.HitTargetType.registerEnum('tab.HitTargetType', false);


////////////////////////////////////////////////////////////////////////////////
// tab.IHitTargetGeom

tab.IHitTargetGeom = function() { };
tab.IHitTargetGeom.prototype = {
    get_type : null
}
tab.IHitTargetGeom.registerInterface('tab.IHitTargetGeom');


////////////////////////////////////////////////////////////////////////////////
// tab.ClipCase

tab.ClipCase = function() { };
tab.ClipCase.prototype = {
    clipNone: 0, 
    clipX: 1, 
    clipY: 2, 
    clipXY: 3
}
tab.ClipCase.registerEnum('tab.ClipCase', false);


Type.registerNamespace('tableau');

Type.registerNamespace('tableau.util');

////////////////////////////////////////////////////////////////////////////////
// tab.IFlipboardNavigatorViewModel

tab.IFlipboardNavigatorViewModel = function() { };
tab.IFlipboardNavigatorViewModel.prototype = {
    add_remoteUpdateComplete : null,
    remove_remoteUpdateComplete : null,
    get_captions : null,
    get_currentPointIndex : null,
    clickNext : null,
    clickPrevious : null
}
tab.IFlipboardNavigatorViewModel.registerInterface('tab.IFlipboardNavigatorViewModel');


////////////////////////////////////////////////////////////////////////////////
// tab.IStoryPointCaptionViewModel

tab.IStoryPointCaptionViewModel = function() { };
tab.IStoryPointCaptionViewModel.prototype = {
    get_caption : null,
    get_isCurrentPoint : null,
    get_isCaptured : null,
    get_storyPointId : null,
    get_storyPointIndex : null,
    clickStoryPoint : null,
    revertStoryPoint : null
}
tab.IStoryPointCaptionViewModel.registerInterface('tab.IStoryPointCaptionViewModel');


////////////////////////////////////////////////////////////////////////////////
// tab.IFilterTypeViewModel

tab.IFilterTypeViewModel = function() { };
tab.IFilterTypeViewModel.prototype = {
    get_filterType : null,
    dispose : null
}
tab.IFilterTypeViewModel.registerInterface('tab.IFilterTypeViewModel');


////////////////////////////////////////////////////////////////////////////////
// tab.QFMetrics

tab.$create_QFMetrics = function tab_QFMetrics() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab._captureInfo

tab.$create__captureInfo = function tab__captureInfo(x, y, xStart, isRange, oImg) {
    var $o = { };
    $o._x = x;
    $o._y = y;
    $o._xStart = xStart;
    $o._isRangeCapture = isRange;
    $o._oImg = oImg;
    return $o;
}


////////////////////////////////////////////////////////////////////////////////
// tab.IRegionContentProvider

tab.IRegionContentProvider = function() { };
tab.IRegionContentProvider.prototype = {
    add_loadComplete : null,
    remove_loadComplete : null,
    get_actualViewSize : null,
    set_actualViewSize : null,
    get_effectiveViewSize : null,
    get_canScrollX : null,
    get_canScrollY : null,
    get_docSize : null,
    get_scrollPos : null,
    set_scrollPos : null,
    setXPos : null,
    setYPos : null,
    refreshImages : null,
    destroy : null,
    reset : null
}
tab.IRegionContentProvider.registerInterface('tab.IRegionContentProvider');


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxTheme

tab.ComboBoxTheme = function() { };
tab.ComboBoxTheme.prototype = {
    standard: 0, 
    compact: 1
}
tab.ComboBoxTheme.registerEnum('tab.ComboBoxTheme', false);


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxMenuThemeChoice

tab.ComboBoxMenuThemeChoice = function() { };
tab.ComboBoxMenuThemeChoice.prototype = {
    standard: 0, 
    dropdown: 1
}
tab.ComboBoxMenuThemeChoice.registerEnum('tab.ComboBoxMenuThemeChoice', false);


////////////////////////////////////////////////////////////////////////////////
// tab.CatFilterContentItem

tab.$create_CatFilterContentItem = function tab_CatFilterContentItem() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.IAccordionContent

tab.IAccordionContent = function() { };
tab.IAccordionContent.prototype = {
    get_viewType : null,
    get_viewModel : null,
    get_active : null,
    set_active : null
}
tab.IAccordionContent.registerInterface('tab.IAccordionContent');


////////////////////////////////////////////////////////////////////////////////
// tab.IMovable

tab.IMovable = function() { };
tab.IMovable.prototype = {
    get_location : null,
    set_location : null
}
tab.IMovable.registerInterface('tab.IMovable');


////////////////////////////////////////////////////////////////////////////////
// tab.ISlider

tab.ISlider = function() { };
tab.ISlider.prototype = {
    instantiate : null,
    instantiateFromDomain : null,
    layout : null,
    destroy : null,
    setNewState : null,
    updateReadout : null,
    refreshSliderMarksForIE : null
}
tab.ISlider.registerInterface('tab.ISlider');


////////////////////////////////////////////////////////////////////////////////
// tab.FilteringSearchWidgetStyle

tab.FilteringSearchWidgetStyle = function() { };
tab.FilteringSearchWidgetStyle.prototype = {
    invalid: 0, 
    dropdown: 1, 
    inline: 2
}
tab.FilteringSearchWidgetStyle.registerEnum('tab.FilteringSearchWidgetStyle', false);


////////////////////////////////////////////////////////////////////////////////
// tab.OverlayImageInfo

tab.$create_OverlayImageInfo = function tab_OverlayImageInfo() {
    var $o = { };
    return $o;
}


////////////////////////////////////////////////////////////////////////////////
// tab.SearchWidgetQfProperty

tab.$create_SearchWidgetQfProperty = function tab_SearchWidgetQfProperty() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.LinkBlurbPair

tab.$create_LinkBlurbPair = function tab_LinkBlurbPair() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.VizParameterInfo

tab.$create_VizParameterInfo = function tab_VizParameterInfo() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.ShareSettings

tab.$create_ShareSettings = function tab_ShareSettings() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.ScrollBound

tab.$create_ScrollBound = function tab_ScrollBound() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.MoverObj

tab.$create_MoverObj = function tab_MoverObj() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.ContinuousSliderParams

tab.$create_ContinuousSliderParams = function tab_ContinuousSliderParams() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.SliderParams

tab.$create_SliderParams = function tab_SliderParams() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.ScrollData

tab.$create_ScrollData = function tab_ScrollData() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.DomRectangle

tab.$create_DomRectangle = function tab_DomRectangle() {
    var $o = { };
    return $o;
}


////////////////////////////////////////////////////////////////////////////////
// tab.TransformSpec

tab.$create_TransformSpec = function tab_TransformSpec() { return {}; }


////////////////////////////////////////////////////////////////////////////////
// tab.IContentFetcher

tab.IContentFetcher = function() { };
tab.IContentFetcher.prototype = {
    add_contentFetched : null,
    remove_contentFetched : null,
    destroy : null,
    fetch : null,
    isTilePending : null
}
tab.IContentFetcher.registerInterface('tab.IContentFetcher');


////////////////////////////////////////////////////////////////////////////////
// tab.IContentFormatter

tab.IContentFormatter = function() { };
tab.IContentFormatter.prototype = {
    destroy : null,
    format : null,
    isValid : null
}
tab.IContentFormatter.registerInterface('tab.IContentFormatter');


////////////////////////////////////////////////////////////////////////////////
// tab.ITiledGridModel

tab.ITiledGridModel = function() { };
tab.ITiledGridModel.prototype = {
    get_totalHeight : null,
    get_viewportHeight : null,
    get_itemHeight : null,
    get_tileCount : null,
    destroy : null,
    updateViewport : null,
    getTileStatus : null,
    updateTileStatus : null,
    getTilePosition : null,
    getTileRange : null,
    getTileRangeType : null,
    pixelToTileRange : null,
    itemToTileIndex : null,
    globalToLocalItemIndex : null
}
tab.ITiledGridModel.registerInterface('tab.ITiledGridModel');


////////////////////////////////////////////////////////////////////////////////
// tab.ITiledWidgetUI

tab.ITiledWidgetUI = function() { };
tab.ITiledWidgetUI.prototype = {
    add_scrolled : null,
    remove_scrolled : null,
    destroy : null,
    setContent : null,
    getTileElement : null,
    getItemElement : null
}
tab.ITiledWidgetUI.registerInterface('tab.ITiledWidgetUI');


////////////////////////////////////////////////////////////////////////////////
// tab.ITooltipBehavior

tab.ITooltipBehavior = function() { };
tab.ITooltipBehavior.prototype = {
    attach : null,
    detach : null,
    dispose : null,
    shownTooltipIsStatic : null,
    isHoverAllowed : null,
    shouldShowCommandButtons : null,
    handleUbertipMenuToggle : null,
    handleUbertipMenuClose : null,
    hoverOverObject : null,
    hoverOverWhitespace : null,
    multiSelectComplete : null,
    singleSelectComplete : null,
    onPanningOrDragging : null,
    onScroll : null,
    mouseDown : null
}
tab.ITooltipBehavior.registerInterface('tab.ITooltipBehavior');


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipTrigger

tab.TooltipTrigger = function() { };
tab.TooltipTrigger.prototype = {
    hover: 0, 
    click: 1, 
    dragSelect: 2
}
tab.TooltipTrigger.registerEnum('tab.TooltipTrigger', false);


////////////////////////////////////////////////////////////////////////////////
// tab.ApiCrossDomainPresModelsFactory

tab.ApiCrossDomainPresModelsFactory = function tab_ApiCrossDomainPresModelsFactory() {
}
tab.ApiCrossDomainPresModelsFactory.newClientInfo = function tab_ApiCrossDomainPresModelsFactory$newClientInfo(isAutoUpdate, isDownloadAllowed, workbookName, currentSheetName, publishedSheets, dashboardZones, story) {
    var pm = {};
    pm.isAutoUpdate = isAutoUpdate;
    pm.isDownloadAllowed = isDownloadAllowed;
    pm.workbookName = workbookName;
    pm.currentSheetName = currentSheetName;
    pm.publishedSheets = publishedSheets;
    pm.dashboardZones = dashboardZones;
    pm.story = story;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newAutoUpdateState = function tab_ApiCrossDomainPresModelsFactory$newAutoUpdateState(isAutoUpdate) {
    var pm = {};
    pm.isAutoUpdate = isAutoUpdate;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newCommandError = function tab_ApiCrossDomainPresModelsFactory$newCommandError(errorCode, additionalInformation) {
    var pm = {};
    pm.errorCode = errorCode;
    pm.additionalInformation = additionalInformation;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newSheetInfo = function tab_ApiCrossDomainPresModelsFactory$newSheetInfo(name, sheetType, minWidth, minHeight, maxWidth, maxHeight, repositoryUrl) {
    var sizeConstraints = {};
    sizeConstraints.maxHeight = maxHeight;
    sizeConstraints.maxWidth = maxWidth;
    sizeConstraints.minHeight = minHeight;
    sizeConstraints.minWidth = minWidth;
    var pm = {};
    pm.name = name;
    pm.sizeConstraints = sizeConstraints;
    pm.repositoryUrl = repositoryUrl;
    pm.sheetType = sheetType;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newContainedSheetInfo = function tab_ApiCrossDomainPresModelsFactory$newContainedSheetInfo(name, sheetType, zoneId, dashboardZones) {
    var pm = {};
    pm.name = name;
    pm.sheetType = sheetType;
    pm.zoneId = zoneId;
    pm.dashboardZones = dashboardZones;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newDashboardZone = function tab_ApiCrossDomainPresModelsFactory$newDashboardZone(name, zoneId, zoneType, height, width, x, y) {
    var pm = {};
    pm.name = name;
    pm.zoneId = zoneId;
    pm.zoneType = zoneType;
    pm.height = height;
    pm.width = width;
    pm.x = x;
    pm.y = y;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newStory = function tab_ApiCrossDomainPresModelsFactory$newStory(activeStoryPointIndex, storyPoints) {
    var pm = {};
    pm.activeStoryPointIndex = activeStoryPointIndex;
    pm.storyPoints = storyPoints;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newStoryPoint = function tab_ApiCrossDomainPresModelsFactory$newStoryPoint(caption, index, storyPointId, isUpdated, containedSheetInfo) {
    var pm = {};
    pm.caption = caption;
    pm.index = index;
    pm.storyPointId = storyPointId;
    pm.isUpdated = isUpdated;
    pm.containedSheetInfo = containedSheetInfo;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory._newFilter = function tab_ApiCrossDomainPresModelsFactory$_newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
    var pm = {};
    pm.fieldName = fieldName;
    pm.filterType = filterType;
    pm.caption = caption;
    pm.dataSourceName = dataSourceName;
    pm.fieldRole = fieldRole;
    pm.fieldAggregation = fieldAggregation;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newCategoricalFilter = function tab_ApiCrossDomainPresModelsFactory$newCategoricalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, isExclude, appliedValues) {
    var pm = tab.ApiCrossDomainPresModelsFactory._newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
    pm.isExclude = isExclude;
    pm.appliedValues = appliedValues;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newQuantitativeFilter = function tab_ApiCrossDomainPresModelsFactory$newQuantitativeFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, domainMinValue, domainMaxValue, minValue, maxValue, includeNullValues) {
    var pm = tab.ApiCrossDomainPresModelsFactory._newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
    pm.domainMinValue = domainMinValue;
    pm.domainMaxValue = domainMaxValue;
    pm.minValue = minValue;
    pm.maxValue = maxValue;
    pm.includeNullValues = includeNullValues;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newHierarchicalFilter = function tab_ApiCrossDomainPresModelsFactory$newHierarchicalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, levels) {
    var pm = tab.ApiCrossDomainPresModelsFactory._newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
    pm.levels = levels;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newRelativeDateFilter = function tab_ApiCrossDomainPresModelsFactory$newRelativeDateFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, periodType, rangeType, rangeN) {
    var pm = tab.ApiCrossDomainPresModelsFactory._newFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
    pm.periodType = periodType;
    pm.rangeType = rangeType;
    pm.rangeN = rangeN;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newDataSourcesForWorksheet = function tab_ApiCrossDomainPresModelsFactory$newDataSourcesForWorksheet(worksheetName, dataSources) {
    var pm = {};
    pm.worksheetName = worksheetName;
    pm.dataSources = dataSources;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newDataSource = function tab_ApiCrossDomainPresModelsFactory$newDataSource(name, fields, isPrimary) {
    var pm = {};
    pm.name = name;
    pm.fields = fields;
    pm.isPrimary = isPrimary;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newField = function tab_ApiCrossDomainPresModelsFactory$newField(name, role, aggregation) {
    var pm = {};
    pm.name = name;
    pm.role = role;
    pm.aggregation = aggregation;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newCustomViewsInfo = function tab_ApiCrossDomainPresModelsFactory$newCustomViewsInfo(customViewLoaded, defaultCustomViewId, currentView, customViews) {
    var pm = {};
    pm.customViewLoaded = customViewLoaded;
    pm.defaultCustomViewId = defaultCustomViewId;
    pm.currentView = currentView;
    pm.customViews = customViews;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newCustomView = function tab_ApiCrossDomainPresModelsFactory$newCustomView(id, name, urlId, url, startViewId, isPublic, owner) {
    var pm = {};
    pm.id = id;
    pm.name = name;
    pm.urlId = urlId;
    pm.url = url;
    pm.startViewId = startViewId;
    pm.isPublic = isPublic;
    pm.owner = owner;
    return pm;
}
tab.ApiCrossDomainPresModelsFactory.newUser = function tab_ApiCrossDomainPresModelsFactory$newUser(id, friendlyName, username) {
    var pm = {};
    pm.id = id;
    pm.friendlyName = friendlyName;
    pm.username = username;
    return pm;
}


////////////////////////////////////////////////////////////////////////////////
// tab._apiDataSourcesHandler

tab._apiDataSourcesHandler = function tab__apiDataSourcesHandler() {
}
tab._apiDataSourcesHandler._processDataSourcesForWorksheet = function tab__apiDataSourcesHandler$_processDataSourcesForWorksheet(schemaPm, worksheetName, dataSourceName) {
    var primaryDataSourceName = schemaPm.worksheetDataSchemaMap[worksheetName].primaryDatasource;
    var parametersDataSourceName = schemaPm.parametersDatasource;
    var dataSources = [];
    var $enum1 = ss.IEnumerator.getEnumerator(schemaPm.dataSources.dataSourceList);
    while ($enum1.moveNext()) {
        var dataSourcePm = $enum1.current;
        if (dataSourcePm.datasource === parametersDataSourceName) {
            continue;
        }
        if (!String.isNullOrEmpty(dataSourceName) && dataSourcePm.datasource !== dataSourceName) {
            continue;
        }
        var fields = [];
        var $enum2 = ss.IEnumerator.getEnumerator(dataSourcePm.fieldList);
        while ($enum2.moveNext()) {
            var fieldColumnPm = $enum2.current;
            if (ss.isValue(fieldColumnPm.baseColumnName)) {
                continue;
            }
            var subDataSourcePm = fieldColumnPm;
            if (ss.isValue(subDataSourcePm.columnList)) {
                var $enum3 = ss.IEnumerator.getEnumerator(subDataSourcePm.columnList);
                while ($enum3.moveNext()) {
                    var column = $enum3.current;
                    var field = tab.ApiCrossDomainPresModelsFactory.newField(column.name, tab._ApiEnumConverter.convertFieldRole(column.fieldRole), tab._ApiEnumConverter.convertFieldAggregation(column.aggregation));
                    fields.add(field);
                }
            }
            else {
                var field = tab.ApiCrossDomainPresModelsFactory.newField(fieldColumnPm.name, tab._ApiEnumConverter.convertFieldRole(fieldColumnPm.defaultFieldRole), tab._ApiEnumConverter.convertFieldAggregation(fieldColumnPm.defaultAggregation));
                fields.add(field);
            }
        }
        var isPrimary = dataSourcePm.datasource === primaryDataSourceName;
        var dataSource = tab.ApiCrossDomainPresModelsFactory.newDataSource(dataSourcePm.datasource, fields, isPrimary);
        dataSources.add(dataSource);
    }
    var result = tab.ApiCrossDomainPresModelsFactory.newDataSourcesForWorksheet(worksheetName, dataSources);
    return result;
}


////////////////////////////////////////////////////////////////////////////////
// tab._ApiEnumConverter

tab._ApiEnumConverter = function tab__ApiEnumConverter() {
}
tab._ApiEnumConverter.convertDataType = function tab__ApiEnumConverter$convertDataType(dataType) {
    if (dataType === 'boolean') {
        return 'bool';
    }
    switch (dataType) {
        case 'date':
        case 'datetime':
            return 'date';
        case 'integer':
        case 'real':
        case 'tuple':
            return 'number';
        case 'cstring':
            return 'string';
        case 'unknown':
        default:
            return 'string';
    }
}
tab._ApiEnumConverter.convertFieldAggregation = function tab__ApiEnumConverter$convertFieldAggregation(aggregation) {
    switch (aggregation) {
        case 'attr':
            return 'ATTR';
        case 'average':
            return 'AVG';
        case 'count':
            return 'COUNT';
        case 'count-d':
            return 'COUNTD';
        case 'day':
            return 'DAY';
        case 'end':
            return 'END';
        case 'hour':
            return 'HOUR';
        case 'in-out':
            return 'INOUT';
        case 'kurtosis':
            return 'KURTOSIS';
        case 'max':
            return 'MAX';
        case 'mdy':
            return 'MDY';
        case 'median':
            return 'MEDIAN';
        case 'min':
            return 'MIN';
        case 'minute':
            return 'MINUTE';
        case 'month':
            return 'MONTH';
        case 'month-year':
            return 'MONTHYEAR';
        case 'none':
            return 'NONE';
        case 'percentile':
            return 'PERCENTILE';
        case 'qtr':
            return 'QTR';
        case 'quart1':
            return 'QUART1';
        case 'quart3':
            return 'QUART3';
        case 'second':
            return 'SECOND';
        case 'skewness':
            return 'SKEWNESS';
        case 'std-dev':
            return 'STDEV';
        case 'std-dev-p':
            return 'STDEVP';
        case 'sum':
            return 'SUM';
        case 'sum-xsqr':
            return 'SUM_XSQR';
        case 'trunc-day':
            return 'TRUNC_DAY';
        case 'trunc-hour':
            return 'TRUNC_HOUR';
        case 'trunc-month':
            return 'TRUNC_MONTH';
        case 'trunc-qtr':
            return 'TRUNC_QTR';
        case 'trunc-second':
            return 'TRUNC_SECOND';
        case 'trunc-week':
            return 'TRUNC_WEEK';
        case 'trunc-year':
            return 'TRUNC_YEAR';
        case 'user':
            return 'USER';
        case 'var':
            return 'VAR';
        case 'var-p':
            return 'VARP';
        case 'week':
            return 'WEEK';
        case 'weekday':
            return 'WEEKDAY';
        case 'year':
            return 'YEAR';
        default:
            throw new Error('Unknown AggType: ' + aggregation);
    }
}
tab._ApiEnumConverter.convertFieldRole = function tab__ApiEnumConverter$convertFieldRole(role) {
    switch (role) {
        case 'dimension':
            return 'dimension';
        case 'measure':
            return 'measure';
        case 'unknown':
            return 'unknown';
        default:
            throw new Error('Unknown FieldRole type: ' + role);
    }
}
tab._ApiEnumConverter.convertParameterDomainType = function tab__ApiEnumConverter$convertParameterDomainType(domainType) {
    switch (domainType) {
        case 'any':
            return 'all';
        case 'list':
            return 'list';
        case 'range':
            return 'range';
        default:
            throw new Error('Unknown ParameterTypesDomainType: ' + domainType);
    }
}
tab._ApiEnumConverter.convertPeriodType = function tab__ApiEnumConverter$convertPeriodType(periodType) {
    switch (periodType) {
        case 'year':
            return 'year';
        case 'day':
            return 'day';
        case 'hour':
            return 'hour';
        case 'minute':
            return 'minute';
        case 'month':
            return 'month';
        case 'quarter':
            return 'quarter';
        case 'second':
            return 'second';
        case 'week':
            return 'week';
        default:
            throw new Error('Unknown DatePeriodType: ' + periodType);
    }
}
tab._ApiEnumConverter.convertRangeType = function tab__ApiEnumConverter$convertRangeType(filtersRelativeDateRangeType) {
    switch (filtersRelativeDateRangeType) {
        case 'curr':
            return 'curr';
        case 'last':
            return 'last';
        case 'lastn':
            return 'lastn';
        case 'next':
            return 'next';
        case 'nextn':
            return 'nextn';
        case 'todate':
            return 'todate';
        case 'invalid':
        default:
            throw new Error('Unknown or invalid FiltersRelativeDateRangeType: ' + filtersRelativeDateRangeType);
    }
}
tab._ApiEnumConverter.convertZoneType = function tab__ApiEnumConverter$convertZoneType(zoneType) {
    switch (zoneType) {
        case 'color':
        case 'shape':
        case 'size':
            return 'legend';
        case 'map':
            return 'legend';
        case 'filter':
            return 'quickFilter';
        case 'viz':
            return 'worksheet';
        case 'paramctrl':
            return 'parameterControl';
        case 'empty':
            return 'blank';
        case 'title':
            return 'title';
        case 'text':
            return 'text';
        case 'bitmap':
            return 'image';
        case 'web':
            return 'webPage';
        case 'layout-basic':
        case 'layout-flow':
        case 'layout-free-form':
            return null;
        default:
            return 'blank';
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ApiEventHandler

tab.ApiEventHandler = function tab_ApiEventHandler(client, storytellingClient, responder) {
    this._dashboardDisposables = new tab.DisposableHolder();
    this._apiResponder = responder;
    this.updateClients(client, storytellingClient);
    dojo.subscribe('newLayoutId', ss.Delegate.create(this, this.handleNewLayout));
    dojo.subscribe('layoutUpdated', ss.Delegate.create(this, this.onLayoutUpdated));
}
tab.ApiEventHandler._buildFieldName = function tab_ApiEventHandler$_buildFieldName(name) {
    var sb = new ss.StringBuilder();
    var $enum1 = ss.IEnumerator.getEnumerator(name);
    while ($enum1.moveNext()) {
        var s = $enum1.current;
        if (!sb.isEmpty) {
            sb.append('.');
        }
        sb.append('[' + s + ']');
    }
    return sb.toString();
}
tab.ApiEventHandler._buildQuickFiltersTypeMap = function tab_ApiEventHandler$_buildQuickFiltersTypeMap() {
    var tmpMap = {};
    var dashboardModel = tab.ModelUtils.findContentDashboard();
    var $enum1 = ss.IEnumerator.getEnumerator(dashboardModel.get_zoneModels());
    while ($enum1.moveNext()) {
        var zone = $enum1.current;
        if (zone.get_zoneType() === 'filter' && zone.get_worksheetName() === tsConfig.current_sheet_name) {
            var frame = tab.JsonUtil.parseJson(zone.get_zonePresModel().frameJson);
            tmpMap[frame.param] = true;
        }
    }
    var quickFilterTypeMap = {};
    var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name);
    if (ss.isValue(visualModel)) {
        var filters = visualModel.get_filters();
        var $enum2 = ss.IEnumerator.getEnumerator(filters);
        while ($enum2.moveNext()) {
            var filter = $enum2.current;
            var fieldName = tab.ApiEventHandler._buildFieldName(filter.get_filterPresModel().name);
            if (Object.keyExists(tmpMap, fieldName)) {
                var fieldCaption = filter.get_filterPresModel().fieldCaption;
                if (filter.get_filterPresModel().type !== 'H') {
                    quickFilterTypeMap[fieldCaption] = filter.get_filterPresModel().type;
                }
                else {
                    fieldCaption = '';
                    var table = filter.get_filterPresModel().table[0].table;
                    if (ss.isValue(table) && ss.isValue(table.schema) && ss.isValue(table.schema[0]) && ss.isValue(table.schema[0].name)) {
                        var names = table.schema[0].name;
                        for (var i = 1; i < names.length; i++) {
                            fieldCaption += '[' + names[i] + ']';
                            quickFilterTypeMap[fieldCaption] = filter.get_filterPresModel().type;
                            fieldCaption += '.';
                        }
                    }
                }
            }
        }
    }
    return quickFilterTypeMap;
}
tab.ApiEventHandler._processSelectMarksCommand = function tab_ApiEventHandler$_processSelectMarksCommand(pm) {
    var errorData = pm;
    if (ss.isValue(errorData['invalidFields'])) {
        return tab.ApiCrossDomainPresModelsFactory.newCommandError('invalidSelectionFieldName', errorData['invalidFields']);
    }
    else if (ss.isValue(errorData['invalidValues'])) {
        return tab.ApiCrossDomainPresModelsFactory.newCommandError('invalidSelectionValue', errorData['invalidValues']);
    }
    else if (ss.isValue(errorData['invalidDates'])) {
        return tab.ApiCrossDomainPresModelsFactory.newCommandError('invalidSelectionDate', errorData['invalidDates']);
    }
    return null;
}
tab.ApiEventHandler.prototype = {
    _client: null,
    _storytellingClient: null,
    _storytellingHandler: null,
    _apiResponder: null,
    _customViewLoaded: false,
    _viewChangedListenerHandles: null,
    
    dispose: function tab_ApiEventHandler$dispose() {
        this._dashboardDisposables.dispose();
        if (this._storytellingHandler != null) {
            this._storytellingHandler.dispose();
            this._storytellingHandler = null;
        }
    },
    
    updateClients: function tab_ApiEventHandler$updateClients(newClient, newStorytellingClient) {
        if (ss.isValue(this._client)) {
            if (tsConfig.allow_custom_views && ss.isValue(this._client.get_customViewsViewModel())) {
                this._client.get_customViewsViewModel().remove_dirtyChanged(ss.Delegate.create(this, this.onCustomViewUpdated));
                this._client.get_customViewsViewModel().remove_customViewListChanged(ss.Delegate.create(this, this.onCustomViewListLoaded));
                this._client.get_customViewsViewModel().remove_customViewDestroyed(ss.Delegate.create(this, this.onCustomViewDestroyed));
                this._client.get_customViewsViewModel().remove_defaultCustomViewChanged(ss.Delegate.create(this, this.onCustomViewSetDefault));
            }
        }
        if (ss.isValue(this._storytellingHandler)) {
            this._storytellingHandler.dispose();
        }
        this._client = newClient;
        this._storytellingClient = newStorytellingClient;
        this._storytellingHandler = new tab.ApiStorytellingHandler(newStorytellingClient, this._apiResponder);
        _.defer(ss.Delegate.create(this, function() {
            if (ss.isValue(this._viewChangedListenerHandles)) {
                var $enum1 = ss.IEnumerator.getEnumerator(this._viewChangedListenerHandles);
                while ($enum1.moveNext()) {
                    var handler = $enum1.current;
                    if (ss.isValue(handler)) {
                        dojo.unsubscribe(handler);
                    }
                }
            }
            this._viewChangedListenerHandles = new Array(this._client.get_viewControllers().length);
            var i = 0;
            this._client.get_viewControllers().forEach(ss.Delegate.create(this, function(vc) {
                this._viewChangedListenerHandles[i] = vc.get_viewSession().registerEventListener('selectionChanged', ss.Delegate.create(this, function(io) {
                    this.onSelectionChanged(vc.get_sheetName(), io);
                }));
                i++;
            }));
        }));
        if (tsConfig.allow_custom_views && ss.isValue(this._client.get_customViewsViewModel())) {
            this._client.get_customViewsViewModel().add_dirtyChanged(ss.Delegate.create(this, this.onCustomViewUpdated));
            this._client.get_customViewsViewModel().add_customViewListChanged(ss.Delegate.create(this, this.onCustomViewListLoaded));
            this._client.get_customViewsViewModel().add_customViewDestroyed(ss.Delegate.create(this, this.onCustomViewDestroyed));
            this._client.get_customViewsViewModel().add_defaultCustomViewChanged(ss.Delegate.create(this, this.onCustomViewSetDefault));
        }
        this._customViewLoaded = false;
        var wm = tab.ApplicationModel.get_instance().get_workbook();
        if (ss.isValue(wm)) {
            wm.addNewDashboardHandler(ss.Delegate.create(this, this.onNewDashboard));
        }
    },
    
    handleEvent: function tab_ApiEventHandler$handleEvent(e) {
        var data = e.data;
        if (ss.isNullOrUndefined(data)) {
            return;
        }
        var cmd = tab._ApiCommand.parse(data);
        if (ss.isNullOrUndefined(cmd.get_rawName())) {
            return;
        }
        if (cmd.get_name() === 'api.GetClientInfoCommand') {
            this._sendClientInfo(cmd);
        }
        else if (cmd.get_name() === 'api.GetCurrentUrlCommand') {
            this._sendCurrentUrl(cmd);
        }
        else if (cmd.get_name() === 'api.ClearFilterCommand') {
            this._clearFilter(cmd);
        }
        else if (cmd.get_name() === 'api.ApplyCategoricalFilterCommand') {
            this._applyCategoricalFilter(cmd);
        }
        else if (cmd.get_name() === 'api.ApplyRangeFilterCommand') {
            this._applyRangeFilter(cmd);
        }
        else if (cmd.get_name() === 'api.ApplyRelativeDateFilterCommand') {
            this._applyRelativeDateFilter(cmd);
        }
        else if (cmd.get_name() === 'api.ApplyHierarchicalFilterCommand') {
            this._applyHierarchicalFilter(cmd);
        }
        else if (cmd.get_name() === 'api.RefreshDataCommand') {
            this._refreshData(cmd);
        }
        else if (cmd.get_name() === 'api.RevertAllCommand') {
            this._revertAll(cmd);
        }
        else if (cmd.get_name() === 'api.SwitchActiveSheetCommand') {
            this._switchActiveSheet(cmd);
        }
        else if (cmd.get_name() === 'api.UpdateActiveSheetCommand') {
            this._updateActiveSheet(cmd);
        }
        else if (cmd.get_name() === 'api.SelectMarksCommand') {
            this._selectMarks(cmd);
        }
        else if (cmd.get_name() === 'api.FetchSelectedMarksCommand') {
            this._fetchSelectedMarks(cmd);
        }
        else if (cmd.get_name() === 'api.FetchParametersCommand') {
            this._fetchParameters(cmd);
        }
        else if (cmd.get_name() === 'api.SetParameterValueCommand') {
            this._setParameterValue(cmd);
        }
        else if (cmd.get_name() === 'api.InvokeCommandCommand') {
            this._invokeCommand(cmd);
        }
        else if (cmd.get_name() === 'api.SetSheetSizeCommand') {
            this._setSheetSize(cmd);
        }
        else if (cmd.get_name() === 'api.ShowHideToolbarCommand') {
            this._showHideToolbar(cmd);
        }
        else if (cmd.get_name() === 'api.GetFiltersListCommand') {
            this._getFiltersList(cmd);
        }
        else if (cmd.get_name() === 'api.GetOneFilterInfoCommand') {
            this._getOneFilterInfo(cmd);
        }
        else if (cmd.get_name() === 'api.GetDataSourceCommand') {
            this._getDataSource(cmd);
        }
        else if (cmd.get_name() === 'api.GetDataSourcesCommand') {
            this._getDataSources(cmd);
        }
        else if (cmd.get_name() === 'api.FetchCustomViewsCommand') {
            this._fetchCustomViewList(cmd);
        }
        else if (cmd.get_name() === 'api.ShowCustomViewCommand') {
            this._showCustomView(cmd);
        }
        else if (cmd.get_name() === 'api.UpdateCustomViewCommand') {
            this._updateCustomView(cmd);
        }
        else if (cmd.get_name() === 'api.MakeCurrentCustomViewDefaultCommand') {
            this._makeCurrentCustomViewDefault(cmd);
        }
        else if (cmd.get_name() === 'api.RemoveCustomViewCommand') {
            this._removeCustomView(cmd);
        }
        else if (cmd.get_name() === 'api.SaveNewCustomViewCommand') {
            this._saveNewCustomView(cmd);
        }
        else if (cmd.get_name() === 'api.ActivateStoryPoint') {
            this._storytellingHandler.activateStoryPoint(cmd);
        }
        else if (cmd.get_name() === 'api.ActivatePreviousStoryPoint') {
            this._storytellingHandler.activatePreviousStoryPoint(cmd);
        }
        else if (cmd.get_name() === 'api.ActivateNextStoryPoint') {
            this._storytellingHandler.activateNextStoryPoint(cmd);
        }
        else if (cmd.get_name() === 'api.RevertStoryPoint') {
            this._storytellingHandler.revertStoryPoint(cmd);
        }
    },
    
    handleNewLayout: function tab_ApiEventHandler$handleNewLayout(presModel) {
        var oldSheetName = presModel.oldSheetName;
        this._apiResponder.sendCrossDomainEventNotification('api.TabSwitchEvent', oldSheetName, presModel.sheetName);
    },
    
    onSelectionChanged: function tab_ApiEventHandler$onSelectionChanged(sheetName, oSelectionInfo) {
        if (ss.isNullOrUndefined(oSelectionInfo) || ss.isNullOrUndefined(oSelectionInfo.primarySheet)) {
            return;
        }
        if (ss.isNullOrUndefined(oSelectionInfo.cmdResult) || ss.isNullOrUndefined(oSelectionInfo.cmdResult.commandName)) {
            return;
        }
        var names = (oSelectionInfo.cmdResult.commandName).split(':');
        if (names[0] === 'tabdoc') {
            var commandName = names[1];
            if (names[1].startsWith('select')) {
                this._apiResponder.sendCrossDomainEventNotification('api.MarksSelectionChangedEvent', sheetName, null);
            }
            else if (commandName === 'reset-filter' || commandName === 'clear-existing-filter' || commandName === 'range-filter' || commandName === 'categorical-filter' || commandName === 'categorical-filter-by-index' || commandName === 'hierarchical-filter' || commandName === 'relative-date-filter') {
                var result = oSelectionInfo.cmdResult.commandReturn;
                var filterFieldName = result['fn'];
                if (ss.isNullOrUndefined(result['invalidValues']) && ss.isNullOrUndefined(result['invalidFieldCaption']) && ss.isValue(filterFieldName)) {
                    var filterCaption = null;
                    var vm = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), oSelectionInfo.primarySheet);
                    if (ss.isValue(vm)) {
                        var fm = _.find(vm.get_filters(), function(model) {
                            return model.get_globalFieldName() === filterFieldName;
                        });
                        if (ss.isValue(fm)) {
                            filterCaption = fm.get_filterPresModel().fieldCaption;
                        }
                    }
                    var fieldNames = [ filterFieldName, filterCaption || filterFieldName ];
                    this._apiResponder.sendCrossDomainEventNotification('api.FilterChangedEvent', oSelectionInfo.primarySheet, tab.JsonUtil.toJson(fieldNames));
                }
            }
        }
        else if (names[0] === 'tabsrv' && names[1].startsWith('select')) {
            this._apiResponder.sendCrossDomainEventNotification('api.MarksSelectionChangedEvent', sheetName, null);
        }
    },
    
    onLayoutUpdated: function tab_ApiEventHandler$onLayoutUpdated(info) {
        this._apiResponder.sendCrossDomainEventNotification('api.VizInteractiveEvent', null, tsConfig.clientNumber);
    },
    
    onNewDashboard: function tab_ApiEventHandler$onNewDashboard(dm) {
        dm = tab.ModelUtils.findContentDashboard();
        this._dashboardDisposables.dispose();
        var zoneModels = dm.get_zoneModels();
        zoneModels.forEach(ss.Delegate.create(this, function(m) {
            if (m.get_zoneType() === 'paramctrl') {
                var pm = m.get_model();
                pm.add_newParameterCtrl(ss.Delegate.create(this, this.onParameterChange));
                this._dashboardDisposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
                    pm.remove_newParameterCtrl(ss.Delegate.create(this, this.onParameterChange));
                })));
            }
        }));
    },
    
    onParameterChange: function tab_ApiEventHandler$onParameterChange(info) {
        var parameterName = info.fieldCaption;
        this._apiResponder.sendCrossDomainEventNotification('api.ParameterChangedEvent', null, parameterName);
    },
    
    onCustomViewDestroyed: function tab_ApiEventHandler$onCustomViewDestroyed(sender, e) {
        this._apiResponder.sendCrossDomainEventNotification('api.CustomViewRemovedEvent', null, tab.JsonUtil.toJson(this._customViewsInfo(), false, ''));
        this._customViewLoaded = true;
    },
    
    onCustomViewUpdated: function tab_ApiEventHandler$onCustomViewUpdated(sender, e) {
        this._apiResponder.sendCrossDomainEventNotification('api.CustomViewUpdatedEvent', null, tab.JsonUtil.toJson(this._customViewsInfo(), false, ''));
        this._customViewLoaded = true;
    },
    
    onCustomViewSetDefault: function tab_ApiEventHandler$onCustomViewSetDefault(sender, e) {
        this._apiResponder.sendCrossDomainEventNotification('api.CustomViewSetDefaultEvent', null, tab.JsonUtil.toJson(this._customViewsInfo(), false, ''));
        this._customViewLoaded = true;
    },
    
    onCustomViewListLoaded: function tab_ApiEventHandler$onCustomViewListLoaded(sender, e) {
        this._apiResponder.sendCrossDomainEventNotification('api.CustomViewsListLoadedEvent', null, tab.JsonUtil.toJson(this._customViewsInfo(), false, ''));
        this._customViewLoaded = true;
    },
    
    _fetchParameters: function tab_ApiEventHandler$_fetchParameters(cmd) {
        var c = {};
        c.commandName = 'get-parameter-models';
        c.commandNamespace = 'tabdoc';
        this._sendCommand(cmd, c, 'api.FetchParametersCommand', tab._apiParameterHandler._processParameters);
    },
    
    _setParameterValue: function tab_ApiEventHandler$_setParameterValue(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var c = {};
        c.commandName = 'set-parameter-value';
        c.commandNamespace = 'tabdoc';
        c.commandParams = {};
        c.commandParams['fieldCaption'] = param['api.setParameterName'];
        c.commandParams['valueString'] = param['api.setParameterValue'];
        this._sendCommand(cmd, c, 'api.SetParameterValueCommand', tab._apiParameterHandler._processOneParameters);
    },
    
    _getFiltersList: function tab_ApiEventHandler$_getFiltersList(apiCommand) {
        var addParametersAction = function(source, destination) {
            destination['ignoreDomain'] = source['api.ignoreDomain'].toString();
        };
        var c = this._prepareVisualIdSrvCommand(apiCommand, 'get-filter-info', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.GetFiltersListCommand', tab._apiFilterHandler._processFilters);
    },
    
    _getOneFilterInfo: function tab_ApiEventHandler$_getOneFilterInfo(apiCommand) {
        var addParametersAction = function(source, destination) {
            if (ss.isValue(source['api.fieldCaption'])) {
                destination['fieldCaption'] = source['api.fieldCaption'];
            }
            else {
                destination['fn'] = source['api.fieldName'];
            }
            if (ss.isValue(source['api.filterHierarchicalLevels'])) {
                destination['filterLevel'] = source['api.filterHierarchicalLevels'];
            }
            destination['ignoreDomain'] = source['api.ignoreDomain'].toString();
        };
        var c = this._prepareVisualIdSrvCommand(apiCommand, 'get-filter-info', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.GetOneFilterInfoCommand', tab._apiFilterHandler._processSingleFilter);
    },
    
    _fetchSelectedMarks: function tab_ApiEventHandler$_fetchSelectedMarks(apiCommand) {
        var addParametersAction = function(source, destination) {
        };
        var c = this._prepareVisualIdDocCommand(apiCommand, 'get-selection', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.FetchSelectedMarksCommand', ss.Delegate.create(this, this._processSelectedMarks));
    },
    
    _processSelectedMarks: function tab_ApiEventHandler$_processSelectedMarks(pm) {
        var selectionDataPm = pm;
        var dataDictionaryPM = selectionDataPm.dataDictionary;
        var vizData = selectionDataPm.vizData;
        var dataDictionary = new tab.DataDictionaryModel(null);
        dataDictionary.update(dataDictionaryPM);
        var vizDataModel = new tab.VizDataModel(null);
        vizDataModel.update(vizData);
        var returnPm = {};
        var marks = [];
        returnPm.marks = marks;
        if (ss.isNullOrUndefined(dataDictionary) || dataDictionary.get_isEmpty()) {
            return returnPm;
        }
        vizDataModel.forEachTupleId(function(tupleId) {
            var mark = {};
            mark.tupleId = tupleId;
            var pairs = [];
            mark.pairs = pairs;
            marks.push(mark);
            vizDataModel.forEachVizDataField(function(dataField, colIdx) {
                var fieldCaption = dataField.get_fieldCaption();
                var pair = {};
                pair.fieldName = dataField.get_fieldCaption();
                pair.formattedValue = tab.VizDataLookup.lookupAlias(tupleId, dataField, dataDictionary);
                pair.valueDataType = tab._ApiEnumConverter.convertDataType(dataField.get_dataType());
                var dataValue = null;
                if (!tab.VizDataLookup.isSpecial(tupleId, dataField, dataDictionary) && dataField.get_hasDataValues() && dataField.isTupleIdValid(tupleId)) {
                    dataValue = tab.VizDataLookup.lookupRawDataValue(tupleId, dataField, dataDictionary);
                }
                var jsonValue = tab._ApiSerializer.serializeDataValue(dataValue, dataField.get_dataType());
                pair.value = jsonValue;
                pairs.push(pair);
                return true;
            });
            return true;
        });
        return returnPm;
    },
    
    _applyHierarchicalFilter: function tab_ApiEventHandler$_applyHierarchicalFilter(apiCommand) {
        var addParametersAction = ss.Delegate.create(this, function(source, destination) {
            destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
            if (ss.isValue(source['api.filterReset']) && source['api.filterReset']) {
                destination['filterUpdateType'] = 'filter-clear';
            }
            else {
                if (ss.isValue(source['api.exclude'])) {
                    destination['exclude'] = source['api.exclude'];
                }
                var updateType = this._verifyFilterUpdateType(source['api.filterUpdateType'].toString());
                destination['filterUpdateType'] = updateType;
                if (ss.isValue(source['api.filterHierarchicalValues'])) {
                    destination['filterValues'] = source['api.filterHierarchicalValues'];
                }
                if (ss.isValue(source['api.filterHierarchicalLevels'])) {
                    destination['filterLevels'] = source['api.filterHierarchicalLevels'];
                }
                if (ss.isNullOrUndefined(source['api.filterHierarchicalValues']) && ss.isNullOrUndefined(source['api.filterHierarchicalLevels'])) {
                    destination['filterLevels'] = '[]';
                }
            }
        });
        var c = this._prepareVisualIdDocCommand(apiCommand, 'hierarchical-filter', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.ApplyHierarchicalFilterCommand', tab._apiFilterHandler._processFilterCommandReturningFieldName);
    },
    
    _applyRangeFilter: function tab_ApiEventHandler$_applyRangeFilter(apiCommand) {
        var addParametersAction = function(source, destination) {
            destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
            if (ss.isValue(source['api.filterReset']) && source['api.filterReset']) {
                destination['filterUpdateType'] = 'filter-clear';
            }
            else {
                if (ss.isValue(source['api.filterRangeMax'])) {
                    destination['rangeMax'] = source['api.filterRangeMax'];
                }
                if (ss.isValue(source['api.filterRangeMin'])) {
                    destination['rangeMin'] = source['api.filterRangeMin'];
                }
                if (ss.isValue(source['api.filterRangeNullOption'])) {
                    if (source['api.filterRangeNullOption'] === 'NULL_VALUES') {
                        destination['included'] = 'include-null';
                    }
                    else if (source['api.filterRangeNullOption'] === 'NON_NULL_VALUES') {
                        destination['included'] = 'include-non-null';
                    }
                    else {
                        destination['included'] = 'include-all';
                    }
                }
            }
        };
        var c = this._prepareVisualIdDocCommand(apiCommand, 'range-filter', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.ApplyRangeFilterCommand', tab._apiFilterHandler._processFilterCommandReturningFieldName);
    },
    
    _applyRelativeDateFilter: function tab_ApiEventHandler$_applyRelativeDateFilter(apiCommand) {
        var addParametersAction = function(source, destination) {
            destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
            if (ss.isValue(source['api.filterReset']) && source['api.filterReset']) {
                destination['filterUpdateType'] = 'filter-clear';
            }
            else {
                if (ss.isValue(source['api.filterDateArchorValue'])) {
                    destination['anchorDate'] = source['api.filterDateArchorValue'];
                }
                destination['datePeriodType'] = (source['api.filterPeriodType']).toLowerCase();
                destination['dateRangeType'] = (source['api.filterDateRangeType']).toLowerCase();
                if (ss.isValue(source['api.filterDateRange'])) {
                    destination['rangeN'] = source['api.filterDateRange'];
                }
            }
        };
        var c = this._prepareVisualIdDocCommand(apiCommand, 'relative-date-filter', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.ApplyRelativeDateFilterCommand', tab._apiFilterHandler._processFilterCommandReturningFieldName);
    },
    
    _verifyFilterUpdateType: function tab_ApiEventHandler$_verifyFilterUpdateType(inputType) {
        if (inputType.toLowerCase() === 'replace') {
            return 'filter-replace';
        }
        else if (inputType.toLowerCase() === 'all') {
            return 'filter-all';
        }
        else if (inputType.toLowerCase() === 'add') {
            return 'filter-add';
        }
        else if (inputType.toLowerCase() === 'remove') {
            return 'filter-remove';
        }
        else {
            return 'filter-replace';
        }
    },
    
    _verifySelectType: function tab_ApiEventHandler$_verifySelectType(inputType) {
        if (inputType.toLowerCase() === 'replace') {
            return 'select-replace';
        }
        else if (inputType.toLowerCase() === 'add') {
            return 'select-add';
        }
        else if (inputType.toLowerCase() === 'remove') {
            return 'select-remove';
        }
        return 'select-replace';
    },
    
    _verifyNullOption: function tab_ApiEventHandler$_verifyNullOption(nullOption) {
        if (nullOption.toLowerCase() === 'nullvalues') {
            return 'include-null';
        }
        else if (nullOption.toLowerCase() === 'nonnullvalues') {
            return 'include-non-null';
        }
        else if (nullOption.toLowerCase() === 'allvalues') {
            return 'include-all';
        }
        return 'include-all';
    },
    
    _clearFilter: function tab_ApiEventHandler$_clearFilter(apiCommand) {
        var commandParams = tab.JsonUtil.parseJson(apiCommand.get_parameters());
        var quickFilterTypeMap = tab.ApiEventHandler._buildQuickFiltersTypeMap();
        var fieldCaption = commandParams['api.fieldCaption'];
        var quickFilterShown = Object.keyExists(quickFilterTypeMap, fieldCaption);
        var commandName;
        if (quickFilterShown) {
            if (quickFilterTypeMap[fieldCaption] === 'RD') {
                var res = new tab._apiServerResultBuilder('api.localfailed', 'Clearing a relative date filter is not supported when an associated quick filter is on the Worksheet. Please call applyRelativeDateFilter instead.');
                this._apiResponder.sendCrossDomainResponse(apiCommand, res.get__result(), 'api.ClearFilterCommand');
                return;
            }
            commandName = 'reset-filter';
        }
        else {
            commandName = 'clear-existing-filter';
        }
        var addParametersAction = function(source, destination) {
            destination['qualifiedFieldCaption'] = fieldCaption;
        };
        var command = this._prepareVisualIdDocCommand(apiCommand, commandName, addParametersAction);
        this._sendCommand(apiCommand, command, 'api.ClearFilterCommand', tab._apiFilterHandler._processFilterCommandReturningFieldName);
    },
    
    _applyCategoricalFilter: function tab_ApiEventHandler$_applyCategoricalFilter(apiCommand) {
        var addParametersAction = ss.Delegate.create(this, function(source, destination) {
            destination['qualifiedFieldCaption'] = source['api.fieldCaption'];
            if (ss.isValue(source['api.filterReset']) && source['api.filterReset']) {
                destination['filterUpdateType'] = 'filter-clear';
            }
            else {
                if (ss.isValue(source['api.exclude'])) {
                    destination['exclude'] = source['api.exclude'].toString();
                }
                var updateType = this._verifyFilterUpdateType(source['api.filterUpdateType'].toString());
                destination['filterUpdateType'] = updateType;
                if (ss.isValue(source['api.filterCategoricalValues'])) {
                    destination['filterValues'] = tab.JsonUtil.toJson(source['api.filterCategoricalValues']);
                }
                else {
                    destination['filterValues'] = '[""]';
                }
            }
        });
        var c = this._prepareVisualIdDocCommand(apiCommand, 'categorical-filter', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.ApplyCategoricalFilterCommand', tab._apiFilterHandler._processFilterCommandReturningFieldName);
    },
    
    _addFieldValues: function tab_ApiEventHandler$_addFieldValues(fieldCaptions, markValues) {
        var list = [];
        list.add('[');
        for (var i = 0; i < fieldCaptions.length; i++) {
            if (i > 0) {
                list.add(',');
            }
            list.add('{');
            list.add('"' + 'qualifiedFieldCaption' + '":');
            list.add('"' + fieldCaptions[i] + '"');
            list.add(',');
            list.add('"' + 'selectValues' + '":');
            list.add(markValues[i]);
            list.add('}');
        }
        list.add(']');
        return list;
    },
    
    _addIdValues: function tab_ApiEventHandler$_addIdValues(idvalues) {
        var list = [];
        list.add('{');
        list.add('"' + 'selectionType' + '":');
        list.add('"tuples"');
        list.add(',');
        list.add('"' + 'objectIds' + '":');
        list.add(idvalues);
        list.add('}');
        return list.join('');
    },
    
    _addFieldValuesForRange: function tab_ApiEventHandler$_addFieldValuesForRange(fieldCaptions, rangeValues) {
        var list = [];
        list.add('[');
        for (var i = 0; i < fieldCaptions.length; i++) {
            if (i > 0) {
                list.add(',');
            }
            list.add('{');
            list.add('"' + 'qualifiedFieldCaption' + '":');
            list.add('"' + fieldCaptions[i] + '"');
            list.add(',');
            var rangeArray = tab.JsonUtil.parseJson(rangeValues[i]);
            var range = tab.JsonUtil.parseJson(rangeArray[0]);
            if (ss.isValue(range.max)) {
                list.add('"' + 'maxValue' + '":');
                list.add('"' + range.max.toString() + '"');
            }
            if (ss.isValue(range.min)) {
                if (ss.isValue(range.max)) {
                    list.add(',');
                }
                list.add('"' + 'minValue' + '":');
                list.add('"' + range.min.toString() + '"');
            }
            if (ss.isValue(range.nullOption)) {
                var nullOption = this._verifyNullOption(range.nullOption.toString());
                list.add(',');
                list.add('"' + 'included' + '":');
                list.add('"' + nullOption + '"');
            }
            list.add('}');
        }
        list.add(']');
        return list;
    },
    
    _selectMarks: function tab_ApiEventHandler$_selectMarks(apiCommand) {
        var addParametersAction = ss.Delegate.create(this, function(source, destination) {
            if (tab.MiscUtil.isNullOrEmpty(source)) {
                destination['selectionUpdateType'] = 'select-replace';
            }
            else {
                destination['selectionUpdateType'] = this._verifySelectType(source['api.filterUpdateType'].toString());
                if (ss.isValue(source['api.categoricalFieldCaption']) && ss.isValue(source['api.categoricalMarkValues'])) {
                    var catFieldCaptions = tab.JsonUtil.parseJson(source['api.categoricalFieldCaption']);
                    var catMarkValues = tab.JsonUtil.parseJson(source['api.categoricalMarkValues']);
                    var list = this._addFieldValues(catFieldCaptions, catMarkValues);
                    destination['dimensionValueSelectionModels'] = list.join('');
                }
                if (ss.isValue(source['api.hierarchicalFieldCaption']) && ss.isValue(source['api.hierarchicalMarkValues'])) {
                    var catFieldCaptions = tab.JsonUtil.parseJson(source['api.hierarchicalFieldCaption']);
                    var catMarkValues = tab.JsonUtil.parseJson(source['api.hierarchicalMarkValues']);
                    var list = this._addFieldValues(catFieldCaptions, catMarkValues);
                    destination['hierarchicalValueSelectionModels'] = list.join('');
                }
                if (ss.isValue(source['api.rangeFieldCaption']) && ss.isValue(source['api.rangeMarkValues'])) {
                    var fieldCaptions = tab.JsonUtil.parseJson(source['api.rangeFieldCaption']);
                    var rangeValues = tab.JsonUtil.parseJson(source['api.rangeMarkValues']);
                    var list = this._addFieldValuesForRange(fieldCaptions, rangeValues);
                    destination['quantativeRangeSelectionModels'] = list.join('');
                }
                if (ss.isValue(source['api.tupleIds'])) {
                    var list = [];
                    list.add('{');
                    list.add('"' + 'selectionType' + '":');
                    list.add('"tuples"');
                    list.add(',');
                    list.add('"' + 'objectIds' + '":');
                    list.add(source['api.tupleIds']);
                    list.add('}');
                    destination['selection'] = list.join('');
                }
            }
        });
        var c = this._prepareVisualIdDocCommand(apiCommand, 'select-by-value', addParametersAction);
        this._sendCommand(apiCommand, c, 'api.SelectMarksCommand', tab.ApiEventHandler._processSelectMarksCommand);
    },
    
    _customViewsInfo: function tab_ApiEventHandler$_customViewsInfo() {
        var vm = this._client.get_customViewsViewModel();
        var currentCustomView = vm.get_currentCustomView();
        var currentView = null;
        if (ss.isValue(currentCustomView)) {
            currentView = tab._ApiSerializer.serializeCustomView(vm.get_currentCustomView(), vm.buildUrl(vm.get_currentCustomView(), true));
        }
        var customViews = [];
        var ownCustomViews = this._client.get_customViewsViewModel().get_myCustomViews();
        var $enum1 = ss.IEnumerator.getEnumerator(ownCustomViews);
        while ($enum1.moveNext()) {
            var cv = $enum1.current;
            var url = vm.buildUrl(cv, true);
            var apiCustomView = tab._ApiSerializer.serializeCustomView(cv, url);
            customViews.push(apiCustomView);
        }
        var otherCustomViews = this._client.get_customViewsViewModel().get_otherCustomViews();
        var $enum2 = ss.IEnumerator.getEnumerator(otherCustomViews);
        while ($enum2.moveNext()) {
            var cv = $enum2.current;
            var url = vm.buildUrl(cv, true);
            var apiCustomView = tab._ApiSerializer.serializeCustomView(cv, url);
            customViews.push(apiCustomView);
        }
        return tab.ApiCrossDomainPresModelsFactory.newCustomViewsInfo(this._customViewLoaded, vm.get_defaultCustomViewId(), currentView, customViews);
    },
    
    _fetchCustomViewList: function tab_ApiEventHandler$_fetchCustomViewList(cmd) {
        this._client.get_customViewsViewModel().updateCustomizedViews(ss.Delegate.create(this, function(cvs, defaultId) {
            var res = new tab._apiServerResultBuilder('api.success', this._customViewsInfo());
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result());
        }), ss.Delegate.create(this, function(msg) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', msg);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.FetchCustomViewsCommand');
        }));
    },
    
    _showCustomView: function tab_ApiEventHandler$_showCustomView(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var cv = null;
        if (ss.isValue(param['api.customViewParam'])) {
            var apiCv = param['api.customViewParam'];
            cv = tab._ApiSerializer.convertToCustomizedView(apiCv);
        }
        this._client.get_customViewsViewModel().select(cv);
    },
    
    _removeCustomView: function tab_ApiEventHandler$_removeCustomView(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var apiCv = param['api.customViewParam'];
        var cv = tab._ApiSerializer.convertToCustomizedView(apiCv);
        this._client.get_customViewsViewModel().destroy(cv, ss.Delegate.create(this, function() {
            var res = new tab._apiServerResultBuilder('api.success', this._customViewsInfo());
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result());
        }), ss.Delegate.create(this, function(msg) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', msg);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.RemoveCustomViewCommand');
        }));
    },
    
    _updateCustomView: function tab_ApiEventHandler$_updateCustomView(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var apiCv = param['api.customViewParam'];
        var updated = tab._ApiSerializer.convertToCustomizedView(apiCv);
        this._client.get_customViewsViewModel().update(updated, ss.Delegate.create(this, function(cv) {
            var res = new tab._apiServerResultBuilder('api.success', this._customViewsInfo());
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result());
        }), ss.Delegate.create(this, function(msg) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', msg);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.UpdateCustomViewCommand');
        }));
    },
    
    _makeCurrentCustomViewDefault: function tab_ApiEventHandler$_makeCurrentCustomViewDefault(cmd) {
        this._client.get_customViewsViewModel().makeCurrentDefault(ss.Delegate.create(this, function(cv) {
            var res = new tab._apiServerResultBuilder('api.success', this._customViewsInfo());
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result());
        }), ss.Delegate.create(this, function(msg) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', msg);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.MakeCurrentCustomViewDefaultCommand');
        }));
    },
    
    _saveNewCustomView: function tab_ApiEventHandler$_saveNewCustomView(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var name = param['api.customViewName'];
        this._client.get_customViewsViewModel().save(name, ss.Delegate.create(this, function(cv) {
            var info = this._customViewsInfo();
            info.newView = tab._ApiSerializer.serializeCustomView(cv, this._client.get_customViewsViewModel().buildUrl(cv));
            var res = new tab._apiServerResultBuilder('api.success', info);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result());
        }), ss.Delegate.create(this, function(msg) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', msg);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.SaveNewCustomViewCommand');
        }));
    },
    
    _getDataSource: function tab_ApiEventHandler$_getDataSource(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var dataSourceName = param['api.dataSourceName'];
        var worksheetName = param['api.worksheetName'];
        var c = {};
        c.commandName = 'get-schema';
        c.commandNamespace = 'tabdoc';
        c.commandParams = {};
        var processDataSource = function(pm) {
            var schemaPm = pm;
            var result = tab._apiDataSourcesHandler._processDataSourcesForWorksheet(schemaPm, worksheetName, dataSourceName);
            return result.dataSources[0];
        };
        this._sendCommand(cmd, c, 'api.GetDataSourceCommand', processDataSource);
    },
    
    _getDataSources: function tab_ApiEventHandler$_getDataSources(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var worksheetName = param['api.worksheetName'];
        var c = {};
        c.commandName = 'get-schema';
        c.commandNamespace = 'tabdoc';
        c.commandParams = {};
        var processDataSources = function(pm) {
            var schemaPm = pm;
            var result = tab._apiDataSourcesHandler._processDataSourcesForWorksheet(schemaPm, worksheetName, null);
            return result;
        };
        this._sendCommand(cmd, c, 'api.GetDataSourcesCommand', processDataSources);
    },
    
    _invokeCommand: function tab_ApiEventHandler$_invokeCommand(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var commandName = param['api.invokeCommandName'];
        if (commandName === 'showExportImageDialog') {
            this._client.get_toolbarCommands().exportImage();
        }
        else if (commandName === 'showExportDataDialog') {
            var sheetName = null;
            if (ss.isValue('api.invokeCommandParam')) {
                sheetName = param['api.invokeCommandParam'];
            }
            this._client.get_toolbarCommands().exportData(sheetName);
        }
        else if (commandName === 'showExportCrosstabDialog') {
            var sheetName = null;
            if (ss.isValue('api.invokeCommandParam')) {
                sheetName = param['api.invokeCommandParam'];
            }
            this._client.get_toolbarCommands().exportCrosstab(sheetName);
        }
        else if (commandName === 'showExportPDFDialog') {
            this._client.get_toolbarCommands().exportPdf();
        }
        else if (commandName === 'pauseAutomaticUpdates') {
            this._client.get_toolbarCommands()._pauseAutoUpdate();
            this._sendAutoUpdateFlag(cmd);
        }
        else if (commandName === 'resumeAutomaticUpdates') {
            this._client.get_toolbarCommands()._resumeAutoUpdate();
            this._sendAutoUpdateFlag(cmd);
        }
        else if (commandName === 'toggleAutomaticUpdates') {
            this._client.get_toolbarCommands()._toggleAutoUpdate();
            this._sendAutoUpdateFlag(cmd);
        }
        else if (commandName === 'showShareDialog') {
            this._client.get_toolbarCommands()._showShareDialog();
        }
        else if (commandName === 'showDownloadWorkbookDialog') {
            var dashboard = this._client.get_applicationPresModel().workbookPresModel.dashboardPresModel;
            this._client.get_toolbarCommands()._downloadWorkbookForApi(dashboard.sheetLayoutInfo.downloadLink);
        }
        else if (commandName === 'selectedMarksKeepOnly') {
            this._client.get_toolbarCommands()._selectMarksKeepOnly();
        }
        else if (commandName === 'selectedMarksExclude') {
            this._client.get_toolbarCommands()._selectMarksExclude();
        }
    },
    
    _sendAutoUpdateFlag: function tab_ApiEventHandler$_sendAutoUpdateFlag(cmd) {
        var result = tab.ApiCrossDomainPresModelsFactory.newAutoUpdateState(this._client.get_toolbarCommands()._isAutoUpdate());
        var resultBuilder = new tab._apiServerResultBuilder('api.success', result);
        this._apiResponder.sendCrossDomainResponse(cmd, resultBuilder.get__result(), 'api.InvokeCommandCommand');
    },
    
    _setSheetSize: function tab_ApiEventHandler$_setSheetSize(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var c = {};
        c.commandName = 'set-sheet-size';
        c.commandNamespace = 'tabdoc';
        c.commandParams = {};
        c.commandParams['sheet'] = param['api.setSheetSizeName'];
        c.commandParams['minWidth'] = param['api.minWidth'];
        c.commandParams['minHeight'] = param['api.minHeight'];
        c.commandParams['maxWidth'] = param['api.maxWidth'];
        c.commandParams['maxHeight'] = param['api.maxHeight'];
        this._sendCommand(cmd, c, 'api.SetSheetSizeCommand');
    },
    
    _refreshData: function tab_ApiEventHandler$_refreshData(cmd) {
        this._client.get_toolbarCommands()._refreshData();
        var res = new tab._apiServerResultBuilder('api.success', '');
        this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.RefreshDataCommand');
    },
    
    _revertAll: function tab_ApiEventHandler$_revertAll(cmd) {
        tab.WorksheetServerCommands.revert();
        var res = new tab._apiServerResultBuilder('api.success', '');
        this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.RevertAllCommand');
    },
    
    _showHideToolbar: function tab_ApiEventHandler$_showHideToolbar(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var show = param['api.showHideToolbarValue'];
        this._client.set_toolbarDisplayed(show);
        this._client.doResize();
    },
    
    _switchActiveSheet: function tab_ApiEventHandler$_switchActiveSheet(cmd) {
        var param = tab.JsonUtil.parseJson(cmd.get_parameters());
        var msg = {};
        msg.oldRepositoryUrl = param['api.oldRepositoryUrl'];
        msg.repositoryUrl = param['api.switchToRepositoryUrl'];
        msg.sheetName = param['api.switchToSheetName'];
        msg.oldSheetName = tsConfig.current_sheet_name;
        msg.noUndo = true;
        msg.successCallback = ss.Delegate.create(this, function(model) {
            var res = new tab._apiServerResultBuilder('api.success', '');
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.SwitchActiveSheetCommand');
        });
        msg.errorCallback = ss.Delegate.create(this, function(error) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', error);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), 'api.SwitchActiveSheetCommand');
        });
        dojo.publish('onTabSelect', [ msg ]);
    },
    
    _updateActiveSheet: function tab_ApiEventHandler$_updateActiveSheet(cmd) {
        this._client.doResize();
    },
    
    _sendClientInfo: function tab_ApiEventHandler$_sendClientInfo(cmd) {
        if (tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapFailed()) {
            return;
        }
        var clientInfo = tab._ApiSerializer.serializeClientInfo(this._client, this._storytellingClient);
        var resBuilder = new tab._apiServerResultBuilder('api.success', clientInfo);
        this._apiResponder.sendCrossDomainResponse(cmd, resBuilder.get__result(), 'api.GetClientInfoCommand');
    },
    
    _sendCurrentUrl: function tab_ApiEventHandler$_sendCurrentUrl(cmd) {
        var currentUrl = tab.VizUriModel.createForViewingSheet(tsConfig.repositoryUrl).get_absoluteUri();
        var resBuilder = new tab._apiServerResultBuilder('api.success', currentUrl);
        this._apiResponder.sendCrossDomainResponse(cmd, resBuilder.get__result(), 'api.GetCurrentUrlCommand');
    },
    
    _prepareVisualIdDocCommand: function tab_ApiEventHandler$_prepareVisualIdDocCommand(apiCommand, commandName, addParametersAction) {
        return this._prepareVisualIdCommand(apiCommand, tab.CommandUtils.newDocCommand(commandName), addParametersAction);
    },
    
    _prepareVisualIdSrvCommand: function tab_ApiEventHandler$_prepareVisualIdSrvCommand(apiCommand, commandName, addParametersAction) {
        return this._prepareVisualIdCommand(apiCommand, tab.CommandUtils.newSrvCommand(commandName), addParametersAction);
    },
    
    _prepareVisualIdCommand: function tab_ApiEventHandler$_prepareVisualIdCommand(apiCommand, serverCommand, addParametersAction) {
        var crossDomainParameters = tab.JsonUtil.parseJson(apiCommand.get_parameters());
        var serverParameters = this._deserializeVisualId(crossDomainParameters);
        serverCommand.commandParams = serverParameters;
        addParametersAction(crossDomainParameters, serverParameters);
        return serverCommand;
    },
    
    _deserializeVisualId: function tab_ApiEventHandler$_deserializeVisualId(crossDomainParameters) {
        var serverCommandParameters = {};
        if (ss.isValue(crossDomainParameters['api.visualId'])) {
            serverCommandParameters['visualIdPresModel'] = tab.JsonUtil.toJson(crossDomainParameters['api.visualId']);
        }
        else {
            serverCommandParameters['worksheet'] = crossDomainParameters['api.worksheetName'];
            if (ss.isValue(crossDomainParameters['api.dashboardName'])) {
                serverCommandParameters['dashboard'] = crossDomainParameters['api.dashboardName'];
            }
        }
        return serverCommandParameters;
    },
    
    _sendCommand: function tab_ApiEventHandler$_sendCommand(cmd, c, apiCommand, processServerResult) {
        c.noExceptionDialog = true;
        tab.ApiClientCommands.doApiCommand(c, ss.Delegate.create(this, function(pm) {
            tab.Log.get(this).debug('SendCommand success: apiCmd=%s, pm=%o', apiCommand, pm);
            var result = pm;
            if (ss.isValue(processServerResult)) {
                result = processServerResult(pm);
            }
            var res = new tab._apiServerResultBuilder('api.success', result);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), apiCommand);
        }), ss.Delegate.create(this, function(error) {
            var res = new tab._apiServerResultBuilder('api.remotefailed', error);
            this._apiResponder.sendCrossDomainResponse(cmd, res.get__result(), apiCommand);
        }));
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._apiServerResultBuilder

tab._apiServerResultBuilder = function tab__apiServerResultBuilder(result, pm) {
    var param = {};
    param['api.commandResult'] = result;
    param['api.commandData'] = pm;
    this._json = tab.JsonUtil.toJson(param, false, '');
}
tab._apiServerResultBuilder.prototype = {
    _json: null,
    
    get__result: function tab__apiServerResultBuilder$get__result() {
        return this._json;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._apiFilterHandler

tab._apiFilterHandler = function tab__apiFilterHandler() {
}
tab._apiFilterHandler._processFilters = function tab__apiFilterHandler$_processFilters(pm) {
    var filterList = JSON.parse(pm.toString());
    var filters = [];
    if (ss.isValue(filterList)) {
        var $enum1 = ss.IEnumerator.getEnumerator(filterList);
        while ($enum1.moveNext()) {
            var p = $enum1.current;
            var filter = tab._apiFilterHandler._extractOneFilter(p);
            if (filter != null) {
                filters.add(filter);
            }
        }
    }
    var retVal = {};
    retVal.filters = filters;
    return retVal;
}
tab._apiFilterHandler._processFilterCommandReturningFieldName = function tab__apiFilterHandler$_processFilterCommandReturningFieldName(serverPm) {
    var errorPm = tab._apiFilterHandler._checkForCommandError(serverPm);
    if (errorPm != null) {
        return errorPm;
    }
    return serverPm;
}
tab._apiFilterHandler._processSingleFilter = function tab__apiFilterHandler$_processSingleFilter(serverPm) {
    var errorPm = tab._apiFilterHandler._checkForCommandError(serverPm);
    if (errorPm != null) {
        return errorPm;
    }
    var filterList = JSON.parse(serverPm.toString());
    if (ss.isValue(filterList)) {
        return tab._apiFilterHandler._extractOneFilter(filterList);
    }
    return null;
}
tab._apiFilterHandler._checkForCommandError = function tab__apiFilterHandler$_checkForCommandError(serverPm) {
    var errorData = serverPm;
    if (Object.keyExists(errorData, 'parameterError')) {
        if (ss.isValue(errorData['invalidFieldCaption'])) {
            return tab.ApiCrossDomainPresModelsFactory.newCommandError('invalidFilterFieldName', errorData['invalidFieldCaption']);
        }
        else if (ss.isValue(errorData['invalidValues'])) {
            return tab.ApiCrossDomainPresModelsFactory.newCommandError('invalidFilterFieldValue', errorData['invalidValues']);
        }
        else if (ss.isValue(errorData['invalidAggFieldName'])) {
            return tab.ApiCrossDomainPresModelsFactory.newCommandError('invalidAggregationFieldName', errorData['fieldCaption']);
        }
        else {
            return tab.ApiCrossDomainPresModelsFactory.newCommandError('serverError', null);
        }
    }
    return null;
}
tab._apiFilterHandler._convertFilterPresModelTypeToApiFilterType = function tab__apiFilterHandler$_convertFilterPresModelTypeToApiFilterType(filterPresModelType) {
    switch (filterPresModelType) {
        case 'C':
            return 'categorical';
        case 'H':
            return 'hierarchical';
        case 'Q':
            return 'quantitative';
        case 'RD':
            return 'relativedate';
        default:
            throw new Error('Unknown filter type: ' + filterPresModelType);
    }
}
tab._apiFilterHandler._extractOneFilter = function tab__apiFilterHandler$_extractOneFilter(serverPm) {
    var filterType = tab._apiFilterHandler._convertFilterPresModelTypeToApiFilterType(serverPm.type);
    switch (filterType) {
        case 'categorical':
            return tab._apiFilterHandler._processCategoricalFilter(serverPm);
        case 'relativedate':
            return tab._apiFilterHandler._processRelativeDateFilter(serverPm);
        case 'hierarchical':
            return tab._apiFilterHandler._processHierarchicalFilter(serverPm);
        case 'quantitative':
            return tab._apiFilterHandler._processQuantitativeFilter(serverPm);
        default:
            throw new Error('Unknown FilterType: ' + filterType);
    }
}
tab._apiFilterHandler._processBaseFilter = function tab__apiFilterHandler$_processBaseFilter(serverPm, concreteFilterCreator) {
    var fieldName = serverPm.fieldName;
    var caption = serverPm.fieldCaption;
    var filterType = tab._apiFilterHandler._convertFilterPresModelTypeToApiFilterType(serverPm.type);
    var dataSourceName = null;
    var fieldRole = null;
    var fieldAggregation = null;
    if (ss.isValue(serverPm.fieldDetailsJson) && ss.isValue(serverPm.fieldDatasource)) {
        dataSourceName = serverPm.fieldDatasource;
        var fieldJson = JSON.parse(serverPm.fieldDetailsJson);
        var fieldColumn = fieldJson['genFieldColumnPresModel'];
        fieldRole = tab._ApiEnumConverter.convertFieldRole(fieldColumn.fieldRole);
        fieldAggregation = tab._ApiEnumConverter.convertFieldAggregation(fieldColumn.aggregation);
    }
    return concreteFilterCreator(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation);
}
tab._apiFilterHandler._processCategoricalFilter = function tab__apiFilterHandler$_processCategoricalFilter(serverPm) {
    var isExclude = (serverPm.exclude || false);
    var appliedValues = null;
    if (ss.isValue(serverPm.table)) {
        var table = serverPm.table;
        if (ss.isValue(table.tuples)) {
            var allChecked = (serverPm.all || false) || (serverPm.allChecked || false);
            var tuples = table.tuples;
            var list = [];
            var $enum1 = ss.IEnumerator.getEnumerator(tuples);
            while ($enum1.moveNext()) {
                var tuple = $enum1.current;
                if (allChecked || (ss.isValue(tuple.s) && tuple.s)) {
                    var t = tuple.t[0];
                    var displayName = tuple.d;
                    list.add(tab._apiFilterHandler._createDataValueFromStruct(serverPm, t, displayName));
                }
            }
            appliedValues = list;
        }
    }
    var createCategoricalFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
        return tab.ApiCrossDomainPresModelsFactory.newCategoricalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, isExclude, appliedValues);
    };
    return tab._apiFilterHandler._processBaseFilter(serverPm, createCategoricalFilter);
}
tab._apiFilterHandler._processQuantitativeFilter = function tab__apiFilterHandler$_processQuantitativeFilter(serverPm) {
    var domainMinValue = null;
    var domainMaxValue = null;
    var minValue = null;
    var maxValue = null;
    var includeNullValues = false;
    if (ss.isValue(serverPm.range)) {
        var range = serverPm.range;
        if (ss.isValue(range.min) && ss.isValue(range.min.v)) {
            domainMinValue = tab._apiFilterHandler._createDataValue(serverPm, range.min, null);
        }
        if (ss.isValue(range.max) && ss.isValue(range.max.v)) {
            domainMaxValue = tab._apiFilterHandler._createDataValue(serverPm, range.max, null);
        }
    }
    if (ss.isValue(serverPm.table)) {
        var table = serverPm.table;
        if (ss.isValue(table.min) && ss.isValue(table.min.v)) {
            minValue = tab._apiFilterHandler._createDataValue(serverPm, table.min, null);
        }
        if (ss.isValue(table.max) && ss.isValue(table.max.v)) {
            maxValue = tab._apiFilterHandler._createDataValue(serverPm, table.max, null);
        }
        if (ss.isValue(table.included)) {
            var inclValue = table.included;
            includeNullValues = (inclValue === 'include-all' || inclValue === 'include-null' || inclValue === 'include-range-or-null');
        }
    }
    var createQuantitativeFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
        return tab.ApiCrossDomainPresModelsFactory.newQuantitativeFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, domainMinValue, domainMaxValue, minValue, maxValue, includeNullValues);
    };
    return tab._apiFilterHandler._processBaseFilter(serverPm, createQuantitativeFilter);
}
tab._apiFilterHandler._processRelativeDateFilter = function tab__apiFilterHandler$_processRelativeDateFilter(serverPm) {
    var periodType = null;
    var rangeType = null;
    var rangeN = null;
    var table = serverPm.table;
    if (ss.isValue(table)) {
        if (ss.isValue(table.periodType)) {
            periodType = tab._ApiEnumConverter.convertPeriodType(table.periodType);
        }
        if (ss.isValue(table.rangeType)) {
            rangeType = tab._ApiEnumConverter.convertRangeType(table.rangeType);
        }
        if (ss.isValue(table.rangeN)) {
            rangeN = table.rangeN;
        }
    }
    var createRelativeDateFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
        return tab.ApiCrossDomainPresModelsFactory.newRelativeDateFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, periodType, rangeType, rangeN);
    };
    return tab._apiFilterHandler._processBaseFilter(serverPm, createRelativeDateFilter);
}
tab._apiFilterHandler._createDataValueFromStruct = function tab__apiFilterHandler$_createDataValueFromStruct(f, s, displayName) {
    return tab._apiFilterHandler._createDataValue(f, s, displayName);
}
tab._apiFilterHandler._createDataValue = function tab__apiFilterHandler$_createDataValue(filterPm, filterValue, displayName) {
    var dataValue = {};
    if (ss.isNullOrUndefined(filterValue)) {
        return dataValue;
    }
    var dataType = tab._apiFilterHandler._convertDataValueTypeToDataType(filterValue.t);
    var values = [filterValue];
    if (ss.isValue(filterPm.range)) {
        values.push(filterPm.range.min, filterPm.range.max);
    }
    if (ss.isValue(filterPm.table)) {
        values.push(filterPm.table.min, filterPm.table.max);
    }
    var timeFormatMode = tab.QuantitativeDateFilter.getDateTimeFormatMode(values, 'none', filterPm.date_format);
    dataValue.type = tab._ApiEnumConverter.convertDataType(dataType);
    var format = (dataType === 'date' || dataType === 'datetime') ? filterPm.date_format : filterPm.format;
    dataValue.formattedValue = tableau.format.formatDataValue(filterValue, filterPm.role, format, null, timeFormatMode);
    if (ss.isValue(displayName)) {
        dataValue.aliasedValue = displayName;
    }
    dataValue.value = tab._ApiSerializer.serializeDataValue(filterValue.v, dataType);
    return dataValue;
}
tab._apiFilterHandler._convertDataValueTypeToDataType = function tab__apiFilterHandler$_convertDataValueTypeToDataType(t) {
    switch (t) {
        case tableau.types.DataType.DT_BOOLEAN:
            return 'boolean';
        case tableau.types.DataType.DT_DATE:
            return 'date';
        case tableau.types.DataType.DT_INTEGER:
            return 'integer';
        case tableau.types.DataType.DT_REAL:
            return 'real';
        case tableau.types.DataType.DT_STRING:
            return 'cstring';
        case tableau.types.DataType.DT_TIMESTAMP:
            return 'datetime';
        case tableau.types.DataType.DT_UNKNOWN:
            return 'unknown';
    }
    return 'unknown';
}
tab._apiFilterHandler._processHierarchicalFilter = function tab__apiFilterHandler$_processHierarchicalFilter(serverPm) {
    var levels = 0;
    if (ss.isValue(serverPm.levels)) {
        levels = (serverPm.levels).length;
    }
    var createHierarchicalFilter = function(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation) {
        return tab.ApiCrossDomainPresModelsFactory.newHierarchicalFilter(fieldName, filterType, caption, dataSourceName, fieldRole, fieldAggregation, levels);
    };
    return tab._apiFilterHandler._processBaseFilter(serverPm, createHierarchicalFilter);
}
tab._apiFilterHandler._processChildren = function tab__apiFilterHandler$_processChildren(children, appliedFieldNames, appliedValuesMap) {
    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        if (ss.isValue(child.table)) {
            tab._apiFilterHandler._processTable(child.table, appliedFieldNames, appliedValuesMap);
        }
        if (ss.isValue(child.children)) {
            tab._apiFilterHandler._processChildren(child.children, appliedFieldNames, appliedValuesMap);
        }
    }
}
tab._apiFilterHandler._processTable = function tab__apiFilterHandler$_processTable(table, appliedFieldNames, appliedValuesMap) {
    if (ss.isValue(table.tuples)) {
        tab._apiFilterHandler._processTuples(table.tuples, appliedFieldNames, appliedValuesMap);
    }
}
tab._apiFilterHandler._processTuples = function tab__apiFilterHandler$_processTuples(tuples, appliedFieldNames, appliedValuesMap) {
    for (var i = 0; i < tuples.length; i++) {
        var tuple = tuples[i];
        if (tuple.s) {
            var values = tab._apiFilterHandler._processTupleValue(tuple);
            var value = values[values.length - 1];
            if (!ss.isValue(appliedValuesMap[value])) {
                appliedValuesMap[value] = 0;
                appliedFieldNames.add(value);
            }
        }
    }
}
tab._apiFilterHandler._processTupleValue = function tab__apiFilterHandler$_processTupleValue(tuple) {
    var list = null;
    if (ss.isValue(tuple.t)) {
        list = [];
        var t = tuple.t;
        var $enum1 = ss.IEnumerator.getEnumerator(t);
        while ($enum1.moveNext()) {
            var val = $enum1.current;
            list.add(val.v);
        }
    }
    return list;
}


////////////////////////////////////////////////////////////////////////////////
// tab._apiParameterHandler

tab._apiParameterHandler = function tab__apiParameterHandler() {
}
tab._apiParameterHandler._processParameters = function tab__apiParameterHandler$_processParameters(pm) {
    var paramList = pm;
    var parameters = [];
    if (ss.isValue(paramList)) {
        var $enum1 = ss.IEnumerator.getEnumerator(paramList);
        while ($enum1.moveNext()) {
            var p = $enum1.current;
            var paramImpl = tab._apiParameterHandler._extractOneParameter(p);
            if (paramImpl != null && paramImpl.isValidPresModel) {
                parameters.add(paramImpl);
            }
        }
    }
    var retVal = {};
    retVal.parameters = parameters;
    return retVal;
}
tab._apiParameterHandler._processOneParameters = function tab__apiParameterHandler$_processOneParameters(pm) {
    var vm = pm;
    if (ss.isValue(vm.valid) && !vm.valid) {
        var parameterImpl = {};
        parameterImpl.isValidPresModel = false;
        return parameterImpl;
    }
    else {
        var param = pm;
        if (ss.isValue(param)) {
            return tab._apiParameterHandler._extractOneParameter(param);
        }
    }
    return null;
}
tab._apiParameterHandler._convertDataTypeToApiParameterDataType = function tab__apiParameterHandler$_convertDataTypeToApiParameterDataType(dataType) {
    if (dataType === 'boolean') {
        return 'boolean';
    }
    switch (dataType) {
        case 'real':
            return 'float';
        case 'integer':
        case 'tuple':
            return 'integer';
        case 'date':
            return 'date';
        case 'datetime':
            return 'datetime';
        case 'cstring':
        default:
            return 'string';
    }
}
tab._apiParameterHandler._extractOneParameter = function tab__apiParameterHandler$_extractOneParameter(p) {
    if (!ss.isValue(p.parameterName) || !ss.isValue(p.fieldCaption)) {
        return null;
    }
    var dataType = p.dataType;
    var allowableValues = [];
    for (var i = 0; i < p.valuesAliases.length; i++) {
        var aliasedValue = p.valuesAliases[i];
        var formattedValue = p.formattedValues[i];
        allowableValues.add(tab._apiParameterHandler._makeAliasedDataValue(dataType, aliasedValue, formattedValue));
    }
    var parameterPm = {};
    parameterPm.isValidPresModel = true;
    parameterPm.parameterName = p.parameterName;
    parameterPm.name = p.fieldCaption;
    parameterPm.currentValue = tab._apiParameterHandler._makeAliasedDataValue(dataType, p.valueAlias, p.formattedValue);
    parameterPm.dataType = tab._apiParameterHandler._convertDataTypeToApiParameterDataType(dataType);
    parameterPm.allowableValuesType = tab._ApiEnumConverter.convertParameterDomainType(p.parameterDomainType);
    parameterPm.allowableValues = allowableValues;
    parameterPm.stepSize = tab._apiParameterHandler._processParamNumber(dataType, p.valueInc);
    parameterPm.minValue = tab._apiParameterHandler._makeDataValue(dataType, p.valueMin, p.formattedMin, null);
    parameterPm.maxValue = tab._apiParameterHandler._makeDataValue(dataType, p.valueMax, p.formattedMax, null);
    if (dataType === 'date' || dataType === 'datetime') {
        parameterPm.dateStepPeriod = tab._ApiEnumConverter.convertPeriodType(p.datePeriodType);
    }
    return parameterPm;
}
tab._apiParameterHandler._makeDataValue = function tab__apiParameterHandler$_makeDataValue(dataType, value, formattedValue, aliasedValue) {
    var dataValue = {};
    dataValue.type = tab._ApiEnumConverter.convertDataType(dataType);
    dataValue.value = tab._ApiSerializer.serializeDataValue(value, dataType);
    if (!tab.MiscUtil.isNullOrEmpty(aliasedValue)) {
        dataValue.aliasedValue = aliasedValue;
    }
    if (!tab.MiscUtil.isNullOrEmpty(formattedValue)) {
        dataValue.formattedValue = formattedValue;
    }
    return dataValue;
}
tab._apiParameterHandler._makeAliasedDataValue = function tab__apiParameterHandler$_makeAliasedDataValue(dataType, aliasedValue, formattedValue) {
    return tab._apiParameterHandler._makeDataValue(dataType, tab._apiParameterHandler._getAliasedValueValue(aliasedValue), formattedValue, tab._apiParameterHandler._getAliasedValueAlias(aliasedValue));
}
tab._apiParameterHandler._processParamNumber = function tab__apiParameterHandler$_processParamNumber(dataType, val) {
    if (ss.isValue(val)) {
        if (dataType === 'integer' || dataType === 'date' || dataType === 'datetime') {
            return parseInt(val);
        }
        if (dataType === 'real') {
            return parseFloat(val);
        }
    }
    return null;
}
tab._apiParameterHandler._getAliasedValueValue = function tab__apiParameterHandler$_getAliasedValueValue(a) {
    return a[0];
}
tab._apiParameterHandler._getAliasedValueAlias = function tab__apiParameterHandler$_getAliasedValueAlias(a) {
    if (a.length < 2) {
        return null;
    }
    if (ss.isNullOrUndefined(a[1]) || !(a[1]).length) {
        return null;
    }
    return a[1];
}


////////////////////////////////////////////////////////////////////////////////
// tab._ApiSerializer

tab._ApiSerializer = function tab__ApiSerializer() {
}
tab._ApiSerializer.serializeClientInfo = function tab__ApiSerializer$serializeClientInfo(client, storytellingClient) {
    var dashboard = client.get_applicationPresModel().workbookPresModel.dashboardPresModel;
    var isAutoUpdate = client.get_toolbarCommands()._isAutoUpdate();
    var isDownloadAllowed = !String.isNullOrEmpty(dashboard.sheetLayoutInfo.downloadLink) || client.get_toolbarCommands()._isDownloadAllowed();
    var currentSheetName = tsConfig.current_sheet_name;
    var workbookName = tsConfig.current_workbook_name;
    var dashboardZones = tab._ApiSerializer.serializeDashboardZones(dashboard.zones);
    var publishedSheets = tab._ApiSerializer.serializePublishedSheets(client.get_applicationPresModel().workbookPresModel.sheetsInfo);
    var story = tab._ApiSerializer.serializeStory(storytellingClient);
    var clientInfo = tab.ApiCrossDomainPresModelsFactory.newClientInfo(isAutoUpdate, isDownloadAllowed, workbookName, currentSheetName, publishedSheets, dashboardZones, story);
    return clientInfo;
}
tab._ApiSerializer.serializeSheetInfo = function tab__ApiSerializer$serializeSheetInfo(sheetInfo, repositoryUrl) {
    var sheetType;
    if (sheetInfo.isStory) {
        sheetType = 'story';
    }
    else if (sheetInfo.isDashboard) {
        sheetType = 'dashboard';
    }
    else {
        sheetType = 'worksheet';
    }
    var sheetPm = tab.ApiCrossDomainPresModelsFactory.newSheetInfo(sheetInfo.sheet, sheetType, sheetInfo.minWidth, sheetInfo.minHeight, sheetInfo.maxWidth, sheetInfo.maxHeight, repositoryUrl);
    return sheetPm;
}
tab._ApiSerializer.serializePublishedSheets = function tab__ApiSerializer$serializePublishedSheets(sheetsInfo) {
    var sheetInfoMap = {};
    var $enum1 = ss.IEnumerator.getEnumerator(sheetsInfo);
    while ($enum1.moveNext()) {
        var pm = $enum1.current;
        sheetInfoMap[pm.sheet] = pm;
    }
    var baseSheets = [];
    for (var i = 0; i < tsConfig.visible_sheets.length; i++) {
        var sheetInfo = sheetInfoMap[tsConfig.visible_sheets[i]];
        var repositoryUrl = tab._ApiSerializer._buildAbsoluteRepositoryUrl(tsConfig.repository_urls[i]);
        var sheet = tab._ApiSerializer.serializeSheetInfo(sheetInfo, repositoryUrl);
        baseSheets.push(sheet);
    }
    return baseSheets;
}
tab._ApiSerializer.serializeDashboardZones = function tab__ApiSerializer$serializeDashboardZones(zones) {
    var zonePms = [];
    if (ss.isNullOrUndefined(zones) || !Object.getKeyCount(zones)) {
        return zonePms;
    }
    var zoneKeys = _.keys(zones);
    zoneKeys.sort(function(a, b) {
        return parseInt(a, 10) - parseInt(b, 10);
    });
    var $enum1 = ss.IEnumerator.getEnumerator(zoneKeys);
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var zone = zones[key];
        if (ss.isNullOrUndefined(zone)) {
            continue;
        }
        var zoneType = tab._ApiEnumConverter.convertZoneType(zone.zoneType);
        if (!ss.isValue(zoneType)) {
            continue;
        }
        var name = (ss.isValue(zone.worksheet)) ? zone.worksheet : null;
        var x = zone.x;
        var y = zone.y;
        var width = zone.w;
        var height = zone.h;
        var zoneId = zone.zoneId;
        var pm = tab.ApiCrossDomainPresModelsFactory.newDashboardZone(name, zoneId, zoneType, height, width, x, y);
        zonePms.push(pm);
    }
    return zonePms;
}
tab._ApiSerializer.serializeStory = function tab__ApiSerializer$serializeStory(client) {
    var navigatorVm = client.get_flipboardNavigatorViewModel();
    if (ss.isNullOrUndefined(navigatorVm)) {
        return null;
    }
    var activeStoryPointIndex = navigatorVm.get_currentPointIndex();
    var storyPoints = tab._ApiSerializer.serializeStoryPoints(navigatorVm.get_captions(), client);
    var story = tab.ApiCrossDomainPresModelsFactory.newStory(activeStoryPointIndex, storyPoints);
    return story;
}
tab._ApiSerializer.serializeStoryPoints = function tab__ApiSerializer$serializeStoryPoints(captions, client) {
    var storyPoints = [];
    var $enum1 = ss.IEnumerator.getEnumerator(captions);
    while ($enum1.moveNext()) {
        var captionVm = $enum1.current;
        var storyPoint = tab._ApiSerializer.serializeStoryPoint(captionVm, client);
        storyPoints.push(storyPoint);
    }
    return storyPoints;
}
tab._ApiSerializer.serializeStoryPoint = function tab__ApiSerializer$serializeStoryPoint(captionViewModel, client) {
    var containedSheetInfo = null;
    if (captionViewModel.get_isCurrentPoint() && client.get_hasContainedSheet()) {
        var containedSheetName = client.get_containedSheetName();
        var containedSheetType = client.get_containedSheetType();
        var containedSheetDashboardZones = tab._ApiSerializer.serializeDashboardZones(client.get_containedDashboardZones());
        containedSheetInfo = tab.ApiCrossDomainPresModelsFactory.newContainedSheetInfo(containedSheetName, containedSheetType, client.get_containedSheetZoneId(), containedSheetDashboardZones);
    }
    var storyPoint = tab.ApiCrossDomainPresModelsFactory.newStoryPoint(captionViewModel.get_caption(), captionViewModel.get_storyPointIndex(), captionViewModel.get_storyPointId(), captionViewModel.get_isCaptured(), containedSheetInfo);
    return storyPoint;
}
tab._ApiSerializer.serializeDataValue = function tab__ApiSerializer$serializeDataValue(rawValue, dataType) {
    if (dataType === 'boolean') {
        if (_.isBoolean(rawValue)) {
            return rawValue;
        }
        return (ss.isValue(rawValue)) ? rawValue.toString().toLowerCase() === 'true' : false;
    }
    if (ss.isNullOrUndefined(rawValue)) {
        return null;
    }
    switch (dataType) {
        case 'date':
        case 'datetime':
            var d = null;
            if (_.isDate(rawValue)) {
                d = rawValue;
            }
            else if (_.isNumber(rawValue)) {
                if (isNaN(rawValue)) {
                    d = null;
                }
                else {
                    d = new Date(tableau.types.JsDateFromOleDate(rawValue));
                }
            }
            else {
                d = tab.DateUtil.parsePresModelDate(rawValue.toString());
            }
            if (ss.isNullOrUndefined(d) || isNaN(d)) {
                return null;
            }
            return d.getTime();
        case 'integer':
            if (_.isNumber(rawValue)) {
                return (isNaN(rawValue)) ? null : rawValue;
            }
            var parsedInt = parseInt(rawValue.toString(), 10);
            return (isNaN(parsedInt)) ? null : parsedInt;
        case 'real':
            if (_.isNumber(rawValue)) {
                return (isNaN(rawValue)) ? null : rawValue;
            }
            var parsedFloat = parseFloat(rawValue.toString());
            return (isNaN(parsedFloat)) ? null : parsedFloat;
        case 'cstring':
        case 'tuple':
        case 'unknown':
        default:
            return rawValue.toString();
    }
}
tab._ApiSerializer.serializeCustomView = function tab__ApiSerializer$serializeCustomView(customizedView, url) {
    return tab.ApiCrossDomainPresModelsFactory.newCustomView(customizedView.id, customizedView.name, customizedView.urlId, url, customizedView.startViewId, customizedView.isPublic, tab._ApiSerializer.serializeUser(customizedView.owner));
}
tab._ApiSerializer.serializeUser = function tab__ApiSerializer$serializeUser(user) {
    return tab.ApiCrossDomainPresModelsFactory.newUser(user.id, user.friendlyName, user.username);
}
tab._ApiSerializer.convertToCustomizedView = function tab__ApiSerializer$convertToCustomizedView(apiCv) {
    var cv = new tab.CustomizedView();
    cv.id = apiCv.id;
    cv.isPublic = apiCv.isPublic;
    cv.name = apiCv.name;
    cv.owner = tab._ApiSerializer.convertToUser(apiCv.owner);
    cv.startViewId = apiCv.startViewId;
    cv.urlId = apiCv.urlId;
    return cv;
}
tab._ApiSerializer.convertToUser = function tab__ApiSerializer$convertToUser(apiUser) {
    var user = new tab.User();
    user.friendlyName = apiUser.friendlyName;
    user.id = apiUser.id;
    user.username = apiUser.username;
    return user;
}
tab._ApiSerializer._buildAbsoluteRepositoryUrl = function tab__ApiSerializer$_buildAbsoluteRepositoryUrl(relativeUrl) {
    var uriModel = tab.VizUriModel.createForViewingSheet(relativeUrl);
    uriModel.removeAllQueryParams();
    return uriModel.get_absoluteUri();
}


////////////////////////////////////////////////////////////////////////////////
// tab.ApiStorytellingHandler

tab.ApiStorytellingHandler = function tab_ApiStorytellingHandler(client, responder) {
    this._disposables = new tab.DisposableHolder();
    tab.Param.verifyValue(client, 'client');
    tab.Param.verifyValue(responder, 'responder');
    this._client = client;
    this._responder = responder;
    var attachEvents = ss.Delegate.create(this, function() {
        var navVm = client.get_flipboardNavigatorViewModel();
        if (ss.isValue(navVm)) {
            navVm.add_remoteUpdateComplete(ss.Delegate.create(this, this._handleRemoteUpdateComplete));
            this._disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
                navVm.remove_remoteUpdateComplete(ss.Delegate.create(this, this._handleRemoteUpdateComplete));
            })));
        }
        return ss.isValue(navVm);
    });
    if (!attachEvents()) {
        _.defer(ss.Delegate.create(this, function() {
            if (this._disposed) {
                return;
            }
            attachEvents();
        }));
    }
}
tab.ApiStorytellingHandler._verifyCommand = function tab_ApiStorytellingHandler$_verifyCommand(command, expectedNames) {
    var validNames = ($.isArray(expectedNames)) ? expectedNames : [expectedNames];
    var isValid = _.any(validNames, function(name) {
        return name === command.get_name();
    });
    if (!isValid) {
        throw new Error("Command '" + command.get_name() + "' is not valid for the handler.");
    }
}
tab.ApiStorytellingHandler.prototype = {
    _client: null,
    _responder: null,
    _disposed: false,
    
    dispose: function tab_ApiStorytellingHandler$dispose() {
        this._disposables.dispose();
        this._disposed = true;
    },
    
    activateStoryPoint: function tab_ApiStorytellingHandler$activateStoryPoint(command) {
        this._handleStoryPointCommand(command, ss.Delegate.create(this, this._handleActivateStoryPoint));
    },
    
    activatePreviousStoryPoint: function tab_ApiStorytellingHandler$activatePreviousStoryPoint(command) {
        this._handleStoryPointCommand(command, ss.Delegate.create(this, function(c) {
            return this._handleActivatePreviousOrNextStoryPoint(c, function(navVm) {
                return navVm.clickPrevious();
            });
        }));
    },
    
    activateNextStoryPoint: function tab_ApiStorytellingHandler$activateNextStoryPoint(command) {
        this._handleStoryPointCommand(command, ss.Delegate.create(this, function(c) {
            return this._handleActivatePreviousOrNextStoryPoint(c, function(navVm) {
                return navVm.clickNext();
            });
        }));
    },
    
    revertStoryPoint: function tab_ApiStorytellingHandler$revertStoryPoint(command) {
        this._handleStoryPointCommand(command, ss.Delegate.create(this, this._handleRevertStoryPoint));
    },
    
    _handleRevertStoryPoint: function tab_ApiStorytellingHandler$_handleRevertStoryPoint(command) {
        return this._handleIndexedStoryPointCommand(command, 'api.RevertStoryPoint', function(storyPointVm) {
            return storyPointVm.revertStoryPoint();
        });
    },
    
    _handleActivateStoryPoint: function tab_ApiStorytellingHandler$_handleActivateStoryPoint(command) {
        return this._handleIndexedStoryPointCommand(command, 'api.ActivateStoryPoint', function(storyPointVm) {
            return storyPointVm.clickStoryPoint();
        });
    },
    
    _handleIndexedStoryPointCommand: function tab_ApiStorytellingHandler$_handleIndexedStoryPointCommand(command, expectedCommandName, operationFunc) {
        tab.ApiStorytellingHandler._verifyCommand(command, expectedCommandName);
        var commandParameters = tab.JsonUtil.parseJson(command.get_parameters());
        var index = commandParameters['api.storyPointIndex'];
        if (ss.isNullOrUndefined(index) || isNaN(index)) {
            throw new Error('Missing index parameter.');
        }
        var navVm = this._getFlipboardNavigatorViewModel();
        if (index < 0 || index >= navVm.get_captions().length) {
            throw new Error('The index is out of bounds.');
        }
        var deferred = $.DeferredData();
        var storyPointVm = navVm.get_captions()[index];
        operationFunc(storyPointVm).then(ss.Delegate.create(this, function(updatedStoryPointVm) {
            var storyPointPm = tab._ApiSerializer.serializeStoryPoint(updatedStoryPointVm, this._client);
            deferred.resolve(storyPointPm);
        }), function(error) {
            deferred.reject(error);
        });
        return deferred.promise();
    },
    
    _handleActivatePreviousOrNextStoryPoint: function tab_ApiStorytellingHandler$_handleActivatePreviousOrNextStoryPoint(command, viewModelClickFunc) {
        tab.ApiStorytellingHandler._verifyCommand(command, [ 'api.ActivateNextStoryPoint', 'api.ActivatePreviousStoryPoint' ]);
        var navVm = this._getFlipboardNavigatorViewModel();
        var deferred = $.DeferredData();
        viewModelClickFunc(navVm).then(ss.Delegate.create(this, function(nextIndexToBeActive) {
            var captionVm = navVm.get_captions()[nextIndexToBeActive];
            var storyPointPm = tab._ApiSerializer.serializeStoryPoint(captionVm, this._client);
            deferred.resolve(storyPointPm);
        }), function(error) {
            deferred.reject(error);
        });
        return deferred.promise();
    },
    
    _handleRemoteUpdateComplete: function tab_ApiStorytellingHandler$_handleRemoteUpdateComplete() {
        var storyPm = tab._ApiSerializer.serializeStory(this._client);
        var storyPmJson = tab.JsonUtil.toJson(storyPm);
        this._responder.sendCrossDomainEventNotification('api.StorytellingStateChangedEvent', null, storyPmJson);
    },
    
    _getFlipboardNavigatorViewModel: function tab_ApiStorytellingHandler$_getFlipboardNavigatorViewModel() {
        var navVm = this._client.get_flipboardNavigatorViewModel();
        if (ss.isNullOrUndefined(navVm)) {
            throw new Error('The active sheet is not a story.');
        }
        return navVm;
    },
    
    _handleStoryPointCommand: function tab_ApiStorytellingHandler$_handleStoryPointCommand(command, handler) {
        try {
            handler(command).then(ss.Delegate.create(this, function(result) {
                var successResult = new tab._apiServerResultBuilder('api.success', result);
                this._responder.sendCrossDomainResponse(command, successResult.get__result());
            }), ss.Delegate.create(this, function(error) {
                var errorResult = new tab._apiServerResultBuilder('api.remotefailed', error);
                this._responder.sendCrossDomainResponse(command, errorResult.get__result());
            }));
        }
        catch (e) {
            var errorResult = new tab._apiServerResultBuilder('api.localfailed', e.message);
            this._responder.sendCrossDomainResponse(command, errorResult.get__result());
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Application

tab.Application = function tab_Application() {
    this._subscriptions = [];
    tab.Application.add_starting(ss.Delegate.create(this, function() {
        this._currentSheetName = tsConfig.sheetId;
        this._subscriptions.add(dojo.subscribe('newLayoutId', ss.Delegate.create(this, this._handleNewLayout)));
        this._subscriptions.add(dojo.subscribe('onBootstrapSuccess', ss.Delegate.create(this, this._handleBootstrapSuccess)));
        this._subscriptions.add(dojo.subscribe('onTabSelect', ss.Delegate.create(this, this._doTabSelect)));
        tab.ApplicationModel.get_instance().get_workbook().add_dashboardDeleted(ss.Delegate.create(this, this._workbookOnDashboardDeleted));
        var layoutSession = new tab.LayoutSession(null, null);
        tab.CommandController.create(layoutSession);
        tab.CommandController.get().add_destroyView(ss.Delegate.create(this, function() {
            this._destroyClient();
        }));
        var appVm = tab.Application._createApplicationViewModel(false, layoutSession);
        this._client = appVm;
        this._storytellingClient = appVm;
        this._client.startup();
        this._instantiateApiEventHandler(this._client, this._storytellingClient);
        if (tab.BrowserSupport.get_isIE()) {
            this._addUnloadHandler();
        }
        this._modifierKeyState = new tab.ModifierKeyState();
        spiff.SpiffBrowserViewport.getSpiffBrowserViewportFunc = function(callback) {
            tab.BrowserViewport.getViewport(function(viewport) {
                var spiffBrowserViewport = new spiff.SpiffBrowserViewport(viewport.get_dimensions(), ss.Delegate.create(viewport, viewport.getVisibleRoom));
                callback(spiffBrowserViewport);
            });
        };
    }));
}
tab.Application.add_starting = function tab_Application$add_starting(value) {
    tab.Application.__starting = ss.Delegate.combine(tab.Application.__starting, value);
}
tab.Application.remove_starting = function tab_Application$remove_starting(value) {
    tab.Application.__starting = ss.Delegate.remove(tab.Application.__starting, value);
}
tab.Application.add_started = function tab_Application$add_started(value) {
    tab.Application.__started = ss.Delegate.combine(tab.Application.__started, value);
}
tab.Application.remove_started = function tab_Application$remove_started(value) {
    tab.Application.__started = ss.Delegate.remove(tab.Application.__started, value);
}
tab.Application.get_instance = function tab_Application$get_instance() {
    if (ss.isNullOrUndefined(tab.Application._instance)) {
        tab.Application._instance = new tab.Application();
    }
    return tab.Application._instance;
}
tab.Application.get_isHostedInApiContext = function tab_Application$get_isHostedInApiContext() {
    return !String.isNullOrEmpty(tsConfig.apiID);
}
tab.Application.get_isStarted = function tab_Application$get_isStarted() {
    return tab.Application._started;
}
tab.Application.startup = function tab_Application$startup() {
    var parameters = {};
    parameters['t'] = tabBootstrap.MetricsController.getTiming();
    parameters['d'] = 'APPSTR';
    var evt = new tabBootstrap.MetricsEvent('gen', tabBootstrap.MetricsSuites.bootstrap, parameters);
    tabBootstrap.MetricsController.get_instance().logEvent(evt);
    if (ss.isValue(tab.Application._started) && tab.Application._started) {
        throw Error.createError('Application.Startup() can only be called once', null);
    }
    var app = tab.Application.get_instance();
    tab.Log.get(app).info('Starting...');
    if (ss.isValue(tab.Application.__starting)) {
        tab.Application.__starting(app, ss.EventArgs.Empty);
    }
    tab.Log.get(app).info('Started');
    if (ss.isValue(tab.Application.__started)) {
        tab.Application.__started(app, ss.EventArgs.Empty);
    }
    spiff.DragDropManager.init();
    tabBootstrap.MetricsController.get_instance().initSessionInfo();
    tab.MetricsLogger.get_instance().attach();
    tab.Application._started = true;
}
tab.Application._createApplicationViewModel = function tab_Application$_createApplicationViewModel(skipInit, session) {
    var t = Type.getType((tsConfig.is_mobile) ? 'tab.ApplicationViewModelMobile' : 'tab.ApplicationViewModelWeb');
    return new t(skipInit, session);
}
tab.Application.prototype = {
    _currentSheetName: null,
    _client: null,
    _storytellingClient: null,
    _modifierKeyState: null,
    _apiEventHandler: null,
    _tabbedNavigation: null,
    
    add_clientChanged: function tab_Application$add_clientChanged(value) {
        this.__clientChanged = ss.Delegate.combine(this.__clientChanged, value);
    },
    remove_clientChanged: function tab_Application$remove_clientChanged(value) {
        this.__clientChanged = ss.Delegate.remove(this.__clientChanged, value);
    },
    
    __clientChanged: null,
    
    get_client: function tab_Application$get_client() {
        return this._client;
    },
    
    get_currentSheetName: function tab_Application$get_currentSheetName() {
        return this._currentSheetName;
    },
    
    dispose: function tab_Application$dispose() {
        if (!ss.isValue(tab.Application._instance)) {
            return;
        }
        if (ss.isValue(this._apiEventHandler)) {
            this._apiEventHandler.dispose();
            this._apiEventHandler = null;
        }
        this._destroyClient();
        var $enum1 = ss.IEnumerator.getEnumerator(this._subscriptions);
        while ($enum1.moveNext()) {
            var subscription = $enum1.current;
            dojo.unsubscribe(subscription);
        }
        this._subscriptions.clear();
        this._removeApiEventHandler();
        this._modifierKeyState.dispose();
        if (ss.isValue(this._tabbedNavigation)) {
            this._tabbedNavigation.destroy();
            this._tabbedNavigation = null;
        }
        spiff.GlobalTouchWatcher.dispose();
        tab.ApplicationModel.get_instance().get_workbook().remove_dashboardDeleted(ss.Delegate.create(this, this._workbookOnDashboardDeleted));
        tab.Application._instance = null;
    },
    
    _workbookOnDashboardDeleted: function tab_Application$_workbookOnDashboardDeleted(arg) {
        this._destroyClient();
    },
    
    _destroyClient: function tab_Application$_destroyClient() {
        if (ss.isNullOrUndefined(this._client)) {
            return;
        }
        this._client.destroyRecursive();
        this._client = null;
        this._storytellingClient = null;
    },
    
    _doTabSelect: function tab_Application$_doTabSelect(msg) {
        tab.SheetClientCommands.switchSheets(msg, tsConfig.embedded);
    },
    
    _removeApiEventHandler: function tab_Application$_removeApiEventHandler() {
        if (!tab.Application.get_isHostedInApiContext()) {
            return;
        }
        if (ss.isValue(this._apiEventHandler)) {
            if (ss.isValue(window.removeEventListener)) {
                window.removeEventListener('message', ss.Delegate.create(this, this._handleApiMessage), true);
            }
            else {
                window.self.detachEvent('onmessage', ss.Delegate.create(this, this._handleApiMessage));
            }
            this._apiEventHandler = null;
        }
        tab.Log.get(this).debug('ApiEventHandler removed.');
    },
    
    _instantiateApiEventHandler: function tab_Application$_instantiateApiEventHandler(clientInstance, storytelingClientInstance) {
        if (!tab.Application.get_isHostedInApiContext()) {
            return;
        }
        this._apiEventHandler = new tab.ApiEventHandler(clientInstance, storytelingClientInstance, tabBootstrap.ViewerBootstrap.get_instance().apiResponder);
        if (ss.isValue(window.addEventListener)) {
            window.addEventListener('message', ss.Delegate.create(this, this._handleApiMessage), true);
        }
        else {
            window.self.attachEvent('onmessage', ss.Delegate.create(this, this._handleApiMessage));
        }
    },
    
    _addUnloadHandler: function tab_Application$_addUnloadHandler() {
        if (!tab.Application.get_isHostedInApiContext()) {
            return;
        }
        if (ss.isValue(window.addEventListener)) {
            window.addEventListener('unload', ss.Delegate.create(this, this._onUnload), true);
        }
        else {
            window.self.attachEvent('onunload', ss.Delegate.create(this, this._onUnload));
        }
    },
    
    _onUnload: function tab_Application$_onUnload(e) {
        this._removeApiEventHandler();
    },
    
    _handleBootstrapSuccess: function tab_Application$_handleBootstrapSuccess(sheetName) {
        var tabDom = $('.tabbedNavigation');
        if (tabDom.length > 0) {
            this._tabbedNavigation = new tableau.base.widget.TabbedNavigation({}, tabDom[0]);
            this._tabbedNavigation.startup();
        }
        this._currentSheetName = sheetName;
        if (ss.isValue(this._apiEventHandler)) {
            this._apiEventHandler.updateClients(this._client, this._storytellingClient);
        }
    },
    
    _handleApiMessage: function tab_Application$_handleApiMessage(e) {
        if (typeof ss === 'undefined') {
            return;
        }
        if (ss.isValue(this._apiEventHandler)) {
            this._apiEventHandler.handleEvent(e);
        }
    },
    
    _handleNewLayout: function tab_Application$_handleNewLayout(presModel) {
        tab.Log.get(this).debug('Changing tabs: %o', presModel);
        this._currentSheetName = presModel.sheetId;
        this._updateTsConfig(presModel);
        var layoutSession = tab.CommandController.get().get_legacySession();
        this._destroyClient();
        tabBootstrap.MetricsController.get_instance().initSessionInfo();
        var appVm = tab.Application._createApplicationViewModel(true, layoutSession);
        this._client = appVm;
        this._storytellingClient = appVm;
        this._client.startup();
        if (ss.isValue(this.__clientChanged)) {
            this.__clientChanged();
        }
        if (ss.isValue(this._apiEventHandler)) {
            this._apiEventHandler.updateClients(this._client, this._storytellingClient);
        }
        if (tabBootstrap.Utility.get_embedMode() === 'embeddedInWg' || tabBootstrap.Utility.get_embedMode() === 'notEmbedded') {
            this._replaceUrl(presModel);
        }
    },
    
    _replaceUrl: function tab_Application$_replaceUrl(presModel) {
        if (tsConfig.is_authoring) {
            this._replaceWindowLocationForTabChangeWhileAuthoring(presModel.repositoryUrl, presModel.sheetName);
        }
        else {
            this.replaceWindowLocationForTabChangeWhileViewing(presModel.repositoryUrl);
        }
    },
    
    _replaceWindowLocationForTabChangeWhileAuthoring: function tab_Application$_replaceWindowLocationForTabChangeWhileAuthoring(newRepoUrl, authoringSheetName) {
        if (this._isValidRepoUrl(newRepoUrl)) {
            var newVizUriModel = tab.VizUriModel.createForAuthoringPublishedSheet(newRepoUrl);
            newVizUriModel.replaceState();
        }
        else {
            var vizUriModel = tab.VizUriModel.createForCurrentWindowLocation();
            if (vizUriModel.get_isAuthorNewWorkbookUri()) {
            }
            else if (tab.MiscUtil.isNullOrEmpty(newRepoUrl)) {
                var newVizUriModel = tab.VizUriModel.createForAuthoringUnpublishedSheet(tsConfig.origin_repository_url, authoringSheetName);
                newVizUriModel.replaceState();
            }
        }
    },
    
    replaceWindowLocationForTabChangeWhileViewing: function tab_Application$replaceWindowLocationForTabChangeWhileViewing(newRepoUrl) {
        if (this._isValidRepoUrl(newRepoUrl)) {
            var vizUriModel = tab.VizUriModel.createForCurrentWindowLocation();
            vizUriModel.updateForViewingSheet(newRepoUrl);
            vizUriModel.replaceState();
        }
        else {
            tab.Logger.lazyGetLogger(tab.VizUriModel).error("ReplaceWindowLocationForTabChangeWhileViewing received invalid newRepoUrl argument: '%s'", newRepoUrl);
        }
    },
    
    _isValidRepoUrl: function tab_Application$_isValidRepoUrl(repoUrl) {
        if (tab.MiscUtil.isNullOrEmpty(repoUrl) || repoUrl.startsWith('ds:')) {
            return false;
        }
        return true;
    },
    
    _updateTsConfig: function tab_Application$_updateTsConfig(presModel) {
        tsConfig.current_sheet_name = presModel.sheetName;
        tsConfig.current_view_id = presModel.viewId;
        if (!!presModel.isCurrentCustViewIdValid) {
            tsConfig.current_custom_view_id = presModel.currentCustomViewId;
        }
        else {
            tsConfig.current_custom_view_id = null;
        }
        tsConfig.layoutid = presModel.layoutId;
        tsConfig.embeddedTitle = presModel.embeddedTitle;
        tsConfig.blogURI = presModel.blogLink;
        tsConfig.requestURI = presModel.shareLink;
        tsConfig.downloadURI = presModel.downloadLink;
        tsConfig.staticImage = presModel.staticImage;
        tsConfig.guid = presModel.guid;
        var repoUrl = presModel.repositoryUrl;
        if (!this._isValidRepoUrl(repoUrl)) {
            repoUrl = '';
        }
        else if (!presModel.isCurrentCustViewIdValid) {
            var repoPathObject = new tab.RepoPathObject(repoUrl);
            repoUrl = String.format('{0}/{1}', repoPathObject.get_workbookId(), repoPathObject.get_sheetId());
        }
        tsConfig.repositoryUrl = repoUrl;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalSelection

tab.CategoricalSelection = function tab_CategoricalSelection(widget) {
    this._anchorIndex = -1;
    this._selectedIndexes = [];
    this._lastRangeSelectionIndex = -1;
    this._categoricalSelectionWidget = widget;
}
tab.CategoricalSelection.prototype = {
    _categoricalSelectionWidget: null,
    changelist: null,
    _applyTimer: null,
    
    get_selectedIndexes: function tab_CategoricalSelection$get_selectedIndexes() {
        return this._selectedIndexes;
    },
    
    clearRangeAnchor: function tab_CategoricalSelection$clearRangeAnchor() {
        var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(this._anchorIndex);
        if (!!node) {
            var cssNode = tableau.FilterItem.getCssNode(node);
            if (!!cssNode) {
                dojo.removeClass(node, 'anchorSelection');
            }
        }
        this._anchorIndex = this._lastRangeSelectionIndex = -1;
    },
    
    clearRangeAnchorAndSelection: function tab_CategoricalSelection$clearRangeAnchorAndSelection() {
        this.clearRangeAnchor();
        this._clearSelection();
    },
    
    refreshRangeAnchorAndSelection: function tab_CategoricalSelection$refreshRangeAnchorAndSelection() {
        if (this._anchorIndex >= 0) {
            var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(this._anchorIndex);
            if (!!node) {
                var cssNode = tableau.FilterItem.getCssNode(node);
                if (!!cssNode) {
                    dojo.addClass(cssNode, 'anchorSelection');
                }
            }
            else {
                this._anchorIndex = -1;
            }
        }
        for (var i = this._selectedIndexes.length - 1; i >= 0; --i) {
            var selectedIndex = this._selectedIndexes[i];
            var selectedNode = this._categoricalSelectionWidget.fetchChildNodeByIndex(selectedIndex);
            if (!!selectedNode) {
                this._selectItem(selectedIndex);
            }
            else {
                this._selectedIndexes.splice(i, 1);
            }
        }
    },
    
    onListItemClick: function tab_CategoricalSelection$onListItemClick(evt) {
        var node = tableau.FilterItem.getNodeFromEvent(evt);
        if (!!!node) {
            return;
        }
        var checkboxOrRadioClick = tableau.util.isNodeMatch(evt.target, 'input', { type: 'checkbox' });
        checkboxOrRadioClick = checkboxOrRadioClick || tableau.util.isNodeMatch(evt.target, 'input', { type: 'radio' });
        if (checkboxOrRadioClick) {
            tableau.FilterItem.syncCssToCheckState(node);
            this._categoricalSelectionWidget.handleItemClick(node);
        }
        var targetIndex = tableau.FilterItem.getIndex(node);
        if (ss.isNullOrUndefined(targetIndex) || targetIndex < 0) {
            return;
        }
        if (tableau.FilterItem.isTypeInListItem(node)) {
            this._handleMultiSelection(evt, targetIndex);
        }
        else {
            if (!!!this.changelist) {
                this.changelist = new tab.Changelist();
            }
            if (checkboxOrRadioClick) {
                if (tab.ApplicationModel.get_instance().get_isLocalRenderMode() && !this._categoricalSelectionWidget.shouldDeferChanges()) {
                    var checkedAliases = [];
                    var table = this._categoricalSelectionWidget.get_filterTable();
                    if (!!table && table.actual_size === table.tuples.length) {
                        var tuples = table.tuples;
                        var checkedIndexes = this._getCheckedIndexes(tuples, node, this.changelist);
                        for (var i = 0, len = checkedIndexes.length; i < len; i++) {
                            var tupleId = checkedIndexes[i];
                            var alias = (tuples[tupleId].d || tuples[tupleId].t[0].v);
                            checkedAliases.push(alias);
                        }
                        var catFilter = this._categoricalSelectionWidget.get_quickFilter();
                        var filterData = new tab.CategoricalFilterData(catFilter.get_oFilter().targetSheets, catFilter.get_field(), catFilter.get_oFilter().exclude, checkedAliases);
                        tab.FilterClientCommands.updateCategoricalFilter(filterData);
                    }
                }
                this._lazyLoadTiles(node, evt, targetIndex);
                if (this._categoricalSelectionWidget.shouldDeferChanges()) {
                    this._categoricalSelectionWidget.applyChangesByChangelist(this.changelist);
                    this.changelist.reset();
                }
                else {
                    this.notifyChange(this.getDoChangeFunc());
                }
            }
            this._updateRangeAnchor(targetIndex);
        }
    },
    
    _lazyLoadTiles: function tab_CategoricalSelection$_lazyLoadTiles(node, evt, targetIndex) {
        var change = new tab.RawChange();
        var newCheckState = tableau.FilterItem.isChecked(node);
        if (tableau.FilterItem.isTiled(node)) {
            if (!!evt.shiftKey) {
                this._updateCheckboxRangeFromAnchorByIndex(targetIndex);
                var fromIndex = (this._anchorIndex > -1) ? this._anchorIndex : targetIndex;
                change.setRange(new tab.IntegerRange(fromIndex, targetIndex), newCheckState);
                this.changelist.addChange(change);
            }
            else {
                change.setSingle(targetIndex, newCheckState);
                this.changelist.addChange(change);
            }
        }
        else {
            if (!!evt.shiftKey && this._anchorIndex > -1) {
                this._updateCheckboxRangeFromAnchor(targetIndex);
            }
            else {
                change.setSingle(targetIndex, newCheckState);
                this.changelist.addChange(change);
            }
        }
    },
    
    _handleMultiSelection: function tab_CategoricalSelection$_handleMultiSelection(evt, targetIndex) {
        if (!!evt.shiftKey && this._anchorIndex >= 0) {
            this._selectRangeFromAnchor(targetIndex);
        }
        else if (spiff.EventUtil.isCtrlKey(evt)) {
            this._toggleItemSelection(targetIndex);
            this._updateRangeAnchor(targetIndex);
        }
        else {
            this._clearSelection();
            this._updateRangeAnchor(targetIndex);
            this._selectItem(targetIndex);
        }
    },
    
    getDoChangeFunc: function tab_CategoricalSelection$getDoChangeFunc() {
        var callback = ss.Delegate.create(this, function() {
            this._categoricalSelectionWidget.applyChangesByChangelist(this.changelist);
            this.changelist.reset();
        });
        return callback;
    },
    
    notifyChange: function tab_CategoricalSelection$notifyChange(callback) {
        if (!!this._applyTimer) {
            window.clearTimeout(this._applyTimer);
            this._applyTimer = null;
        }
        this._categoricalSelectionWidget.updateStateIfNeeded();
        this._applyTimer = window.setTimeout(callback, this._categoricalSelectionWidget.get_applyDelay());
    },
    
    _getCheckedIndexes: function tab_CategoricalSelection$_getCheckedIndexes(tuples, clickedItem, currentChangelist) {
        var results = [];
        var catOrHierFilter = this._categoricalSelectionWidget.get_quickFilter();
        var multiSelect = catOrHierFilter.get_mode() === 'checklist' || catOrHierFilter.get_mode() === 'checkdropdown';
        var usingFilteringSearchWidget = multiSelect || catOrHierFilter.get_mode() === 'radiolist' || catOrHierFilter.get_mode() === 'dropdown';
        var checklistChangelist = null;
        if (multiSelect) {
            checklistChangelist = currentChangelist.compileForChecklist(null);
        }
        for (var i = 0, len = tuples.length; i < len; i++) {
            var item = this._categoricalSelectionWidget.fetchChildNodeByIndex(i);
            if (!!item) {
                if (tableau.FilterItem.isChecked(item)) {
                    results.add(i);
                }
            }
            else if (usingFilteringSearchWidget) {
                var originalState = tuples[i].s;
                if (tableau.FilterItem.getIndex(clickedItem) === i) {
                    if (tableau.FilterItem.isChecked(clickedItem)) {
                        results.add(i);
                    }
                }
                else if (multiSelect) {
                    if (checklistChangelist.select.contains(i)) {
                        results.add(i);
                    }
                    else if (!checklistChangelist.deselect.contains(i) && originalState) {
                        results.add(i);
                    }
                }
            }
        }
        return results;
    },
    
    forEachSelected: function tab_CategoricalSelection$forEachSelected(itemCallback) {
        if (ss.isNullOrUndefined(itemCallback) || typeof(itemCallback) !== 'function') {
            return;
        }
        for (var i = 0, length = this._selectedIndexes.length; i < length; i++) {
            var index = this._selectedIndexes[i];
            var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(index);
            itemCallback(index, node);
        }
    },
    
    _selectRangeFromAnchor: function tab_CategoricalSelection$_selectRangeFromAnchor(toIndex) {
        var addAboveIndex;
        var addBelowIndex;
        var anchor = this._anchorIndex;
        var removeAboveIndex;
        var removeBelowIndex;
        var last = (this._lastRangeSelectionIndex >= 0) ? this._lastRangeSelectionIndex : anchor;
        var earlier = Math.min(anchor, toIndex);
        var later = Math.max(anchor, toIndex);
        for (addAboveIndex = toIndex; addAboveIndex <= Math.min(anchor, last); addAboveIndex++) {
            this._selectItem(addAboveIndex);
        }
        for (removeAboveIndex = last; removeAboveIndex < earlier; removeAboveIndex++) {
            this._deselectItem(removeAboveIndex);
        }
        for (addBelowIndex = Math.max(anchor, last); addBelowIndex <= toIndex; addBelowIndex++) {
            this._selectItem(addBelowIndex);
        }
        for (removeBelowIndex = later + 1; removeBelowIndex <= last; removeBelowIndex++) {
            this._deselectItem(removeBelowIndex);
        }
        this._lastRangeSelectionIndex = toIndex;
    },
    
    _toggleItemSelection: function tab_CategoricalSelection$_toggleItemSelection(index) {
        var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(index);
        if (tableau.FilterItem.isSelected(node)) {
            this._deselectItem(index);
        }
        else {
            this._selectItem(index);
        }
    },
    
    _selectItem: function tab_CategoricalSelection$_selectItem(index) {
        var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(index);
        var searchResults;
        tableau.FilterItem.setSelected(node, true);
        searchResults = tableau.util.binarySearch(index, this._selectedIndexes);
        if (!searchResults.found) {
            this._selectedIndexes.splice(searchResults.index, 0, index);
        }
    },
    
    _deselectItem: function tab_CategoricalSelection$_deselectItem(index) {
        var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(index);
        var searchResults;
        tableau.FilterItem.setSelected(node, false);
        searchResults = tableau.util.binarySearch(index, this._selectedIndexes);
        if (searchResults.found) {
            this._selectedIndexes.splice(searchResults.index, 1);
        }
    },
    
    _clearSelection: function tab_CategoricalSelection$_clearSelection() {
        for (var i = this._selectedIndexes.length - 1; i >= 0; --i) {
            this._deselectItem(this._selectedIndexes[i]);
        }
        this._selectedIndexes = [];
    },
    
    _updateCheckboxRangeFromAnchor: function tab_CategoricalSelection$_updateCheckboxRangeFromAnchor(toIndex) {
        var earlier = Math.min(this._anchorIndex, toIndex);
        var later = Math.max(this._anchorIndex, toIndex);
        var node = this._categoricalSelectionWidget.fetchChildNodeByIndex(earlier);
        var endNode = this._categoricalSelectionWidget.fetchChildNodeByIndex(later);
        var newCheckState = tableau.FilterItem.isChecked(this._categoricalSelectionWidget.fetchChildNodeByIndex(toIndex));
        var change;
        while (!!node && node !== endNode) {
            tableau.FilterItem.setChecked(node, newCheckState);
            change = new tab.RawChange();
            change.setSingle(tableau.FilterItem.getIndex(node), newCheckState);
            this.changelist.addChange(change);
            node = node.nextSibling;
        }
        tableau.FilterItem.setChecked(endNode, newCheckState);
        change = new tab.RawChange();
        change.setSingle(tableau.FilterItem.getIndex(endNode), newCheckState);
        this.changelist.addChange(change);
    },
    
    _updateCheckboxRangeFromAnchorByIndex: function tab_CategoricalSelection$_updateCheckboxRangeFromAnchorByIndex(toIndex) {
        var earlier = Math.min(this._anchorIndex, toIndex);
        var later = Math.max(this._anchorIndex, toIndex);
        var newCheckState = tableau.FilterItem.isChecked(this._categoricalSelectionWidget.fetchChildNodeByIndex(toIndex));
        var i;
        var node;
        for (i = earlier; i <= later; ++i) {
            node = this._categoricalSelectionWidget.fetchChildNodeByIndex(i);
            if (!!node) {
                this._categoricalSelectionWidget.handleClickIfPending(node);
                tableau.FilterItem.setChecked(node, newCheckState);
            }
        }
    },
    
    _updateRangeAnchor: function tab_CategoricalSelection$_updateRangeAnchor(anchorIndex) {
        if (this._categoricalSelectionWidget.isSingleSelect()) {
            return;
        }
        if (this._anchorIndex === anchorIndex && anchorIndex >= 0) {
            return;
        }
        var anchorNode;
        if (this._anchorIndex >= 0) {
            anchorNode = this._categoricalSelectionWidget.fetchChildNodeByIndex(this._anchorIndex);
            if (!!anchorNode) {
                dojo.removeClass(tableau.FilterItem.getCssNode(anchorNode), 'anchorSelection');
            }
        }
        this._anchorIndex = anchorIndex;
        anchorNode = this._categoricalSelectionWidget.fetchChildNodeByIndex(anchorIndex);
        if (!!anchorNode) {
            dojo.addClass(tableau.FilterItem.getCssNode(anchorNode), 'anchorSelection');
        }
        else {
            this._anchorIndex = -1;
        }
        this._lastRangeSelectionIndex = -1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ExportPdfDialog

tab.ExportPdfDialog = function tab_ExportPdfDialog(sess, pngMode) {
    tab.ExportPdfDialog.initializeBase(this, [ '', $(tab.ExportPdfDialog.dialogTemplate()) ]);
    this._exportFileFormat$3 = (pngMode) ? 'png' : 'pdf';
    this._session$3 = sess;
    this.dom = new tab.ExportPdfDialogTemplate(this.get_element());
    this.thumbnails = [];
    this.get_dialogElement().css({ minWidth: 'none', maxWidth: 'none' });
    switch (this._exportFileFormat$3) {
        case 'png':
            this.set_titleUnescaped(tab.Strings.PdfExportTitlePNG);
            this.dom.getElementsBySelector('.pdf-only').hide();
            break;
        case 'pdf':
            this.set_titleUnescaped(tab.Strings.PdfExportTitlePDF);
            this.dom.getElementsBySelector('.png-only').hide();
            break;
    }
    this._cancelButton$3 = new spiff.StyledButton('cancel');
    this._cancelButton$3.set_label(tab.Strings.DialogButtonCancel);
    this._cancelButton$3.add_click(ss.Delegate.create(this, this.onCancel));
    this._exportButton$3 = new spiff.StyledButton('export');
    this._exportButton$3.set_label(tab.Strings.DialogButtonExport);
    this._exportButton$3.add_click(ss.Delegate.create(this, this.onExport));
    this.dom.buttons.append(this._exportButton$3.get_element());
    this.dom.buttons.append(this._cancelButton$3.get_element());
    this.set_vertOffset(100);
    this.set_closeButtonVisible(false);
    this.disableTextSelection();
}
tab.ExportPdfDialog.dialogTemplate = function tab_ExportPdfDialog$dialogTemplate() {
    if (tab.ExportPdfDialog._localizedTemplate$3 == null) {
        tab.ExportPdfDialog._localizedTemplate$3 = String.localeFormat(tab.ExportPdfDialogTemplate.template, tableau.format.escapeHTML(tab.Strings.PdfDialogPaperSize), tableau.format.escapeHTML(tab.Strings.PdfDialogImageSize), tableau.format.escapeHTML(tab.Strings.PdfDialogScalingLabel), tableau.format.escapeHTML(tab.Strings.PdfDialogSectionLayout), tableau.format.escapeHTML(tab.Strings.PdfExportPageOrientationPortrait), tableau.format.escapeHTML(tab.Strings.PdfExportPageOrientationLandscape), tableau.format.escapeHTML(tab.Strings.PdfDialogSectionContent), tableau.format.escapeHTML(tab.Strings.PdfDialogContentDashboardSheets), tableau.format.escapeHTML(tab.Strings.PdfDialogContentDashboard), tableau.format.escapeHTML(tab.Strings.PdfDialogContentTopSheets), tableau.format.escapeHTML(tab.Strings.PdfDialogContentWorksheet), tableau.format.escapeHTML(tab.Strings.PdfDialogSelectSheetToChangePrintScaling), tableau.format.escapeHTML(tab.Strings.PdfDialogContentStory));
    }
    return tab.ExportPdfDialog._localizedTemplate$3;
}
tab.ExportPdfDialog.scalingValueFromLayoutOptions = function tab_ExportPdfDialog$scalingValueFromLayoutOptions(options) {
    switch (options.pageScaleMode) {
        case 'fit-pages':
            return String.format('fit{0}x{1}', options.pageFitHorizontal, options.pageFitVertical);
        case 'percent':
            return String.format('pct{0}', options.pageScalePercent);
        case 'auto':
        default:
            return 'auto';
    }
}
tab.ExportPdfDialog.scalingLabelFromLayoutOptions = function tab_ExportPdfDialog$scalingLabelFromLayoutOptions(options) {
    switch (options.pageScaleMode) {
        case 'fit-pages':
            if (!options.pageFitHorizontal && options.pageFitVertical > 0) {
                return tab.Strings.PdfExportFitHigh(options.pageFitVertical);
            }
            else if (!options.pageFitVertical && options.pageFitHorizontal > 0) {
                return tab.Strings.PdfExportFitWide(options.pageFitHorizontal);
            }
            else {
                return tab.Strings.PdfExportFitWideByHigh(options.pageFitHorizontal, options.pageFitVertical);
            }
        case 'percent':
            return tab.Strings.PdfExportPageScalePercent(options.pageScalePercent);
        case 'auto':
        default:
            return tab.Strings.PdfExportPageScaleAuto;
    }
}
tab.ExportPdfDialog.canSelectSheet = function tab_ExportPdfDialog$canSelectSheet(sheet) {
    return sheet.isPublished || (ss.isValue(tsConfig.is_authoring) && tsConfig.is_authoring);
}
tab.ExportPdfDialog.prototype = {
    dom: null,
    thumbnails: null,
    _model$3: null,
    _session$3: null,
    _exportFileFormat$3: null,
    _currentSheet$3: null,
    _isUIDisabled$3: false,
    _exportButton$3: null,
    _cancelButton$3: null,
    
    get_thumbnailTemplates: function tab_ExportPdfDialog$get_thumbnailTemplates() {
        return this.thumbnails;
    },
    
    get__orientation$3: function tab_ExportPdfDialog$get__orientation$3() {
        return this.dom.orientationBtns.find('.selected').val();
    },
    set__orientation$3: function tab_ExportPdfDialog$set__orientation$3(value) {
        var orientation = (value === 'printer') ? 'portrait' : value;
        var buttons = this.dom.orientationBtns;
        var selectButton = function(index, element) {
            var button = $(element);
            if (button.attr('value') === orientation) {
                button.addClass('selected');
            }
            else {
                button.removeClass('selected');
            }
        };
        buttons.each(selectButton);
        return value;
    },
    
    get__imageHeight$3: function tab_ExportPdfDialog$get__imageHeight$3() {
        return (this._exportFileFormat$3 === 'png') ? parseInt(this.dom.imageHeightBtn.val()) : 0;
    },
    set__imageHeight$3: function tab_ExportPdfDialog$set__imageHeight$3(value) {
        if (this._exportFileFormat$3 === 'png') {
            this.dom.imageHeightBtn.val(value);
        }
        return value;
    },
    
    get__imageWidth$3: function tab_ExportPdfDialog$get__imageWidth$3() {
        return (this._exportFileFormat$3 === 'png') ? parseInt(this.dom.imageWidthBtn.val()) : 0;
    },
    set__imageWidth$3: function tab_ExportPdfDialog$set__imageWidth$3(value) {
        if (this._exportFileFormat$3 === 'png') {
            this.dom.imageHeightBtn.val(value);
        }
        return value;
    },
    
    get__pageSize$3: function tab_ExportPdfDialog$get__pageSize$3() {
        return (this._exportFileFormat$3 === 'png') ? 'letter' : this.dom.sizeControl.val();
    },
    set__pageSize$3: function tab_ExportPdfDialog$set__pageSize$3(value) {
        if (this._exportFileFormat$3 === 'pdf') {
            this.dom.sizeControl.val(value);
        }
        return value;
    },
    
    get__statusMessage$3: function tab_ExportPdfDialog$get__statusMessage$3() {
        return this.dom.statusMsg.text();
    },
    set__statusMessage$3: function tab_ExportPdfDialog$set__statusMessage$3(value) {
        this.dom.statusMsg.text(value);
        return value;
    },
    
    get__model$3: function tab_ExportPdfDialog$get__model$3() {
        return this._model$3;
    },
    set__model$3: function tab_ExportPdfDialog$set__model$3(value) {
        this._model$3 = value;
        this.initFromModel();
        return value;
    },
    
    get__currentSheet$3: function tab_ExportPdfDialog$get__currentSheet$3() {
        return this._currentSheet$3.get_presModel();
    },
    
    get__isUIDisabled$3: function tab_ExportPdfDialog$get__isUIDisabled$3() {
        return this._isUIDisabled$3;
    },
    set__isUIDisabled$3: function tab_ExportPdfDialog$set__isUIDisabled$3(value) {
        this._isUIDisabled$3 = value;
        if (value) {
            this.get_body().find('select, input, button').attr('disabled', 'disabled');
            this._exportButton$3.set_disabled(true);
        }
        else {
            this.get_body().find('select, input, button').removeAttr('disabled');
            this._exportButton$3.set_disabled(false);
        }
        return value;
    },
    
    initialize: function tab_ExportPdfDialog$initialize() {
        this.initEventHandlers();
    },
    
    dispose: function tab_ExportPdfDialog$dispose() {
        this.get_body().undelegate('button', 'click').undelegate('select', 'change').undelegate('input', 'change');
        this._cancelButton$3.dispose();
        this._exportButton$3.dispose();
        this.dom.dispose();
        tab.ExportPdfDialog.callBaseMethod(this, 'dispose');
    },
    
    show: function tab_ExportPdfDialog$show() {
        if (ss.isNullOrUndefined(this.get__model$3())) {
            this._getModel$3();
        }
        this.initialize();
        tab.ExportPdfDialog.callBaseMethod(this, 'show');
    },
    
    _setEnabledStatesForSelectedSheets: function tab_ExportPdfDialog$_setEnabledStatesForSelectedSheets() {
        if (this.get_body().find('.tab-pdfdlg-thumbnail-button').hasClass('selected')) {
            this._exportButton$3.set_disabled(false);
            this.set__statusMessage$3(null);
            this._hideStatusMessageAndSpinner$3();
        }
        else {
            this._exportButton$3.set_disabled(true);
            this.set__statusMessage$3(tab.Strings.PrintPdfDialogContentRequired);
            this._showStatusMessageAndSpinner$3();
            this.dom.spinner.hide();
        }
    },
    
    initEventHandlers: function tab_ExportPdfDialog$initEventHandlers() {
        this.get_body().find('select').change(ss.Delegate.create(this, this.updateSelection)).end().find('.tab-pdfdlg-group-orientation button').click(ss.Delegate.create(this, this.updateOrientation)).end().find('.png-only input').change(ss.Delegate.create(this, this.updateImageDimension)).end().find('.tab-pdfdlg-dashboard-content-mode button').click(ss.Delegate.create(this, this.handleContentModeSwitch)).end().find('.tab-pdfdlg-worksheet-content-mode button').click(ss.Delegate.create(this, this.handleContentModeSwitch)).end().find('.tab-pdfdlg-story-content-mode button').click(ss.Delegate.create(this, this.handleContentModeSwitch)).end();
    },
    
    appendOptionToSelect: function tab_ExportPdfDialog$appendOptionToSelect(label, value, select) {
        var html = String.localeFormat("<option value='{0}'>{1}</option>", tableau.format.escapeHTML(value), tableau.format.escapeHTML(label));
        select.append($(html));
    },
    
    appendEnumToSelect: function tab_ExportPdfDialog$appendEnumToSelect(label, value, select) {
        this.appendOptionToSelect(label, value, select);
    },
    
    initFromModel: function tab_ExportPdfDialog$initFromModel() {
        this._populatePageSizeSelect$3();
        this._populateScalingSelect$3();
        this._populateSheetList$3();
        this._setContentMode$3(this.get__currentSheet$3());
        var contentSwitchType = 'this-sheet';
        if (this.get__currentSheet$3().isDashboard && !this.get__currentSheet$3().isStory) {
            contentSwitchType = 'dashboard';
        }
        this._updateContentMode$3(contentSwitchType);
    },
    
    onCancel: function tab_ExportPdfDialog$onCancel() {
        this.close();
    },
    
    onExport: function tab_ExportPdfDialog$onExport() {
        this._submitModel$3();
    },
    
    updateScalingSelectFromSheet: function tab_ExportPdfDialog$updateScalingSelectFromSheet(sheet) {
        var select = this.dom.scalingSelector;
        var value = tab.ExportPdfDialog.scalingValueFromLayoutOptions(sheet.exportLayoutOptions);
        var matchingOptions = select.children(String.format("option[value='{0}']", value));
        if (matchingOptions.length > 0) {
            select.val(value);
        }
        else {
            this.appendOptionToSelect(tab.ExportPdfDialog.scalingLabelFromLayoutOptions(sheet.exportLayoutOptions), value, select);
        }
    },
    
    updateSheetsFromScalingValue: function tab_ExportPdfDialog$updateSheetsFromScalingValue(val) {
        var pctRegex = new RegExp('pct([0-9]{1,3})');
        var fitRegex = new RegExp('fit([0-9]{1,5})x([0-9]{1,5})');
        var matches;
        if (pctRegex.test(val)) {
            matches = pctRegex.exec(val);
            var percent = parseInt(matches[1]);
            var $enum1 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
            while ($enum1.moveNext()) {
                var sheet = $enum1.current;
                sheet.exportLayoutOptions.pageScaleMode = 'percent';
                sheet.exportLayoutOptions.pageScalePercent = percent;
            }
        }
        else if (fitRegex.test(val)) {
            matches = fitRegex.exec(val);
            var fitHorizontal = parseInt(matches[1]);
            var fitVertical = parseInt(matches[2]);
            var $enum2 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
            while ($enum2.moveNext()) {
                var sheet = $enum2.current;
                sheet.exportLayoutOptions.pageScaleMode = 'fit-pages';
                sheet.exportLayoutOptions.pageFitHorizontal = fitHorizontal;
                sheet.exportLayoutOptions.pageFitVertical = fitVertical;
            }
        }
        else {
            var $enum3 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
            while ($enum3.moveNext()) {
                var sheet = $enum3.current;
                sheet.exportLayoutOptions.pageScaleMode = 'auto';
            }
        }
    },
    
    updateImageDimension: function tab_ExportPdfDialog$updateImageDimension(evt) {
        var ct = $(evt.currentTarget);
        var value = ct.attr('value');
        var workbookLayout = this._model$3.exportLayoutOptions;
        switch (ct.attr('name')) {
            case 'imageHeight':
                var imageHeight = parseInt(value);
                workbookLayout.imageHeight = imageHeight;
                var $enum1 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
                while ($enum1.moveNext()) {
                    var sheet = $enum1.current;
                    sheet.exportLayoutOptions.imageHeight = imageHeight;
                }
                break;
            case 'imageWidth':
                var imageWidth = parseInt(value);
                workbookLayout.imageWidth = imageWidth;
                var $enum2 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
                while ($enum2.moveNext()) {
                    var sheet = $enum2.current;
                    sheet.exportLayoutOptions.imageWidth = imageWidth;
                }
                break;
        }
    },
    
    updateSelection: function tab_ExportPdfDialog$updateSelection(evt) {
        var ct = $(evt.currentTarget);
        var value = ct.attr('value');
        switch (ct.attr('name')) {
            case 'scaling':
                this.updateSheetsFromScalingValue(value);
                break;
            case 'pageSize':
                var pageSize = value;
                this._model$3.exportLayoutOptions.pageSizeOption = pageSize;
                var $enum1 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
                while ($enum1.moveNext()) {
                    var sheet = $enum1.current;
                    sheet.exportLayoutOptions.pageSizeOption = pageSize;
                }
                break;
        }
    },
    
    handleContentModeSwitch: function tab_ExportPdfDialog$handleContentModeSwitch(evt) {
        var ct = $(evt.currentTarget);
        ct.siblings().removeClass('selected').end().addClass('selected');
        switch (ct.attr('name')) {
            case 'dashboard-content':
            case 'worksheet-content':
            case 'story-content':
                this._updateContentMode$3(ct.attr('value'));
                break;
        }
    },
    
    updateOrientation: function tab_ExportPdfDialog$updateOrientation(evt) {
        var orientation = evt.currentTarget.getAttribute('value');
        this._model$3.exportLayoutOptions.pageOrientationOption = orientation;
        var $enum1 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
        while ($enum1.moveNext()) {
            var sheet = $enum1.current;
            sheet.exportLayoutOptions.pageOrientationOption = orientation;
        }
        this.set__orientation$3(orientation);
    },
    
    showThumbList: function tab_ExportPdfDialog$showThumbList() {
        this.dom.thumbListWrapper.show();
        this.dom.thumbList.show();
    },
    
    hideThumbList: function tab_ExportPdfDialog$hideThumbList() {
        this.dom.thumbListWrapper.hide();
        this.dom.thumbList.hide();
    },
    
    setSingleSheetSelected: function tab_ExportPdfDialog$setSingleSheetSelected() {
        var currentSheetPM = this.get__currentSheet$3();
        var $enum1 = ss.IEnumerator.getEnumerator(this.thumbnails);
        while ($enum1.moveNext()) {
            var thumbnail = $enum1.current;
            thumbnail.selectAndShow(thumbnail.get_presModel() === currentSheetPM);
        }
    },
    
    _requestDownloadPDF$3: function tab_ExportPdfDialog$_requestDownloadPDF$3() {
        var c = {};
        c.commandNamespace = 'tabsrv';
        c.commandName = 'pdf-export-server';
        var cmdParams = {};
        cmdParams['pdfExport'] = this._model$3;
        c.commandParams = cmdParams;
        var successCallback = ss.Delegate.create(this, function(pm) {
            this.set__isUIDisabled$3(false);
            this._hideStatusMessageAndSpinner$3();
            if (this.get_isShown()) {
                var result = pm;
                var dialogData = tableau.types.ExportDialogType['PrintPDF'];
                var url = this._session$3.formatSessionTempfileReference(result.tempfileKey, true, true);
                this._session$3.openDownload(url, dialogData);
                this.close();
            }
        });
        var errorCallback = ss.Delegate.create(this, function(x) {
            this._reportExportError$3();
        });
        tab.ServerCommands.executeServerCommand(c, 'immediately', successCallback, errorCallback);
    },
    
    _requestDownloadsPNG$3: function tab_ExportPdfDialog$_requestDownloadsPNG$3() {
        var sheetNames = tsConfig.visible_sheets;
        var options = { pdfExport: this._model$3 };
        var urlsByName = {};
        var dialogData = tableau.types.ExportDialogType['ExportImage'];
        var $enum1 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
        while ($enum1.moveNext()) {
            var sheetOptions = $enum1.current;
            if (sheetOptions.isSelected) {
                var sheetLayout = sheetOptions.exportLayoutOptions;
                var matchingIndex = sheetNames.indexOf(sheetOptions.sheet);
                if (matchingIndex >= 0) {
                    var urlPNG = '';
                    urlPNG = this.session.formatExportURL('image/png', {});
                    var height = sheetLayout.imageHeight;
                    var width = sheetLayout.imageWidth;
                    urlPNG += String.format('?:dimensions={0},{1}', height, width);
                    urlsByName[sheetOptions.sheet] = urlPNG;
                }
            }
        }
        var onSuccess = ss.Delegate.create(this, function(response, textStatus, xhr) {
            this._session$3.showDownloads(urlsByName, dialogData);
            this.close();
        });
        var onError = ss.Delegate.create(this, function(xhr, textStatus, error) {
            this._reportExportError$3();
        });
        var ns = 'tabsrv';
        var command = 'pdf-export-options';
        this._session$3.sendSessionCommand(ns, command, options, onSuccess, onError);
    },
    
    _requestDownload$3: function tab_ExportPdfDialog$_requestDownload$3() {
        switch (this._exportFileFormat$3) {
            case 'png':
                this._requestDownloadsPNG$3();
                break;
            case 'pdf':
                this._requestDownloadPDF$3();
                break;
            default:
                break;
        }
    },
    
    _reportExportError$3: function tab_ExportPdfDialog$_reportExportError$3() {
        this._showStatusMessageAndSpinner$3();
        this.set__isUIDisabled$3(false);
        switch (this._exportFileFormat$3) {
            case 'png':
                this.set__statusMessage$3(tab.Strings.PdfExportMessageErrorPng);
                break;
            case 'pdf':
            default:
                this.set__statusMessage$3(tab.Strings.PdfExportMessageError);
                break;
        }
        this.dom.spinner.hide();
        this.dom.statusMsg.show();
    },
    
    _submitModel$3: function tab_ExportPdfDialog$_submitModel$3() {
        this.set__isUIDisabled$3(true);
        this.set__statusMessage$3(tab.Strings.PdfExportMessageExporting);
        this._showStatusMessageAndSpinner$3();
        this._requestDownload$3();
    },
    
    _getModel$3: function tab_ExportPdfDialog$_getModel$3() {
        var c = {};
        c.commandNamespace = 'tabsrv';
        c.commandName = 'pdf-export-options';
        this.set__statusMessage$3(tab.Strings.PdfExportMessageSettings);
        this.set__isUIDisabled$3(true);
        this._showStatusMessageAndSpinner$3();
        var onSuccess = ss.Delegate.create(this, function(data, textStatus, xhr) {
            if (xhr.status !== 200) {
                return;
            }
            this.set__model$3(tab.PresentationModel.fromCommand(data, c));
            this._hideStatusMessageAndSpinner$3();
            this.set__isUIDisabled$3(false);
        });
        var onError = ss.Delegate.create(this, function(xhr, textStatus, error) {
            this.set__statusMessage$3(tab.Strings.PdfExportMessageSettingsError);
        });
        this._session$3.sendSessionCommand(c.commandNamespace, c.commandName, {}, onSuccess, onError);
    },
    
    _showStatusMessageAndSpinner$3: function tab_ExportPdfDialog$_showStatusMessageAndSpinner$3() {
        this.dom.spinner.show();
        this.dom.status.show();
    },
    
    _hideStatusMessageAndSpinner$3: function tab_ExportPdfDialog$_hideStatusMessageAndSpinner$3() {
        this.dom.status.hide(250);
    },
    
    _populateSheetList$3: function tab_ExportPdfDialog$_populateSheetList$3() {
        var sheetUrls = tsConfig.repository_urls;
        var sheetNames = tsConfig.visible_sheets;
        this.thumbnails.clear();
        var $enum1 = ss.IEnumerator.getEnumerator(this._model$3.sheetOptions);
        while ($enum1.moveNext()) {
            var sheet = $enum1.current;
            var sheetName = sheet.sheet;
            if (ss.isNullOrUndefined(sheet.baseViewThumbLink) || !(sheet.baseViewThumbLink).length) {
                if (tab.ExportPdfDialog.canSelectSheet(sheet)) {
                    var matchingIndex = sheetNames.indexOf(sheetName);
                    if (matchingIndex >= 0) {
                        var urlKey = sheetUrls[matchingIndex];
                        sheet.baseViewThumbLink = this._session$3.formatThumbnailReference(urlKey);
                    }
                }
            }
            var newSheetButton = new tab.SheetThumbnailTemplate($(tab.SheetThumbnailTemplate.template));
            newSheetButton.pdfDialog = this;
            newSheetButton.label.text(sheetName);
            if (tab.ExportPdfDialog.canSelectSheet(sheet)) {
                newSheetButton.icon.attr('style', String.format('background: url({0}) 0 0;', sheet.baseViewThumbLink));
            }
            else {
                newSheetButton.get_domRoot().addClass('hidden');
                newSheetButton.icon.addClass('tab-pdfdlg-worksheet-icon');
            }
            this.dom.thumbList.append(newSheetButton.get_domRoot());
            if (sheetName === this._model$3.currentSheet) {
                this._currentSheet$3 = newSheetButton;
                var sheetLayout = sheet.exportLayoutOptions;
                this.set__pageSize$3(sheetLayout.pageSizeOption);
                this.set__orientation$3(sheetLayout.pageOrientationOption);
                this.updateScalingSelectFromSheet(sheet);
                this.set__imageHeight$3(sheetLayout.imageHeight);
                this.set__imageWidth$3(sheetLayout.imageWidth);
            }
            newSheetButton.get_domRoot().data('PDFSheet', sheet);
            this.thumbnails.add(newSheetButton);
        }
    },
    
    _populateScalingSelect$3: function tab_ExportPdfDialog$_populateScalingSelect$3() {
        var select = this.dom.scalingSelector;
        if (select.length > 0) {
            select.empty();
            this.appendEnumToSelect(tab.Strings.PdfExportPageScaleAuto, 'auto', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(25), 'pct25', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(50), 'pct50', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(60), 'pct60', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(75), 'pct75', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(80), 'pct80', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(90), 'pct90', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(100), 'pct100', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(200), 'pct200', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageScalePercent(400), 'pct400', select);
            this.appendOptionToSelect(tab.Strings.PdfExportFitOneHigh, 'fit0x1', select);
            this.appendOptionToSelect(tab.Strings.PdfExportFitTwoHigh, 'fit0x2', select);
            this.appendOptionToSelect(tab.Strings.PdfExportFitOneWide, 'fit1x0', select);
            this.appendOptionToSelect(tab.Strings.PdfExportFitTwoWide, 'fit2x0', select);
        }
    },
    
    _populatePageSizeSelect$3: function tab_ExportPdfDialog$_populatePageSizeSelect$3() {
        var select = this.dom.sizeSelector;
        if (select.length > 0) {
            select.empty();
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeLetter, 'letter', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeLegal, 'legal', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeNote, 'note', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeFolio, 'folio', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeTabloid, 'tabloid', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeLedger, 'ledger', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeStatement, 'statement', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeExecutive, 'executive', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeA3, 'a3', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeA4, 'a4', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeA5, 'a5', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeB4, 'b4', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeB5, 'b5', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeQuarto, 'quarto', select);
            this.appendEnumToSelect(tab.Strings.PdfExportPageSizeUnspecified, 'unspecified', select);
        }
    },
    
    _updateContentMode$3: function tab_ExportPdfDialog$_updateContentMode$3(value) {
        this._resetContentState$3();
        switch (value) {
            case 'dashboard':
            case 'this-sheet':
                this.setSingleSheetSelected();
                break;
            case 'all':
                this._setSelectContentFromWorkbook$3();
                this.showThumbList();
                break;
            case 'all-dashboard':
                this._setSelectContentFromDashboard$3();
                this.showThumbList();
                break;
        }
        this._setEnabledStatesForSelectedSheets();
    },
    
    _setContentMode$3: function tab_ExportPdfDialog$_setContentMode$3(sheet) {
        var mode;
        if (sheet.isStory) {
            mode = 'story';
        }
        else if (sheet.isDashboard) {
            mode = 'dashboard';
        }
        else {
            mode = 'worksheet';
        }
        this.get_body().find('.tab-pdfdlg-' + mode + '-content-mode').show().css('visibility', 'visible').siblings().hide();
    },
    
    _resetContentState$3: function tab_ExportPdfDialog$_resetContentState$3() {
        var $enum1 = ss.IEnumerator.getEnumerator(this.thumbnails);
        while ($enum1.moveNext()) {
            var thumbnail = $enum1.current;
            thumbnail.selectAndShow(false);
        }
    },
    
    _setSelectContentFromWorkbook$3: function tab_ExportPdfDialog$_setSelectContentFromWorkbook$3() {
        var $enum1 = ss.IEnumerator.getEnumerator(this.thumbnails);
        while ($enum1.moveNext()) {
            var thumbnail = $enum1.current;
            thumbnail.selectAndShow(tab.ExportPdfDialog.canSelectSheet(thumbnail.get_presModel()));
        }
    },
    
    _setSelectContentFromDashboard$3: function tab_ExportPdfDialog$_setSelectContentFromDashboard$3() {
        var sheetNames = this.get__currentSheet$3().namesOfSubsheets;
        var $enum1 = ss.IEnumerator.getEnumerator(this.thumbnails);
        while ($enum1.moveNext()) {
            var thumbnail = $enum1.current;
            var isInDashboard = sheetNames.contains(thumbnail.get_presModel().sheet);
            thumbnail.selectAndShow(isInDashboard);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SheetThumbnailTemplate

tab.SheetThumbnailTemplate = function tab_SheetThumbnailTemplate(root) {
    tab.SheetThumbnailTemplate.initializeBase(this, [ root ]);
    this.button = this.getElementBySelector('.tab-pdfdlg-thumbnail-button');
    this.icon = this.getElementBySelector('.tab-pdfdlg-button-icon');
    this.label = this.getElementBySelector('.tab-pdfdlg-note');
    this.initEventHandlers();
}
tab.SheetThumbnailTemplate.prototype = {
    button: null,
    icon: null,
    label: null,
    pdfDialog: null,
    
    get_presModel: function tab_SheetThumbnailTemplate$get_presModel() {
        return this.get_domRoot().data('PDFSheet');
    },
    set_presModel: function tab_SheetThumbnailTemplate$set_presModel(value) {
        this.get_domRoot().data('PDFSheet', value);
        return value;
    },
    
    get_isSelected: function tab_SheetThumbnailTemplate$get_isSelected() {
        return this.button.hasClass('selected');
    },
    set_isSelected: function tab_SheetThumbnailTemplate$set_isSelected(value) {
        if (value) {
            this.button.addClass('selected');
        }
        else {
            this.button.removeClass('selected');
        }
        this.get_presModel().isSelected = value;
        return value;
    },
    
    get_isVisible: function tab_SheetThumbnailTemplate$get_isVisible() {
        return this.get_domRoot().is(':visible');
    },
    set_isVisible: function tab_SheetThumbnailTemplate$set_isVisible(value) {
        if (value) {
            this.get_domRoot().show();
        }
        else {
            this.get_domRoot().hide();
        }
        return value;
    },
    
    selectAndShow: function tab_SheetThumbnailTemplate$selectAndShow(toShow) {
        this.set_isSelected(toShow);
        this.set_isVisible(toShow);
    },
    
    initEventHandlers: function tab_SheetThumbnailTemplate$initEventHandlers() {
        spiff.ClickHandler.targetAndClick(this.button, ss.Delegate.create(this, this.handleSheetToggled));
    },
    
    handleSheetToggled: function tab_SheetThumbnailTemplate$handleSheetToggled(e) {
        if (!this.button.is(':disabled')) {
            this.set_isSelected(!this.get_isSelected());
        }
        if (ss.isValue(this.pdfDialog)) {
            this.pdfDialog._setEnabledStatesForSelectedSheets();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ExportPdfDialogTemplate

tab.ExportPdfDialogTemplate = function tab_ExportPdfDialogTemplate(root) {
    tab.ExportPdfDialogTemplate.initializeBase(this, [ root ]);
    this.orientationBtns = this.getElementsBySelector("button[name='orientation']");
    this.scalingSelector = this.getElementBySelector('#pdfdlgScaling');
    this.sizeSelector = this.getElementBySelector('#pdfdlgPageSize');
    this.imageHeightBtn = this.getElementBySelector("[name='imageHeight']");
    this.imageWidthBtn = this.getElementBySelector("[name='imageWidth']");
    this.sizeControl = this.getElementBySelector("[name='pageSize']");
    this.status = this.getElementBySelector('.tab-pdfdlg-status');
    this.statusMsg = this.getElementBySelector('.tab-dialog-status-msg');
    this.spinner = this.getElementBySelector('.tab-pdfdlg-spinner');
    this.thumbListWrapper = this.getElementBySelector('.tab-pdfdlg-sheets-container');
    this.thumbList = this.getElementBySelector('.tab-pdfdlg-sheet-list');
    this.buttons = this.getElementBySelector('.tab-dialog-actions');
}
tab.ExportPdfDialogTemplate.prototype = {
    orientationBtns: null,
    scalingSelector: null,
    sizeSelector: null,
    imageHeightBtn: null,
    imageWidthBtn: null,
    sizeControl: null,
    spinner: null,
    status: null,
    statusMsg: null,
    thumbListWrapper: null,
    thumbList: null,
    buttons: null,
    
    thumbs: function tab_ExportPdfDialogTemplate$thumbs() {
        return this.thumbList.find('li');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.VizEvent

tab.VizEvent = function tab_VizEvent() {
}
tab.VizEvent.add_mobileVizExpandTransform = function tab_VizEvent$add_mobileVizExpandTransform(value) {
    tab.VizEvent.__mobileVizExpandTransform = ss.Delegate.combine(tab.VizEvent.__mobileVizExpandTransform, value);
}
tab.VizEvent.remove_mobileVizExpandTransform = function tab_VizEvent$remove_mobileVizExpandTransform(value) {
    tab.VizEvent.__mobileVizExpandTransform = ss.Delegate.remove(tab.VizEvent.__mobileVizExpandTransform, value);
}
tab.VizEvent.add_mobileVizReduceTransform = function tab_VizEvent$add_mobileVizReduceTransform(value) {
    tab.VizEvent.__mobileVizReduceTransform = ss.Delegate.combine(tab.VizEvent.__mobileVizReduceTransform, value);
}
tab.VizEvent.remove_mobileVizReduceTransform = function tab_VizEvent$remove_mobileVizReduceTransform(value) {
    tab.VizEvent.__mobileVizReduceTransform = ss.Delegate.remove(tab.VizEvent.__mobileVizReduceTransform, value);
}
tab.VizEvent.notifyMobileVizExpandTransform = function tab_VizEvent$notifyMobileVizExpandTransform() {
    if (ss.isValue(tab.VizEvent.__mobileVizExpandTransform)) {
        tab.VizEvent.__mobileVizExpandTransform();
    }
}
tab.VizEvent.notifyMobileVizReduceTransform = function tab_VizEvent$notifyMobileVizReduceTransform() {
    if (ss.isValue(tab.VizEvent.__mobileVizReduceTransform)) {
        tab.VizEvent.__mobileVizReduceTransform();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.MarksRenderer

tab.MarksRenderer = function tab_MarksRenderer(canvas, context) {
    tab.MarksRenderer.initializeBase(this, [ canvas, context ]);
}
tab.MarksRenderer._getMultipolygonBoundingBox = function tab_MarksRenderer$_getMultipolygonBoundingBox(paneDrawInfo, markIndex) {
    return tab.CanvasRenderer.bBoxMultipolygon(paneDrawInfo.hasPixelGeometry, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('size', markIndex), 7, paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex)));
}
tab.MarksRenderer._multipolygonMarkExactHitTest = function tab_MarksRenderer$_multipolygonMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    var p;
    var mx = paneDrawInfo.getMarkProperty('x', markIndex);
    var my = paneDrawInfo.getMarkProperty('y', markIndex);
    var multipolygon = paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex));
    if (ss.isNullOrUndefined(multipolygon)) {
        p = tab.$create_PointF(x, y);
        var center = tab.$create_PointF(mx, my);
        return tab.GeometryUtil.isPointInCircle(p, tab.$create_Circle(center, 7 / 2));
    }
    if (!paneDrawInfo.hasPixelGeometry) {
        var scale = paneDrawInfo.getMarkProperty('size', markIndex);
        if (!!scale) {
            x = (x - mx) / scale;
            y = (y - my) / scale;
        }
    }
    p = tab.$create_PointF(x, y);
    return tab.GeometryUtil.isPointInMultipolygon(multipolygon, p);
}
tab.MarksRenderer._multipolygonMarkRectangleAreaHitTest = function tab_MarksRenderer$_multipolygonMarkRectangleAreaHitTest(paneDrawInfo, selection, markIndex) {
    var multipolygon = paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex));
    if (ss.isNull(multipolygon)) {
        return true;
    }
    return tab.GeometryUtil.multipolygonIntersectsDoubleRect(multipolygon, selection);
}
tab.MarksRenderer._multipolygonMarkPolygonAreaHitTest = function tab_MarksRenderer$_multipolygonMarkPolygonAreaHitTest(paneDrawInfo, selectionPointsInclWorldOffset, markIndex) {
    var multipolygon = paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex));
    if (ss.isNull(multipolygon)) {
        return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, tab.MarksRenderer._getMultipolygonBoundingBox(paneDrawInfo, markIndex));
    }
    return tab.GeometryUtil.multipolygonIntersectsPolygon(multipolygon, selectionPointsInclWorldOffset);
}
tab.MarksRenderer._multipolygonMarkCircleAreaHitTest = function tab_MarksRenderer$_multipolygonMarkCircleAreaHitTest(paneDrawInfo, circle, markIndex) {
    var multipolygon = paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex));
    if (ss.isNull(multipolygon)) {
        return tab.GeometryUtil.circleIntersectsRect(circle, tab.MarksRenderer._getMultipolygonBoundingBox(paneDrawInfo, markIndex));
    }
    return tab.GeometryUtil.multipolygonIntersectsCircle(multipolygon, circle);
}
tab.MarksRenderer._areaMarkBuildMarkBound = function tab_MarksRenderer$_areaMarkBuildMarkBound(paneDrawInfo, markIndex) {
    var left = paneDrawInfo.getLeft(markIndex);
    var right = paneDrawInfo.getRight(markIndex);
    var bounds = tab.$create_RectXY(0, 0, 0, 0);
    if (left !== -1) {
        var rect1 = tab.RectXYUtil.rectXYFromCorners(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), tab.$create_PointF((paneDrawInfo.getMarkProperty('x_next', left) + paneDrawInfo.getMarkProperty('x_prev', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y_next', left) + paneDrawInfo.getMarkProperty('y_prev', markIndex)) / 2));
        bounds = tab.RectXYUtil.union(bounds, rect1);
        var rect2 = tab.RectXYUtil.rectXYFromCorners(tab.$create_PointF((paneDrawInfo.getMarkProperty('x1', left) + paneDrawInfo.getMarkProperty('x1', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y1', left) + paneDrawInfo.getMarkProperty('y1', markIndex)) / 2), tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)));
        bounds = tab.RectXYUtil.union(bounds, rect2);
        bounds = tab.RectXYUtil.outsetRect(bounds, 10, 10);
    }
    if (right !== -1) {
        var rect1 = tab.RectXYUtil.rectXYFromCorners(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), tab.$create_PointF((paneDrawInfo.getMarkProperty('x_prev', right) + paneDrawInfo.getMarkProperty('x_next', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y_prev', right) + paneDrawInfo.getMarkProperty('y_next', markIndex)) / 2));
        bounds = tab.RectXYUtil.union(bounds, rect1);
        var rect2 = tab.RectXYUtil.rectXYFromCorners(tab.$create_PointF((paneDrawInfo.getMarkProperty('x1', right) + paneDrawInfo.getMarkProperty('x1', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y1', right) + paneDrawInfo.getMarkProperty('y1', markIndex)) / 2), tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)));
        bounds = tab.RectXYUtil.union(bounds, rect2);
        bounds = tab.RectXYUtil.outsetRect(bounds, 10, 10);
    }
    if (left === -1 && right === -1) {
        var rect1 = tab.RectXYUtil.rectXYFromCorners(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)));
        bounds = tab.RectXYUtil.union(bounds, rect1);
    }
    if (left === -1 && right === -1) {
        var rect1 = tab.RectXYUtil.rectXYFromCorners(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)));
        bounds = tab.RectXYUtil.union(bounds, rect1);
    }
    bounds = tab.RectXYUtil.encompassCircle(bounds, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (5 + 20) / 2));
    return bounds;
}
tab.MarksRenderer._areaMarkExactHitTest = function tab_MarksRenderer$_areaMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    var left = paneDrawInfo.getLeft(markIndex);
    var right = paneDrawInfo.getRight(markIndex);
    if (left !== -1) {
        var points = [];
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x1', left) + paneDrawInfo.getMarkProperty('x1', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y1', left) + paneDrawInfo.getMarkProperty('y1', markIndex)) / 2));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x_next', left) + paneDrawInfo.getMarkProperty('x_prev', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y_next', left) + paneDrawInfo.getMarkProperty('y_prev', markIndex)) / 2));
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)));
        if (tab.GeometryUtil.isPointInPoly(points, tab.$create_PointF(x, y), 0)) {
            return true;
        }
    }
    if (right !== -1) {
        var points = [];
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x1', right) + paneDrawInfo.getMarkProperty('x1', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y1', right) + paneDrawInfo.getMarkProperty('y1', markIndex)) / 2));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x_prev', right) + paneDrawInfo.getMarkProperty('x_next', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y_prev', right) + paneDrawInfo.getMarkProperty('y_next', markIndex)) / 2));
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)));
        if (tab.GeometryUtil.isPointInPoly(points, tab.$create_PointF(x, y), 0)) {
            return true;
        }
    }
    if (left === -1 && right === -1) {
        return true;
    }
    if (left === -1 && right === -1) {
        return true;
    }
    if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (5) / 2))) {
        return true;
    }
    return false;
}
tab.MarksRenderer._areaMarkNearHitTest = function tab_MarksRenderer$_areaMarkNearHitTest(paneDrawInfo, x, y, markIndex) {
    var left = paneDrawInfo.getLeft(markIndex);
    var right = paneDrawInfo.getRight(markIndex);
    if (left !== -1) {
        var points = [];
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x1', left) + paneDrawInfo.getMarkProperty('x1', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y1', left) + paneDrawInfo.getMarkProperty('y1', markIndex)) / 2));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x_next', left) + paneDrawInfo.getMarkProperty('x_prev', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y_next', left) + paneDrawInfo.getMarkProperty('y_prev', markIndex)) / 2));
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)));
        if (tab.GeometryUtil.isPointInPoly(points, tab.$create_PointF(x, y), 10)) {
            return true;
        }
    }
    if (right !== -1) {
        var points = [];
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x1', right) + paneDrawInfo.getMarkProperty('x1', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y1', right) + paneDrawInfo.getMarkProperty('y1', markIndex)) / 2));
        points.add(tab.$create_PointF((paneDrawInfo.getMarkProperty('x_prev', right) + paneDrawInfo.getMarkProperty('x_next', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y_prev', right) + paneDrawInfo.getMarkProperty('y_next', markIndex)) / 2));
        points.add(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)));
        if (tab.GeometryUtil.isPointInPoly(points, tab.$create_PointF(x, y), 10)) {
            return true;
        }
    }
    if (left === -1 && right === -1) {
        return true;
    }
    if (left === -1 && right === -1) {
        return true;
    }
    if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (5 + 20) / 2))) {
        return true;
    }
    return false;
}
tab.MarksRenderer._areaMarkGetHitTestExpansion = function tab_MarksRenderer$_areaMarkGetHitTestExpansion(paneDrawInfo, markIndex) {
    return tab.$create_SizeF(0, 0);
}
tab.MarksRenderer._areaMarkGetDistanceToMark = function tab_MarksRenderer$_areaMarkGetDistanceToMark(paneDrawInfo, x, y, markIndex) {
    var markBound = paneDrawInfo.getMarkBounds(markIndex);
    return tab.GeometryUtil.getSquaredDistanceToLineSegment(markBound, tab.$create_PointF(x, y));
}
tab.MarksRenderer._areaMarkRectangleAreaHitTest = function tab_MarksRenderer$_areaMarkRectangleAreaHitTest(paneDrawInfo, selection, markIndex) {
    return tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (2) / 2), selection) || tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)), (2) / 2), selection) || tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (2) / 2), selection) || tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)), (2) / 2), selection);
}
tab.MarksRenderer._areaMarkPolygonAreaHitTest = function tab_MarksRenderer$_areaMarkPolygonAreaHitTest(paneDrawInfo, selectionPointsInclWorldOffset, markIndex) {
    return tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (2) / 2)) || tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)), (2) / 2)) || tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (2) / 2)) || tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)), (2) / 2));
}
tab.MarksRenderer._areaMarkCircleAreaHitTest = function tab_MarksRenderer$_areaMarkCircleAreaHitTest(paneDrawInfo, circle, markIndex) {
    return tab.GeometryUtil.circleIntersectsCircle(circle, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (2) / 2)) || tab.GeometryUtil.circleIntersectsCircle(circle, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_next', markIndex), paneDrawInfo.getMarkProperty('y_next', markIndex)), (2) / 2)) || tab.GeometryUtil.circleIntersectsCircle(circle, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x1', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex)), (2) / 2)) || tab.GeometryUtil.circleIntersectsCircle(circle, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x_prev', markIndex), paneDrawInfo.getMarkProperty('y_prev', markIndex)), (2) / 2));
}
tab.MarksRenderer._getMarkLabelBoundingBox = function tab_MarksRenderer$_getMarkLabelBoundingBox(paneDrawInfo, markIndex) {
    var bbox = tab.$create_RectXY(0, 0, 0, 0);
    var x = paneDrawInfo.getMarkLabelProperty('x', markIndex);
    var y = paneDrawInfo.getMarkLabelProperty('y', markIndex);
    var width = paneDrawInfo.getMarkLabelProperty('width', markIndex);
    var height = -paneDrawInfo.getMarkLabelProperty('height', markIndex);
    x += 0;
    y += 0;
    if (height < 0) {
        y += height;
        height = Math.abs(height);
    }
    bbox = tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height));
    return bbox;
}
tab.MarksRenderer._pieMarkExactHitTest = function tab_MarksRenderer$_pieMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    var startangle = paneDrawInfo.getMarkProperty('theta', markIndex);
    var endangle = paneDrawInfo.getMarkProperty('theta1', markIndex);
    if (startangle > endangle) {
        var temp = startangle;
        startangle = endangle;
        endangle = temp;
    }
    var center = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    var wedgeCircle = tab.$create_Circle(center, radius);
    if (endangle - startangle >= 1) {
        return tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), wedgeCircle);
    }
    startangle = tab.CanvasRenderer.toCanvasAngle(startangle);
    endangle = tab.CanvasRenderer.toCanvasAngle(endangle);
    startangle = tab.GeometryUtil.normalizeAngle(startangle);
    endangle = tab.GeometryUtil.normalizeAngle(endangle);
    return tab.GeometryUtil.isPointInWedge(tab.$create_PointF(x, y), wedgeCircle, startangle, endangle);
}
tab.MarksRenderer._pieMarkRectangleAreaHitTest = function tab_MarksRenderer$_pieMarkRectangleAreaHitTest(paneDrawInfo, rect, markIndex) {
    var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    var startangle = paneDrawInfo.getMarkProperty('theta', markIndex);
    var endangle = paneDrawInfo.getMarkProperty('theta1', markIndex);
    if (startangle > endangle) {
        var temp = startangle;
        startangle = endangle;
        endangle = temp;
    }
    var center = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    startangle = tab.CanvasRenderer.toCanvasAngle(startangle);
    endangle = tab.CanvasRenderer.toCanvasAngle(endangle);
    startangle = tab.GeometryUtil.normalizeAngle(startangle);
    endangle = tab.GeometryUtil.normalizeAngle(endangle);
    return tab.GeometryUtil.rectIntersectsWedge(rect, tab.$create_Circle(center, radius), startangle, endangle);
}
tab.MarksRenderer._pieMarkPolygonAreaHitTest = function tab_MarksRenderer$_pieMarkPolygonAreaHitTest(paneDrawInfo, selectionPointsInclWorldOffset, markIndex) {
    var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    var startangle = paneDrawInfo.getMarkProperty('theta', markIndex);
    var endangle = paneDrawInfo.getMarkProperty('theta1', markIndex);
    if (startangle > endangle) {
        var temp = startangle;
        startangle = endangle;
        endangle = temp;
    }
    var center = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    startangle = tab.CanvasRenderer.toCanvasAngle(startangle);
    endangle = tab.CanvasRenderer.toCanvasAngle(endangle);
    startangle = tab.GeometryUtil.normalizeAngle(startangle);
    endangle = tab.GeometryUtil.normalizeAngle(endangle);
    return tab.GeometryUtil.polygonIntersectsWedge(selectionPointsInclWorldOffset, tab.$create_Circle(center, radius), startangle, endangle);
}
tab.MarksRenderer._pieMarkCircleAreaHitTest = function tab_MarksRenderer$_pieMarkCircleAreaHitTest(paneDrawInfo, circle, markIndex) {
    var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    var startangle = paneDrawInfo.getMarkProperty('theta', markIndex);
    var endangle = paneDrawInfo.getMarkProperty('theta1', markIndex);
    if (startangle > endangle) {
        var temp = startangle;
        startangle = endangle;
        endangle = temp;
    }
    var center = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    startangle = tab.CanvasRenderer.toCanvasAngle(startangle);
    endangle = tab.CanvasRenderer.toCanvasAngle(endangle);
    startangle = tab.GeometryUtil.normalizeAngle(startangle);
    endangle = tab.GeometryUtil.normalizeAngle(endangle);
    return tab.GeometryUtil.circleIntersectsWedge(circle, tab.$create_Circle(center, radius), startangle, endangle);
}
tab.MarksRenderer._getPieBoundingBox = function tab_MarksRenderer$_getPieBoundingBox(paneDrawInfo, markIndex) {
    var bbox = tab.$create_RectXY(0, 0, 0, 0);
    var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    bbox = tab.RectXYUtil.union(bbox, tab.CanvasRenderer.boundWedge(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, paneDrawInfo.getMarkProperty('theta', markIndex), paneDrawInfo.getMarkProperty('theta1', markIndex)));
    if (paneDrawInfo.getMarkProperty('draw_border', markIndex)) {
        bbox = tab.RectXYUtil.union(bbox, tab.CanvasRenderer.boundWedge(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, paneDrawInfo.getMarkProperty('theta', markIndex), paneDrawInfo.getMarkProperty('theta1', markIndex)));
    }
    return bbox;
}
tab.MarksRenderer._getTextMarkBoundingBox = function tab_MarksRenderer$_getTextMarkBoundingBox(paneDrawInfo, markIndex) {
    var bbox = tab.$create_RectXY(0, 0, 0, 0);
    if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
            var x = paneDrawInfo.getMarkProperty('x', markIndex);
            var y = paneDrawInfo.getMarkProperty('y', markIndex);
            var width = paneDrawInfo.getMarkProperty('width', markIndex);
            var height = -paneDrawInfo.getMarkProperty('height', markIndex);
            x += -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
            y += paneDrawInfo.getMarkProperty('height', markIndex) / 2;
            if (height < 0) {
                y += height;
                height = Math.abs(height);
            }
            bbox = tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height));
        }
    }
    if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
            var x = paneDrawInfo.getMarkProperty('x', markIndex);
            var y = paneDrawInfo.getMarkProperty('y', markIndex);
            var width = paneDrawInfo.getMarkProperty('clip_width', markIndex);
            var height = -paneDrawInfo.getMarkProperty('clip_height', markIndex);
            x += -paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
            y += paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
            if (height < 0) {
                y += height;
                height = Math.abs(height);
            }
            bbox = tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height));
        }
    }
    return bbox;
}
tab.MarksRenderer._textMarkExactHitTest = function tab_MarksRenderer$_textMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) + (paneDrawInfo.getMarkProperty('height', markIndex) / 2), paneDrawInfo.getMarkProperty('x', markIndex) + (-paneDrawInfo.getMarkProperty('width', markIndex) / 2), -paneDrawInfo.getMarkProperty('height', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) + (paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2), paneDrawInfo.getMarkProperty('x', markIndex) + (-paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2), -paneDrawInfo.getMarkProperty('clip_height', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    return false;
}
tab.MarksRenderer._textMarkNearHitTest = function tab_MarksRenderer$_textMarkNearHitTest(paneDrawInfo, x, y, markIndex) {
    if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) + (paneDrawInfo.getMarkProperty('height', markIndex) / 2 + 10), paneDrawInfo.getMarkProperty('x', markIndex) + (-paneDrawInfo.getMarkProperty('width', markIndex) / 2 - 10), -paneDrawInfo.getMarkProperty('height', markIndex) - (10 * 2), paneDrawInfo.getMarkProperty('width', markIndex) + (10 * 2), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) + (paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2), paneDrawInfo.getMarkProperty('x', markIndex) + (-paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2), -paneDrawInfo.getMarkProperty('clip_height', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    return false;
}
tab.MarksRenderer._textMarkGetHitTestExpansion = function tab_MarksRenderer$_textMarkGetHitTestExpansion(paneDrawInfo, markIndex) {
    var expansion = tab.$create_SizeF(0, 0);
    if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        expansion = tab.$create_SizeF(10, 10);
    }
    if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        expansion = tab.$create_SizeF(paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2, paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2);
    }
    return expansion;
}
tab.MarksRenderer._textMarkGetDistanceToMark = function tab_MarksRenderer$_textMarkGetDistanceToMark(paneDrawInfo, x, y, markIndex) {
    var markBound = paneDrawInfo.getMarkBounds(markIndex);
    return tab.GeometryUtil.getSquaredDistanceToNearestSide(markBound, tab.$create_PointF(x, y));
}
tab.MarksRenderer._barMarkBuildMarkBound = function tab_MarksRenderer$_barMarkBuildMarkBound(paneDrawInfo, markIndex) {
    var bounds = tab.$create_RectXY(0, 0, 0, 0);
    var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
    if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        var top = Math.min(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex));
        var bottom = Math.max(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex));
        var left = Math.min(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x1', markIndex));
        var right = Math.max(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x1', markIndex));
        var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(top, bottom - top, paneDrawInfo.get_minBarHeight());
        var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(left, right - left, paneDrawInfo.get_minBarWidth());
        var bound = tab.$create_RectXY(parseInt(xAndWidth.first), parseInt(yAndHeight.first), parseInt(xAndWidth.second), parseInt(yAndHeight.second));
        bounds = tab.RectXYUtil.union(bounds, bound);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        var top = Math.min(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex));
        var bottom = Math.max(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex));
        var left = Math.min(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('x', markIndex) + halfSize);
        var right = Math.max(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('x', markIndex) + halfSize);
        var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(top, bottom - top, paneDrawInfo.get_minBarHeight());
        var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(left, right - left, paneDrawInfo.get_minBarWidth());
        var bound = tab.$create_RectXY(parseInt(xAndWidth.first), parseInt(yAndHeight.first), parseInt(xAndWidth.second), parseInt(yAndHeight.second));
        bounds = tab.RectXYUtil.union(bounds, bound);
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        var top = Math.min(paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) + halfSize);
        var bottom = Math.max(paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) + halfSize);
        var left = Math.min(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x1', markIndex));
        var right = Math.max(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x1', markIndex));
        var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(top, bottom - top, paneDrawInfo.get_minBarHeight());
        var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(left, right - left, paneDrawInfo.get_minBarWidth());
        var bound = tab.$create_RectXY(parseInt(xAndWidth.first), parseInt(yAndHeight.first), parseInt(xAndWidth.second), parseInt(yAndHeight.second));
        bounds = tab.RectXYUtil.union(bounds, bound);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        var top = Math.min(paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) + halfSize);
        var bottom = Math.max(paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) + halfSize);
        var left = Math.min(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('x', markIndex) + halfSize);
        var right = Math.max(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('x', markIndex) + halfSize);
        var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(top, bottom - top, paneDrawInfo.get_minBarHeight());
        var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(left, right - left, paneDrawInfo.get_minBarWidth());
        var bound = tab.$create_RectXY(parseInt(xAndWidth.first), parseInt(yAndHeight.first), parseInt(xAndWidth.second), parseInt(yAndHeight.second));
        bounds = tab.RectXYUtil.union(bounds, bound);
    }
    return bounds;
}
tab.MarksRenderer._barMarkExactHitTest = function tab_MarksRenderer$_barMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    var halfWidth = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    var halfHeight = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex) - (paneDrawInfo.getMarkProperty('y', markIndex)), paneDrawInfo.getMarkProperty('x1', markIndex) - (paneDrawInfo.getMarkProperty('x', markIndex)), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth, paneDrawInfo.getMarkProperty('y1', markIndex) - (paneDrawInfo.getMarkProperty('y', markIndex)), paneDrawInfo.getMarkProperty('x', markIndex) + halfWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex) + halfHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight), paneDrawInfo.getMarkProperty('x1', markIndex) - (paneDrawInfo.getMarkProperty('x', markIndex)), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight, paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth, paneDrawInfo.getMarkProperty('y', markIndex) + halfHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight), paneDrawInfo.getMarkProperty('x', markIndex) + halfWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    return false;
}
tab.MarksRenderer._barMarkNearHitTest = function tab_MarksRenderer$_barMarkNearHitTest(paneDrawInfo, x, y, markIndex) {
    var halfCellWidth = paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
    var halfCellHeight = paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
    var halfWidth = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    var halfHeight = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
    if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y1', markIndex) - (paneDrawInfo.getMarkProperty('y', markIndex)), paneDrawInfo.getMarkProperty('x1', markIndex) - (paneDrawInfo.getMarkProperty('x', markIndex)), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth, paneDrawInfo.getMarkProperty('y1', markIndex) - (paneDrawInfo.getMarkProperty('y', markIndex)), paneDrawInfo.getMarkProperty('x', markIndex) + halfWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth), 10, 10, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex) + halfHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight), paneDrawInfo.getMarkProperty('x1', markIndex) - (paneDrawInfo.getMarkProperty('x', markIndex)), 10, 10, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('x', markIndex) - halfCellWidth, paneDrawInfo.getMarkProperty('y1', markIndex) - (paneDrawInfo.getMarkProperty('y', markIndex)), paneDrawInfo.getMarkProperty('x', markIndex) + halfCellWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfCellWidth), 10, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfCellHeight, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex) + halfCellHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfCellHeight), paneDrawInfo.getMarkProperty('x1', markIndex) - (paneDrawInfo.getMarkProperty('x', markIndex)), 0, 10, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight, paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth, paneDrawInfo.getMarkProperty('y', markIndex) + halfHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight), paneDrawInfo.getMarkProperty('x', markIndex) + halfWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth), 10, 10, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight, paneDrawInfo.getMarkProperty('x', markIndex) - halfCellWidth, paneDrawInfo.getMarkProperty('y', markIndex) + halfHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfHeight), paneDrawInfo.getMarkProperty('x', markIndex) + halfCellWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfCellWidth), 10, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfCellHeight, paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth, paneDrawInfo.getMarkProperty('y', markIndex) + halfCellHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfCellHeight), paneDrawInfo.getMarkProperty('x', markIndex) + halfWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfWidth), 0, 10, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_paneHasCellsX() && paneDrawInfo.get_paneHasCellsY()) {
        return tab.CanvasRenderer.isPointInExpandedRectHelperF(paneDrawInfo.getMarkProperty('y', markIndex) - halfCellHeight, paneDrawInfo.getMarkProperty('x', markIndex) - halfCellWidth, paneDrawInfo.getMarkProperty('y', markIndex) + halfCellHeight - (paneDrawInfo.getMarkProperty('y', markIndex) - halfCellHeight), paneDrawInfo.getMarkProperty('x', markIndex) + halfCellWidth - (paneDrawInfo.getMarkProperty('x', markIndex) - halfCellWidth), 0, 0, paneDrawInfo.get_minBarHeight(), paneDrawInfo.get_minBarWidth(), x, y);
    }
    return false;
}
tab.MarksRenderer._barMarkGetHitTestExpansion = function tab_MarksRenderer$_barMarkGetHitTestExpansion(paneDrawInfo, markIndex) {
    var expansion = tab.$create_SizeF(0, 0);
    if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        expansion = tab.$create_SizeF(0, 0);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(10 / 2, 10);
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(10, 10 / 2);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2, 10);
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(10, paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(10 / 2, 10 / 2);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.get_paneHasCellsX() && paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(10 / 2, paneDrawInfo.getMarkProperty('clip_height', markIndex));
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_paneHasCellsX() && !paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2, 10);
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_paneHasCellsX() && paneDrawInfo.get_paneHasCellsY()) {
        expansion = tab.$create_SizeF(paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2, paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2);
    }
    return expansion;
}
tab.MarksRenderer._barMarkGetDistanceToMark = function tab_MarksRenderer$_barMarkGetDistanceToMark(paneDrawInfo, x, y, markIndex) {
    var markBound = paneDrawInfo.getMarkBounds(markIndex);
    return tab.GeometryUtil.getSquaredDistanceToNearestSide(markBound, tab.$create_PointF(x, y));
}
tab.MarksRenderer._lineMarkBuildMarkBound = function tab_MarksRenderer$_lineMarkBuildMarkBound(paneDrawInfo, markIndex) {
    var left = paneDrawInfo.getLeft(markIndex);
    var right = paneDrawInfo.getRight(markIndex);
    var bounds = tab.$create_RectXY(0, 0, 0, 0);
    bounds = tab.RectXYUtil.encompassCircle(bounds, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) + 20) / 2));
    bounds = tab.RectXYUtil.encompassCircle(bounds, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) + 20) / 2));
    if (left !== -1) {
        bounds = tab.CanvasRenderer.boundLineEdge(bounds, (paneDrawInfo.getMarkProperty('x', left) + paneDrawInfo.getMarkProperty('x', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y', left) + paneDrawInfo.getMarkProperty('y', markIndex)) / 2, ((paneDrawInfo.getMarkProperty('width', left) + paneDrawInfo.getMarkProperty('width', markIndex)) / 2) + 20, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 20);
    }
    if (right !== -1) {
        bounds = tab.CanvasRenderer.boundLineEdge(bounds, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 20, (paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('x', right)) / 2, (paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('y', right)) / 2, ((paneDrawInfo.getMarkProperty('width', markIndex) + paneDrawInfo.getMarkProperty('width', right)) / 2) + 20);
    }
    return bounds;
}
tab.MarksRenderer._lineMarkExactHitTest = function tab_MarksRenderer$_lineMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    var left = paneDrawInfo.getLeft(markIndex);
    var right = paneDrawInfo.getRight(markIndex);
    if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex)) / 2))) {
        return true;
    }
    if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex)) / 2))) {
        return true;
    }
    if (left !== -1) {
        if (tab.CanvasRenderer.lineEdgeContains(x, y, (paneDrawInfo.getMarkProperty('x', left) + paneDrawInfo.getMarkProperty('x', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y', left) + paneDrawInfo.getMarkProperty('y', markIndex)) / 2, ((paneDrawInfo.getMarkProperty('width', left) + paneDrawInfo.getMarkProperty('width', markIndex)) / 2), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex))) {
            return true;
        }
    }
    if (right !== -1) {
        if (tab.CanvasRenderer.lineEdgeContains(x, y, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('x', right)) / 2, (paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('y', right)) / 2, ((paneDrawInfo.getMarkProperty('width', markIndex) + paneDrawInfo.getMarkProperty('width', right)) / 2))) {
            return true;
        }
    }
    return false;
}
tab.MarksRenderer._lineMarkNearHitTest = function tab_MarksRenderer$_lineMarkNearHitTest(paneDrawInfo, x, y, markIndex) {
    var left = paneDrawInfo.getLeft(markIndex);
    var right = paneDrawInfo.getRight(markIndex);
    if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) + 20) / 2))) {
        return true;
    }
    if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) + 20) / 2))) {
        return true;
    }
    if (left !== -1) {
        if (tab.CanvasRenderer.lineEdgeContains(x, y, (paneDrawInfo.getMarkProperty('x', left) + paneDrawInfo.getMarkProperty('x', markIndex)) / 2, (paneDrawInfo.getMarkProperty('y', left) + paneDrawInfo.getMarkProperty('y', markIndex)) / 2, ((paneDrawInfo.getMarkProperty('width', left) + paneDrawInfo.getMarkProperty('width', markIndex)) / 2) + 20, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 20)) {
            return true;
        }
    }
    if (right !== -1) {
        if (tab.CanvasRenderer.lineEdgeContains(x, y, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 20, (paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('x', right)) / 2, (paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('y', right)) / 2, ((paneDrawInfo.getMarkProperty('width', markIndex) + paneDrawInfo.getMarkProperty('width', right)) / 2) + 20)) {
            return true;
        }
    }
    return false;
}
tab.MarksRenderer._lineMarkGetHitTestExpansion = function tab_MarksRenderer$_lineMarkGetHitTestExpansion(paneDrawInfo, markIndex) {
    return tab.$create_SizeF(0, 0);
}
tab.MarksRenderer._lineMarkGetDistanceToMark = function tab_MarksRenderer$_lineMarkGetDistanceToMark(paneDrawInfo, x, y, markIndex) {
    var markBound = paneDrawInfo.getMarkBounds(markIndex);
    return tab.GeometryUtil.getSquaredDistanceToLineSegment(markBound, tab.$create_PointF(x, y));
}
tab.MarksRenderer._shapeMarkBuildMarkBound = function tab_MarksRenderer$_shapeMarkBuildMarkBound(paneDrawInfo, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledCircle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDUnscaledFilledCircle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil(paneDrawInfo.getMarkProperty('width', markIndex) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDSquare':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledSquare':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDAsterisk':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDPlus':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledPlus':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDTimes':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledTimes':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDDiamond':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledDiamond':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDDownTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledDownTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDLeftTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledLeftTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDRightTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledRightTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        case 'shapeIDFilledStar':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return bounds;
        default:
            if (shape > 0) {
                var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
                var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
                var size = Math.ceil(paneDrawInfo.getMarkProperty('size', markIndex));
                var halfSize = Math.ceil(size / 2);
                var bbox = tab.$create_RectXY(x - halfSize, y - halfSize, size, size);
                return bbox;
            }
            break;
    }
    return tab.$create_RectXY(0, 0, 0, 0);
}
tab.MarksRenderer._shapeMarkExactHitTest = function tab_MarksRenderer$_shapeMarkExactHitTest(paneDrawInfo, x, y, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2))) {
                return true;
            }
            return false;
        case 'shapeIDFilledCircle':
            if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) / 2))) {
                return true;
            }
            return false;
        case 'shapeIDUnscaledFilledCircle':
            if (tab.GeometryUtil.isPointInCircle(tab.$create_PointF(x, y), tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex)) / 2))) {
                return true;
            }
            return false;
        case 'shapeIDSquare':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledSquare':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDAsterisk':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDPlus':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledPlus':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDTimes':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledTimes':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDDiamond':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledDiamond':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDDownTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledDownTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDLeftTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledLeftTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDRightTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledRightTriangle':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        case 'shapeIDFilledStar':
            var halfSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2);
            var rect = tab.$create_DoubleRectXY(paneDrawInfo.getMarkProperty('x', markIndex) - halfSize, paneDrawInfo.getMarkProperty('y', markIndex) - halfSize, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))));
            if (tab.DoubleRectXYUtil.inRect(rect, tab.$create_PointF(x, y))) {
                return true;
            }
            return false;
        default:
            break;
    }
    return true;
}
tab.MarksRenderer._shapeMarkNearHitTest = function tab_MarksRenderer$_shapeMarkNearHitTest(paneDrawInfo, x, y, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            return true;
        case 'shapeIDFilledCircle':
            return true;
        case 'shapeIDUnscaledFilledCircle':
            return true;
        case 'shapeIDSquare':
            return true;
        case 'shapeIDFilledSquare':
            return true;
        case 'shapeIDAsterisk':
            return true;
        case 'shapeIDPlus':
            return true;
        case 'shapeIDFilledPlus':
            return true;
        case 'shapeIDTimes':
            return true;
        case 'shapeIDFilledTimes':
            return true;
        case 'shapeIDDiamond':
            return true;
        case 'shapeIDFilledDiamond':
            return true;
        case 'shapeIDTriangle':
            return true;
        case 'shapeIDFilledTriangle':
            return true;
        case 'shapeIDDownTriangle':
            return true;
        case 'shapeIDFilledDownTriangle':
            return true;
        case 'shapeIDLeftTriangle':
            return true;
        case 'shapeIDFilledLeftTriangle':
            return true;
        case 'shapeIDRightTriangle':
            return true;
        case 'shapeIDFilledRightTriangle':
            return true;
        case 'shapeIDFilledStar':
            return true;
        default:
            break;
    }
    return false;
}
tab.MarksRenderer._shapeMarkGetHitTestExpansion = function tab_MarksRenderer$_shapeMarkGetHitTestExpansion(paneDrawInfo, markIndex) {
    var expansion = tab.$create_SizeF(0, 0);
    expansion = tab.$create_SizeF(10, 10);
    return expansion;
}
tab.MarksRenderer._shapeMarkGetDistanceToMark = function tab_MarksRenderer$_shapeMarkGetDistanceToMark(paneDrawInfo, x, y, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledCircle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDUnscaledFilledCircle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDSquare':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledSquare':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDAsterisk':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDPlus':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledPlus':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDTimes':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledTimes':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDDiamond':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledDiamond':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDDownTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledDownTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDLeftTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledLeftTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDRightTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledRightTriangle':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        case 'shapeIDFilledStar':
            var markBound = paneDrawInfo.getMarkBounds(markIndex);
            return tab.GeometryUtil.getSquaredDistanceToCircumference(markBound, tab.$create_PointF(x, y));
        default:
            break;
    }
    return tab.GeometryUtil.getSquaredDistanceToCenter(paneDrawInfo.getMarkBounds(markIndex), tab.$create_PointF(x, y));
}
tab.MarksRenderer._shapeMarkRectangleAreaHitTest = function tab_MarksRenderer$_shapeMarkRectangleAreaHitTest(paneDrawInfo, rect, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            return tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2), rect);
        case 'shapeIDFilledCircle':
            return tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) / 2), rect);
        case 'shapeIDUnscaledFilledCircle':
            return tab.GeometryUtil.circleIntersectsRect(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex)) / 2), rect);
        case 'shapeIDSquare':
            return true;
        case 'shapeIDFilledSquare':
            return true;
        case 'shapeIDAsterisk':
            return true;
        case 'shapeIDPlus':
            return true;
        case 'shapeIDFilledPlus':
            return true;
        case 'shapeIDTimes':
            return true;
        case 'shapeIDFilledTimes':
            return true;
        case 'shapeIDDiamond':
            return true;
        case 'shapeIDFilledDiamond':
            return true;
        case 'shapeIDTriangle':
            return true;
        case 'shapeIDFilledTriangle':
            return true;
        case 'shapeIDDownTriangle':
            return true;
        case 'shapeIDFilledDownTriangle':
            return true;
        case 'shapeIDLeftTriangle':
            return true;
        case 'shapeIDFilledLeftTriangle':
            return true;
        case 'shapeIDRightTriangle':
            return true;
        case 'shapeIDFilledRightTriangle':
            return true;
        case 'shapeIDFilledStar':
            return true;
        default:
            break;
    }
    return true;
}
tab.MarksRenderer._shapeMarkCircleAreaHitTest = function tab_MarksRenderer$_shapeMarkCircleAreaHitTest(paneDrawInfo, circle, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            return tab.GeometryUtil.circleIntersectsCircle(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2), circle);
        case 'shapeIDFilledCircle':
            return tab.GeometryUtil.circleIntersectsCircle(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) / 2), circle);
        case 'shapeIDUnscaledFilledCircle':
            return tab.GeometryUtil.circleIntersectsCircle(tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex)) / 2), circle);
        case 'shapeIDSquare':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledSquare':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDAsterisk':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDPlus':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledPlus':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDTimes':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledTimes':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDDiamond':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledDiamond':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDDownTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledDownTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDLeftTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledLeftTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDRightTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledRightTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        case 'shapeIDFilledStar':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.circleIntersectsRect(circle, bounds);
        default:
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var size = Math.ceil(paneDrawInfo.getMarkProperty('size', markIndex));
            var halfSize = Math.ceil(size / 2);
            var bbox = tab.$create_RectXY(x - halfSize, y - halfSize, size, size);
            return tab.GeometryUtil.circleIntersectsRect(circle, bbox);
    }
}
tab.MarksRenderer._shapeMarkPolygonAreaHitTest = function tab_MarksRenderer$_shapeMarkPolygonAreaHitTest(paneDrawInfo, selectionPointsInclWorldOffset, markIndex) {
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            return tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2));
        case 'shapeIDFilledCircle':
            return tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) / 2));
        case 'shapeIDUnscaledFilledCircle':
            return tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, tab.$create_Circle(tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex)), (paneDrawInfo.getMarkProperty('width', markIndex)) / 2));
        case 'shapeIDSquare':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledSquare':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDAsterisk':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDPlus':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledPlus':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDTimes':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledTimes':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDDiamond':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledDiamond':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDDownTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledDownTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDLeftTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledLeftTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDRightTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledRightTriangle':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        case 'shapeIDFilledStar':
            var bounds = tab.$create_RectXY(0, 0, 0, 0);
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var s2 = Math.ceil((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2);
            var s = 2 * s2;
            bounds = tab.RectXYUtil.union(bounds, tab.$create_RectXY(x - s2, y - s2, s, s));
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bounds);
        default:
            var x = Math.round(paneDrawInfo.getMarkProperty('x', markIndex));
            var y = Math.round(paneDrawInfo.getMarkProperty('y', markIndex));
            var size = Math.ceil(paneDrawInfo.getMarkProperty('size', markIndex));
            var halfSize = Math.ceil(size / 2);
            var bbox = tab.$create_RectXY(x - halfSize, y - halfSize, size, size);
            return tab.GeometryUtil.polygonIntersectsRect(selectionPointsInclWorldOffset, bbox);
    }
}
tab.MarksRenderer._renderMultipolygonMarkHoverOverlayImage = function tab_MarksRenderer$_renderMultipolygonMarkHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            tabContext.save();
            var strokeSizeOffset = tab.CanvasRenderer.get_multipolyLineSizeOffset();
            tab.CanvasRenderer.createMultipolygonPath(tabContext, paneDrawInfo.hasPixelGeometry, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('size', markIndex), 7, paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex)));
            tabContext.set_lineWidth(1.75 - strokeSizeOffset);
            tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone']);
            tabContext.stroke();
            tabContext.restore();
            tabContext.restore();
        }
    }
    else {
        tabContext.save();
        var strokeSizeOffset = tab.CanvasRenderer.get_multipolyLineSizeOffset();
        tab.CanvasRenderer.createMultipolygonPath(tabContext, paneDrawInfo.hasPixelGeometry, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('size', markIndex), 7, paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex)));
        tabContext.set_lineWidth(1.75 - strokeSizeOffset);
        tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone']);
        tabContext.stroke();
        tabContext.restore();
    }
}
tab.MarksRenderer._renderMultipolygonMarkPressedOverlayImage = function tab_MarksRenderer$_renderMultipolygonMarkPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            tabContext.save();
            var strokeSizeOffset = tab.CanvasRenderer.get_multipolyLineSizeOffset();
            tab.CanvasRenderer.createMultipolygonPath(tabContext, paneDrawInfo.hasPixelGeometry, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('size', markIndex), 7, paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex)));
            tabContext.set_lineWidth(2.5 - strokeSizeOffset);
            tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone']);
            tabContext.stroke();
            tabContext.restore();
            tabContext.restore();
        }
    }
    else {
        tabContext.save();
        var strokeSizeOffset = tab.CanvasRenderer.get_multipolyLineSizeOffset();
        tab.CanvasRenderer.createMultipolygonPath(tabContext, paneDrawInfo.hasPixelGeometry, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('size', markIndex), 7, paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex)));
        tabContext.set_lineWidth(2.5 - strokeSizeOffset);
        tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone']);
        tabContext.stroke();
        tabContext.restore();
    }
}
tab.MarksRenderer._renderAreaMarkHoverOverlayImage = function tab_MarksRenderer$_renderAreaMarkHoverOverlayImage(tabContext, paneDrawInfo, tupleId) {
    var markIndex = paneDrawInfo.getMarkIndexFromTupleID(tupleId);
    var nextOrPrevBrushed = false;
    if (markIndex - 1 > 0 && !paneDrawInfo.isMarkEndPrimitive(markIndex - 1)) {
        nextOrPrevBrushed = nextOrPrevBrushed || paneDrawInfo.isMarkHighlighted(markIndex - 1);
    }
    if ((markIndex + 1) < paneDrawInfo.get_markCount() && !paneDrawInfo.isMarkEndPrimitive(markIndex)) {
        nextOrPrevBrushed = nextOrPrevBrushed || paneDrawInfo.isMarkHighlighted(markIndex + 1);
    }
    var color;
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.isMarkSelected(markIndex)) {
        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = (5 + 2) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (5 + 2);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (5 + 2);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
        x = paneDrawInfo.getMarkProperty('x1', markIndex);
        y = paneDrawInfo.getMarkProperty('y1', markIndex);
        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = (5 + 2) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (5 + 2);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (5 + 2);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
    }
    else if (paneDrawInfo.isMarkHighlighted(markIndex) && !nextOrPrevBrushed) {
        color = (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 2 : 0;
                var primitiveSize = (5 + 2) + borderSize;
                tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
                tabContext.restore();
            }
        }
        else {
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = (5 + 2) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
        }
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (5 + 2);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (5 + 2);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
        x = paneDrawInfo.getMarkProperty('x1', markIndex);
        y = paneDrawInfo.getMarkProperty('y1', markIndex);
        color = (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 2 : 0;
                var primitiveSize = (5 + 2) + borderSize;
                tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
                tabContext.restore();
            }
        }
        else {
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = (5 + 2) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
        }
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (5 + 2);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (5 + 2);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
    }
    else {
        color = ((paneDrawInfo.get_drawBorder()) ? paneDrawInfo.get_borderColor() : tab.SceneUtils.blackColor)['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (5);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (5);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
        x = paneDrawInfo.getMarkProperty('x1', markIndex);
        y = paneDrawInfo.getMarkProperty('y1', markIndex);
        color = ((paneDrawInfo.get_drawBorder()) ? paneDrawInfo.get_borderColor() : tab.SceneUtils.blackColor)['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (5);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (5);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
    }
}
tab.MarksRenderer._renderAreaMarkPressedOverlayImage = function tab_MarksRenderer$_renderAreaMarkPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = ((paneDrawInfo.get_drawBorder()) ? paneDrawInfo.get_borderColor() : tab.SceneUtils.blackColor)['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var primitiveSize = (7);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
            tabContext.restore();
        }
    }
    else {
        var primitiveSize = (7);
        tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
    }
    x = paneDrawInfo.getMarkProperty('x1', markIndex);
    y = paneDrawInfo.getMarkProperty('y1', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var primitiveSize = (7);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
            tabContext.restore();
        }
    }
    else {
        var primitiveSize = (7);
        tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
    }
}
tab.MarksRenderer._renderPieHoverOverlayImage = function tab_MarksRenderer$_renderPieHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSizeOffset = (!!drawBorder) ? 1 : 0;
            var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
            var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
            var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
            var anticlockwise = theta > theta1;
            if (Math.abs(theta - theta1) >= 1) {
                tab.CanvasRenderer.renderCircle(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), (radius + borderSizeOffset) * 2, color, 1);
            }
            else {
                tab.CanvasRenderer.renderWedge(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 1 + borderSizeOffset, anticlockwise);
            }
            tabContext.restore();
        }
    }
    else {
        var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSizeOffset = (!!drawBorder) ? 1 : 0;
        var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
        var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
        var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
        var anticlockwise = theta > theta1;
        if (Math.abs(theta - theta1) >= 1) {
            tab.CanvasRenderer.renderCircle(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), (radius + borderSizeOffset) * 2, color, 1);
        }
        else {
            tab.CanvasRenderer.renderWedge(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 1 + borderSizeOffset, anticlockwise);
        }
    }
}
tab.MarksRenderer._renderPiePressedOverlayImage = function tab_MarksRenderer$_renderPiePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSizeOffset = (!!drawBorder) ? 1 : 0;
            var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
            var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
            var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
            var anticlockwise = theta > theta1;
            if (Math.abs(theta - theta1) >= 1) {
                tab.CanvasRenderer.renderCircle(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), (radius + borderSizeOffset) * 2, color, 2);
            }
            else {
                tab.CanvasRenderer.renderWedge(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 2 + borderSizeOffset, anticlockwise);
            }
            tabContext.restore();
        }
    }
    else {
        var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSizeOffset = (!!drawBorder) ? 1 : 0;
        var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
        var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
        var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
        var anticlockwise = theta > theta1;
        if (Math.abs(theta - theta1) >= 1) {
            tab.CanvasRenderer.renderCircle(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), (radius + borderSizeOffset) * 2, color, 2);
        }
        else {
            tab.CanvasRenderer.renderWedge(tabContext, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 2 + borderSizeOffset, anticlockwise);
        }
    }
}
tab.MarksRenderer._renderTextHoverOverlayImage = function tab_MarksRenderer$_renderTextHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
                var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2 - 1;
                var x0 = paneDrawInfo.getMarkProperty('x', markIndex) + leftOffset;
                var y0 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
                var x1 = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('width', markIndex) + leftOffset;
                var y1 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
                var height = 1;
                var width = x1 - x0;
                var path = [ x0, y0 + height - 1, x0 + width, y0 + height - 1 ];
                tabContext.set_lineCap('square');
                tabContext.set_lineWidth(height);
                tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque']);
                tab.CanvasRenderer.strokePath(tabContext, path, false, true);
                tabContext.restore();
            }
        }
        else {
            var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
            var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2 - 1;
            var x0 = paneDrawInfo.getMarkProperty('x', markIndex) + leftOffset;
            var y0 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
            var x1 = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('width', markIndex) + leftOffset;
            var y1 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
            var height = 1;
            var width = x1 - x0;
            var path = [ x0, y0 + height - 1, x0 + width, y0 + height - 1 ];
            tabContext.set_lineCap('square');
            tabContext.set_lineWidth(height);
            tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque']);
            tab.CanvasRenderer.strokePath(tabContext, path, false, true);
        }
    }
    if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(1);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(1);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex) - paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
            var right = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
            var top = paneDrawInfo.getMarkProperty('y', markIndex) - paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
            var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
}
tab.MarksRenderer._renderTextPressedOverlayImage = function tab_MarksRenderer$_renderTextPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
                var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2 - 1;
                var x0 = paneDrawInfo.getMarkProperty('x', markIndex) + leftOffset;
                var y0 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
                var x1 = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('width', markIndex) + leftOffset;
                var y1 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
                var height = 2;
                var width = x1 - x0;
                var path = [ x0, y0 + height - 1, x0 + width, y0 + height - 1 ];
                tabContext.set_lineCap('square');
                tabContext.set_lineWidth(height);
                tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque']);
                tab.CanvasRenderer.strokePath(tabContext, path, false, true);
                tabContext.restore();
            }
        }
        else {
            var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
            var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2 - 1;
            var x0 = paneDrawInfo.getMarkProperty('x', markIndex) + leftOffset;
            var y0 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
            var x1 = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('width', markIndex) + leftOffset;
            var y1 = paneDrawInfo.getMarkProperty('y', markIndex) + bottomOffset;
            var height = 2;
            var width = x1 - x0;
            var path = [ x0, y0 + height - 1, x0 + width, y0 + height - 1 ];
            tabContext.set_lineCap('square');
            tabContext.set_lineWidth(height);
            tabContext.set_strokeStyle((paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque']);
            tab.CanvasRenderer.strokePath(tabContext, path, false, true);
        }
    }
    if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(2);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(2);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex) - paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
            var right = paneDrawInfo.getMarkProperty('x', markIndex) + paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
            var top = paneDrawInfo.getMarkProperty('y', markIndex) - paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
            var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
}
tab.MarksRenderer._renderBarHoverOverlayImage = function tab_MarksRenderer$_renderBarHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
    var borderWidth = 1;
    if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex);
            var right = paneDrawInfo.getMarkProperty('x1', markIndex);
            var top = paneDrawInfo.getMarkProperty('y', markIndex);
            var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
            var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
            var top = paneDrawInfo.getMarkProperty('y', markIndex);
            var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex);
            var right = paneDrawInfo.getMarkProperty('x1', markIndex);
            var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
            var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!true) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
            var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
            var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
            var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!true) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
}
tab.MarksRenderer._renderBarPressedOverlayImage = function tab_MarksRenderer$_renderBarPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
    var borderWidth = 2;
    if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex);
            var right = paneDrawInfo.getMarkProperty('x1', markIndex);
            var top = paneDrawInfo.getMarkProperty('y', markIndex);
            var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
    if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
            var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
            var top = paneDrawInfo.getMarkProperty('y', markIndex);
            var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
    if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!false) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex);
            var right = paneDrawInfo.getMarkProperty('x1', markIndex);
            var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
            var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!false) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
    if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var strokewidth = parseInt(borderWidth);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 1 : 0;
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left);
                var height = Math.abs(bottom - top);
                var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
                var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
                x = xAndWidth.first - strokewidth + (strokewidth - 1);
                y = yAndHeight.first - strokewidth + (strokewidth - 1);
                width = xAndWidth.second + strokewidth + borderSize;
                height = yAndHeight.second + strokewidth + borderSize;
                if (!!true) {
                    width = height = Math.min(width, height);
                }
                if (!paneDrawInfo.get_isWrappedDomain()) {
                    var paneRect = paneDrawInfo.get_paneRect();
                    if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                        return;
                    }
                    if (paneRect.x >= x) {
                        var xPos = paneRect.x + strokewidth - 1;
                        width -= xPos - x;
                        x = xPos;
                    }
                    if (paneRect.x + paneRect.w <= x + width) {
                        width = paneRect.x + paneRect.w - x - 1;
                    }
                    if (paneRect.y >= y) {
                        var yPos = paneRect.y + strokewidth - 1;
                        height -= yPos - y;
                        y = yPos;
                    }
                    if (paneRect.y + paneRect.h <= y + height) {
                        height = paneRect.y + paneRect.h - y - 1;
                    }
                }
                tabContext.set_lineJoin('miter');
                tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                tabContext.restore();
            }
        }
        else {
            var strokewidth = parseInt(borderWidth);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 1 : 0;
            var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
            var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
            var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
            var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
            var x = Math.min(left, right);
            var y = Math.min(top, bottom);
            var width = Math.abs(right - left);
            var height = Math.abs(bottom - top);
            var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, paneDrawInfo.get_minBarHeight());
            var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, paneDrawInfo.get_minBarWidth());
            x = xAndWidth.first - strokewidth + (strokewidth - 1);
            y = yAndHeight.first - strokewidth + (strokewidth - 1);
            width = xAndWidth.second + strokewidth + borderSize;
            height = yAndHeight.second + strokewidth + borderSize;
            if (!!true) {
                width = height = Math.min(width, height);
            }
            if (!paneDrawInfo.get_isWrappedDomain()) {
                var paneRect = paneDrawInfo.get_paneRect();
                if (!tab.RectXYUtil.intersectsWith(paneRect, tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height)))) {
                    return;
                }
                if (paneRect.x >= x) {
                    var xPos = paneRect.x + strokewidth - 1;
                    width -= xPos - x;
                    x = xPos;
                }
                if (paneRect.x + paneRect.w <= x + width) {
                    width = paneRect.x + paneRect.w - x - 1;
                }
                if (paneRect.y >= y) {
                    var yPos = paneRect.y + strokewidth - 1;
                    height -= yPos - y;
                    y = yPos;
                }
                if (paneRect.y + paneRect.h <= y + height) {
                    height = paneRect.y + paneRect.h - y - 1;
                }
            }
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.renderBarOutline(tabContext, x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'], strokewidth, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
        }
    }
}
tab.MarksRenderer._renderLineMarkHoverOverlayImage = function tab_MarksRenderer$_renderLineMarkHoverOverlayImage(tabContext, paneDrawInfo, tupleId) {
    var markIndex = paneDrawInfo.getMarkIndexFromTupleID(tupleId);
    var nextOrPrevBrushed = false;
    if (markIndex - 1 > 0 && !paneDrawInfo.isMarkEndPrimitive(markIndex - 1)) {
        nextOrPrevBrushed = nextOrPrevBrushed || paneDrawInfo.isMarkHighlighted(markIndex - 1);
    }
    if ((markIndex + 1) < paneDrawInfo.get_markCount() && !paneDrawInfo.isMarkEndPrimitive(markIndex)) {
        nextOrPrevBrushed = nextOrPrevBrushed || paneDrawInfo.isMarkHighlighted(markIndex + 1);
    }
    var color;
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.isMarkSelected(markIndex)) {
        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideOpaque'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
    }
    else if (paneDrawInfo.isMarkHighlighted(markIndex) && !nextOrPrevBrushed) {
        color = (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
                var borderSize = (!!drawBorder) ? 2 : 0;
                var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4) + borderSize;
                tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
                tabContext.restore();
            }
        }
        else {
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 4);
        }
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4 + 4);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
    }
    else {
        color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'];
        if (paneDrawInfo.get_isWrappedDomain()) {
            var bounds = paneDrawInfo.getMarkBounds(markIndex);
            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                tabContext.save();
                tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
                var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4);
                tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
                tabContext.restore();
            }
        }
        else {
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 4);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
        }
    }
}
tab.MarksRenderer._renderLineMarkPressedOverlayImage = function tab_MarksRenderer$_renderLineMarkPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 8);
            tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
            tabContext.restore();
        }
    }
    else {
        var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 8);
        tab.CanvasRenderer.renderFilledCircle(tabContext, 0 + x, 0 + y, primitiveSize, color);
    }
}
tab.MarksRenderer._lineMarkRectangleAreaHitTest = function tab_MarksRenderer$_lineMarkRectangleAreaHitTest(paneDrawInfo, selection, markIndex) {
    var point = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    var radius = paneDrawInfo.getMarkProperty('width', markIndex) / 2;
    var center = tab.$create_PointF(point.x + radius, point.y + radius);
    var lineDot = tab.$create_Circle(center, radius);
    return tab.GeometryUtil.circleIntersectsRect(lineDot, selection);
}
tab.MarksRenderer._lineMarkPolygonAreaHitTest = function tab_MarksRenderer$_lineMarkPolygonAreaHitTest(paneDrawInfo, selectionPointsInclWorldOffset, markIndex) {
    var point = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    var radius = paneDrawInfo.getMarkProperty('width', markIndex) / 2;
    var center = tab.$create_PointF(point.x + radius, point.y + radius);
    var lineDot = tab.$create_Circle(center, radius);
    return tab.GeometryUtil.polygonIntersectsCircle(selectionPointsInclWorldOffset, lineDot);
}
tab.MarksRenderer._lineMarkCircleAreaHitTest = function tab_MarksRenderer$_lineMarkCircleAreaHitTest(paneDrawInfo, circle, markIndex) {
    var point = tab.$create_PointF(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
    var radius = paneDrawInfo.getMarkProperty('width', markIndex) / 2;
    var center = tab.$create_PointF(point.x + radius, point.y + radius);
    var lineDot = tab.$create_Circle(center, radius);
    return tab.CircleUtil.intersectsWith(lineDot, circle);
}
tab.MarksRenderer._renderShapeHoverOverlayImage = function tab_MarksRenderer$_renderShapeHoverOverlayImage(tabContext, paneDrawInfo, tupleId) {
    var markIndex = paneDrawInfo.getMarkIndexFromTupleID(tupleId);
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            tab.MarksRenderer._renderShapeIDCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledCircle':
            tab.MarksRenderer._renderShapeIDFilledCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDUnscaledFilledCircle':
            tab.MarksRenderer._renderShapeIDUnscaledFilledCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDSquare':
            tab.MarksRenderer._renderShapeIDSquareHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledSquare':
            tab.MarksRenderer._renderShapeIDFilledSquareHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDAsterisk':
            tab.MarksRenderer._renderShapeIDAsteriskHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDPlus':
            tab.MarksRenderer._renderShapeIDPlusHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledPlus':
            tab.MarksRenderer._renderShapeIDFilledPlusHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDTimes':
            tab.MarksRenderer._renderShapeIDTimesHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledTimes':
            tab.MarksRenderer._renderShapeIDFilledTimesHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDDiamond':
            tab.MarksRenderer._renderShapeIDDiamondHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledDiamond':
            tab.MarksRenderer._renderShapeIDFilledDiamondHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDTriangle':
            tab.MarksRenderer._renderShapeIDTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledTriangle':
            tab.MarksRenderer._renderShapeIDFilledTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDDownTriangle':
            tab.MarksRenderer._renderShapeIDDownTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledDownTriangle':
            tab.MarksRenderer._renderShapeIDFilledDownTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDLeftTriangle':
            tab.MarksRenderer._renderShapeIDLeftTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledLeftTriangle':
            tab.MarksRenderer._renderShapeIDFilledLeftTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDRightTriangle':
            tab.MarksRenderer._renderShapeIDRightTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledRightTriangle':
            tab.MarksRenderer._renderShapeIDFilledRightTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledStar':
            tab.MarksRenderer._renderShapeIDFilledStarHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        default:
            if (paneDrawInfo.doesCustomImageExist(markIndex)) {
                tab.CanvasRenderer.renderCustomShape(tabContext, paneDrawInfo, markIndex, 'hoverOverlay', 'colorOverrideNone');
            }
            else {
                tab.MarksRenderer._renderShapeIDCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex);
            }
            break;
    }
}
tab.MarksRenderer._renderShapePressedOverlayImage = function tab_MarksRenderer$_renderShapePressedOverlayImage(tabContext, paneDrawInfo, tupleId) {
    var markIndex = paneDrawInfo.getMarkIndexFromTupleID(tupleId);
    var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
    switch (shape) {
        case 'shapeIDCircle':
            tab.MarksRenderer._renderShapeIDCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledCircle':
            tab.MarksRenderer._renderShapeIDFilledCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDUnscaledFilledCircle':
            tab.MarksRenderer._renderShapeIDUnscaledFilledCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDSquare':
            tab.MarksRenderer._renderShapeIDSquarePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledSquare':
            tab.MarksRenderer._renderShapeIDFilledSquarePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDAsterisk':
            tab.MarksRenderer._renderShapeIDAsteriskPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDPlus':
            tab.MarksRenderer._renderShapeIDPlusPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledPlus':
            tab.MarksRenderer._renderShapeIDFilledPlusPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDTimes':
            tab.MarksRenderer._renderShapeIDTimesPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledTimes':
            tab.MarksRenderer._renderShapeIDFilledTimesPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDDiamond':
            tab.MarksRenderer._renderShapeIDDiamondPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledDiamond':
            tab.MarksRenderer._renderShapeIDFilledDiamondPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDTriangle':
            tab.MarksRenderer._renderShapeIDTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledTriangle':
            tab.MarksRenderer._renderShapeIDFilledTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDDownTriangle':
            tab.MarksRenderer._renderShapeIDDownTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledDownTriangle':
            tab.MarksRenderer._renderShapeIDFilledDownTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDLeftTriangle':
            tab.MarksRenderer._renderShapeIDLeftTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledLeftTriangle':
            tab.MarksRenderer._renderShapeIDFilledLeftTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDRightTriangle':
            tab.MarksRenderer._renderShapeIDRightTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledRightTriangle':
            tab.MarksRenderer._renderShapeIDFilledRightTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        case 'shapeIDFilledStar':
            tab.MarksRenderer._renderShapeIDFilledStarPressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            break;
        default:
            if (paneDrawInfo.doesCustomImageExist(markIndex)) {
                tab.CanvasRenderer.renderCustomShape(tabContext, paneDrawInfo, markIndex, 'pressedOverlay', 'colorOverrideNone');
            }
            else {
                tab.MarksRenderer._renderShapeIDCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex);
            }
            break;
    }
}
tab.MarksRenderer._renderShapeIDCircleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 2) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 1);
            tabContext.restore();
        }
    }
    else {
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 2) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 1);
    }
}
tab.MarksRenderer._renderShapeIDCirclePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 3) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 2);
            tabContext.restore();
        }
    }
    else {
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 3) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 2);
    }
}
tab.MarksRenderer._renderShapeIDFilledCircleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 1);
            tabContext.restore();
        }
    }
    else {
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 1);
    }
}
tab.MarksRenderer._renderShapeIDFilledCirclePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) + 1) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 2);
            tabContext.restore();
        }
    }
    else {
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))) + 1) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 2);
    }
}
tab.MarksRenderer._renderShapeIDUnscaledFilledCircleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDUnscaledFilledCircleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex)) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 1);
            tabContext.restore();
        }
    }
    else {
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex)) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 1);
    }
}
tab.MarksRenderer._renderShapeIDUnscaledFilledCirclePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDUnscaledFilledCirclePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
            var borderSize = (!!drawBorder) ? 2 : 0;
            var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 1) + borderSize;
            tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 2);
            tabContext.restore();
        }
    }
    else {
        var drawBorder = paneDrawInfo.getMarkProperty('draw_border', markIndex);
        var borderSize = (!!drawBorder) ? 2 : 0;
        var primitiveSize = (paneDrawInfo.getMarkProperty('width', markIndex) + 1) + borderSize;
        tab.CanvasRenderer.renderCircle(tabContext, 0 + x, 0 + y, primitiveSize, color, 2);
    }
}
tab.MarksRenderer._renderShapeIDSquareHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDSquareHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3);
            tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 1);
            tabContext.restore();
        }
    }
    else {
        var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3);
        tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 1);
    }
}
tab.MarksRenderer._renderShapeIDSquarePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDSquarePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4);
            tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 2);
            tabContext.restore();
        }
    }
    else {
        var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4);
        tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 2);
    }
}
tab.MarksRenderer._renderShapeIDFilledSquareHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledSquareHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 1);
            tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 1);
            tabContext.restore();
        }
    }
    else {
        var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 1);
        tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 1);
    }
}
tab.MarksRenderer._renderShapeIDFilledSquarePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledSquarePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 2);
            tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 2);
            tabContext.restore();
        }
    }
    else {
        var size = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 2);
        tab.CanvasRenderer.renderRectangle(tabContext, x + 0, y + 0, size, size, color, 2);
    }
}
tab.MarksRenderer._renderShapeIDAsteriskHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDAsteriskHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 2) / 2;
            var scaledEdgeWidth = 0.9 * edgeWidth;
            var quarterWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 6) / 4;
            var thickOutlineWidth = 2.5;
            var thinOutlineWidth = 1.5;
            points.add((-thickOutlineWidth) + x);
            points.add((0) + y);
            points.add((-scaledEdgeWidth) + x);
            points.add((quarterWidth - thickOutlineWidth) + y);
            points.add((thinOutlineWidth - scaledEdgeWidth) + x);
            points.add(quarterWidth + y);
            points.add((-thinOutlineWidth) + x);
            points.add(thickOutlineWidth + y);
            points.add((-thinOutlineWidth) + x);
            points.add(edgeWidth + y);
            points.add(thinOutlineWidth + x);
            points.add(edgeWidth + y);
            points.add(thinOutlineWidth + x);
            points.add(thickOutlineWidth + y);
            points.add((scaledEdgeWidth - thinOutlineWidth) + x);
            points.add(quarterWidth + y);
            points.add(scaledEdgeWidth + x);
            points.add((quarterWidth - thickOutlineWidth) + y);
            points.add(thickOutlineWidth + x);
            points.add((0) + y);
            points.add(scaledEdgeWidth + x);
            points.add((thickOutlineWidth - quarterWidth) + y);
            points.add((scaledEdgeWidth - thinOutlineWidth) + x);
            points.add((-quarterWidth) + y);
            points.add(thinOutlineWidth + x);
            points.add((-thickOutlineWidth) + y);
            points.add(thinOutlineWidth + x);
            points.add((-edgeWidth) + y);
            points.add((-thinOutlineWidth) + x);
            points.add((-edgeWidth) + y);
            points.add((-thinOutlineWidth) + x);
            points.add((-thickOutlineWidth) + y);
            points.add((thinOutlineWidth - scaledEdgeWidth) + x);
            points.add((-quarterWidth) + y);
            points.add((-scaledEdgeWidth) + x);
            points.add((thickOutlineWidth - quarterWidth) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 2) / 2;
        var scaledEdgeWidth = 0.9 * edgeWidth;
        var quarterWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 6) / 4;
        var thickOutlineWidth = 2.5;
        var thinOutlineWidth = 1.5;
        points.add((-thickOutlineWidth) + x);
        points.add((0) + y);
        points.add((-scaledEdgeWidth) + x);
        points.add((quarterWidth - thickOutlineWidth) + y);
        points.add((thinOutlineWidth - scaledEdgeWidth) + x);
        points.add(quarterWidth + y);
        points.add((-thinOutlineWidth) + x);
        points.add(thickOutlineWidth + y);
        points.add((-thinOutlineWidth) + x);
        points.add(edgeWidth + y);
        points.add(thinOutlineWidth + x);
        points.add(edgeWidth + y);
        points.add(thinOutlineWidth + x);
        points.add(thickOutlineWidth + y);
        points.add((scaledEdgeWidth - thinOutlineWidth) + x);
        points.add(quarterWidth + y);
        points.add(scaledEdgeWidth + x);
        points.add((quarterWidth - thickOutlineWidth) + y);
        points.add(thickOutlineWidth + x);
        points.add((0) + y);
        points.add(scaledEdgeWidth + x);
        points.add((thickOutlineWidth - quarterWidth) + y);
        points.add((scaledEdgeWidth - thinOutlineWidth) + x);
        points.add((-quarterWidth) + y);
        points.add(thinOutlineWidth + x);
        points.add((-thickOutlineWidth) + y);
        points.add(thinOutlineWidth + x);
        points.add((-edgeWidth) + y);
        points.add((-thinOutlineWidth) + x);
        points.add((-edgeWidth) + y);
        points.add((-thinOutlineWidth) + x);
        points.add((-thickOutlineWidth) + y);
        points.add((thinOutlineWidth - scaledEdgeWidth) + x);
        points.add((-quarterWidth) + y);
        points.add((-scaledEdgeWidth) + x);
        points.add((thickOutlineWidth - quarterWidth) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDAsteriskPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDAsteriskPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 4) / 2;
            var scaledEdgeWidth = 0.9 * edgeWidth;
            var quarterWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 8) / 4;
            var thickOutlineWidth = 3;
            var thinOutlineWidth = 2;
            points.add((-thickOutlineWidth) + x);
            points.add((0) + y);
            points.add((-scaledEdgeWidth) + x);
            points.add((quarterWidth - thickOutlineWidth) + y);
            points.add((thinOutlineWidth - scaledEdgeWidth) + x);
            points.add(quarterWidth + y);
            points.add((-thinOutlineWidth) + x);
            points.add(thickOutlineWidth + y);
            points.add((-thinOutlineWidth) + x);
            points.add(edgeWidth + y);
            points.add(thinOutlineWidth + x);
            points.add(edgeWidth + y);
            points.add(thinOutlineWidth + x);
            points.add(thickOutlineWidth + y);
            points.add((scaledEdgeWidth - thinOutlineWidth) + x);
            points.add(quarterWidth + y);
            points.add(scaledEdgeWidth + x);
            points.add((quarterWidth - thickOutlineWidth) + y);
            points.add(thickOutlineWidth + x);
            points.add((0) + y);
            points.add(scaledEdgeWidth + x);
            points.add((thickOutlineWidth - quarterWidth) + y);
            points.add((scaledEdgeWidth - thinOutlineWidth) + x);
            points.add((-quarterWidth) + y);
            points.add(thinOutlineWidth + x);
            points.add((-thickOutlineWidth) + y);
            points.add(thinOutlineWidth + x);
            points.add((-edgeWidth) + y);
            points.add((-thinOutlineWidth) + x);
            points.add((-edgeWidth) + y);
            points.add((-thinOutlineWidth) + x);
            points.add((-thickOutlineWidth) + y);
            points.add((thinOutlineWidth - scaledEdgeWidth) + x);
            points.add((-quarterWidth) + y);
            points.add((-scaledEdgeWidth) + x);
            points.add((thickOutlineWidth - quarterWidth) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 4) / 2;
        var scaledEdgeWidth = 0.9 * edgeWidth;
        var quarterWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) + 8) / 4;
        var thickOutlineWidth = 3;
        var thinOutlineWidth = 2;
        points.add((-thickOutlineWidth) + x);
        points.add((0) + y);
        points.add((-scaledEdgeWidth) + x);
        points.add((quarterWidth - thickOutlineWidth) + y);
        points.add((thinOutlineWidth - scaledEdgeWidth) + x);
        points.add(quarterWidth + y);
        points.add((-thinOutlineWidth) + x);
        points.add(thickOutlineWidth + y);
        points.add((-thinOutlineWidth) + x);
        points.add(edgeWidth + y);
        points.add(thinOutlineWidth + x);
        points.add(edgeWidth + y);
        points.add(thinOutlineWidth + x);
        points.add(thickOutlineWidth + y);
        points.add((scaledEdgeWidth - thinOutlineWidth) + x);
        points.add(quarterWidth + y);
        points.add(scaledEdgeWidth + x);
        points.add((quarterWidth - thickOutlineWidth) + y);
        points.add(thickOutlineWidth + x);
        points.add((0) + y);
        points.add(scaledEdgeWidth + x);
        points.add((thickOutlineWidth - quarterWidth) + y);
        points.add((scaledEdgeWidth - thinOutlineWidth) + x);
        points.add((-quarterWidth) + y);
        points.add(thinOutlineWidth + x);
        points.add((-thickOutlineWidth) + y);
        points.add(thinOutlineWidth + x);
        points.add((-edgeWidth) + y);
        points.add((-thinOutlineWidth) + x);
        points.add((-edgeWidth) + y);
        points.add((-thinOutlineWidth) + x);
        points.add((-thickOutlineWidth) + y);
        points.add((thinOutlineWidth - scaledEdgeWidth) + x);
        points.add((-quarterWidth) + y);
        points.add((-scaledEdgeWidth) + x);
        points.add((thickOutlineWidth - quarterWidth) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDPlusHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDPlusHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 2) / 2;
            var outlineWidth = 1.5;
            points.add((-outlineWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-outlineWidth) + x);
            points.add((-outlineWidth) + y);
            points.add((-halfWidth) + x);
            points.add((-outlineWidth) + y);
            points.add((-halfWidth) + x);
            points.add(outlineWidth + y);
            points.add((-outlineWidth) + x);
            points.add(outlineWidth + y);
            points.add((-outlineWidth) + x);
            points.add(halfWidth + y);
            points.add(outlineWidth + x);
            points.add(halfWidth + y);
            points.add(outlineWidth + x);
            points.add(outlineWidth + y);
            points.add(halfWidth + x);
            points.add(outlineWidth + y);
            points.add(halfWidth + x);
            points.add((-outlineWidth) + y);
            points.add(outlineWidth + x);
            points.add((-outlineWidth) + y);
            points.add(outlineWidth + x);
            points.add((-halfWidth) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 2) / 2;
        var outlineWidth = 1.5;
        points.add((-outlineWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-outlineWidth) + x);
        points.add((-outlineWidth) + y);
        points.add((-halfWidth) + x);
        points.add((-outlineWidth) + y);
        points.add((-halfWidth) + x);
        points.add(outlineWidth + y);
        points.add((-outlineWidth) + x);
        points.add(outlineWidth + y);
        points.add((-outlineWidth) + x);
        points.add(halfWidth + y);
        points.add(outlineWidth + x);
        points.add(halfWidth + y);
        points.add(outlineWidth + x);
        points.add(outlineWidth + y);
        points.add(halfWidth + x);
        points.add(outlineWidth + y);
        points.add(halfWidth + x);
        points.add((-outlineWidth) + y);
        points.add(outlineWidth + x);
        points.add((-outlineWidth) + y);
        points.add(outlineWidth + x);
        points.add((-halfWidth) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDPlusPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDPlusPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 3) / 2;
            var outlineWidth = 2;
            points.add((-outlineWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-outlineWidth) + x);
            points.add((-outlineWidth) + y);
            points.add((-halfWidth) + x);
            points.add((-outlineWidth) + y);
            points.add((-halfWidth) + x);
            points.add(outlineWidth + y);
            points.add((-outlineWidth) + x);
            points.add(outlineWidth + y);
            points.add((-outlineWidth) + x);
            points.add(halfWidth + y);
            points.add(outlineWidth + x);
            points.add(halfWidth + y);
            points.add(outlineWidth + x);
            points.add(outlineWidth + y);
            points.add(halfWidth + x);
            points.add(outlineWidth + y);
            points.add(halfWidth + x);
            points.add((-outlineWidth) + y);
            points.add(outlineWidth + x);
            points.add((-outlineWidth) + y);
            points.add(outlineWidth + x);
            points.add((-halfWidth) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 3) / 2;
        var outlineWidth = 2;
        points.add((-outlineWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-outlineWidth) + x);
        points.add((-outlineWidth) + y);
        points.add((-halfWidth) + x);
        points.add((-outlineWidth) + y);
        points.add((-halfWidth) + x);
        points.add(outlineWidth + y);
        points.add((-outlineWidth) + x);
        points.add(outlineWidth + y);
        points.add((-outlineWidth) + x);
        points.add(halfWidth + y);
        points.add(outlineWidth + x);
        points.add(halfWidth + y);
        points.add(outlineWidth + x);
        points.add(outlineWidth + y);
        points.add(halfWidth + x);
        points.add(outlineWidth + y);
        points.add(halfWidth + x);
        points.add((-outlineWidth) + y);
        points.add(outlineWidth + x);
        points.add((-outlineWidth) + y);
        points.add(outlineWidth + x);
        points.add((-halfWidth) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledPlusHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledPlusHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
            var sixWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 6;
            points.add((-sixWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-sixWidth) + x);
            points.add((-sixWidth) + y);
            points.add((-halfWidth) + x);
            points.add((-sixWidth) + y);
            points.add((-halfWidth) + x);
            points.add(sixWidth + y);
            points.add((-sixWidth) + x);
            points.add(sixWidth + y);
            points.add((-sixWidth) + x);
            points.add(halfWidth + y);
            points.add(sixWidth + x);
            points.add(halfWidth + y);
            points.add(sixWidth + x);
            points.add(sixWidth + y);
            points.add(halfWidth + x);
            points.add(sixWidth + y);
            points.add(halfWidth + x);
            points.add((-sixWidth) + y);
            points.add(sixWidth + x);
            points.add((-sixWidth) + y);
            points.add(sixWidth + x);
            points.add((-halfWidth) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
        var sixWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 6;
        points.add((-sixWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-sixWidth) + x);
        points.add((-sixWidth) + y);
        points.add((-halfWidth) + x);
        points.add((-sixWidth) + y);
        points.add((-halfWidth) + x);
        points.add(sixWidth + y);
        points.add((-sixWidth) + x);
        points.add(sixWidth + y);
        points.add((-sixWidth) + x);
        points.add(halfWidth + y);
        points.add(sixWidth + x);
        points.add(halfWidth + y);
        points.add(sixWidth + x);
        points.add(sixWidth + y);
        points.add(halfWidth + x);
        points.add(sixWidth + y);
        points.add(halfWidth + x);
        points.add((-sixWidth) + y);
        points.add(sixWidth + x);
        points.add((-sixWidth) + y);
        points.add(sixWidth + x);
        points.add((-halfWidth) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledPlusPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledPlusPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 1) / 2;
            var sixWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 3) / 6;
            points.add((-sixWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-sixWidth) + x);
            points.add((-sixWidth) + y);
            points.add((-halfWidth) + x);
            points.add((-sixWidth) + y);
            points.add((-halfWidth) + x);
            points.add(sixWidth + y);
            points.add((-sixWidth) + x);
            points.add(sixWidth + y);
            points.add((-sixWidth) + x);
            points.add(halfWidth + y);
            points.add(sixWidth + x);
            points.add(halfWidth + y);
            points.add(sixWidth + x);
            points.add(sixWidth + y);
            points.add(halfWidth + x);
            points.add(sixWidth + y);
            points.add(halfWidth + x);
            points.add((-sixWidth) + y);
            points.add(sixWidth + x);
            points.add((-sixWidth) + y);
            points.add(sixWidth + x);
            points.add((-halfWidth) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 1) / 2;
        var sixWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) + 3) / 6;
        points.add((-sixWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-sixWidth) + x);
        points.add((-sixWidth) + y);
        points.add((-halfWidth) + x);
        points.add((-sixWidth) + y);
        points.add((-halfWidth) + x);
        points.add(sixWidth + y);
        points.add((-sixWidth) + x);
        points.add(sixWidth + y);
        points.add((-sixWidth) + x);
        points.add(halfWidth + y);
        points.add(sixWidth + x);
        points.add(halfWidth + y);
        points.add(sixWidth + x);
        points.add(sixWidth + y);
        points.add(halfWidth + x);
        points.add(sixWidth + y);
        points.add(halfWidth + x);
        points.add((-sixWidth) + y);
        points.add(sixWidth + x);
        points.add((-sixWidth) + y);
        points.add(sixWidth + x);
        points.add((-halfWidth) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDTimesHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDTimesHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) + 4) / 2;
            var outlineWidth = 2;
            points.add((-edgeWidth + outlineWidth) + x);
            points.add((-edgeWidth) + y);
            points.add((-edgeWidth) + x);
            points.add((-edgeWidth + outlineWidth) + y);
            points.add((-outlineWidth) + x);
            points.add((0) + y);
            points.add((-edgeWidth) + x);
            points.add((edgeWidth - outlineWidth) + y);
            points.add((-edgeWidth + outlineWidth) + x);
            points.add(edgeWidth + y);
            points.add((0) + x);
            points.add(outlineWidth + y);
            points.add((edgeWidth - outlineWidth) + x);
            points.add(edgeWidth + y);
            points.add(edgeWidth + x);
            points.add((edgeWidth - outlineWidth) + y);
            points.add(outlineWidth + x);
            points.add((0) + y);
            points.add(edgeWidth + x);
            points.add((-edgeWidth + outlineWidth) + y);
            points.add((edgeWidth - outlineWidth) + x);
            points.add((-edgeWidth) + y);
            points.add((0) + x);
            points.add((-outlineWidth) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) + 4) / 2;
        var outlineWidth = 2;
        points.add((-edgeWidth + outlineWidth) + x);
        points.add((-edgeWidth) + y);
        points.add((-edgeWidth) + x);
        points.add((-edgeWidth + outlineWidth) + y);
        points.add((-outlineWidth) + x);
        points.add((0) + y);
        points.add((-edgeWidth) + x);
        points.add((edgeWidth - outlineWidth) + y);
        points.add((-edgeWidth + outlineWidth) + x);
        points.add(edgeWidth + y);
        points.add((0) + x);
        points.add(outlineWidth + y);
        points.add((edgeWidth - outlineWidth) + x);
        points.add(edgeWidth + y);
        points.add(edgeWidth + x);
        points.add((edgeWidth - outlineWidth) + y);
        points.add(outlineWidth + x);
        points.add((0) + y);
        points.add(edgeWidth + x);
        points.add((-edgeWidth + outlineWidth) + y);
        points.add((edgeWidth - outlineWidth) + x);
        points.add((-edgeWidth) + y);
        points.add((0) + x);
        points.add((-outlineWidth) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDTimesPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDTimesPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) + 4) / 2;
            var outlineWidth = 3;
            points.add((-edgeWidth + outlineWidth) + x);
            points.add((-edgeWidth) + y);
            points.add((-edgeWidth) + x);
            points.add((-edgeWidth + outlineWidth) + y);
            points.add((-outlineWidth) + x);
            points.add((0) + y);
            points.add((-edgeWidth) + x);
            points.add((edgeWidth - outlineWidth) + y);
            points.add((-edgeWidth + outlineWidth) + x);
            points.add(edgeWidth + y);
            points.add((0) + x);
            points.add(outlineWidth + y);
            points.add((edgeWidth - outlineWidth) + x);
            points.add(edgeWidth + y);
            points.add(edgeWidth + x);
            points.add((edgeWidth - outlineWidth) + y);
            points.add(outlineWidth + x);
            points.add((0) + y);
            points.add(edgeWidth + x);
            points.add((-edgeWidth + outlineWidth) + y);
            points.add((edgeWidth - outlineWidth) + x);
            points.add((-edgeWidth) + y);
            points.add((0) + x);
            points.add((-outlineWidth) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var edgeWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) + 4) / 2;
        var outlineWidth = 3;
        points.add((-edgeWidth + outlineWidth) + x);
        points.add((-edgeWidth) + y);
        points.add((-edgeWidth) + x);
        points.add((-edgeWidth + outlineWidth) + y);
        points.add((-outlineWidth) + x);
        points.add((0) + y);
        points.add((-edgeWidth) + x);
        points.add((edgeWidth - outlineWidth) + y);
        points.add((-edgeWidth + outlineWidth) + x);
        points.add(edgeWidth + y);
        points.add((0) + x);
        points.add(outlineWidth + y);
        points.add((edgeWidth - outlineWidth) + x);
        points.add(edgeWidth + y);
        points.add(edgeWidth + x);
        points.add((edgeWidth - outlineWidth) + y);
        points.add(outlineWidth + x);
        points.add((0) + y);
        points.add(edgeWidth + x);
        points.add((-edgeWidth + outlineWidth) + y);
        points.add((edgeWidth - outlineWidth) + x);
        points.add((-edgeWidth) + y);
        points.add((0) + x);
        points.add((-outlineWidth) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledTimesHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledTimesHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
            var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
            points.add((-quarterWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add((-quarterWidth) + y);
            points.add((-quarterWidth) + x);
            points.add((0) + y);
            points.add((-halfWidth) + x);
            points.add(quarterWidth + y);
            points.add((-quarterWidth) + x);
            points.add(halfWidth + y);
            points.add((0) + x);
            points.add(quarterWidth + y);
            points.add(quarterWidth + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add(quarterWidth + y);
            points.add(quarterWidth + x);
            points.add((0) + y);
            points.add(halfWidth + x);
            points.add((-quarterWidth) + y);
            points.add(quarterWidth + x);
            points.add((-halfWidth) + y);
            points.add((0) + x);
            points.add((-quarterWidth) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
        var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
        points.add((-quarterWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add((-quarterWidth) + y);
        points.add((-quarterWidth) + x);
        points.add((0) + y);
        points.add((-halfWidth) + x);
        points.add(quarterWidth + y);
        points.add((-quarterWidth) + x);
        points.add(halfWidth + y);
        points.add((0) + x);
        points.add(quarterWidth + y);
        points.add(quarterWidth + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add(quarterWidth + y);
        points.add(quarterWidth + x);
        points.add((0) + y);
        points.add(halfWidth + x);
        points.add((-quarterWidth) + y);
        points.add(quarterWidth + x);
        points.add((-halfWidth) + y);
        points.add((0) + x);
        points.add((-quarterWidth) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledTimesPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledTimesPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
            var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
            points.add((-quarterWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add((-quarterWidth) + y);
            points.add((-quarterWidth) + x);
            points.add((0) + y);
            points.add((-halfWidth) + x);
            points.add(quarterWidth + y);
            points.add((-quarterWidth) + x);
            points.add(halfWidth + y);
            points.add((0) + x);
            points.add(quarterWidth + y);
            points.add(quarterWidth + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add(quarterWidth + y);
            points.add(quarterWidth + x);
            points.add((0) + y);
            points.add(halfWidth + x);
            points.add((-quarterWidth) + y);
            points.add(quarterWidth + x);
            points.add((-halfWidth) + y);
            points.add((0) + x);
            points.add((-quarterWidth) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
        var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
        points.add((-quarterWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add((-quarterWidth) + y);
        points.add((-quarterWidth) + x);
        points.add((0) + y);
        points.add((-halfWidth) + x);
        points.add(quarterWidth + y);
        points.add((-quarterWidth) + x);
        points.add(halfWidth + y);
        points.add((0) + x);
        points.add(quarterWidth + y);
        points.add(quarterWidth + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add(quarterWidth + y);
        points.add(quarterWidth + x);
        points.add((0) + y);
        points.add(halfWidth + x);
        points.add((-quarterWidth) + y);
        points.add(quarterWidth + x);
        points.add((-halfWidth) + y);
        points.add((0) + x);
        points.add((-quarterWidth) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDDiamondHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDDiamondHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) + 3) / 2;
            points.add((0) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add((0) + y);
            points.add((0) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add((0) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) + 3) / 2;
        points.add((0) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add((0) + y);
        points.add((0) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add((0) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDDiamondPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDDiamondPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) + 4) / 2;
            points.add((0) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add((0) + y);
            points.add((0) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add((0) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) + 4) / 2;
        points.add((0) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add((0) + y);
        points.add((0) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add((0) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledDiamondHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledDiamondHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
            points.add((0) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add((0) + y);
            points.add((0) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add((0) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
        points.add((0) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add((0) + y);
        points.add((0) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add((0) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledDiamondPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledDiamondPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) + 2) / 2;
            points.add((0) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add((0) + y);
            points.add((0) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add((0) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) + 2) / 2;
        points.add((0) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add((0) + y);
        points.add((0) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add((0) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
            points.add((0) + x);
            points.add((-pointDistance) + y);
            points.add((-sideDistance) + x);
            points.add(sideDistance + y);
            points.add(sideDistance + x);
            points.add(sideDistance + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
        points.add((0) + x);
        points.add((-pointDistance) + y);
        points.add((-sideDistance) + x);
        points.add(sideDistance + y);
        points.add(sideDistance + x);
        points.add(sideDistance + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
            points.add((0) + x);
            points.add((-pointDistance) + y);
            points.add((-sideDistance) + x);
            points.add(sideDistance + y);
            points.add(sideDistance + x);
            points.add(sideDistance + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
        points.add((0) + x);
        points.add((-pointDistance) + y);
        points.add((-sideDistance) + x);
        points.add(sideDistance + y);
        points.add(sideDistance + x);
        points.add(sideDistance + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
            points.add((0) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add(halfWidth + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
        points.add((0) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add(halfWidth + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
            points.add((0) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add(halfWidth + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
        points.add((0) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add(halfWidth + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDDownTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDDownTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 2.5) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
            points.add((0) + x);
            points.add(pointDistance + y);
            points.add((-sideDistance) + x);
            points.add((-sideDistance) + y);
            points.add(sideDistance + x);
            points.add((-sideDistance) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 2.5) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
        points.add((0) + x);
        points.add(pointDistance + y);
        points.add((-sideDistance) + x);
        points.add((-sideDistance) + y);
        points.add(sideDistance + x);
        points.add((-sideDistance) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDDownTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDDownTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
            points.add((0) + x);
            points.add(pointDistance + y);
            points.add((-sideDistance) + x);
            points.add((-sideDistance) + y);
            points.add(sideDistance + x);
            points.add((-sideDistance) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
        points.add((0) + x);
        points.add(pointDistance + y);
        points.add((-sideDistance) + x);
        points.add((-sideDistance) + y);
        points.add(sideDistance + x);
        points.add((-sideDistance) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledDownTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledDownTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
            points.add((0) + x);
            points.add(halfWidth + y);
            points.add((-halfWidth) + x);
            points.add((-halfWidth) + y);
            points.add(halfWidth + x);
            points.add((-halfWidth) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
        points.add((0) + x);
        points.add(halfWidth + y);
        points.add((-halfWidth) + x);
        points.add((-halfWidth) + y);
        points.add(halfWidth + x);
        points.add((-halfWidth) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledDownTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledDownTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
            points.add((0) + x);
            points.add(halfWidth + y);
            points.add((-halfWidth) + x);
            points.add((-halfWidth) + y);
            points.add(halfWidth + x);
            points.add((-halfWidth) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
        points.add((0) + x);
        points.add(halfWidth + y);
        points.add((-halfWidth) + x);
        points.add((-halfWidth) + y);
        points.add(halfWidth + x);
        points.add((-halfWidth) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDLeftTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDLeftTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
            points.add((-pointDistance) + x);
            points.add((0) + y);
            points.add(sideDistance + x);
            points.add((-sideDistance) + y);
            points.add(sideDistance + x);
            points.add(sideDistance + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
        points.add((-pointDistance) + x);
        points.add((0) + y);
        points.add(sideDistance + x);
        points.add((-sideDistance) + y);
        points.add(sideDistance + x);
        points.add(sideDistance + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDLeftTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDLeftTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
            points.add((-pointDistance) + x);
            points.add((0) + y);
            points.add(sideDistance + x);
            points.add((-sideDistance) + y);
            points.add(sideDistance + x);
            points.add(sideDistance + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
        points.add((-pointDistance) + x);
        points.add((0) + y);
        points.add(sideDistance + x);
        points.add((-sideDistance) + y);
        points.add(sideDistance + x);
        points.add(sideDistance + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledLeftTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledLeftTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
            points.add((-halfWidth) + x);
            points.add((0) + y);
            points.add(halfWidth + x);
            points.add((-halfWidth) + y);
            points.add(halfWidth + x);
            points.add(halfWidth + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
        points.add((-halfWidth) + x);
        points.add((0) + y);
        points.add(halfWidth + x);
        points.add((-halfWidth) + y);
        points.add(halfWidth + x);
        points.add(halfWidth + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledLeftTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledLeftTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
            points.add((-halfWidth) + x);
            points.add((0) + y);
            points.add(halfWidth + x);
            points.add((-halfWidth) + y);
            points.add(halfWidth + x);
            points.add(halfWidth + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
        points.add((-halfWidth) + x);
        points.add((0) + y);
        points.add(halfWidth + x);
        points.add((-halfWidth) + y);
        points.add(halfWidth + x);
        points.add(halfWidth + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDRightTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDRightTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
            points.add((-sideDistance) + x);
            points.add((-sideDistance) + y);
            points.add((-sideDistance) + x);
            points.add(sideDistance + y);
            points.add(pointDistance + x);
            points.add((0) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 3) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 6) / 2;
        points.add((-sideDistance) + x);
        points.add((-sideDistance) + y);
        points.add((-sideDistance) + x);
        points.add(sideDistance + y);
        points.add(pointDistance + x);
        points.add((0) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDRightTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDRightTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
            var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
            points.add((-sideDistance) + x);
            points.add((-sideDistance) + y);
            points.add((-sideDistance) + x);
            points.add(sideDistance + y);
            points.add(pointDistance + x);
            points.add((0) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var sideDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 4) / 2;
        var pointDistance = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) + 8) / 2;
        points.add((-sideDistance) + x);
        points.add((-sideDistance) + y);
        points.add((-sideDistance) + x);
        points.add(sideDistance + y);
        points.add(pointDistance + x);
        points.add((0) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledRightTriangleHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledRightTriangleHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
            points.add((-halfWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add((0) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
        points.add((-halfWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add((0) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledRightTrianglePressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledRightTrianglePressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
            points.add((-halfWidth) + x);
            points.add((-halfWidth) + y);
            points.add((-halfWidth) + x);
            points.add(halfWidth + y);
            points.add(halfWidth + x);
            points.add((0) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var halfWidth = ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) + 1) / 2;
        points.add((-halfWidth) + x);
        points.add((-halfWidth) + y);
        points.add((-halfWidth) + x);
        points.add(halfWidth + y);
        points.add(halfWidth + x);
        points.add((0) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledStarHoverOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledStarHoverOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var computedWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) + 2;
            var computedVal = computedWidth * 0.3877;
            var halfWidth = computedWidth / 2;
            points.add((0) + x);
            points.add((-halfWidth + (computedWidth * 0.0246)) + y);
            points.add((-halfWidth + (computedWidth * 0.3817)) + x);
            points.add((-halfWidth + computedVal) + y);
            points.add((-halfWidth) + x);
            points.add((-halfWidth + computedVal) + y);
            points.add((-halfWidth + (computedWidth * 0.3088)) + x);
            points.add((-halfWidth + (computedWidth * 0.612)) + y);
            points.add((-halfWidth + (computedWidth * 0.1909)) + x);
            points.add((-halfWidth + (computedWidth * 0.9751)) + y);
            points.add((0) + x);
            points.add((-halfWidth + (computedWidth * 0.7507)) + y);
            points.add((-halfWidth + (computedWidth * 0.8085)) + x);
            points.add((-halfWidth + (computedWidth * 0.9751)) + y);
            points.add((-halfWidth + (computedWidth * 0.6905)) + x);
            points.add((-halfWidth + (computedWidth * 0.612)) + y);
            points.add(halfWidth + x);
            points.add((-halfWidth + computedVal) + y);
            points.add((-halfWidth + (computedWidth * 0.6176)) + x);
            points.add((-halfWidth + computedVal) + y);
            tabContext.set_lineWidth(1);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var computedWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) + 2;
        var computedVal = computedWidth * 0.3877;
        var halfWidth = computedWidth / 2;
        points.add((0) + x);
        points.add((-halfWidth + (computedWidth * 0.0246)) + y);
        points.add((-halfWidth + (computedWidth * 0.3817)) + x);
        points.add((-halfWidth + computedVal) + y);
        points.add((-halfWidth) + x);
        points.add((-halfWidth + computedVal) + y);
        points.add((-halfWidth + (computedWidth * 0.3088)) + x);
        points.add((-halfWidth + (computedWidth * 0.612)) + y);
        points.add((-halfWidth + (computedWidth * 0.1909)) + x);
        points.add((-halfWidth + (computedWidth * 0.9751)) + y);
        points.add((0) + x);
        points.add((-halfWidth + (computedWidth * 0.7507)) + y);
        points.add((-halfWidth + (computedWidth * 0.8085)) + x);
        points.add((-halfWidth + (computedWidth * 0.9751)) + y);
        points.add((-halfWidth + (computedWidth * 0.6905)) + x);
        points.add((-halfWidth + (computedWidth * 0.612)) + y);
        points.add(halfWidth + x);
        points.add((-halfWidth + computedVal) + y);
        points.add((-halfWidth + (computedWidth * 0.6176)) + x);
        points.add((-halfWidth + computedVal) + y);
        tabContext.set_lineWidth(1);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer._renderShapeIDFilledStarPressedOverlayImage = function tab_MarksRenderer$_renderShapeIDFilledStarPressedOverlayImage(tabContext, paneDrawInfo, markIndex) {
    var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideNone'];
    var x = paneDrawInfo.getMarkProperty('x', markIndex);
    var y = paneDrawInfo.getMarkProperty('y', markIndex);
    if (paneDrawInfo.get_isWrappedDomain()) {
        var bounds = paneDrawInfo.getMarkBounds(markIndex);
        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
        for (var instance = instances.first; instance <= instances.second; ++instance) {
            tabContext.save();
            tabContext.translate(paneDrawInfo.getWorldOffset(instance), 0);
            var points = [];
            var computedWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) + 4;
            var computedVal = computedWidth * 0.3877;
            var halfWidth = computedWidth / 2;
            points.add((0) + x);
            points.add((-halfWidth + (computedWidth * 0.0246)) + y);
            points.add((-halfWidth + (computedWidth * 0.3817)) + x);
            points.add((-halfWidth + computedVal) + y);
            points.add((-halfWidth) + x);
            points.add((-halfWidth + computedVal) + y);
            points.add((-halfWidth + (computedWidth * 0.3088)) + x);
            points.add((-halfWidth + (computedWidth * 0.612)) + y);
            points.add((-halfWidth + (computedWidth * 0.1909)) + x);
            points.add((-halfWidth + (computedWidth * 0.9751)) + y);
            points.add((0) + x);
            points.add((-halfWidth + (computedWidth * 0.7507)) + y);
            points.add((-halfWidth + (computedWidth * 0.8085)) + x);
            points.add((-halfWidth + (computedWidth * 0.9751)) + y);
            points.add((-halfWidth + (computedWidth * 0.6905)) + x);
            points.add((-halfWidth + (computedWidth * 0.612)) + y);
            points.add(halfWidth + x);
            points.add((-halfWidth + computedVal) + y);
            points.add((-halfWidth + (computedWidth * 0.6176)) + x);
            points.add((-halfWidth + computedVal) + y);
            tabContext.set_lineWidth(2);
            tabContext.set_strokeStyle(color);
            tabContext.set_lineJoin('miter');
            tab.CanvasRenderer.strokePath(tabContext, points, true, true);
            tabContext.restore();
        }
    }
    else {
        var points = [];
        var computedWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) + 4;
        var computedVal = computedWidth * 0.3877;
        var halfWidth = computedWidth / 2;
        points.add((0) + x);
        points.add((-halfWidth + (computedWidth * 0.0246)) + y);
        points.add((-halfWidth + (computedWidth * 0.3817)) + x);
        points.add((-halfWidth + computedVal) + y);
        points.add((-halfWidth) + x);
        points.add((-halfWidth + computedVal) + y);
        points.add((-halfWidth + (computedWidth * 0.3088)) + x);
        points.add((-halfWidth + (computedWidth * 0.612)) + y);
        points.add((-halfWidth + (computedWidth * 0.1909)) + x);
        points.add((-halfWidth + (computedWidth * 0.9751)) + y);
        points.add((0) + x);
        points.add((-halfWidth + (computedWidth * 0.7507)) + y);
        points.add((-halfWidth + (computedWidth * 0.8085)) + x);
        points.add((-halfWidth + (computedWidth * 0.9751)) + y);
        points.add((-halfWidth + (computedWidth * 0.6905)) + x);
        points.add((-halfWidth + (computedWidth * 0.612)) + y);
        points.add(halfWidth + x);
        points.add((-halfWidth + computedVal) + y);
        points.add((-halfWidth + (computedWidth * 0.6176)) + x);
        points.add((-halfWidth + computedVal) + y);
        tabContext.set_lineWidth(2);
        tabContext.set_strokeStyle(color);
        tabContext.set_lineJoin('miter');
        tab.CanvasRenderer.strokePath(tabContext, points, true, true);
    }
}
tab.MarksRenderer.prototype = {
    
    _renderMultipolygonMark: function tab_MarksRenderer$_renderMultipolygonMark(paneDrawInfo, renderPass) {
        var markCount = paneDrawInfo.get_markCount();
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        this.get_currentContext().save();
        switch (renderPass) {
            case 'normalUnderPass':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    if ((hasSelection || hasBrushing)) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                        }
                    }
                    if ((hasSelection || hasBrushing)) {
                        colorOverrideMode = 'colorOverrideNone';
                        for (var markIndex = 0; markIndex < markCount; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                                continue;
                            }
                            if (paneDrawInfo.get_isWrappedDomain()) {
                                var bounds = paneDrawInfo.getMarkBounds(markIndex);
                                var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                                var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                                var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                                for (var instance = instances.first; instance <= instances.second; ++instance) {
                                    this.get_currentContext().save();
                                    this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                    this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                    this.get_currentContext().restore();
                                }
                            }
                            else {
                                this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                            }
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if ((hasSelection || hasBrushing)) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if ((hasSelection || hasBrushing)) {
                    colorOverrideMode = 'colorOverrideNone';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if ((hasSelection || hasBrushing)) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if ((hasSelection || hasBrushing)) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawMultipolygonMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawMultipolygonMarkLayer: function tab_MarksRenderer$_drawMultipolygonMarkLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().save();
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
            case 'selectedUnder':
            case 'normalOn':
                tab.CanvasRenderer.createMultipolygonPath(this.get_currentContext(), paneDrawInfo.hasPixelGeometry, paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('size', markIndex), 7, paneDrawInfo.getMarkGeometry(paneDrawInfo.getMarkProperty('geometry', markIndex)));
                break;
            default:
                break;
        }
        var sizeOffset = (layer !== 'normalOn') ? 0 : tab.CanvasRenderer.get_multipolyLineSizeOffset();
        switch (layer) {
            case 'normalUnder':
                this.strokeCurrentPath(2 - sizeOffset, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder':
                this.strokeCurrentPath(2 - sizeOffset, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                break;
            case 'normalOn':
                this.fillCurrentPath((paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                if (paneDrawInfo.getMarkProperty('draw_border', markIndex)) {
                    this.strokeCurrentPath(1 - sizeOffset, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode]);
                }
                break;
            default:
                break;
        }
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().restore();
        }
    },
    
    _renderAreaMark: function tab_MarksRenderer$_renderAreaMark(paneDrawInfo, renderPass) {
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        var lineDrawState = paneDrawInfo.get_lineDrawState();
        this.get_currentContext().save();
        switch (renderPass) {
            case 'normalUnderPass':
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                var $enum1 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                while ($enum1.moveNext()) {
                    var currentLine = $enum1.current;
                    if (currentLine.get_lineState() !== 'lineStateNormal') {
                        continue;
                    }
                    var instances;
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                    }
                    else {
                        instances = new ss.Tuple(0, 0);
                    }
                    for (var instance = instances.first; instance <= instances.second; ++instance) {
                        if (!!instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                        }
                        for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'edgeOn', colorOverrideMode);
                        }
                        if (!!instance) {
                            this.get_currentContext().restore();
                        }
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    var $enum2 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum2.moveNext()) {
                        var currentLine = $enum2.current;
                        if (currentLine.get_lineState() !== 'lineStateHighlighted') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'edgeOn', colorOverrideMode);
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                    var $enum3 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum3.moveNext()) {
                        var currentLine = $enum3.current;
                        if (currentLine.get_lineState() !== 'lineStateHighlighted') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            if (!currentLine.get_allHighlighted()) {
                                for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                        continue;
                                    }
                                    if (paneDrawInfo.isMarkHighlighted(markIndex)) {
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedUnder1', colorOverrideMode);
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedUnder', colorOverrideMode);
                                    }
                                }
                                for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                        continue;
                                    }
                                    if (paneDrawInfo.isMarkHighlighted(markIndex)) {
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedOn1', colorOverrideMode);
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedOn', colorOverrideMode);
                                    }
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    var $enum4 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum4.moveNext()) {
                        var currentLine = $enum4.current;
                        if (currentLine.get_lineState() !== 'lineStateSelected') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'edgeOn', colorOverrideMode);
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                    var $enum5 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum5.moveNext()) {
                        var currentLine = $enum5.current;
                        if (currentLine.get_lineState() !== 'lineStateSelected') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            if (!currentLine.get_allHighlighted()) {
                                for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                        continue;
                                    }
                                    if (paneDrawInfo.isMarkHighlighted(markIndex) && !paneDrawInfo.isMarkSelected(markIndex)) {
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedUnder1', colorOverrideMode);
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedUnder', colorOverrideMode);
                                    }
                                }
                                for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                        continue;
                                    }
                                    if (paneDrawInfo.isMarkHighlighted(markIndex) && !paneDrawInfo.isMarkSelected(markIndex)) {
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedOn1', colorOverrideMode);
                                        this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'highlightedOn', colorOverrideMode);
                                    }
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                    var $enum6 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum6.moveNext()) {
                        var currentLine = $enum6.current;
                        if (currentLine.get_lineState() !== 'lineStateSelected') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.isMarkSelected(markIndex)) {
                                    this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'selectedUnder1', colorOverrideMode);
                                    this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'selectedUnder', colorOverrideMode);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.isMarkSelected(markIndex)) {
                                    this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'selectedOn1', colorOverrideMode);
                                    this._drawAreaMarkLayer(paneDrawInfo, markIndex, currentLine.startIndex, 'selectedOn', colorOverrideMode);
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawAreaMarkLayer: function tab_MarksRenderer$_drawAreaMarkLayer(paneDrawInfo, markIndex, startIndex, layer, colorOverrideMode) {
        var left = paneDrawInfo.getLeft(markIndex);
        var right = paneDrawInfo.getRight(markIndex);
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().save();
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'edgeOn':
                if (paneDrawInfo.getRight(markIndex) !== -1) {
                    var points = [];
                    points.add(Math.round(paneDrawInfo.getMarkProperty('x1', markIndex)));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(Math.round(paneDrawInfo.getMarkProperty('x1', right)));
                    points.add(paneDrawInfo.getMarkProperty('y1', right));
                    points.add(Math.round(paneDrawInfo.getMarkProperty('x_prev', right)));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', right));
                    points.add(Math.round(paneDrawInfo.getMarkProperty('x_next', markIndex)));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    this.get_currentContext().set_lineJoin('miter');
                    this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', startIndex))[colorOverrideMode]);
                }
                if (paneDrawInfo.get_drawBorder() && paneDrawInfo.getRight(markIndex) !== -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x1', right));
                    points.add(paneDrawInfo.getMarkProperty('y1', right));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], true);
                }
                if (paneDrawInfo.get_drawBorder() && paneDrawInfo.getRight(markIndex) !== -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_prev', right));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', right));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], true);
                }
                if (paneDrawInfo.get_drawBorder() && (paneDrawInfo.getLeft(markIndex) !== -1 && paneDrawInfo.getRight(markIndex) !== -1)) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x_prev', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], true);
                }
                if (paneDrawInfo.get_drawBorder() && paneDrawInfo.getLeft(markIndex) === -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], true);
                }
                if (paneDrawInfo.get_drawBorder() && paneDrawInfo.getRight(markIndex) === -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_prev', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', markIndex));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], true);
                }
                if (!paneDrawInfo.get_drawBorder() && paneDrawInfo.getRight(markIndex) !== -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x1', right));
                    points.add(paneDrawInfo.getMarkProperty('y1', right));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('color', startIndex))[colorOverrideMode], true);
                }
                if (!paneDrawInfo.get_drawBorder() && paneDrawInfo.getRight(markIndex) !== -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_prev', right));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', right));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('color', startIndex))[colorOverrideMode], true);
                }
                if (!paneDrawInfo.get_drawBorder() && (paneDrawInfo.getLeft(markIndex) !== -1 && paneDrawInfo.getRight(markIndex) !== -1)) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x_prev', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('color', startIndex))[colorOverrideMode], true);
                }
                if (!paneDrawInfo.get_drawBorder() && paneDrawInfo.getLeft(markIndex) === -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_next', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_next', markIndex));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('color', startIndex))[colorOverrideMode], true);
                }
                if (!paneDrawInfo.get_drawBorder() && paneDrawInfo.getRight(markIndex) === -1) {
                    var points = [];
                    points.add(paneDrawInfo.getMarkProperty('x1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y1', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('x_prev', markIndex));
                    points.add(paneDrawInfo.getMarkProperty('y_prev', markIndex));
                    this.renderLine(points, 1, (paneDrawInfo.getMarkProperty('color', startIndex))[colorOverrideMode], true);
                }
                break;
            case 'selectedOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x1', markIndex), 0 + paneDrawInfo.getMarkProperty('y1', markIndex), 5, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x1', markIndex), 0 + paneDrawInfo.getMarkProperty('y1', markIndex), 5, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'selectedOn1':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), 5, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder1':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), 5, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'highlightedOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x1', markIndex), 0 + paneDrawInfo.getMarkProperty('y1', markIndex), 5, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'highlightedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x1', markIndex), 0 + paneDrawInfo.getMarkProperty('y1', markIndex), 5, (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'highlightedOn1':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), 5, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'highlightedUnder1':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), 5, (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            default:
                break;
        }
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().restore();
        }
    },
    
    _renderMarkLabels: function tab_MarksRenderer$_renderMarkLabels(paneDrawInfo, renderPass) {
        var markCount = paneDrawInfo.get_markCount();
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        this.get_currentContext().save();
        var styleSetter = this.setupContextForTextRendering(paneDrawInfo);
        switch (renderPass) {
            case 'normalUnderPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateNormal') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                    }
                }
                colorOverrideMode = 'colorOverrideNone';
                var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateHighlighted') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                    }
                }
                colorOverrideMode = 'colorOverrideNone';
                var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateSelected') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                    }
                }
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateNormal') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                            var textRunOffset = paneDrawInfo.getMarkLabelProperty('text_run_offset', markIndex);
                            var numRuns = paneDrawInfo.getMarkLabelProperty('text_run_count', markIndex);
                            var multipleRuns = numRuns > 1;
                            for (var runNum = 0; runNum < numRuns; runNum++) {
                                var runId = runNum + textRunOffset;
                                if (drawRunsInReverse) {
                                    runId = textRunOffset + numRuns - runNum - 1;
                                }
                                this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                            }
                            this.clearPrevTextRunInfo();
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                        var textRunOffset = paneDrawInfo.getMarkLabelProperty('text_run_offset', markIndex);
                        var numRuns = paneDrawInfo.getMarkLabelProperty('text_run_count', markIndex);
                        var multipleRuns = numRuns > 1;
                        for (var runNum = 0; runNum < numRuns; runNum++) {
                            var runId = runNum + textRunOffset;
                            if (drawRunsInReverse) {
                                runId = textRunOffset + numRuns - runNum - 1;
                            }
                            this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                        }
                        this.clearPrevTextRunInfo();
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                                var textRunOffset = paneDrawInfo.getMarkLabelProperty('text_run_offset', markIndex);
                                var numRuns = paneDrawInfo.getMarkLabelProperty('text_run_count', markIndex);
                                var multipleRuns = numRuns > 1;
                                for (var runNum = 0; runNum < numRuns; runNum++) {
                                    var runId = runNum + textRunOffset;
                                    if (drawRunsInReverse) {
                                        runId = textRunOffset + numRuns - runNum - 1;
                                    }
                                    this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'highlightedOn', colorOverrideMode, styleSetter);
                                }
                                this.clearPrevTextRunInfo();
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                            var textRunOffset = paneDrawInfo.getMarkLabelProperty('text_run_offset', markIndex);
                            var numRuns = paneDrawInfo.getMarkLabelProperty('text_run_count', markIndex);
                            var multipleRuns = numRuns > 1;
                            for (var runNum = 0; runNum < numRuns; runNum++) {
                                var runId = runNum + textRunOffset;
                                if (drawRunsInReverse) {
                                    runId = textRunOffset + numRuns - runNum - 1;
                                }
                                this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'highlightedOn', colorOverrideMode, styleSetter);
                            }
                            this.clearPrevTextRunInfo();
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawMarkLabelLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markHasLabel(markIndex) || !paneDrawInfo.markLabelNeedsDraw(markIndex, sceneDirtyRect)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkLabelState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                                var textRunOffset = paneDrawInfo.getMarkLabelProperty('text_run_offset', markIndex);
                                var numRuns = paneDrawInfo.getMarkLabelProperty('text_run_count', markIndex);
                                var multipleRuns = numRuns > 1;
                                for (var runNum = 0; runNum < numRuns; runNum++) {
                                    var runId = runNum + textRunOffset;
                                    if (drawRunsInReverse) {
                                        runId = textRunOffset + numRuns - runNum - 1;
                                    }
                                    this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                                }
                                this.clearPrevTextRunInfo();
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                            var textRunOffset = paneDrawInfo.getMarkLabelProperty('text_run_offset', markIndex);
                            var numRuns = paneDrawInfo.getMarkLabelProperty('text_run_count', markIndex);
                            var multipleRuns = numRuns > 1;
                            for (var runNum = 0; runNum < numRuns; runNum++) {
                                var runId = runNum + textRunOffset;
                                if (drawRunsInReverse) {
                                    runId = textRunOffset + numRuns - runNum - 1;
                                }
                                this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                            }
                            this.clearPrevTextRunInfo();
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawMarkLabelLayer: function tab_MarksRenderer$_drawMarkLabelLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().save();
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    var markX = paneDrawInfo.getMarkLabelProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkLabelProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkLabelProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkLabelProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = 0;
                    var bottomOffset = 0;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkLabelProperty('halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                if (paneDrawInfo.isMarkDebug(markIndex)) {
                    var markX = paneDrawInfo.getMarkLabelProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkLabelProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkLabelProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkLabelProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = 0;
                    var bottomOffset = 0;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                break;
            case 'normalOn':
                break;
            case 'highlightedUnder':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    var markX = paneDrawInfo.getMarkLabelProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkLabelProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkLabelProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkLabelProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = 0;
                    var bottomOffset = 0;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkLabelProperty('halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                if (paneDrawInfo.isMarkDebug(markIndex)) {
                    var markX = paneDrawInfo.getMarkLabelProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkLabelProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkLabelProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkLabelProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = 0;
                    var bottomOffset = 0;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                break;
            case 'highlightedOn':
                break;
            case 'selectedUnder':
                break;
            default:
                break;
        }
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().restore();
        }
    },
    
    _drawTextRunLayer: function tab_MarksRenderer$_drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, layer, colorOverrideMode, styleSetter) {
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().save();
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
                break;
            case 'normalOn':
                var styleId = paneDrawInfo.getTextRunProperty('text_style_id', runId);
                styleSetter(styleId);
                var color = paneDrawInfo._getTextStyleColor(styleId, markIndex, colorOverrideMode);
                var textRun = paneDrawInfo.getTextRunProperty('text_run', runId);
                var x = paneDrawInfo.getMarkLabelProperty('x', markIndex) + paneDrawInfo.getTextRunProperty('text_run_x', runId);
                var y = paneDrawInfo.getMarkLabelProperty('y', markIndex) + paneDrawInfo.getTextRunProperty('text_run_y', runId);
                var maxSize = (this.get_currentContext().get_isTextAngleHorizontal()) ? paneDrawInfo.getMarkLabelProperty('width', markIndex) : paneDrawInfo.getMarkLabelProperty('height', markIndex);
                this.renderText(textRun, x, y, maxSize, color, multipleRuns);
                break;
            case 'highlightedUnder':
                break;
            case 'highlightedOn':
                var styleId = paneDrawInfo.getTextRunProperty('text_style_id', runId);
                styleSetter(styleId);
                var color = paneDrawInfo._getTextStyleColor(styleId, markIndex, colorOverrideMode);
                var textRun = paneDrawInfo.getTextRunProperty('text_run', runId);
                var x = paneDrawInfo.getMarkLabelProperty('x', markIndex) + paneDrawInfo.getTextRunProperty('text_run_x', runId);
                var y = paneDrawInfo.getMarkLabelProperty('y', markIndex) + paneDrawInfo.getTextRunProperty('text_run_y', runId);
                var maxSize = (this.get_currentContext().get_isTextAngleHorizontal()) ? paneDrawInfo.getMarkLabelProperty('width', markIndex) : paneDrawInfo.getMarkLabelProperty('height', markIndex);
                this.renderText(textRun, x, y, maxSize, color, multipleRuns);
                break;
            case 'selectedUnder':
                break;
            default:
                break;
        }
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().restore();
        }
    },
    
    _renderPieMark: function tab_MarksRenderer$_renderPieMark(paneDrawInfo, renderPass) {
        var markCount = paneDrawInfo.get_markCount();
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var lineDrawState = paneDrawInfo.get_lineDrawState();
        var colorOverrideMode = 'colorOverrideNone';
        this.get_currentContext().save();
        switch (renderPass) {
            case 'normalUnderPass':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    if (hasSelection || hasBrushing) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    var $enum1 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum1.moveNext()) {
                        var currentLine = $enum1.current;
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                var $enum2 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                while ($enum2.moveNext()) {
                    var currentLine = $enum2.current;
                    if (currentLine.get_lineState() !== 'lineStateNormal') {
                        continue;
                    }
                    var instances;
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                    }
                    else {
                        instances = new ss.Tuple(0, 0);
                    }
                    for (var instance = instances.first; instance <= instances.second; ++instance) {
                        if (!!instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                        }
                        for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            this._drawPieMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                        }
                        if (!!instance) {
                            this.get_currentContext().restore();
                        }
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    var $enum3 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum3.moveNext()) {
                        var currentLine = $enum3.current;
                        if (currentLine.get_lineState() !== 'lineStateHighlighted') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            colorOverrideMode = 'colorOverrideFog';
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            }
                            colorOverrideMode = 'colorOverrideNone';
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    var $enum4 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum4.moveNext()) {
                        var currentLine = $enum4.current;
                        if (currentLine.get_lineState() !== 'lineStateSelected') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            colorOverrideMode = 'colorOverrideFog';
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            }
                            colorOverrideMode = 'colorOverrideNone';
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                            }
                            colorOverrideMode = 'colorOverrideOpaque';
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                                    continue;
                                }
                                this._drawPieMarkLayer(paneDrawInfo, markIndex, 'selectedOn', colorOverrideMode);
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawPieMarkLayer: function tab_MarksRenderer$_drawPieMarkLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        this.get_currentContext().save();
        if (!!paneDrawInfo.get_clipCase()) {
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
                var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
                var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                var anticlockwise = theta > theta1;
                var color = (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
                if (Math.abs(theta - theta1) >= 1) {
                    tab.CanvasRenderer.renderCircle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius * 2, color, 4);
                }
                else {
                    tab.CanvasRenderer.renderWedge(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 4, anticlockwise);
                }
                break;
            case 'normalOn':
                var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
                var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                if (theta > theta1) {
                    var temp = theta;
                    theta = theta1;
                    theta1 = temp;
                }
                var xPos = paneDrawInfo.getMarkProperty('x', markIndex);
                var yPos = paneDrawInfo.getMarkProperty('y', markIndex);
                var color = (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode];
                if (paneDrawInfo.getMarkProperty('alpha', markIndex) >= 1) {
                    var canvasAngle = tab.CanvasRenderer.toCanvasAngle(theta);
                    var canvasAngle2 = tab.CanvasRenderer.toCanvasAngle(theta1);
                    if (Math.abs(canvasAngle2 - canvasAngle) >= tab.CanvasRenderer.angleEpsilon) {
                        this.get_currentContext().beginPath();
                        this.get_currentContext().set_lineCap('butt');
                        this.get_currentContext().set_lineWidth(1.5);
                        this.get_currentContext().set_strokeStyle(color);
                        this.get_currentContext().moveTo(xPos, yPos);
                        this.get_currentContext().lineTo(xPos + (Math.cos(canvasAngle) * radius), yPos + (Math.sin(canvasAngle) * radius));
                        this.get_currentContext().stroke();
                    }
                }
                if (Math.abs(theta - theta1) >= 1) {
                    tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), xPos, yPos, radius * 2, color);
                }
                else {
                    this.renderFilledWedge(xPos, yPos, radius, theta, theta1, color);
                }
                if (paneDrawInfo.getMarkProperty('draw_border', markIndex)) {
                    var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                    var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                    var anticlockwise = theta > theta1;
                    var color = (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode];
                    if (Math.abs(theta - theta1) >= 1) {
                        tab.CanvasRenderer.renderCircle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius * 2, color, 1);
                    }
                    else {
                        tab.CanvasRenderer.renderWedge(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 1, anticlockwise);
                    }
                }
                break;
            case 'highlightedUnder':
                var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
                var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                var anticlockwise = theta > theta1;
                var color = (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
                if (Math.abs(theta - theta1) >= 1) {
                    tab.CanvasRenderer.renderCircle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius * 2, color, 4);
                }
                else {
                    tab.CanvasRenderer.renderWedge(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 4, anticlockwise);
                }
                break;
            case 'highlightedOn':
                var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
                var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                if (theta > theta1) {
                    var temp = theta;
                    theta = theta1;
                    theta1 = temp;
                }
                var xPos = paneDrawInfo.getMarkProperty('x', markIndex);
                var yPos = paneDrawInfo.getMarkProperty('y', markIndex);
                var color = (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode];
                if (paneDrawInfo.getMarkProperty('alpha', markIndex) >= 1) {
                    var canvasAngle = tab.CanvasRenderer.toCanvasAngle(theta);
                    var canvasAngle2 = tab.CanvasRenderer.toCanvasAngle(theta1);
                    if (Math.abs(canvasAngle2 - canvasAngle) >= tab.CanvasRenderer.angleEpsilon) {
                        this.get_currentContext().beginPath();
                        this.get_currentContext().set_lineCap('butt');
                        this.get_currentContext().set_lineWidth(1.5);
                        this.get_currentContext().set_strokeStyle(color);
                        this.get_currentContext().moveTo(xPos, yPos);
                        this.get_currentContext().lineTo(xPos + (Math.cos(canvasAngle) * radius), yPos + (Math.sin(canvasAngle) * radius));
                        this.get_currentContext().stroke();
                    }
                }
                if (Math.abs(theta - theta1) >= 1) {
                    tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), xPos, yPos, radius * 2, color);
                }
                else {
                    this.renderFilledWedge(xPos, yPos, radius, theta, theta1, color);
                }
                if (paneDrawInfo.getMarkProperty('draw_border', markIndex)) {
                    var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                    var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                    var anticlockwise = theta > theta1;
                    var color = (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode];
                    if (Math.abs(theta - theta1) >= 1) {
                        tab.CanvasRenderer.renderCircle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius * 2, color, 1);
                    }
                    else {
                        tab.CanvasRenderer.renderWedge(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 1, anticlockwise);
                    }
                }
                break;
            case 'selectedUnder':
                var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
                var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                var anticlockwise = theta > theta1;
                var color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode];
                if (Math.abs(theta - theta1) >= 1) {
                    tab.CanvasRenderer.renderCircle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius * 2, color, 4);
                }
                else {
                    tab.CanvasRenderer.renderWedge(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 4, anticlockwise);
                }
                break;
            case 'selectedOn':
                var radius = paneDrawInfo.getMarkProperty('size', markIndex) / 2;
                var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                if (theta > theta1) {
                    var temp = theta;
                    theta = theta1;
                    theta1 = temp;
                }
                var xPos = paneDrawInfo.getMarkProperty('x', markIndex);
                var yPos = paneDrawInfo.getMarkProperty('y', markIndex);
                var color = (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode];
                if (paneDrawInfo.getMarkProperty('alpha', markIndex) >= 1) {
                    var canvasAngle = tab.CanvasRenderer.toCanvasAngle(theta);
                    var canvasAngle2 = tab.CanvasRenderer.toCanvasAngle(theta1);
                    if (Math.abs(canvasAngle2 - canvasAngle) >= tab.CanvasRenderer.angleEpsilon) {
                        this.get_currentContext().beginPath();
                        this.get_currentContext().set_lineCap('butt');
                        this.get_currentContext().set_lineWidth(1.5);
                        this.get_currentContext().set_strokeStyle(color);
                        this.get_currentContext().moveTo(xPos, yPos);
                        this.get_currentContext().lineTo(xPos + (Math.cos(canvasAngle) * radius), yPos + (Math.sin(canvasAngle) * radius));
                        this.get_currentContext().stroke();
                    }
                }
                if (Math.abs(theta - theta1) >= 1) {
                    tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), xPos, yPos, radius * 2, color);
                }
                else {
                    this.renderFilledWedge(xPos, yPos, radius, theta, theta1, color);
                }
                if (paneDrawInfo.getMarkProperty('draw_border', markIndex)) {
                    var theta = paneDrawInfo.getMarkProperty('theta', markIndex);
                    var theta1 = paneDrawInfo.getMarkProperty('theta1', markIndex);
                    var anticlockwise = theta > theta1;
                    var color = (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode];
                    if (Math.abs(theta - theta1) >= 1) {
                        tab.CanvasRenderer.renderCircle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius * 2, color, 1);
                    }
                    else {
                        tab.CanvasRenderer.renderWedge(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex), radius, theta, theta1, color, 1, anticlockwise);
                    }
                }
                break;
            default:
                break;
        }
        this.get_currentContext().restore();
    },
    
    _renderTextMarks: function tab_MarksRenderer$_renderTextMarks(paneDrawInfo, renderPass) {
        var markCount = paneDrawInfo.get_markCount();
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        this.get_currentContext().save();
        var styleSetter = this.setupContextForTextRendering(paneDrawInfo);
        switch (renderPass) {
            case 'normalUnderPass':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    if (hasSelection || hasBrushing) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawTextMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawTextMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                        }
                    }
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawTextMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawTextMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                            var textRunOffset = paneDrawInfo.getMarkProperty('text_run_offset', markIndex);
                            var numRuns = paneDrawInfo.getMarkProperty('text_run_count', markIndex);
                            var multipleRuns = numRuns > 1;
                            for (var runNum = 0; runNum < numRuns; runNum++) {
                                var runId = runNum + textRunOffset;
                                if (drawRunsInReverse) {
                                    runId = textRunOffset + numRuns - runNum - 1;
                                }
                                this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                            }
                            this.clearPrevTextRunInfo();
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                        var textRunOffset = paneDrawInfo.getMarkProperty('text_run_offset', markIndex);
                        var numRuns = paneDrawInfo.getMarkProperty('text_run_count', markIndex);
                        var multipleRuns = numRuns > 1;
                        for (var runNum = 0; runNum < numRuns; runNum++) {
                            var runId = runNum + textRunOffset;
                            if (drawRunsInReverse) {
                                runId = textRunOffset + numRuns - runNum - 1;
                            }
                            this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                        }
                        this.clearPrevTextRunInfo();
                    }
                }
                break;
            case 'highlightedUnderPass':
                if (hasSelection || hasBrushing) {
                    if (!(paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos())) {
                        colorOverrideMode = 'colorOverrideNone';
                        for (var markIndex = 0; markIndex < markCount; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                                continue;
                            }
                            if (paneDrawInfo.get_isWrappedDomain()) {
                                var bounds = paneDrawInfo.getMarkBounds(markIndex);
                                var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                                var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                                var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                                for (var instance = instances.first; instance <= instances.second; ++instance) {
                                    this.get_currentContext().save();
                                    this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                    this._drawTextMarkLayer(paneDrawInfo, markIndex, 'highlightedUnder', colorOverrideMode);
                                    this.get_currentContext().restore();
                                }
                            }
                            else {
                                this._drawTextMarkLayer(paneDrawInfo, markIndex, 'highlightedUnder', colorOverrideMode);
                            }
                        }
                    }
                }
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                                var textRunOffset = paneDrawInfo.getMarkProperty('text_run_offset', markIndex);
                                var numRuns = paneDrawInfo.getMarkProperty('text_run_count', markIndex);
                                var multipleRuns = numRuns > 1;
                                for (var runNum = 0; runNum < numRuns; runNum++) {
                                    var runId = runNum + textRunOffset;
                                    if (drawRunsInReverse) {
                                        runId = textRunOffset + numRuns - runNum - 1;
                                    }
                                    this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                                }
                                this.clearPrevTextRunInfo();
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                            var textRunOffset = paneDrawInfo.getMarkProperty('text_run_offset', markIndex);
                            var numRuns = paneDrawInfo.getMarkProperty('text_run_count', markIndex);
                            var multipleRuns = numRuns > 1;
                            for (var runNum = 0; runNum < numRuns; runNum++) {
                                var runId = runNum + textRunOffset;
                                if (drawRunsInReverse) {
                                    runId = textRunOffset + numRuns - runNum - 1;
                                }
                                this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                            }
                            this.clearPrevTextRunInfo();
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawTextMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawTextMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                                var textRunOffset = paneDrawInfo.getMarkProperty('text_run_offset', markIndex);
                                var numRuns = paneDrawInfo.getMarkProperty('text_run_count', markIndex);
                                var multipleRuns = numRuns > 1;
                                for (var runNum = 0; runNum < numRuns; runNum++) {
                                    var runId = runNum + textRunOffset;
                                    if (drawRunsInReverse) {
                                        runId = textRunOffset + numRuns - runNum - 1;
                                    }
                                    this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                                }
                                this.clearPrevTextRunInfo();
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            var drawRunsInReverse = this.get_currentContext().get_textAlign() === 'end';
                            var textRunOffset = paneDrawInfo.getMarkProperty('text_run_offset', markIndex);
                            var numRuns = paneDrawInfo.getMarkProperty('text_run_count', markIndex);
                            var multipleRuns = numRuns > 1;
                            for (var runNum = 0; runNum < numRuns; runNum++) {
                                var runId = runNum + textRunOffset;
                                if (drawRunsInReverse) {
                                    runId = textRunOffset + numRuns - runNum - 1;
                                }
                                this._drawTextRunLayer(paneDrawInfo, markIndex, runId, multipleRuns, 'normalOn', colorOverrideMode, styleSetter);
                            }
                            this.clearPrevTextRunInfo();
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawTextMarkLayer: function tab_MarksRenderer$_drawTextMarkLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().save();
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
                if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
                    var markX = paneDrawInfo.getMarkProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
                    var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
                    var markX = paneDrawInfo.getMarkProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkProperty('clip_width', markIndex);
                    var height = -paneDrawInfo.getMarkProperty('clip_height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = -paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                    var bottomOffset = paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                break;
            case 'normalOn':
                break;
            case 'highlightedUnder':
                if (paneDrawInfo.get_hasHaloHighlightColor() && !(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
                    var markX = paneDrawInfo.getMarkProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
                    var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('highlighted_halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                if (paneDrawInfo.get_hasHaloHighlightColor() && (!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
                    var markX = paneDrawInfo.getMarkProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkProperty('clip_width', markIndex);
                    var height = -paneDrawInfo.getMarkProperty('clip_height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = -paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                    var bottomOffset = paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('highlighted_halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                break;
            case 'selectedUnder':
                if (!(!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
                    var markX = paneDrawInfo.getMarkProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkProperty('width', markIndex);
                    var height = -paneDrawInfo.getMarkProperty('height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = -paneDrawInfo.getMarkProperty('width', markIndex) / 2;
                    var bottomOffset = paneDrawInfo.getMarkProperty('height', markIndex) / 2;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                if ((!!paneDrawInfo.get_clipCase() && paneDrawInfo.get_useCellClipForSelection())) {
                    var markX = paneDrawInfo.getMarkProperty('x', markIndex);
                    var markY = paneDrawInfo.getMarkProperty('y', markIndex);
                    var width = paneDrawInfo.getMarkProperty('clip_width', markIndex);
                    var height = -paneDrawInfo.getMarkProperty('clip_height', markIndex);
                    if (height < 0) {
                        markY += height;
                        height = Math.abs(height);
                    }
                    var leftOffset = -paneDrawInfo.getMarkProperty('clip_width', markIndex) / 2;
                    var bottomOffset = paneDrawInfo.getMarkProperty('clip_height', markIndex) / 2;
                    var color;
                    if (paneDrawInfo.isMarkImpliedSelected(markIndex)) {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))['colorOverrideOpaque'];
                    }
                    else {
                        color = (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode];
                    }
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), markX + leftOffset, markY + bottomOffset, width, height, color, 0, 0, false);
                }
                break;
            default:
                break;
        }
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().restore();
        }
    },
    
    _renderBarMark: function tab_MarksRenderer$_renderBarMark(paneDrawInfo, renderPass) {
        var markCount = paneDrawInfo.get_markCount();
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        this.get_currentContext().save();
        this.get_currentContext().set_lineJoin('miter');
        switch (renderPass) {
            case 'normalUnderPass':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    if (hasSelection || hasBrushing) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawBarMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawBarMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                        }
                    }
                    colorOverrideMode = 'colorOverrideNone';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawBarMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawBarMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            this._drawBarMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        this._drawBarMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawBarMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawBarMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawBarMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawBarMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    this.get_currentContext().save();
                    if (paneDrawInfo.get_clipCase() !== 3) {
                        this.get_currentContext().setClip(paneDrawInfo.getInsetPaneClipRect(2));
                    }
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawBarMarkLayer(paneDrawInfo, markIndex, 'selectedOn', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawBarMarkLayer(paneDrawInfo, markIndex, 'selectedOn', colorOverrideMode);
                        }
                    }
                    this.get_currentContext().restore();
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawBarMarkLayer: function tab_MarksRenderer$_drawBarMarkLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        this.get_currentContext().save();
        if (!!paneDrawInfo.get_clipCase()) {
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
                var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                break;
            case 'normalOn':
                var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                break;
            case 'highlightedUnder':
                var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                break;
            case 'highlightedOn':
                var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                break;
            case 'selectedUnder':
                var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
                var borderWidth = 1;
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.clippedByPane(x, y, width, height)) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.clippedByPane(x, y, width, height)) {
                    var expand = 2;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + borderWidth;
                var height = Math.abs(bottom - top) + borderWidth;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.clippedByPane(x, y, width, height)) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.clippedByPane(x, y, width, height)) {
                    var expand = 2;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + borderWidth;
                var height = Math.abs(bottom - top) + borderWidth;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.clippedByPane(x, y, width, height)) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.clippedByPane(x, y, width, height)) {
                    var expand = 2;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + borderWidth;
                var height = Math.abs(bottom - top) + borderWidth;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && !paneDrawInfo.clippedByPane(x, y, width, height)) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.clippedByPane(x, y, width, height)) {
                    var expand = 2;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + borderWidth;
                var height = Math.abs(bottom - top) + borderWidth;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 4, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                break;
            case 'selectedOn':
                var halfSize = (parseInt((paneDrawInfo.getMarkProperty('size', markIndex) + 0.5)) / 2);
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex);
                var bottom = paneDrawInfo.getMarkProperty('y1', markIndex);
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex);
                var right = paneDrawInfo.getMarkProperty('x1', markIndex);
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), false);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY()) {
                    var expand = 0;
                    tab.CanvasRenderer.renderFilledBar(this.get_currentContext(), x - expand, y - expand, width + (2 * expand), height + (2 * expand), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                var left = paneDrawInfo.getMarkProperty('x', markIndex) - halfSize;
                var right = paneDrawInfo.getMarkProperty('x', markIndex) + halfSize;
                var top = paneDrawInfo.getMarkProperty('y', markIndex) - halfSize;
                var bottom = paneDrawInfo.getMarkProperty('y', markIndex) + halfSize;
                var x = Math.min(left, right);
                var y = Math.min(top, bottom);
                var width = Math.abs(right - left) + 0;
                var height = Math.abs(bottom - top) + 0;
                if (!paneDrawInfo.get_scaleMarksInX() && !paneDrawInfo.get_scaleMarksInY() && paneDrawInfo.get_drawBorder()) {
                    tab.CanvasRenderer.renderBarOutline(this.get_currentContext(), x, y, width, height, (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1, paneDrawInfo.get_minBarWidth(), paneDrawInfo.get_minBarHeight(), true);
                }
                break;
            default:
                break;
        }
        this.get_currentContext().restore();
    },
    
    _renderLineMark: function tab_MarksRenderer$_renderLineMark(paneDrawInfo, renderPass) {
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        var lineDrawState = paneDrawInfo.get_lineDrawState();
        this.get_currentContext().save();
        switch (renderPass) {
            case 'normalUnderPass':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    if (hasSelection || hasBrushing) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    var $enum1 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum1.moveNext()) {
                        var currentLine = $enum1.current;
                        if (currentLine.get_lineState() !== 'lineStateNormal') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getLeft(markIndex) !== -1 || paneDrawInfo.getRight(markIndex) !== -1) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'edgeUnder', colorOverrideMode);
                                if ((paneDrawInfo.getLeft(markIndex) === -1 && paneDrawInfo.getRight(markIndex) === -1) || paneDrawInfo.shouldShowMarker(markIndex)) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobUnder', colorOverrideMode);
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                    var $enum2 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum2.moveNext()) {
                        var currentLine = $enum2.current;
                        if (currentLine.get_lineState() !== 'lineStateHighlighted') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getLeft(markIndex) !== -1 || paneDrawInfo.getRight(markIndex) !== -1) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'edgeUnder', colorOverrideMode);
                                if ((paneDrawInfo.getLeft(markIndex) === -1 && paneDrawInfo.getRight(markIndex) === -1) || paneDrawInfo.shouldShowMarker(markIndex)) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobUnder', colorOverrideMode);
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                var $enum3 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                while ($enum3.moveNext()) {
                    var currentLine = $enum3.current;
                    if (currentLine.get_lineState() !== 'lineStateNormal') {
                        continue;
                    }
                    var instances;
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                    }
                    else {
                        instances = new ss.Tuple(0, 0);
                    }
                    for (var instance = instances.first; instance <= instances.second; ++instance) {
                        if (!!instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                        }
                        if (paneDrawInfo.get_hasGlobalTransparency()) {
                            this.beginOffScreenRender();
                            paneDrawInfo.set_forceOpaqueColors(true);
                            if (!!instance) {
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                        }
                        for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            if (paneDrawInfo.getLeft(markIndex) !== -1 || paneDrawInfo.getRight(markIndex) !== -1) {
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            }
                            else {
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobOn', colorOverrideMode);
                            }
                        }
                        for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            this._drawLineMarkLayer(paneDrawInfo, markIndex, 'edgeOn', colorOverrideMode);
                        }
                        if (paneDrawInfo.get_hasGlobalTransparency()) {
                            paneDrawInfo.set_forceOpaqueColors(false);
                            this.endOffScreenRender(paneDrawInfo.get_globalAlpha());
                        }
                        for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            if (paneDrawInfo.shouldShowMarker(markIndex)) {
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobOn', colorOverrideMode);
                            }
                        }
                        if (!!instance) {
                            this.get_currentContext().restore();
                        }
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    var $enum4 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum4.moveNext()) {
                        var currentLine = $enum4.current;
                        if (currentLine.get_lineState() !== 'lineStateHighlighted') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            if (paneDrawInfo.get_hasGlobalTransparency()) {
                                this.beginOffScreenRender();
                                paneDrawInfo.set_forceOpaqueColors(true);
                                if (!!instance) {
                                    this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (!(paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted')) {
                                    colorOverrideMode = 'colorOverrideFog';
                                }
                                if (!(paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted' && !currentLine.get_allHighlighted())) {
                                    if (paneDrawInfo.getLeft(markIndex) !== -1 || paneDrawInfo.getRight(markIndex) !== -1) {
                                        this._drawLineMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                                    }
                                    else {
                                        this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobOn', colorOverrideMode);
                                    }
                                }
                                colorOverrideMode = 'colorOverrideNone';
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted' || paneDrawInfo.getMarkState(markIndex + 1) !== 'markStateHighlighted') {
                                    colorOverrideMode = 'colorOverrideFog';
                                }
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'edgeOn', colorOverrideMode);
                                colorOverrideMode = 'colorOverrideNone';
                            }
                            if (paneDrawInfo.get_hasGlobalTransparency()) {
                                paneDrawInfo.set_forceOpaqueColors(false);
                                this.endOffScreenRender(paneDrawInfo.get_globalAlpha());
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (!(paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted')) {
                                    colorOverrideMode = 'colorOverrideFog';
                                }
                                if (!(paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted' && !currentLine.get_allHighlighted())) {
                                    if (paneDrawInfo.shouldShowMarker(markIndex)) {
                                        this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobOn', colorOverrideMode);
                                    }
                                }
                                colorOverrideMode = 'colorOverrideNone';
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted' && !currentLine.get_allHighlighted()) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'highlightedUnder', colorOverrideMode);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted' && !currentLine.get_allHighlighted()) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    var $enum5 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum5.moveNext()) {
                        var currentLine = $enum5.current;
                        if (currentLine.get_lineState() !== 'lineStateSelected') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'selectedUnder1', colorOverrideMode);
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'selectedEdgeUnder', colorOverrideMode);
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    var $enum6 = ss.IEnumerator.getEnumerator(lineDrawState.get_lineAttributes());
                    while ($enum6.moveNext()) {
                        var currentLine = $enum6.current;
                        if (currentLine.get_lineState() !== 'lineStateSelected') {
                            continue;
                        }
                        var instances;
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            instances = paneDrawInfo.getMarkInstances(currentLine.minXDomain, currentLine.maxXDomain);
                        }
                        else {
                            instances = new ss.Tuple(0, 0);
                        }
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            if (!!instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getLeft(markIndex) !== -1 || paneDrawInfo.getRight(markIndex) !== -1) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                                }
                                else {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobOn', colorOverrideMode);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                this._drawLineMarkLayer(paneDrawInfo, markIndex, 'edgeOn', colorOverrideMode);
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.shouldShowMarker(markIndex)) {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'blobOn', colorOverrideMode);
                                }
                            }
                            if (!currentLine.get_allHighlighted()) {
                                for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                        continue;
                                    }
                                    if (paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted') {
                                        this._drawLineMarkLayer(paneDrawInfo, markIndex, 'highlightedUnder', colorOverrideMode);
                                    }
                                }
                                for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                        continue;
                                    }
                                    if (paneDrawInfo.getMarkState(markIndex) === 'markStateHighlighted') {
                                        this._drawLineMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                                    }
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) === 'markStateSelected') {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                                }
                            }
                            for (var markIndex = currentLine.startIndex; markIndex <= currentLine.endIndex; markIndex++) {
                                if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                    continue;
                                }
                                if (paneDrawInfo.getMarkState(markIndex) === 'markStateSelected') {
                                    this._drawLineMarkLayer(paneDrawInfo, markIndex, 'highlightedOn', colorOverrideMode);
                                }
                            }
                            if (!!instance) {
                                this.get_currentContext().restore();
                            }
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawLineMarkLayer: function tab_MarksRenderer$_drawLineMarkLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        var left = paneDrawInfo.getLeft(markIndex);
        var right = paneDrawInfo.getRight(markIndex);
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().save();
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        switch (layer) {
            case 'normalUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'normalOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'blobUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 3, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'blobOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 3, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'highlightedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 4, (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'highlightedOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 4, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex) + 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'selectedUnder1':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'edgeUnder':
                if (paneDrawInfo.getRight(markIndex) !== -1) {
                    this.renderLineEdge(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x', right), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y', right), paneDrawInfo.getMarkProperty('width', markIndex), paneDrawInfo.getMarkProperty('width', right), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                }
                break;
            case 'selectedEdgeUnder':
                if (paneDrawInfo.getRight(markIndex) !== -1) {
                    this.renderLineEdge(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x', right), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y', right), paneDrawInfo.getMarkProperty('width', markIndex), paneDrawInfo.getMarkProperty('width', right), (paneDrawInfo.getMarkProperty('selected_multi_prim_halo_color', markIndex))[colorOverrideMode], 4);
                }
                break;
            case 'edgeOn':
                if (paneDrawInfo.getRight(markIndex) !== -1) {
                    if (paneDrawInfo.isLineSegmentVisible(markIndex, right)) {
                        var overrideColor = colorOverrideMode;
                        if (paneDrawInfo.isLineSegmentFiltered(markIndex, right)) {
                            colorOverrideMode = 'colorOverrideFog';
                        }
                        this.renderFilledLineEdge(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('x', right), paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('y', right), paneDrawInfo.getMarkProperty('width', markIndex), paneDrawInfo.getMarkProperty('width', right), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], (paneDrawInfo.getMarkProperty('color', right))[colorOverrideMode]);
                    }
                }
                break;
            default:
                break;
        }
        if (!!paneDrawInfo.get_clipCase()) {
            this.get_currentContext().restore();
        }
    },
    
    _renderShapeMark: function tab_MarksRenderer$_renderShapeMark(paneDrawInfo, renderPass) {
        var markCount = paneDrawInfo.get_markCount();
        var hasSelection = paneDrawInfo.get_hasSelection();
        var hasBrushing = paneDrawInfo.get_hasBrushing();
        var colorOverrideMode = 'colorOverrideNone';
        this.get_currentContext().save();
        switch (renderPass) {
            case 'normalUnderPass':
                if (paneDrawInfo.get_hasBackground() && paneDrawInfo.get_hasHalos()) {
                    if (hasSelection || hasBrushing) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                        }
                    }
                    if (hasSelection || hasBrushing) {
                        colorOverrideMode = 'colorOverrideNone';
                        for (var markIndex = 0; markIndex < markCount; markIndex++) {
                            if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                                continue;
                            }
                            if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                                continue;
                            }
                            if (paneDrawInfo.get_isWrappedDomain()) {
                                var bounds = paneDrawInfo.getMarkBounds(markIndex);
                                var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                                var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                                var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                                for (var instance = instances.first; instance <= instances.second; ++instance) {
                                    this.get_currentContext().save();
                                    this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                    this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                                    this.get_currentContext().restore();
                                }
                            }
                            else {
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalUnder', colorOverrideMode);
                            }
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideFog';
                }
                else {
                    colorOverrideMode = 'colorOverrideNone';
                }
                for (var markIndex = 0; markIndex < markCount; markIndex++) {
                    if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                        continue;
                    }
                    if (paneDrawInfo.getMarkState(markIndex) !== 'markStateNormal') {
                        continue;
                    }
                    if (paneDrawInfo.get_isWrappedDomain()) {
                        var bounds = paneDrawInfo.getMarkBounds(markIndex);
                        var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                        var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                        var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                        for (var instance = instances.first; instance <= instances.second; ++instance) {
                            this.get_currentContext().save();
                            this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                            this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            if (paneDrawInfo.get_drawBorder()) {
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'border', colorOverrideMode);
                            }
                            this.get_currentContext().restore();
                        }
                    }
                    else {
                        this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                        if (paneDrawInfo.get_drawBorder()) {
                            this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'border', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'highlightedUnderPass':
                break;
            case 'highlightedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideNone';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateHighlighted') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                                if (paneDrawInfo.get_drawBorder()) {
                                    this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'border', colorOverrideMode);
                                }
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            if (paneDrawInfo.get_drawBorder()) {
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'border', colorOverrideMode);
                            }
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'selectedUnder', colorOverrideMode);
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if (hasSelection || hasBrushing) {
                    colorOverrideMode = 'colorOverrideOpaque';
                    for (var markIndex = 0; markIndex < markCount; markIndex++) {
                        if (!paneDrawInfo.markNeedsDraw(markIndex)) {
                            continue;
                        }
                        if (paneDrawInfo.getMarkState(markIndex) !== 'markStateSelected') {
                            continue;
                        }
                        if (paneDrawInfo.get_isWrappedDomain()) {
                            var bounds = paneDrawInfo.getMarkBounds(markIndex);
                            var minXDomain = paneDrawInfo.pixelToDomainX(bounds.x);
                            var maxXDomain = paneDrawInfo.pixelToDomainX(bounds.x + bounds.w);
                            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
                            for (var instance = instances.first; instance <= instances.second; ++instance) {
                                this.get_currentContext().save();
                                this.get_currentContext().translate(paneDrawInfo.getWorldOffset(instance), 0);
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                                if (paneDrawInfo.get_drawBorder()) {
                                    this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'border', colorOverrideMode);
                                }
                                this.get_currentContext().restore();
                            }
                        }
                        else {
                            this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'normalOn', colorOverrideMode);
                            if (paneDrawInfo.get_drawBorder()) {
                                this._drawShapeMarkLayer(paneDrawInfo, markIndex, 'border', colorOverrideMode);
                            }
                        }
                    }
                }
                break;
        }
        this.get_currentContext().restore();
    },
    
    _drawShapeMarkLayer: function tab_MarksRenderer$_drawShapeMarkLayer(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        this.get_currentContext().save();
        if (!!paneDrawInfo.get_clipCase()) {
            this.clipRect(paneDrawInfo.get_clipCase(), paneDrawInfo.getMarkProperty('cell_x', markIndex), paneDrawInfo.getMarkProperty('cell_y', markIndex), paneDrawInfo.getMarkProperty('clip_width', markIndex), paneDrawInfo.getMarkProperty('clip_height', markIndex));
        }
        var shape = paneDrawInfo.getMarkProperty('shape_id', markIndex);
        switch (shape) {
            case 'shapeIDCircle':
                this._renderShapeIDCircleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledCircle':
                this._renderShapeIDFilledCircleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDUnscaledFilledCircle':
                this._renderShapeIDUnscaledFilledCircleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDSquare':
                this._renderShapeIDSquareMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledSquare':
                this._renderShapeIDFilledSquareMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDAsterisk':
                this._renderShapeIDAsteriskMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDPlus':
                this._renderShapeIDPlusMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledPlus':
                this._renderShapeIDFilledPlusMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDTimes':
                this._renderShapeIDTimesMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledTimes':
                this._renderShapeIDFilledTimesMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDDiamond':
                this._renderShapeIDDiamondMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledDiamond':
                this._renderShapeIDFilledDiamondMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDTriangle':
                this._renderShapeIDTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledTriangle':
                this._renderShapeIDFilledTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDDownTriangle':
                this._renderShapeIDDownTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledDownTriangle':
                this._renderShapeIDFilledDownTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDLeftTriangle':
                this._renderShapeIDLeftTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledLeftTriangle':
                this._renderShapeIDFilledLeftTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDRightTriangle':
                this._renderShapeIDRightTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledRightTriangle':
                this._renderShapeIDFilledRightTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            case 'shapeIDFilledStar':
                this._renderShapeIDFilledStarMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
            default:
                tab.CanvasRenderer.renderCustomShape(this.get_currentContext(), paneDrawInfo, markIndex, layer, colorOverrideMode);
                break;
        }
        this.get_currentContext().restore();
    },
    
    _renderShapeIDCircleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDCircleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'normalOn':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], 2);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledCircleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledCircleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'normalOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'border':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.25 / 12))), (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1);
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDUnscaledFilledCircleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDUnscaledFilledCircleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'normalOn':
                tab.CanvasRenderer.renderFilledCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'border':
                tab.CanvasRenderer.renderCircle(this.get_currentContext(), 0 + paneDrawInfo.getMarkProperty('x', markIndex), 0 + paneDrawInfo.getMarkProperty('y', markIndex), paneDrawInfo.getMarkProperty('width', markIndex), (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1);
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDSquareMarkLayer$1: function tab_MarksRenderer$_renderShapeIDSquareMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                tab.CanvasRenderer.renderRectangle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'normalOn':
                tab.CanvasRenderer.renderRectangle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], 2);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderRectangle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledSquareMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledSquareMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                tab.CanvasRenderer.renderRectangle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'normalOn':
                this.renderFilledRectangle(paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                break;
            case 'selectedUnder':
                tab.CanvasRenderer.renderRectangle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], 4);
                break;
            case 'border':
                tab.CanvasRenderer.renderRectangle(this.get_currentContext(), paneDrawInfo.getMarkProperty('x', markIndex) + 0, paneDrawInfo.getMarkProperty('y', markIndex) + 0, (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))), (paneDrawInfo.getMarkProperty('border_color', markIndex))[colorOverrideMode], 1);
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDAsteriskMarkLayer$1: function tab_MarksRenderer$_renderShapeIDAsteriskMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2;
                var scaledHalfWidth = 0.9 * halfWidth;
                var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 4;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(0);
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-scaledHalfWidth);
                points.add(-quarterWidth);
                points.add(scaledHalfWidth);
                points.add(quarterWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(scaledHalfWidth);
                points.add(-quarterWidth);
                points.add(-scaledHalfWidth);
                points.add(quarterWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2;
                var scaledHalfWidth = 0.9 * halfWidth;
                var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 4;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(0);
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-scaledHalfWidth);
                points.add(-quarterWidth);
                points.add(scaledHalfWidth);
                points.add(quarterWidth);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(scaledHalfWidth);
                points.add(-quarterWidth);
                points.add(-scaledHalfWidth);
                points.add(quarterWidth);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 2;
                var scaledHalfWidth = 0.9 * halfWidth;
                var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.5 / 12))) / 4;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(0);
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-scaledHalfWidth);
                points.add(-quarterWidth);
                points.add(scaledHalfWidth);
                points.add(quarterWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(scaledHalfWidth);
                points.add(-quarterWidth);
                points.add(-scaledHalfWidth);
                points.add(quarterWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDPlusMarkLayer$1: function tab_MarksRenderer$_renderShapeIDPlusMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(0);
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                points.add(0);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(0);
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                points.add(0);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(0);
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(0);
                points.add(halfWidth);
                points.add(0);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledPlusMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledPlusMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
                var sixWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 6;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add((-sixWidth));
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
                var sixWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 6;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add((-sixWidth));
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-halfWidth));
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
                var sixWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 6;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add((-sixWidth));
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add((-sixWidth));
                points.add((-halfWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add(sixWidth);
                points.add(halfWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-sixWidth));
                points.add(sixWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDTimesMarkLayer$1: function tab_MarksRenderer$_renderShapeIDTimesMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(-halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(-halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(-halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(-halfWidth);
                this.renderLine(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(-halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                this.get_currentContext().set_lineCap('square');
                var points = [];
                points.add(-halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(-halfWidth);
                this.renderLine(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode], true);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledTimesMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledTimesMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
                var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-quarterWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-quarterWidth));
                points.add((-quarterWidth));
                points.add((0));
                points.add((-halfWidth));
                points.add(quarterWidth);
                points.add((-quarterWidth));
                points.add(halfWidth);
                points.add((0));
                points.add(quarterWidth);
                points.add(quarterWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(quarterWidth);
                points.add(quarterWidth);
                points.add((0));
                points.add(halfWidth);
                points.add((-quarterWidth));
                points.add(quarterWidth);
                points.add((-halfWidth));
                points.add((0));
                points.add((-quarterWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
                var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-quarterWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-quarterWidth));
                points.add((-quarterWidth));
                points.add((0));
                points.add((-halfWidth));
                points.add(quarterWidth);
                points.add((-quarterWidth));
                points.add(halfWidth);
                points.add((0));
                points.add(quarterWidth);
                points.add(quarterWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(quarterWidth);
                points.add(quarterWidth);
                points.add((0));
                points.add(halfWidth);
                points.add((-quarterWidth));
                points.add(quarterWidth);
                points.add((-halfWidth));
                points.add((0));
                points.add((-quarterWidth));
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 2;
                var quarterWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-0.75 / 12))) / 4;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-quarterWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-quarterWidth));
                points.add((-quarterWidth));
                points.add((0));
                points.add((-halfWidth));
                points.add(quarterWidth);
                points.add((-quarterWidth));
                points.add(halfWidth);
                points.add((0));
                points.add(quarterWidth);
                points.add(quarterWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(quarterWidth);
                points.add(quarterWidth);
                points.add((0));
                points.add(halfWidth);
                points.add((-quarterWidth));
                points.add(quarterWidth);
                points.add((-halfWidth));
                points.add((0));
                points.add((-quarterWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDDiamondMarkLayer$1: function tab_MarksRenderer$_renderShapeIDDiamondMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((0));
                points.add((0));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((0));
                points.add((0));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((0));
                points.add((0));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledDiamondMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledDiamondMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((0));
                points.add((0));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((0));
                points.add((0));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (0.5 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((0));
                points.add((0));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDDownTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDDownTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledDownTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledDownTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add((-halfWidth));
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add((-halfWidth));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDLeftTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDLeftTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledLeftTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledLeftTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((0));
                points.add(halfWidth);
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDRightTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDRightTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 2, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1.25 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledRightTriangleMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledRightTriangleMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (-1 / 12))) / 2;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add((-halfWidth));
                points.add(halfWidth);
                points.add(halfWidth);
                points.add((0));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _renderShapeIDFilledStarMarkLayer$1: function tab_MarksRenderer$_renderShapeIDFilledStarMarkLayer$1(paneDrawInfo, markIndex, layer, colorOverrideMode) {
        switch (layer) {
            case 'normalUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2;
                var computedVal = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3877;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add(((-halfWidth) + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.0246)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3817)));
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth));
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3088)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.612)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.1909)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.9751)));
                points.add((0));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.7507)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.8085)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.9751)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.6905)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.612)));
                points.add(halfWidth);
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.6176)));
                points.add((-halfWidth + computedVal));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'normalOn':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2;
                var computedVal = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3877;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.0246)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3817)));
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth));
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3088)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.612)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.1909)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.9751)));
                points.add((0));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.7507)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.8085)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.9751)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.6905)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.612)));
                points.add(halfWidth);
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.6176)));
                points.add((-halfWidth + computedVal));
                this.renderFilledPolygon(points, (paneDrawInfo.getMarkProperty('color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            case 'selectedUnder':
                var halfWidth = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) / 2;
                var computedVal = (paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3877;
                this.get_currentContext().save();
                this.get_currentContext().translate(paneDrawInfo.getMarkProperty('x', markIndex), paneDrawInfo.getMarkProperty('y', markIndex));
                var points = [];
                points.add((0));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.0246)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3817)));
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth));
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.3088)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.612)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.1909)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.9751)));
                points.add((0));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.7507)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.8085)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.9751)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.6905)));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.612)));
                points.add(halfWidth);
                points.add((-halfWidth + computedVal));
                points.add((-halfWidth + ((paneDrawInfo.getMarkProperty('width', markIndex) * (1 + (1.1 / 12))) * 0.6176)));
                points.add((-halfWidth + computedVal));
                this.get_currentContext().set_lineJoin('miter');
                this.renderPolygon(points, 4, (paneDrawInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode]);
                this.get_currentContext().restore();
                break;
            default:
                break;
        }
    },
    
    _drawPredictionBandLayer: function tab_MarksRenderer$_drawPredictionBandLayer(paneDrawInfo, i, layer, colorOverrideMode, pm, colorOverrideAlpha) {
        switch (layer) {
            case 'normalUnder':
                var color = pm.qrgbColor;
                if (paneDrawInfo.isTupleVisible(pm.tupleIds[i])) {
                    if ((!i || !paneDrawInfo.isTupleVisible(pm.tupleIds[i - 1])) && (i + 1 >= pm.upperEnd.length || !paneDrawInfo.isTupleVisible(pm.tupleIds[i + 1]))) {
                        var halfWidth = ((pm.widths[i] / 2) + 2.5);
                        if (pm.useYAxis) {
                            var y0 = paneDrawInfo.thisDomainToPixelY(pm.upperEnd[i]);
                            var y1 = paneDrawInfo.thisDomainToPixelY(pm.lowerEnd[i]);
                            var x = paneDrawInfo.thisDomainToPixelX(pm.oppositeAxis[i]);
                            var pts = [ (x - halfWidth), y0, (x - halfWidth), y1, (x + halfWidth), y1, (x + halfWidth), y0 ];
                            this.renderFilledPolygon(pts, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha));
                        }
                        else {
                            var x0 = paneDrawInfo.thisDomainToPixelX(pm.upperEnd[i]);
                            var x1 = paneDrawInfo.thisDomainToPixelX(pm.lowerEnd[i]);
                            var y = paneDrawInfo.thisDomainToPixelY(pm.oppositeAxis[i]);
                            var pts = [ x0, (y - halfWidth), x1, (y - halfWidth), x1, (y + halfWidth), x0, (y + halfWidth) ];
                            this.renderFilledPolygon(pts, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha));
                        }
                    }
                    else {
                        if (i + 1 < pm.tupleIds.length && paneDrawInfo.isTupleVisible(pm.tupleIds[i + 1])) {
                            if (pm.useYAxis) {
                                var y0_upper = paneDrawInfo.thisDomainToPixelY(pm.upperEnd[i]);
                                var y0_lower = paneDrawInfo.thisDomainToPixelY(pm.lowerEnd[i]);
                                var y1_upper = paneDrawInfo.thisDomainToPixelY(pm.upperEnd[i + 1]);
                                var y1_lower = paneDrawInfo.thisDomainToPixelY(pm.lowerEnd[i + 1]);
                                var x0 = paneDrawInfo.thisDomainToPixelX(pm.oppositeAxis[i]);
                                var x1 = paneDrawInfo.thisDomainToPixelX(pm.oppositeAxis[i + 1]);
                                var pts = [ x0, y0_lower, x1, y1_lower, x1, y1_upper, x0, y0_upper ];
                                this.renderFilledPolygon(pts, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha));
                            }
                            else {
                                var x0_upper = paneDrawInfo.thisDomainToPixelX(pm.upperEnd[i]);
                                var x0_lower = paneDrawInfo.thisDomainToPixelX(pm.lowerEnd[i]);
                                var x1_upper = paneDrawInfo.thisDomainToPixelX(pm.upperEnd[i + 1]);
                                var x1_lower = paneDrawInfo.thisDomainToPixelX(pm.lowerEnd[i + 1]);
                                var y0 = paneDrawInfo.thisDomainToPixelY(pm.oppositeAxis[i]);
                                var y1 = paneDrawInfo.thisDomainToPixelY(pm.oppositeAxis[i + 1]);
                                var pts = [ x0_lower, y0, x1_lower, y1, x1_upper, y1, x0_upper, y0 ];
                                this.renderFilledPolygon(pts, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha));
                            }
                        }
                    }
                }
                break;
        }
    },
    
    _renderPredictionBand: function tab_MarksRenderer$_renderPredictionBand(paneDrawInfo, renderPass, rnpm, role) {
        var colorOverrideMode = 'colorOverrideNone';
        var colorOverrideAlpha = 255;
        if (!(Type.canCast(rnpm, Object))) {
            return;
        }
        var pm = rnpm;
        var SelectionStateNormal = 0;
        var SelectionStateHighlighted = 1;
        var SelectionStateSelected = 2;
        var selectionState = SelectionStateNormal;
        var $enum1 = ss.IEnumerator.getEnumerator(pm.lineTupleIds);
        while ($enum1.moveNext()) {
            var tuple = $enum1.current;
            if (paneDrawInfo.isTupleSelected(tuple)) {
                selectionState = SelectionStateSelected;
                break;
            }
            if (selectionState !== SelectionStateHighlighted && paneDrawInfo.isTupleHighlighted(tuple)) {
                selectionState = SelectionStateHighlighted;
            }
        }
        if (selectionState !== SelectionStateSelected) {
            var $enum2 = ss.IEnumerator.getEnumerator(pm.tupleIds);
            while ($enum2.moveNext()) {
                var tuple = $enum2.current;
                if (paneDrawInfo.isTupleSelected(tuple)) {
                    selectionState = SelectionStateSelected;
                    break;
                }
                if (selectionState !== SelectionStateHighlighted && paneDrawInfo.isTupleHighlighted(tuple)) {
                    selectionState = SelectionStateHighlighted;
                }
            }
        }
        switch (renderPass) {
            case 'normalUnderPass':
                if (selectionState === SelectionStateNormal && role === 'background') {
                    if (paneDrawInfo.get_hasSelection() || paneDrawInfo.get_hasBrushing()) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        this._drawPredictionBandLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                    }
                }
                break;
            case 'highlightedUnderPass':
                if (selectionState === SelectionStateHighlighted && role === 'background') {
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (paneDrawInfo.isTupleHighlighted(pm.tupleIds[i]) && ((!i || !paneDrawInfo.isTupleVisible(pm.tupleIds[i - 1])) && (i + 1 >= pm.upperEnd.length || !paneDrawInfo.isTupleVisible(pm.tupleIds[i + 1])) || (i + 1 < pm.tupleIds.length && paneDrawInfo.isTupleVisible(pm.tupleIds[i + 1]) && paneDrawInfo.isTupleHighlighted(pm.tupleIds[i + 1])))) {
                            colorOverrideMode = 'colorOverrideNone';
                        }
                        else {
                            colorOverrideMode = 'colorOverrideFog';
                        }
                        this._drawPredictionBandLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                    }
                }
                break;
            case 'selectedUnderPass':
                if (selectionState === SelectionStateSelected && role === 'background') {
                    colorOverrideMode = 'colorOverrideReplaceAlpha';
                    colorOverrideAlpha = (0.3 * 255);
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        this._drawPredictionBandLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                    }
                }
                break;
        }
    },
    
    _drawPredictionWhiskerLayer: function tab_MarksRenderer$_drawPredictionWhiskerLayer(paneDrawInfo, i, layer, colorOverrideMode, pm, colorOverrideAlpha) {
        switch (layer) {
            case 'border':
                if (paneDrawInfo.isTupleVisible(pm.tupleIds[i])) {
                    var halfWidth = parseInt((((pm.widths[i]) - 1) / 2));
                    if (pm.useYAxis) {
                        var x = parseInt(paneDrawInfo.thisDomainToPixelX(pm.oppositeAxis[i]));
                        var y0 = parseInt(paneDrawInfo.thisDomainToPixelY(pm.upperEnd[i]));
                        var y1 = parseInt(paneDrawInfo.thisDomainToPixelY(pm.lowerEnd[i]));
                        var crossbarTop = (y0 - 0.5);
                        var crossbarBottom = (y1 + 1.5);
                        var crossbarLeft = (x - 0.5 - halfWidth);
                        var crossbarRight = (x + 1.5 + halfWidth);
                        var mastTop = (y0 + 1.5);
                        var mastBottom = (y1 - 0.5);
                        var mastLeft = (x - 0.5);
                        var mastRight = (x + 1.5);
                        var pts = [ crossbarLeft, crossbarTop, crossbarRight, crossbarTop, crossbarRight, mastTop, mastRight, mastTop, mastRight, mastBottom, crossbarRight, mastBottom, crossbarRight, crossbarBottom, crossbarLeft, crossbarBottom, crossbarLeft, mastBottom, mastLeft, mastBottom, mastLeft, mastTop, crossbarLeft, mastTop ];
                        this.renderLineLoop(pts, 1, paneDrawInfo.getOneColorAlpha(pm.qrgbColor, colorOverrideMode, colorOverrideAlpha));
                    }
                    else {
                        var y = parseInt(paneDrawInfo.thisDomainToPixelY(pm.oppositeAxis[i]));
                        var x0 = parseInt(paneDrawInfo.thisDomainToPixelX(pm.lowerEnd[i]));
                        var x1 = parseInt(paneDrawInfo.thisDomainToPixelX(pm.upperEnd[i]));
                        var crossbarTop = (y - 0.5 - halfWidth);
                        var crossbarBottom = (y + 1.5 + halfWidth);
                        var crossbarLeft = (x0 - 0.5);
                        var crossbarRight = (x1 + 1.5);
                        var mastTop = (y - 0.5);
                        var mastBottom = (y + 1.5);
                        var mastLeft = (x0 + 1.5);
                        var mastRight = (x1 - 0.5);
                        var pts = [ crossbarLeft, crossbarTop, mastLeft, crossbarTop, mastLeft, mastTop, mastRight, mastTop, mastRight, crossbarTop, crossbarRight, crossbarTop, crossbarRight, crossbarBottom, mastRight, crossbarBottom, mastRight, mastBottom, mastLeft, mastBottom, mastLeft, crossbarBottom, crossbarLeft, crossbarBottom ];
                        this.renderLineLoop(pts, 1, paneDrawInfo.getOneColorAlpha(pm.qrgbColor, colorOverrideMode, colorOverrideAlpha));
                    }
                }
                break;
            case 'normalUnder':
                if (paneDrawInfo.isTupleVisible(pm.tupleIds[i])) {
                    var halfWidth = parseInt((((pm.widths[i]) - 1) / 2));
                    var color = pm.qrgbColors[i];
                    if (pm.useYAxis) {
                        var x = parseInt(paneDrawInfo.thisDomainToPixelX(pm.oppositeAxis[i]));
                        var y0 = parseInt(paneDrawInfo.thisDomainToPixelY(pm.upperEnd[i]));
                        var y1 = parseInt(paneDrawInfo.thisDomainToPixelY(pm.lowerEnd[i]));
                        var pts = [ (x - halfWidth), (y0 + 0.5), (x + halfWidth + 1), (y0 + 0.5) ];
                        this.renderLine(pts, 1, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha), false);
                        var pts = [ (x - halfWidth), (y1 + 0.5), (x + halfWidth + 1), (y1 + 0.5) ];
                        this.renderLine(pts, 1, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha), false);
                        var pts = [ (x + 0.5), (y0 + 1), (x + 0.5), y1 ];
                        this.renderLine(pts, 1, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha), false);
                    }
                    else {
                        var y = parseInt(paneDrawInfo.thisDomainToPixelY(pm.oppositeAxis[i]));
                        var x0 = parseInt(paneDrawInfo.thisDomainToPixelX(pm.lowerEnd[i]));
                        var x1 = parseInt(paneDrawInfo.thisDomainToPixelX(pm.upperEnd[i]));
                        var pts = [ (x0 + 0.5), (y - halfWidth), (x0 + 0.5), (y + halfWidth + 1) ];
                        this.renderLine(pts, 1, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha), false);
                        var pts = [ (x1 + 0.5), (y - halfWidth), (x1 + 0.5), (y + halfWidth + 1) ];
                        this.renderLine(pts, 1, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha), false);
                        var pts = [ (x0 + 1), (y + 0.5), x1, (y + 0.5) ];
                        this.renderLine(pts, 1, paneDrawInfo.getOneColorAlpha(color, colorOverrideMode, colorOverrideAlpha), false);
                    }
                }
                break;
        }
    },
    
    _renderPredictionWhisker: function tab_MarksRenderer$_renderPredictionWhisker(paneDrawInfo, renderPass, rnpm, role) {
        var colorOverrideMode = 'colorOverrideNone';
        var colorOverrideAlpha = 255;
        if (!(Type.canCast(rnpm, Object))) {
            return;
        }
        var pm = rnpm;
        switch (renderPass) {
            case 'normalUnderPass':
                if (!pm.renderOnTop && role === 'background') {
                    if (paneDrawInfo.get_hasSelection() || paneDrawInfo.get_hasBrushing()) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (!paneDrawInfo.isTupleHighlighted(pm.tupleIds[i]) && !paneDrawInfo.isTupleSelected(pm.tupleIds[i])) {
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'border', colorOverrideMode, pm, colorOverrideAlpha);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                        }
                    }
                }
                break;
            case 'normalOnPass':
                if (pm.renderOnTop && role === 'underLabel') {
                    if (paneDrawInfo.get_hasSelection() || paneDrawInfo.get_hasBrushing()) {
                        colorOverrideMode = 'colorOverrideFog';
                    }
                    else {
                        colorOverrideMode = 'colorOverrideNone';
                    }
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (!paneDrawInfo.isTupleHighlighted(pm.tupleIds[i]) && !paneDrawInfo.isTupleSelected(pm.tupleIds[i])) {
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'border', colorOverrideMode, pm, colorOverrideAlpha);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                        }
                    }
                }
                break;
            case 'selectedUnderPass':
                if (!pm.renderOnTop && role === 'background') {
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (paneDrawInfo.isTupleSelected(pm.tupleIds[i])) {
                            colorOverrideMode = 'colorOverrideReplaceAlpha';
                            colorOverrideAlpha = (0.25 * 255);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'border', colorOverrideMode, pm, colorOverrideAlpha);
                            colorOverrideMode = 'colorOverrideReplaceAlpha';
                            colorOverrideAlpha = (pm.maxAlpha / 255 * 255);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                        }
                    }
                }
                break;
            case 'selectedOnPass':
                if (pm.renderOnTop && role === 'underLabel') {
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (paneDrawInfo.isTupleSelected(pm.tupleIds[i])) {
                            colorOverrideMode = 'colorOverrideReplaceAlpha';
                            colorOverrideAlpha = (0.25 * 255);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'border', colorOverrideMode, pm, colorOverrideAlpha);
                            colorOverrideMode = 'colorOverrideReplaceAlpha';
                            colorOverrideAlpha = (pm.maxAlpha / 255 * 255);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                        }
                    }
                }
                break;
            case 'highlightedUnderPass':
                if (!pm.renderOnTop && role === 'background') {
                    colorOverrideMode = 'colorOverrideNone';
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (paneDrawInfo.isTupleHighlighted(pm.tupleIds[i])) {
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'border', colorOverrideMode, pm, colorOverrideAlpha);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                        }
                    }
                }
                break;
            case 'highlightedOnPass':
                if (pm.renderOnTop && role === 'underLabel') {
                    colorOverrideMode = 'colorOverrideNone';
                    var imax = pm.tupleIds.length;
                    for (var i = 0; i < imax; i++) {
                        if (paneDrawInfo.isTupleHighlighted(pm.tupleIds[i])) {
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'border', colorOverrideMode, pm, colorOverrideAlpha);
                            this._drawPredictionWhiskerLayer(paneDrawInfo, i, 'normalUnder', colorOverrideMode, pm, colorOverrideAlpha);
                        }
                    }
                }
                break;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.BrowserViewport

tab.BrowserViewport = function tab_BrowserViewport(dimensions) {
    this._dimensions = dimensions;
}
tab.BrowserViewport.get__log = function tab_BrowserViewport$get__log() {
    return tab.Logger.lazyGetLogger(tab.BrowserViewport);
}
tab.BrowserViewport.get__defaultViewportRect = function tab_BrowserViewport$get__defaultViewportRect() {
    var h = new tab.WindowHelper(window.self);
    return tab.$create_Rect(h.get_pageXOffset(), h.get_pageYOffset(), h.get_clientWidth(), h.get_clientHeight());
}
tab.BrowserViewport.get__viewportRect = function tab_BrowserViewport$get__viewportRect() {
    try {
        var h = new tab.WindowHelper(window.parent);
        return tab.$create_Rect(h.get_pageXOffset(), h.get_pageYOffset(), h.get_clientWidth(), h.get_clientHeight());
    }
    catch (e) {
        tab.BrowserViewport.get__log().warn('Error getting viewport clipRect, likley x-domain issue: %o', e);
        return tab.BrowserViewport.get__defaultViewportRect();
    }
}
tab.BrowserViewport.getViewport = function tab_BrowserViewport$getViewport(callback) {
    tab.Param.verifyValue(callback, 'callback');
    if (tabBootstrap.Utility.get_embedMode() === 'embeddedNotInWg') {
        if (ss.isNullOrUndefined(tab.BrowserViewport._vizOffset)) {
            tab.BrowserViewport.get__log().debug('CalculateViewportDimensions with default, no message handler in parent');
            callback(new tab.BrowserViewport(tab.BrowserViewport.get__defaultViewportRect()));
        }
        else {
            tab.BrowserViewport.get__log().debug('CalculateViewportDimensions with callback');
            tab.BrowserViewport._layoutInfoCallback = callback;
            tab.BrowserViewport._requestBrowserLayoutInfo();
        }
    }
    else {
        tab.BrowserViewport.get__log().debug('CalculateViewportDimensions directly');
        callback(new tab.BrowserViewport(tab.BrowserViewport.get__viewportRect()));
    }
}
tab.BrowserViewport._addVizOffset = function tab_BrowserViewport$_addVizOffset(p) {
    if (tabBootstrap.Utility.get_embedMode() === 'embeddedNotInWg') {
        if (ss.isValue(tab.BrowserViewport._vizOffset)) {
            p.y += tab.BrowserViewport._vizOffset.y;
            p.x += tab.BrowserViewport._vizOffset.x;
        }
    }
    else {
        try {
            var w = window.self;
            while (w.frameElement != null) {
                var pos = $(w.frameElement).offset();
                p.y += pos.top;
                p.x += pos.left;
                w = w.parent;
            }
        }
        catch (e) {
            tab.BrowserViewport.get__log().warn('Error getting viewport position, likely x-domain issue: %o', e);
        }
    }
}
tab.BrowserViewport._handleMessage = function tab_BrowserViewport$_handleMessage(e) {
    if (typeof ss === 'undefined') {
        return;
    }
    var data = e.data;
    if (ss.isNullOrUndefined(data)) {
        return;
    }
    tab.BrowserViewport.get__log().debug('Message received: %s', data);
    var args = data.split(',');
    if (!ss.isValue(args) || args.length <= 0) {
        return;
    }
    switch (args[0]) {
        case 'layoutInfoResp':
            if (args.length === 5) {
                var browserLayoutInfo = tab.$create_Rect(parseInt(args[1], 10), parseInt(args[2], 10), parseInt(args[3], 10), parseInt(args[4], 10));
                tab.BrowserViewport._callbackWithRect(browserLayoutInfo);
            }
            break;
        case 'vizOffsetResp':
            if (args.length === 3) {
                tab.BrowserViewport._vizOffset = tab.$create_Point(parseInt(args[1], 10), parseInt(args[2], 10));
            }
            break;
    }
}
tab.BrowserViewport._callbackWithRect = function tab_BrowserViewport$_callbackWithRect(r) {
    var vp = new tab.BrowserViewport(r);
    if (ss.isValue(tab.BrowserViewport._layoutInfoCallback)) {
        tab.BrowserViewport._layoutInfoCallback(vp);
    }
}
tab.BrowserViewport._requestBrowserLayoutInfo = function tab_BrowserViewport$_requestBrowserLayoutInfo() {
    tab.BrowserViewport.get__log().debug('Requesting browser layout info');
    if (tab.BrowserSupport.get_postMessage()) {
        window.parent.postMessage('layoutInfoReq', '*');
    }
    else {
        tab.BrowserViewport._callbackWithRect(tab.BrowserViewport.get__defaultViewportRect());
    }
}
tab.BrowserViewport._removeMessageHandler = function tab_BrowserViewport$_removeMessageHandler() {
    if (tab.BrowserViewport._isMessageHandlerAttached) {
        if (ss.isValue(window.removeEventListener)) {
            window.removeEventListener('message', tab.BrowserViewport._handleMessage, true);
        }
        else {
            window.self.detachEvent('onmessage', tab.BrowserViewport._handleMessage);
        }
        tab.BrowserViewport._isMessageHandlerAttached = false;
    }
    tab.BrowserViewport.get__log().debug('BrowserViewport MessageHandler removed.');
}
tab.BrowserViewport._addUnloadHandler = function tab_BrowserViewport$_addUnloadHandler() {
    if (ss.isValue(window.addEventListener)) {
        window.addEventListener('unload', tab.BrowserViewport._onUnload, true);
    }
    else {
        window.self.attachEvent('onunload', tab.BrowserViewport._onUnload);
    }
}
tab.BrowserViewport._onUnload = function tab_BrowserViewport$_onUnload(e) {
    tab.BrowserViewport._removeMessageHandler();
}
tab.BrowserViewport.prototype = {
    _dimensions: null,
    
    get_dimensions: function tab_BrowserViewport$get_dimensions() {
        return this._dimensions;
    },
    
    translatePositionToViewport: function tab_BrowserViewport$translatePositionToViewport(p) {
        var viewp = tab.$create_Point(p.x, p.y);
        tab.BrowserViewport._addVizOffset(viewp);
        viewp.y -= this._dimensions.t;
        viewp.x -= this._dimensions.l;
        return viewp;
    },
    
    getVisibleRoom: function tab_BrowserViewport$getVisibleRoom(position, padding) {
        padding = padding || 0;
        var viewportPos = this.translatePositionToViewport(position);
        var capWithPadding = function(i) {
            return Math.max(0, i - padding);
        };
        var roomRight = capWithPadding(Math.min(this.get_dimensions().w - viewportPos.x, ($(window).width() + $(window).scrollLeft()) - position.x));
        var roomLeft = capWithPadding(Math.min(viewportPos.x, position.x));
        var roomAbove = capWithPadding(Math.min(viewportPos.y, position.y));
        var roomBelow = capWithPadding(Math.min(this.get_dimensions().h - viewportPos.y, ($(window).height() + $(window).scrollTop()) - position.y));
        return spiff.$create_VisibleRoom(roomAbove, roomBelow, roomLeft, roomRight);
    },
    
    getDocumentViewport: function tab_BrowserViewport$getDocumentViewport(point) {
        var room = this.getVisibleRoom(point);
        return tab.$create_Rect(point.x - room.roomLeft, point.y - room.roomAbove, room.roomLeft + room.roomRight, room.roomAbove + room.roomBelow);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ExportHelper

tab.ExportHelper = function tab_ExportHelper() {
    this._sheetScrollPositions = {};
}
tab.ExportHelper.prototype = {
    _sheetScrollPositions: null,
    
    get_sheetScrollPositions: function tab_ExportHelper$get_sheetScrollPositions() {
        return this._sheetScrollPositions;
    },
    
    setSheetScrollPositions: function tab_ExportHelper$setSheetScrollPositions(viewControllers) {
        this._sheetScrollPositions = {};
        var $enum1 = ss.IEnumerator.getEnumerator(viewControllers);
        while ($enum1.moveNext()) {
            var viewController = $enum1.current;
            this._sheetScrollPositions[viewController.get_sheetName()] = viewController.get_viewWidget().get_scrollPosition();
        }
    },
    
    triggerExportPdfUI: function tab_ExportHelper$triggerExportPdfUI() {
        var exportPdfDialog = spiff.ObjectRegistry.newExportPDFDialog(tab.ExportPdfDialog, tab.CommandController.get().get_legacySession());
        exportPdfDialog.add_closed(function() {
            exportPdfDialog.dispose();
            exportPdfDialog = null;
        });
        exportPdfDialog.show();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QfButtonUtil

tab.QfButtonUtil = function tab_QfButtonUtil() {
}
tab.QfButtonUtil.enableResetButton = function tab_QfButtonUtil$enableResetButton(button) {
    if (button == null) {
        return;
    }
    dojo.removeClass(button.iconNode, 'wcIconFiltered');
    dojo.removeClass(button.iconNode, 'wcIconNonfiltered');
    dojo.addClass(button.iconNode, 'wcIconFiltered');
    button.attr('label', 'Click to show all values');
    button.setDisabled(false);
    var buttonNode = $(button.domNode.firstChild.firstChild);
    $(buttonNode.get(0)).removeAttr('style');
}
tab.QfButtonUtil.disableResetButton = function tab_QfButtonUtil$disableResetButton(button) {
    if (button == null) {
        return;
    }
    dojo.removeClass(button.iconNode, 'wcIconFiltered');
    dojo.addClass(button.iconNode, 'wcIconNonfiltered');
    button.attr('label', 'Showing all values');
    button.setDisabled(true);
    dojo.removeClass(button.domNode, 'dijitButtonHover');
    dojo.removeClass(button.domNode, 'dijitHover');
    var buttonNode = $(button.domNode.firstChild.firstChild);
    $(buttonNode.get(0)).css('background', 'transparent');
}


////////////////////////////////////////////////////////////////////////////////
// tab.ImageUtil

tab.ImageUtil = function tab_ImageUtil() {
}
tab.ImageUtil.scaleImage = function tab_ImageUtil$scaleImage(img, newWidth, newHeight, oldWidth, oldHeight) {
    var scaleSurface = document.createElement('canvas');
    scaleSurface.width = newWidth;
    scaleSurface.height = newHeight;
    if (newWidth > 0 && newHeight > 0) {
        var target = document.createElement('canvas');
        target.width = oldWidth;
        target.height = oldHeight;
        var context = target.getContext('2d');
        context.drawImage(img, 0, 0);
        var pixels = context.getImageData(0, 0, oldWidth, oldHeight);
        var scaleContext = scaleSurface.getContext('2d');
        var scalePixels = scaleContext.createImageData(newWidth, newHeight);
        tab.ImageUtil.bilinearDownSampleAlgorithm(pixels, scalePixels);
        scaleContext.putImageData(scalePixels, 0, 0);
    }
    return scaleSurface;
}
tab.ImageUtil.bilinearDownSampleAlgorithm = function tab_ImageUtil$bilinearDownSampleAlgorithm(input, output) {
    var mappedPixelWidth = input.width / output.width;
    var mappedPixelHeight = input.height / output.height;
    var mpColErr = mappedPixelWidth;
    var mpRowErr = mappedPixelHeight;
    var inputData = input.data;
    var realOutput = output.data;
    var outputData = new Array(realOutput.length);
    for (var i = 0; i < outputData.length; i++) {
        outputData[i] = 0;
    }
    var pixelScale = 1 / (mappedPixelWidth * mappedPixelHeight);
    var inIndex = 0;
    var outIndex = 0;
    var midRow = false;
    var curRowBlendFactor, nextRowBlendFactor;
    curRowBlendFactor = nextRowBlendFactor = 0;
    var curScaleFactor = pixelScale;
    var eScaleFactor = 0;
    var sScaleFactor = 0;
    var seScaleFactor = 0;
    var rowStride = 4 * output.width;
    var red, green, blue, alpha;
    for (var r = 0; r < input.height; r++) {
        mpColErr = mappedPixelWidth;
        for (var c = 0; c < input.width; c++) {
            red = inputData[inIndex];
            green = inputData[inIndex + 1];
            blue = inputData[inIndex + 2];
            alpha = inputData[inIndex + 3];
            curScaleFactor = pixelScale;
            if (midRow) {
                curScaleFactor = curRowBlendFactor;
                sScaleFactor = nextRowBlendFactor;
                if (mpColErr < 1) {
                    sScaleFactor *= mpColErr;
                }
                outputData[outIndex + rowStride] += red * sScaleFactor;
                outputData[outIndex + rowStride + 1] += green * sScaleFactor;
                outputData[outIndex + rowStride + 2] += blue * sScaleFactor;
                outputData[outIndex + rowStride + 3] += alpha * sScaleFactor;
            }
            if (mpColErr < 1) {
                eScaleFactor = curScaleFactor * (1 - mpColErr);
                curScaleFactor *= mpColErr;
                if (midRow) {
                    seScaleFactor = nextRowBlendFactor * (1 - mpColErr);
                    outputData[outIndex + rowStride + 4] += red * seScaleFactor;
                    outputData[outIndex + rowStride + 5] += green * seScaleFactor;
                    outputData[outIndex + rowStride + 6] += blue * seScaleFactor;
                    outputData[outIndex + rowStride + 7] += alpha * seScaleFactor;
                }
                outputData[outIndex + 4] += red * eScaleFactor;
                outputData[outIndex + 5] += green * eScaleFactor;
                outputData[outIndex + 6] += blue * eScaleFactor;
                outputData[outIndex + 7] += alpha * eScaleFactor;
            }
            outputData[outIndex++] += red * curScaleFactor;
            outputData[outIndex++] += green * curScaleFactor;
            outputData[outIndex++] += blue * curScaleFactor;
            outputData[outIndex++] += alpha * curScaleFactor;
            inIndex += 4;
            mpColErr -= 1;
            if (mpColErr < tab.FloatUtil.epsilon) {
                mpColErr += mappedPixelWidth;
            }
            else {
                outIndex -= 4;
            }
        }
        mpRowErr -= 1;
        if (mpRowErr < tab.FloatUtil.epsilon) {
            mpRowErr += mappedPixelHeight;
        }
        else {
            outIndex -= rowStride;
        }
        if (mpRowErr < 1) {
            midRow = true;
            curRowBlendFactor = mpRowErr / (mappedPixelWidth * mappedPixelHeight);
            nextRowBlendFactor = (1 - mpRowErr) / (mappedPixelWidth * mappedPixelHeight);
        }
        else {
            midRow = false;
        }
    }
    for (var i = 0; i < outputData.length; i++) {
        realOutput[i] = outputData[i] + 0.5;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CanvasUtil

tab.CanvasUtil = function tab_CanvasUtil() {
}
tab.CanvasUtil.sizeCanvasWithHighDPISupport = function tab_CanvasUtil$sizeCanvasWithHighDPISupport(canvas, context, effectiveSize) {
    var pixelRatio = tab.RenderUtil.calculatePixelRatio();
    tab.CanvasUtil.setCanvasSizeAndDensify(canvas, pixelRatio, effectiveSize);
    if (!tab.FloatUtil.isEqual(pixelRatio, 1)) {
        tab.CanvasUtil.scaleCanvasDrawing(context, pixelRatio);
    }
}
tab.CanvasUtil.setCanvasSizeAndDensify = function tab_CanvasUtil$setCanvasSizeAndDensify(canvasEl, pixelRatio, effectiveSize) {
    if (ss.isValue(canvasEl)) {
        var actualSize = tab.$create_Size((effectiveSize.w * pixelRatio), (effectiveSize.h * pixelRatio));
        tab.CanvasUtil.densifyCanvasUsingSize(canvasEl, actualSize, effectiveSize);
    }
}
tab.CanvasUtil.densifyCanvasUsingSize = function tab_CanvasUtil$densifyCanvasUsingSize(canvasEl, actual, effective) {
    if (ss.isValue(canvasEl) && ss.isValue(actual) && ss.isValue(effective)) {
        canvasEl.width = actual.w;
        canvasEl.height = actual.h;
        canvasEl.style.width = tab.CanvasUtil._addPx(effective.w);
        canvasEl.style.height = tab.CanvasUtil._addPx(effective.h);
    }
}
tab.CanvasUtil.scaleCanvasDrawing = function tab_CanvasUtil$scaleCanvasDrawing(context, pixelRatio) {
    if (ss.isValue(context)) {
        context.scale(pixelRatio, pixelRatio);
    }
}
tab.CanvasUtil.isOverCanvasSizeLimit = function tab_CanvasUtil$isOverCanvasSizeLimit(effectiveWidth, effectiveHeight, pixelRatio) {
    var scaledArea = Math.floor((pixelRatio * effectiveWidth * pixelRatio * effectiveHeight) + 0.5);
    return scaledArea > tabBootstrap.ViewerBootstrap.get_canvasPixelLimit();
}
tab.CanvasUtil.canvasDensified = function tab_CanvasUtil$canvasDensified(canvas) {
    return !!canvas.style.height && canvas.style.height !== tab.CanvasUtil._addPx(canvas.height);
}
tab.CanvasUtil._addPx = function tab_CanvasUtil$_addPx(val) {
    return val + 'px';
}


////////////////////////////////////////////////////////////////////////////////
// tab.Metrics

tab.Metrics = function tab_Metrics() {
}
tab.Metrics.get_scrollW = function tab_Metrics$get_scrollW() {
    return tab.Metrics.get__scrollBarSize();
}
tab.Metrics.get_minScrollWidth = function tab_Metrics$get_minScrollWidth() {
    if (dojo.isSafari || tab.BrowserSupport.get_isMac()) {
        return 60;
    }
    return tab.Metrics.get_scrollW() * 2;
}
tab.Metrics.get_scrollH = function tab_Metrics$get_scrollH() {
    return tab.Metrics.get__scrollBarSize();
}
tab.Metrics.get_minScrollHeight = function tab_Metrics$get_minScrollHeight() {
    if (dojo.isSafari || tab.BrowserSupport.get_isMac()) {
        return 60;
    }
    return tab.Metrics.get_scrollH() * 2;
}
tab.Metrics.get__scrollBarSize = function tab_Metrics$get__scrollBarSize() {
    return tab.MiscUtil.lazyInitStaticField(tab.Metrics, '_scrollBarSize', function() {
        return tabBootstrap.LayoutMetrics.getScrollbarSize();
    });
}


////////////////////////////////////////////////////////////////////////////////
// tab.LocalSearch

tab.LocalSearch = function tab_LocalSearch() {
}
tab.LocalSearch.searchQueryMatchesText = function tab_LocalSearch$searchQueryMatchesText(query, text) {
    var len = query.length;
    var match;
    if (query.charAt(0) === '"' && query.charAt(len - 1) === '"') {
        return query.substr(1, len - 2) === text;
    }
    else if (query.charAt(0) !== '*' && query.charAt(len - 1) === '*') {
        return !text.indexOf(query.substr(0, len - 1));
    }
    else if (query.charAt(0) === '*' && query.charAt(len - 1) !== '*') {
        match = text.lastIndexOf(query.substr(1, len - 1));
        return match >= 0 && match === text.length - (len - 1);
    }
    else if (query.charAt(0) === '*' && query.charAt(len - 1) === '*') {
        return text.indexOf(query.substr(1, len - 2)) >= 0;
    }
    else {
        return text.indexOf(query) >= 0;
    }
}
tab.LocalSearch.findMatches = function tab_LocalSearch$findMatches(query, filter, tupleFormatter, resultTransformer) {
    var queryLowerCase = query.toLowerCase();
    var results = [];
    var t = filter.table.tuples;
    if (ss.isNullOrUndefined(resultTransformer)) {
        resultTransformer = function(tuple, dummy1, dummy2) {
            return tuple;
        };
    }
    for (var i = 0; i < t.length; i++) {
        var displayName = tupleFormatter(t[i]);
        if (tab.LocalSearch.searchQueryMatchesText(queryLowerCase, displayName.toLowerCase())) {
            results.push(resultTransformer(t[i], displayName, i));
        }
    }
    return results;
}


////////////////////////////////////////////////////////////////////////////////
// tab.DisplayList2DUtils

tab.DisplayList2DUtils = function tab_DisplayList2DUtils() {
}
tab.DisplayList2DUtils.rectXYFromDrawRect = function tab_DisplayList2DUtils$rectXYFromDrawRect(points) {
    ss.Debug.assert(points.length === 4, 'the draw item for a rectangle should always specify 4 values.');
    return tab.$create_RectXY(points[0], points[1], points[2] - points[0], points[3] - points[1]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.GeometryUtil

tab.GeometryUtil = function tab_GeometryUtil() {
}
tab.GeometryUtil.isPointInPoly = function tab_GeometryUtil$isPointInPoly(poly, p, inflatePixels) {
    if (ss.isValue(inflatePixels) && !!inflatePixels) {
        return tab.GeometryUtil.polygonIntersectsDoubleRect(poly, tab.$create_DoubleRectXY(p.x - inflatePixels, p.y - inflatePixels, inflatePixels * 2, inflatePixels * 2));
    }
    var wn = 0;
    for (var ii = 0; ii < poly.length; ++ii) {
        if (tab.GeometryUtil._getPolyPt(poly, ii).y <= p.y) {
            if (tab.GeometryUtil._getPolyPt(poly, ii + 1).y > p.y) {
                if (tab.GeometryUtil._isLeft(tab.GeometryUtil._getPolyPt(poly, ii), tab.GeometryUtil._getPolyPt(poly, ii + 1), p) > 0) {
                    ++wn;
                }
            }
        }
        else {
            if (tab.GeometryUtil._getPolyPt(poly, ii + 1).y <= p.y) {
                if (tab.GeometryUtil._isLeft(tab.GeometryUtil._getPolyPt(poly, ii), tab.GeometryUtil._getPolyPt(poly, ii + 1), p) < 0) {
                    --wn;
                }
            }
        }
    }
    if (!wn) {
        return false;
    }
    return true;
}
tab.GeometryUtil.isPointInMultipolygon = function tab_GeometryUtil$isPointInMultipolygon(multipolygon, p) {
    var result = false;
    var $enum1 = ss.IEnumerator.getEnumerator(multipolygon.polygonList);
    while ($enum1.moveNext()) {
        var polygon = $enum1.current;
        var i = 0;
        var $enum2 = ss.IEnumerator.getEnumerator(polygon.lineList);
        while ($enum2.moveNext()) {
            var ring = $enum2.current;
            var pointList = tab.GeometryUtil._pointListFromArray(ring.pointsF);
            var isInRing = tab.GeometryUtil.isPointInPoly(pointList, p);
            if (!i) {
                if (isInRing) {
                    result = true;
                }
                else {
                    break;
                }
            }
            else {
                if (isInRing) {
                    result = false;
                    break;
                }
            }
            i++;
        }
        if (result) {
            return result;
        }
    }
    return result;
}
tab.GeometryUtil.multipolygonIntersectsDoubleRect = function tab_GeometryUtil$multipolygonIntersectsDoubleRect(multipolygon, rect) {
    var $enum1 = ss.IEnumerator.getEnumerator(multipolygon.polygonList);
    while ($enum1.moveNext()) {
        var polygon = $enum1.current;
        var $enum2 = ss.IEnumerator.getEnumerator(polygon.lineList);
        while ($enum2.moveNext()) {
            var ring = $enum2.current;
            var pointList = tab.GeometryUtil._pointListFromArray(ring.pointsF);
            if (tab.GeometryUtil.polygonIntersectsDoubleRect(pointList, rect)) {
                return true;
            }
        }
    }
    return false;
}
tab.GeometryUtil.multipolygonIntersectsPolygon = function tab_GeometryUtil$multipolygonIntersectsPolygon(multipolygon, polygonB) {
    var $enum1 = ss.IEnumerator.getEnumerator(multipolygon.polygonList);
    while ($enum1.moveNext()) {
        var polygon = $enum1.current;
        var $enum2 = ss.IEnumerator.getEnumerator(polygon.lineList);
        while ($enum2.moveNext()) {
            var ring = $enum2.current;
            var pointList = tab.GeometryUtil._pointListFromArray(ring.pointsF);
            if (tab.GeometryUtil._polygonIntersectsPolygon(pointList, polygonB)) {
                return true;
            }
        }
    }
    return false;
}
tab.GeometryUtil.polygonIntersectsRect = function tab_GeometryUtil$polygonIntersectsRect(pointList, rect) {
    return tab.GeometryUtil._polygonIntersectsPolygon(pointList, tab.GeometryUtil._clockwiseCornersFromRect(rect));
}
tab.GeometryUtil.polygonIntersectsDoubleRect = function tab_GeometryUtil$polygonIntersectsDoubleRect(pointList, rect) {
    return tab.GeometryUtil._polygonIntersectsPolygon(pointList, tab.GeometryUtil._clockwiseCornersFromDoubleRect(rect));
}
tab.GeometryUtil._polygonIntersectsPolygon = function tab_GeometryUtil$_polygonIntersectsPolygon(pointListA, pointListB) {
    if (!pointListA.length || !pointListB.length) {
        return false;
    }
    if (tab.GeometryUtil.isPointInPoly(pointListB, pointListA[0])) {
        return true;
    }
    if (tab.GeometryUtil.isPointInPoly(pointListA, pointListB[0])) {
        return true;
    }
    for (var i = 0, l = pointListA.length; i < l; i++) {
        var a = tab.GeometryUtil._getPolyPt(pointListA, i);
        var b = tab.GeometryUtil._getPolyPt(pointListA, i + 1);
        for (var j = 0, m = pointListB.length; j < m; j++) {
            var u = tab.GeometryUtil._getPolyPt(pointListB, j);
            var v = tab.GeometryUtil._getPolyPt(pointListB, j + 1);
            if (tab.GeometryUtil._doLineSegmentsIntersect(a, b, u, v)) {
                return true;
            }
        }
    }
    return false;
}
tab.GeometryUtil._doLineSegmentsIntersect = function tab_GeometryUtil$_doLineSegmentsIntersect(a, b, u, v) {
    var whichSideA = ((v.x - u.x) * (a.y - v.y)) - ((v.y - u.y) * (a.x - v.x));
    var whichSideB = ((v.x - u.x) * (b.y - v.y)) - ((v.y - u.y) * (b.x - v.x));
    var whichSideU = ((b.x - a.x) * (u.y - b.y)) - ((b.y - a.y) * (u.x - b.x));
    var whichSideV = ((b.x - a.x) * (v.y - b.y)) - ((b.y - a.y) * (v.x - b.x));
    if (!!whichSideA && !!whichSideB && !!whichSideU && !!whichSideV) {
        var areAAndBOnDifferentSides = whichSideA > 0 !== whichSideB > 0;
        var areUAndVOnDifferentSides = whichSideU > 0 !== whichSideV > 0;
        return areAAndBOnDifferentSides && areUAndVOnDifferentSides;
    }
    else {
        var whichSides = [ whichSideA, whichSideB, whichSideU, whichSideV ];
        return tab.GeometryUtil._doLineSegmentsIntersectHelper(whichSides, [ a, b, u, v ]);
    }
}
tab.GeometryUtil._doLineSegmentsIntersectHelper = function tab_GeometryUtil$_doLineSegmentsIntersectHelper(whichSides, points) {
    var correspondingLineEndpoint1 = [ points[2], points[2], points[0], points[0] ];
    var correspondingLineEndpoint2 = [ points[3], points[3], points[1], points[1] ];
    for (var i = 0, l = 4; i < l; i++) {
        if (!whichSides[i]) {
            var a = points[i];
            var u = correspondingLineEndpoint1[i];
            var v = correspondingLineEndpoint2[i];
            if (a.x >= Math.min(u.x, v.x) && a.x <= Math.max(u.x, v.x) && a.y >= Math.min(u.y, v.y) && a.y <= Math.max(u.y, v.y)) {
                return true;
            }
        }
    }
    return false;
}
tab.GeometryUtil.multipolygonIntersectsCircle = function tab_GeometryUtil$multipolygonIntersectsCircle(multipolygon, circle) {
    var $enum1 = ss.IEnumerator.getEnumerator(multipolygon.polygonList);
    while ($enum1.moveNext()) {
        var polygon = $enum1.current;
        var $enum2 = ss.IEnumerator.getEnumerator(polygon.lineList);
        while ($enum2.moveNext()) {
            var ring = $enum2.current;
            var pointList = tab.GeometryUtil._pointListFromArray(ring.pointsF);
            if (tab.GeometryUtil.polygonIntersectsCircle(pointList, circle)) {
                return true;
            }
        }
    }
    return false;
}
tab.GeometryUtil.circleIntersectsCircle = function tab_GeometryUtil$circleIntersectsCircle(c1, c2) {
    var distanceSquared = Math.pow(c1.center.x - c2.center.x, 2) + Math.pow(c1.center.y - c2.center.y, 2);
    return Math.pow(c1.radius + c2.radius, 2) >= distanceSquared;
}
tab.GeometryUtil.polygonIntersectsCircle = function tab_GeometryUtil$polygonIntersectsCircle(pointList, circle) {
    if (!pointList.length || !circle.radius) {
        return false;
    }
    if (tab.GeometryUtil.isPointInPoly(pointList, circle.center)) {
        return true;
    }
    if (tab.GeometryUtil.isPointInCircle(pointList[0], circle)) {
        return true;
    }
    var radiusSquared = circle.radius * circle.radius;
    for (var i = 0, l = pointList.length; i < l; i++) {
        var a = tab.GeometryUtil._getPolyPt(pointList, i);
        var b = tab.GeometryUtil._getPolyPt(pointList, i + 1);
        var dy = b.y - a.y;
        var dx = b.x - a.x;
        var distanceSquared = (dx * dx) + (dy * dy);
        var projectionRatio = (((circle.center.x - a.x) * dx) + ((circle.center.y - a.y) * dy)) / distanceSquared;
        projectionRatio = Math.min(1, Math.max(0, projectionRatio));
        var projectedX = a.x + (projectionRatio * dx);
        var projectedY = a.y + (projectionRatio * dy);
        dx = projectedX - circle.center.x;
        dy = projectedY - circle.center.y;
        distanceSquared = (dx * dx) + (dy * dy);
        if (radiusSquared > distanceSquared) {
            return true;
        }
    }
    return false;
}
tab.GeometryUtil.circleIntersectsRect = function tab_GeometryUtil$circleIntersectsRect(circle, rect) {
    if (circle.radius <= 0) {
        return false;
    }
    var rectCorners = tab.GeometryUtil._clockwiseCornersFromRect(rect);
    var $enum1 = ss.IEnumerator.getEnumerator(rectCorners);
    while ($enum1.moveNext()) {
        var corner = $enum1.current;
        if (tab.GeometryUtil.isPointInCircle(corner, circle)) {
            return true;
        }
    }
    if (tab.RectXYUtil.inRectPointF(rect, circle.center)) {
        return true;
    }
    var halfWidth = rect.w / 2;
    var halfHeight = rect.h / 2;
    var rectCenter = tab.$create_PointF(rect.x + halfWidth, rect.y + halfHeight);
    if (circle.center.y < rect.y || circle.center.y > rect.y + rect.h) {
        return circle.center.x > rect.x && circle.center.x < rect.x + rect.w && Math.abs(rectCenter.y - circle.center.y) < halfHeight + circle.radius;
    }
    if (circle.center.x < rect.x || circle.center.x > rect.x + rect.w) {
        return circle.center.y > rect.y && circle.center.y < rect.y + rect.h && Math.abs(rectCenter.x - circle.center.x) < halfWidth + circle.radius;
    }
    return false;
}
tab.GeometryUtil.normalizeAngle = function tab_GeometryUtil$normalizeAngle(radians) {
    var newAngle = radians % tab.GeometryUtil.twoPI;
    if (newAngle < 0) {
        newAngle += tab.GeometryUtil.twoPI;
    }
    return newAngle;
}
tab.GeometryUtil.isInBetweenAngles = function tab_GeometryUtil$isInBetweenAngles(target, angle1, angle2) {
    var flipped = false;
    if (angle1 > angle2) {
        var temp = angle1;
        angle1 = angle2;
        angle2 = temp;
        flipped = true;
    }
    if (angle1 <= target && angle2 >= target) {
        return !flipped;
    }
    return flipped;
}
tab.GeometryUtil.isPointInCircle = function tab_GeometryUtil$isPointInCircle(p, circle) {
    var squareDist = Math.pow(p.x - circle.center.x, 2) + Math.pow(p.y - circle.center.y, 2);
    var squareRadius = circle.radius * circle.radius;
    var inside = squareDist < squareRadius;
    return inside;
}
tab.GeometryUtil.isPointInWedge = function tab_GeometryUtil$isPointInWedge(p, wedgeCircle, startangle, endangle) {
    if (!tab.GeometryUtil.isPointInCircle(p, wedgeCircle)) {
        return false;
    }
    var dx = p.x - wedgeCircle.center.x;
    var dy = p.y - wedgeCircle.center.y;
    var phi = Math.atan2(dy, dx);
    phi = tab.GeometryUtil.normalizeAngle(phi);
    return tab.GeometryUtil.isInBetweenAngles(phi, startangle, endangle);
}
tab.GeometryUtil.rectIntersectsWedge = function tab_GeometryUtil$rectIntersectsWedge(rect, wedgeCircle, startangle, endangle) {
    var rectCorners = tab.GeometryUtil._clockwiseCornersFromRect(rect);
    var $enum1 = ss.IEnumerator.getEnumerator(rectCorners);
    while ($enum1.moveNext()) {
        var rectCorner = $enum1.current;
        if (tab.GeometryUtil.isPointInWedge(rectCorner, wedgeCircle, startangle, endangle)) {
            return true;
        }
    }
    if (tab.RectXYUtil.inRectPointF(rect, wedgeCircle.center)) {
        return true;
    }
    var polygon = tab.GeometryUtil._convertWedgeToPolygon(wedgeCircle, startangle, endangle);
    return tab.GeometryUtil.polygonIntersectsRect(polygon, rect);
}
tab.GeometryUtil.polygonIntersectsWedge = function tab_GeometryUtil$polygonIntersectsWedge(pointList, wedgeCircle, startangle, endangle) {
    if (!pointList.length) {
        return false;
    }
    if (tab.GeometryUtil.isPointInWedge(pointList[0], wedgeCircle, startangle, endangle)) {
        return true;
    }
    if (tab.GeometryUtil.isPointInPoly(pointList, wedgeCircle.center)) {
        return true;
    }
    var polygon = tab.GeometryUtil._convertWedgeToPolygon(wedgeCircle, startangle, endangle);
    return tab.GeometryUtil._polygonIntersectsPolygon(polygon, pointList);
}
tab.GeometryUtil.circleIntersectsWedge = function tab_GeometryUtil$circleIntersectsWedge(circle, wedgeCircle, startangle, endangle) {
    if (circle.radius <= 0) {
        return false;
    }
    if (tab.GeometryUtil.isPointInWedge(circle.center, wedgeCircle, startangle, endangle)) {
        return true;
    }
    if (tab.GeometryUtil.isPointInCircle(wedgeCircle.center, circle)) {
        return true;
    }
    var polygon = tab.GeometryUtil._convertWedgeToPolygon(wedgeCircle, startangle, endangle);
    return tab.GeometryUtil.polygonIntersectsCircle(polygon, circle);
}
tab.GeometryUtil._convertWedgeToPolygon = function tab_GeometryUtil$_convertWedgeToPolygon(wedgeCircle, startangle, endangle) {
    while (startangle > endangle) {
        endangle += tab.GeometryUtil.twoPI;
    }
    var sliceStart = startangle;
    var polygon = [];
    var farPoint = tab.$create_PointF(wedgeCircle.center.x + (Math.cos(sliceStart) * wedgeCircle.radius), wedgeCircle.center.y + (Math.sin(sliceStart) * wedgeCircle.radius));
    polygon.add(wedgeCircle.center);
    polygon.add(farPoint);
    while (sliceStart < endangle) {
        var sliceEnd = Math.min(sliceStart + tab.GeometryUtil._maxWedgeIntersectionAngle, endangle);
        farPoint = tab.$create_PointF(wedgeCircle.center.x + (Math.cos(sliceEnd) * wedgeCircle.radius), wedgeCircle.center.y + (Math.sin(sliceEnd) * wedgeCircle.radius));
        polygon.add(farPoint);
        sliceStart = sliceEnd;
    }
    return polygon;
}
tab.GeometryUtil.areRectanglesIntersecting = function tab_GeometryUtil$areRectanglesIntersecting(rect1, rect2) {
    return tab.RectXYUtil.intersectsWith(rect1, rect2);
}
tab.GeometryUtil.getSquaredDistanceToCenter = function tab_GeometryUtil$getSquaredDistanceToCenter(bound, selectionPoint) {
    var centerX = bound.x + (bound.w / 2);
    var centerY = bound.y + (bound.h / 2);
    var dx = centerX - selectionPoint.x;
    var dy = centerY - selectionPoint.y;
    return (dx * dx) + (dy * dy);
}
tab.GeometryUtil.getSquaredDistanceToNearestSide = function tab_GeometryUtil$getSquaredDistanceToNearestSide(bound, selectionPoint) {
    var top = bound.y;
    var bottom = bound.y + bound.h;
    var left = bound.x;
    var right = bound.x + bound.w;
    var dx, dy;
    if (selectionPoint.x < left) {
        dx = left - selectionPoint.x;
    }
    else if (selectionPoint.x > right) {
        dx = selectionPoint.x - right;
    }
    else {
        dx = 0;
    }
    if (selectionPoint.y < top) {
        dy = top - selectionPoint.y;
    }
    else if (selectionPoint.y > bottom) {
        dy = selectionPoint.y - bottom;
    }
    else {
        dy = 0;
    }
    return (dx * dx) + (dy * dy);
}
tab.GeometryUtil.getSquaredDistanceToCircumference = function tab_GeometryUtil$getSquaredDistanceToCircumference(bound, selectionPoint) {
    var distance = Math.sqrt(tab.GeometryUtil.getSquaredDistanceToCenter(bound, selectionPoint)) - (Math.min(bound.w, bound.h) / 2);
    distance = Math.max(distance, 0);
    return distance * distance;
}
tab.GeometryUtil.getSquaredDistanceToLineSegment = function tab_GeometryUtil$getSquaredDistanceToLineSegment(bound, selectionPoint) {
    return tab.GeometryUtil.getSquaredDistanceToNearestSide(bound, selectionPoint);
}
tab.GeometryUtil._isLeft = function tab_GeometryUtil$_isLeft(p0, p1, p2) {
    return (((p1.x - p0.x) * (p2.y - p0.y)) - ((p2.x - p0.x) * (p1.y - p0.y)));
}
tab.GeometryUtil._getPolyPt = function tab_GeometryUtil$_getPolyPt(poly, index) {
    var wrappedIndex = index % poly.length;
    return poly[wrappedIndex];
}
tab.GeometryUtil._pointListFromArray = function tab_GeometryUtil$_pointListFromArray(ring) {
    var result = [];
    for (var j = 0; j < ring.length; j = j + 2) {
        result.add(tab.$create_PointF(ring[j], ring[j + 1]));
    }
    return result;
}
tab.GeometryUtil._clockwiseCornersFromRect = function tab_GeometryUtil$_clockwiseCornersFromRect(rect) {
    var corners = [];
    corners.add(tab.$create_PointF(rect.x, rect.y));
    corners.add(tab.$create_PointF(rect.x + rect.w, rect.y));
    corners.add(tab.$create_PointF(rect.x + rect.w, rect.y + rect.h));
    corners.add(tab.$create_PointF(rect.x, rect.y + rect.h));
    return corners;
}
tab.GeometryUtil._clockwiseCornersFromDoubleRect = function tab_GeometryUtil$_clockwiseCornersFromDoubleRect(rect) {
    var corners = [];
    corners.add(tab.$create_PointF(rect.x, rect.y));
    corners.add(tab.$create_PointF(rect.x + rect.w, rect.y));
    corners.add(tab.$create_PointF(rect.x + rect.w, rect.y + rect.h));
    corners.add(tab.$create_PointF(rect.x, rect.y + rect.h));
    return corners;
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitTestResult

tab.HitTestResult = function tab_HitTestResult(objectId, objType, hitType) {
    this._id = objectId;
    this._hitObjectType = objType;
    this._hitType = hitType;
    this._shouldRenderOverlay = !!hitType;
}
tab.HitTestResult.getIdsFromHitTestResults = function tab_HitTestResult$getIdsFromHitTestResults(objectHitsInfo) {
    var set = new tab.UintSet();
    var $enum1 = ss.IEnumerator.getEnumerator(objectHitsInfo);
    while ($enum1.moveNext()) {
        var objectHitInfo = $enum1.current;
        set.add(objectHitInfo.get_id());
    }
    return set.get_values();
}
tab.HitTestResult.hasExactHit = function tab_HitTestResult$hasExactHit(hitInfoArray) {
    var $enum1 = ss.IEnumerator.getEnumerator(hitInfoArray);
    while ($enum1.moveNext()) {
        var objectHitInfo = $enum1.current;
        if (objectHitInfo.get_hitType() === 3) {
            return true;
        }
    }
    return false;
}
tab.HitTestResult.tieBreakHits = function tab_HitTestResult$tieBreakHits(firstResult, secondResult) {
    var toRet1 = new tab.HitTestResult(0, 0, 0);
    var toRet2 = new tab.HitTestResult(0, 0, 0);
    var $enum1 = ss.IEnumerator.getEnumerator(firstResult);
    while ($enum1.moveNext()) {
        var htr = $enum1.current;
        if (htr.get_hitType() === 3) {
            return htr;
        }
        if (!!htr.get_hitType() && !toRet1.get_hitType()) {
            toRet1 = htr;
        }
    }
    var $enum2 = ss.IEnumerator.getEnumerator(secondResult);
    while ($enum2.moveNext()) {
        var htr = $enum2.current;
        if (htr.get_hitType() === 3) {
            return htr;
        }
        if (!!htr.get_hitType() && !toRet2.get_hitType()) {
            toRet2 = htr;
        }
    }
    if (!!toRet1.get_hitType()) {
        return toRet1;
    }
    if (!!toRet2.get_hitType()) {
        return toRet2;
    }
    return new tab.HitTestResult(0, 0, 0);
}
tab.HitTestResult.prototype = {
    _id: 0,
    _hitObjectType: 0,
    _hitType: 0,
    _shouldRenderOverlay: false,
    
    get_id: function tab_HitTestResult$get_id() {
        return this._id;
    },
    
    get_hitObjectType: function tab_HitTestResult$get_hitObjectType() {
        return this._hitObjectType;
    },
    
    get_hitType: function tab_HitTestResult$get_hitType() {
        return this._hitType;
    },
    
    get_shouldRenderOverlay: function tab_HitTestResult$get_shouldRenderOverlay() {
        return this._shouldRenderOverlay;
    },
    
    get_visualPart: function tab_HitTestResult$get_visualPart() {
        switch (this._hitObjectType) {
            case 2:
                return 'ref-lines';
            case 3:
                return 'trend-lines';
            case 1:
                return 'marks';
            default:
                return 'misc';
        }
    },
    
    doNotRenderOverlay: function tab_HitTestResult$doNotRenderOverlay() {
        this._shouldRenderOverlay = false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitTestDebugger

tab.HitTestDebugger = function tab_HitTestDebugger() {
    var obj = $('.tab-tvView .tabCanvas');
    this._vizCanvasEl = obj.get(0);
    this._oldPosSetting = this._vizCanvasEl.style.position;
    this._vizCanvasEl.style.position = 'absolute';
    this._debugCanvasEl = document.createElement('canvas');
    this._debugCanvasEl.width = this._vizCanvasEl.width;
    this._debugCanvasEl.height = this._vizCanvasEl.height;
    this._debugCanvasEl.style.position = 'absolute';
    this._canvasParentContainer = this._vizCanvasEl.parentNode;
    this._canvasParentContainer.appendChild(this._debugCanvasEl);
}
tab.HitTestDebugger.get_instance = function tab_HitTestDebugger$get_instance() {
    if (ss.isNullOrUndefined(tab.HitTestDebugger._instance)) {
        tab.HitTestDebugger._instance = new tab.HitTestDebugger();
    }
    return tab.HitTestDebugger._instance;
}
tab.HitTestDebugger.prototype = {
    _oldPosSetting: null,
    _vizCanvasEl: null,
    _debugCanvasEl: null,
    _canvasParentContainer: null,
    
    get_context2D: function tab_HitTestDebugger$get_context2D() {
        return this._debugCanvasEl.getContext('2d');
    },
    
    debugDrawBoundingBoxesHierarchy: function tab_HitTestDebugger$debugDrawBoundingBoxesHierarchy(root) {
        this.clear();
        this._debugDrawBoundingBoxesImpl(root);
    },
    
    debugDrawBoundingBoxesHierarchies: function tab_HitTestDebugger$debugDrawBoundingBoxesHierarchies(roots) {
        this.clear();
        var $enum1 = ss.IEnumerator.getEnumerator(roots);
        while ($enum1.moveNext()) {
            var root = $enum1.current;
            this._debugDrawBoundingBoxesImpl(root);
        }
    },
    
    clear: function tab_HitTestDebugger$clear() {
        this.get_context2D().clearRect(0, 0, this._debugCanvasEl.width, this._debugCanvasEl.height);
    },
    
    done: function tab_HitTestDebugger$done() {
        this._vizCanvasEl.style.position = this._oldPosSetting;
        this._canvasParentContainer.removeChild(this._debugCanvasEl);
    },
    
    _debugDrawBoundingBoxesImpl: function tab_HitTestDebugger$_debugDrawBoundingBoxesImpl(root) {
        var queue = [];
        queue.enqueue(root);
        while (queue.length > 0) {
            var node = queue.dequeue();
            if (node.get_nodeType() === 2) {
                var bb = node.get_boundingBox();
                this.get_context2D().save();
                if (!(tab.HitTestDebugger._binAlternation % 2)) {
                    this.get_context2D().fillStyle = 'rgba(120, 255, 20, 0.1)';
                }
                else {
                    this.get_context2D().fillStyle = 'rgba(20, 255, 120, 0.1)';
                }
                this.get_context2D().fillRect(bb.x, bb.y, bb.w, bb.h);
                this.get_context2D().restore();
                ++tab.HitTestDebugger._binAlternation;
            }
            if (node.get_nodeType() === 3 || node.get_nodeType() === 5) {
                var bb = node.get_boundingBox();
                this.get_context2D().save();
                this.get_context2D().fillStyle = 'rgba(255, 0, 0, 0.2)';
                this.get_context2D().fillRect(bb.x, bb.y, bb.w, bb.h);
                this.get_context2D().restore();
            }
            if (node.get_nodeType() === 4) {
                var bb = node.get_boundingBox();
                this.get_context2D().save();
                this.get_context2D().fillStyle = 'rgba(0, 0, 255, 0.2)';
                this.get_context2D().fillRect(bb.x, bb.y, bb.w, bb.h);
                this.get_context2D().restore();
            }
            var children = node.get_children();
            children.forEach(function(child) {
                queue.enqueue(child);
            });
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.VisualPartsHitTest

tab.VisualPartsHitTest = function tab_VisualPartsHitTest() {
}
tab.VisualPartsHitTest.hitTestRefLines = function tab_VisualPartsHitTest$hitTestRefLines(drawItems, selectionRect, isSingleSelect) {
    var currentBest = new tab.HitTestResult(0, 0, 0);
    var lineItems = tab.VisualPartsHitTest.getRefParts(drawItems, 'refpart-geom');
    currentBest = tab.VisualPartsHitTest._hitTestDrawItemPresModels(lineItems, selectionRect, isSingleSelect, currentBest);
    if (currentBest.get_hitType() === 3) {
        return currentBest;
    }
    var textItems = tab.VisualPartsHitTest.getRefParts(drawItems, 'refpart-text');
    currentBest = tab.VisualPartsHitTest._hitTestDrawItemPresModels(textItems, selectionRect, isSingleSelect, currentBest);
    return currentBest;
}
tab.VisualPartsHitTest._hitTestDrawItemPresModels = function tab_VisualPartsHitTest$_hitTestDrawItemPresModels(items, selectionRect, isSingleSelect, currentBest) {
    for (var i = items.length - 1; i >= 0; i--) {
        var group = items[i];
        var hitTestResult = tab.VisualPartsHitTest._hitTestRefLineGeom(group.drawItems, selectionRect, isSingleSelect, group.objectId);
        if (hitTestResult.get_hitType() === 3) {
            return hitTestResult;
        }
        if (hitTestResult.get_hitType() === 2 && !currentBest.get_hitType()) {
            currentBest = hitTestResult;
        }
    }
    return currentBest;
}
tab.VisualPartsHitTest.hitTestTrendLines = function tab_VisualPartsHitTest$hitTestTrendLines(trendLineHitTestStructures, selectionRect, isSingleSelect) {
    var toRet = new tab.HitTestResult(0, 0, 0);
    for (var i = trendLineHitTestStructures.length - 1; i >= 0; i--) {
        var hitTester = new tab.HitTester(trendLineHitTestStructures[i]);
        var hitTestResult = hitTester.hitTestTrendLine(selectionRect, isSingleSelect);
        if (hitTestResult.get_hitType() === 3) {
            return hitTestResult;
        }
        if (hitTestResult.get_hitType() === 2 && !toRet.get_hitType()) {
            toRet = hitTestResult;
        }
    }
    return toRet;
}
tab.VisualPartsHitTest._hitTestRefLineGeom = function tab_VisualPartsHitTest$_hitTestRefLineGeom(drawItems, selectionRect, isSingleSelect, groupId) {
    var expandedSelectionRect = tab.RectXYUtil.dialate(selectionRect, tab.VisualPartsHitTest.visualPartNearHitTestExpansionPixels);
    var lineWidth = 1;
    var toRet = new tab.HitTestResult(groupId, 2, 0);
    var $enum1 = ss.IEnumerator.getEnumerator(drawItems);
    while ($enum1.moveNext()) {
        var iterator = $enum1.current;
        switch (iterator.type) {
            case 'draw-pen':
                var drawPen = iterator;
                if (ss.isValue(drawPen.strokeWidth)) {
                    lineWidth = drawPen.strokeWidth;
                }
                break;
            case 'draw-polyline':
            case 'draw-fill-rect':
                var drawPoints = iterator;
                var doNotRenderOverlay = ss.isValue(drawPoints.useForOverlayHitTest) && !drawPoints.useForOverlayHitTest;
                var pt1 = tab.$create_PointF(drawPoints.points[0], drawPoints.points[1]);
                var pt2 = tab.$create_PointF(drawPoints.points[2], drawPoints.points[3]);
                var refLineRect = tab.RectXYUtil.rectXYFromCorners(pt1, pt2);
                if (iterator.type === 'draw-polyline') {
                    if (lineWidth < 3) {
                        refLineRect = tab.RectXYUtil.dialate(refLineRect, 1);
                    }
                }
                var nearHit = isSingleSelect && tab.RectXYUtil.intersectsWith(expandedSelectionRect, refLineRect);
                var exactHit = (!isSingleSelect || nearHit) && tab.RectXYUtil.intersectsWith(selectionRect, refLineRect);
                if (exactHit) {
                    toRet = new tab.HitTestResult(groupId, 2, 3);
                    if (doNotRenderOverlay) {
                        toRet.doNotRenderOverlay();
                    }
                    return toRet;
                }
                if (nearHit) {
                    toRet = new tab.HitTestResult(groupId, 2, 2);
                    if (doNotRenderOverlay) {
                        toRet.doNotRenderOverlay();
                    }
                }
                break;
            default:
                break;
        }
    }
    return toRet;
}
tab.VisualPartsHitTest._hitTestRefLineText = function tab_VisualPartsHitTest$_hitTestRefLineText(drawItems, selectionRect, isSingleSelect, groupId) {
    var expandedSelectionRect = tab.RectXYUtil.dialate(selectionRect, tab.VisualPartsHitTest.visualPartNearHitTestExpansionPixels);
    var toRet = new tab.HitTestResult(groupId, 2, 0);
    var $enum1 = ss.IEnumerator.getEnumerator(drawItems);
    while ($enum1.moveNext()) {
        var iterator = $enum1.current;
        switch (iterator.type) {
            case 'draw-fill-rect':
                var drawPoints = iterator;
                var refLinePart = tab.DisplayList2DUtils.rectXYFromDrawRect(drawPoints.points);
                var nearHit = isSingleSelect && tab.RectXYUtil.intersectsWith(expandedSelectionRect, refLinePart);
                var exactHit = (!isSingleSelect || nearHit) && tab.RectXYUtil.intersectsWith(selectionRect, refLinePart);
                if (exactHit) {
                    return new tab.HitTestResult(groupId, 2, 3);
                }
                if (nearHit) {
                    toRet = new tab.HitTestResult(groupId, 2, 2);
                }
                break;
            default:
                break;
        }
    }
    return toRet;
}
tab.VisualPartsHitTest.getRefParts = function tab_VisualPartsHitTest$getRefParts(drawItems, refPart) {
    var toRet = [];
    var $enum1 = ss.IEnumerator.getEnumerator(drawItems);
    while ($enum1.moveNext()) {
        var drawItem = $enum1.current;
        if (drawItem.type === 'clip-rect' && refPart === 'refpart-clip-rect') {
            toRet.add(drawItem);
        }
        else if (drawItem.type === 'draw-group') {
            var drawGroup = drawItem;
            var drawText = _.find(drawGroup.drawItems, function(iterator) {
                return iterator.type === 'draw-text';
            });
            if (refPart === 'refpart-text' && ss.isValue(drawText)) {
                toRet.add(drawItem);
            }
            else if (refPart === 'refpart-geom' && ss.isNullOrUndefined(drawText)) {
                toRet.add(drawItem);
            }
        }
    }
    return toRet;
}


////////////////////////////////////////////////////////////////////////////////
// tab.LineMarkDrawState

tab.LineMarkDrawState = function tab_LineMarkDrawState(paneDrawInfo) {
    this._lineAttributes = [];
    this._reCompute(paneDrawInfo);
}
tab.LineMarkDrawState.prototype = {
    _lineAttributes: null,
    
    get_lineAttributes: function tab_LineMarkDrawState$get_lineAttributes() {
        return this._lineAttributes;
    },
    
    _reCompute: function tab_LineMarkDrawState$_reCompute(paneDrawInfo) {
        this._lineAttributes.clear();
        var markCount = paneDrawInfo.get_markCount();
        var la = new tab.LineAttribute(0);
        for (var i = 0; i < markCount; i++) {
            if (paneDrawInfo.get_isWrappedDomain()) {
                var bounds = paneDrawInfo.getMarkBounds(i);
                var left = bounds.x;
                var right = bounds.x + bounds.w;
                la.minXDomain = Math.min(la.minXDomain, paneDrawInfo.pixelToDomainX(left));
                la.maxXDomain = Math.max(la.maxXDomain, paneDrawInfo.pixelToDomainX(right));
            }
            var state = paneDrawInfo.getMarkState(i);
            if (state === 'markStateSelected') {
                la.selectedCount++;
                if (paneDrawInfo.isMarkHighlighted(i)) {
                    la.highlightedCount++;
                }
            }
            else if (state === 'markStateHighlighted') {
                la.highlightedCount++;
            }
            if (paneDrawInfo.isMarkEndPrimitive(i)) {
                la.endIndex = i;
                this._lineAttributes.add(la);
                la = new tab.LineAttribute(i + 1);
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LineAttribute

tab.LineAttribute = function tab_LineAttribute(startIndex) {
    this.startIndex = startIndex;
    this.endIndex = -1;
    this.selectedCount = 0;
    this.highlightedCount = 0;
    this.minXDomain = 0;
    this.maxXDomain = 0;
}
tab.LineAttribute.prototype = {
    startIndex: 0,
    endIndex: 0,
    selectedCount: 0,
    highlightedCount: 0,
    minXDomain: 0,
    maxXDomain: 0,
    
    get_allHighlighted: function tab_LineAttribute$get_allHighlighted() {
        return this.highlightedCount >= (this.endIndex - this.startIndex + 1);
    },
    
    get_lineState: function tab_LineAttribute$get_lineState() {
        if (this.selectedCount > 0) {
            return 'lineStateSelected';
        }
        else if (this.highlightedCount > 0) {
            return 'lineStateHighlighted';
        }
        else {
            return 'lineStateNormal';
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitTargetColliders

tab.HitTargetColliders = function tab_HitTargetColliders() {
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitTargetNode

tab.HitTargetNode = function tab_HitTargetNode(boundingBox, nodeType, objectId, labelBoundingBox, worldOffset) {
    this._boundingBox = boundingBox;
    if (ss.isNullOrUndefined(labelBoundingBox) || tab.RectXYUtil.isEmpty(labelBoundingBox)) {
        this._labelBoundingBox = null;
    }
    else {
        this._labelBoundingBox = labelBoundingBox;
    }
    if (ss.isNullOrUndefined(objectId)) {
        this._objectId = -1;
    }
    else {
        this._objectId = objectId;
    }
    if (ss.isNullOrUndefined(worldOffset)) {
        this._worldOffset = -1;
    }
    else {
        this._worldOffset = worldOffset;
    }
    this._nodeType = nodeType;
    this._children = [];
}
tab.HitTargetNode.findPaneNode = function tab_HitTargetNode$findPaneNode(node) {
    if (ss.isNullOrUndefined(node)) {
        return null;
    }
    while (!!node._nodeType) {
        if (node.get_nodeType() === 1) {
            return node;
        }
        node = node.get_parent();
    }
    return null;
}
tab.HitTargetNode.createRootNode = function tab_HitTargetNode$createRootNode() {
    return new tab.HitTargetNode(tab.$create_RectXY(0, 0, 9999999, 9999999), 0);
}
tab.HitTargetNode.prototype = {
    _children: null,
    _boundingBox: null,
    _nodeType: 0,
    _objectId: 0,
    _labelBoundingBox: null,
    _worldOffset: 0,
    _parent: null,
    _paneKey: null,
    _paneIndex: 0,
    
    get_objectId: function tab_HitTargetNode$get_objectId() {
        return this._objectId;
    },
    
    get_worldOffset: function tab_HitTargetNode$get_worldOffset() {
        return this._worldOffset;
    },
    
    get_nodeType: function tab_HitTargetNode$get_nodeType() {
        return this._nodeType;
    },
    
    get_boundingBox: function tab_HitTargetNode$get_boundingBox() {
        return this._boundingBox;
    },
    
    get_labelBox: function tab_HitTargetNode$get_labelBox() {
        return this._labelBoundingBox;
    },
    
    get_children: function tab_HitTargetNode$get_children() {
        return this._children;
    },
    
    get_parent: function tab_HitTargetNode$get_parent() {
        return this._parent;
    },
    set_parent: function tab_HitTargetNode$set_parent(value) {
        this._parent = value;
        return value;
    },
    
    get_paneKey: function tab_HitTargetNode$get_paneKey() {
        return this._paneKey;
    },
    set_paneKey: function tab_HitTargetNode$set_paneKey(value) {
        this._paneKey = value;
        return value;
    },
    
    get_paneIndex: function tab_HitTargetNode$get_paneIndex() {
        return this._paneIndex;
    },
    set_paneIndex: function tab_HitTargetNode$set_paneIndex(value) {
        this._paneIndex = value;
        return value;
    },
    
    addNode: function tab_HitTargetNode$addNode(node) {
        this._children.add(node);
        node.set_parent(this);
    },
    
    addNodes: function tab_HitTargetNode$addNodes(nodes) {
        this._children.addRange(nodes);
        var $enum1 = ss.IEnumerator.getEnumerator(nodes);
        while ($enum1.moveNext()) {
            var childNode = $enum1.current;
            childNode.set_parent(this);
        }
    },
    
    resetChildren: function tab_HitTargetNode$resetChildren() {
        this._children.clear();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitTester

tab.HitTester = function tab_HitTester(root) {
    this._root = root;
}
tab.HitTester._exactHit = function tab_HitTester$_exactHit(paneDrawInfo, selection, markIndex, pixelWorldOffset, primitiveType) {
    switch (primitiveType) {
        case 'area':
            return tab.MarksRenderer._areaMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'line':
            return tab.MarksRenderer._lineMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'multipolygon':
            return tab.MarksRenderer._multipolygonMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'pie':
            return tab.MarksRenderer._pieMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'shape':
            return tab.MarksRenderer._shapeMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'bar':
        case 'square':
            return tab.MarksRenderer._barMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'text':
            return tab.MarksRenderer._textMarkExactHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        default:
            var offsetSelection = tab.$create_RectXY(selection.x - Math.round(pixelWorldOffset), selection.y, selection.w, selection.h);
            return tab.RectXYUtil.intersectsWith(offsetSelection, paneDrawInfo.getMarkBounds(markIndex));
    }
}
tab.HitTester._nearHit = function tab_HitTester$_nearHit(paneDrawInfo, selection, markIndex, pixelWorldOffset, primitiveType) {
    switch (primitiveType) {
        case 'line':
            return tab.MarksRenderer._lineMarkNearHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'shape':
            return tab.MarksRenderer._shapeMarkNearHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'bar':
        case 'square':
            return tab.MarksRenderer._barMarkNearHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'text':
            return tab.MarksRenderer._textMarkNearHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        case 'area':
            return tab.MarksRenderer._areaMarkNearHitTest(paneDrawInfo, selection.x - pixelWorldOffset, selection.y, markIndex);
        default:
            return false;
    }
}
tab.HitTester.rectangleAreaHit = function tab_HitTester$rectangleAreaHit(paneDrawInfo, markBoundingBox, selection, markIndex, t, primitiveType) {
    var offsetSelection = (t.get_isNull()) ? selection : tab.RectXYUtil.offsetRectF(selection, tab.$create_PointF(-t.get_translateX(), -t.get_translateY()));
    switch (primitiveType) {
        case 'area':
            return tab.MarksRenderer._areaMarkRectangleAreaHitTest(paneDrawInfo, offsetSelection, markIndex);
        case 'line':
            return tab.MarksRenderer._lineMarkRectangleAreaHitTest(paneDrawInfo, offsetSelection, markIndex);
        case 'multipolygon':
            var transformedRect = t.transformRect(selection);
            return tab.MarksRenderer._multipolygonMarkRectangleAreaHitTest(paneDrawInfo, transformedRect, markIndex);
        case 'pie':
            return tab.MarksRenderer._pieMarkRectangleAreaHitTest(paneDrawInfo, offsetSelection, markIndex);
        case 'shape':
            return tab.MarksRenderer._shapeMarkRectangleAreaHitTest(paneDrawInfo, offsetSelection, markIndex);
        default:
            return tab.RectXYUtil.intersectsWith(selection, markBoundingBox);
    }
}
tab.HitTester.circleAreaHit = function tab_HitTester$circleAreaHit(paneDrawInfo, markBoundingBox, selection, markIndex, t, primitiveType) {
    var offsetCircle = (t.get_isNull()) ? selection : tab.CircleUtil.offsetCircle(selection, tab.$create_PointF(-t.get_translateX(), -t.get_translateY()));
    switch (primitiveType) {
        case 'area':
            return tab.MarksRenderer._areaMarkCircleAreaHitTest(paneDrawInfo, offsetCircle, markIndex);
        case 'line':
            return tab.MarksRenderer._lineMarkCircleAreaHitTest(paneDrawInfo, offsetCircle, markIndex);
        case 'multipolygon':
            var transformedCircle = t.transformCircle(selection);
            return tab.MarksRenderer._multipolygonMarkCircleAreaHitTest(paneDrawInfo, transformedCircle, markIndex);
        case 'pie':
            return tab.MarksRenderer._pieMarkCircleAreaHitTest(paneDrawInfo, offsetCircle, markIndex);
        case 'shape':
            return tab.MarksRenderer._shapeMarkCircleAreaHitTest(paneDrawInfo, offsetCircle, markIndex);
        default:
            return tab.GeometryUtil.circleIntersectsRect(selection, markBoundingBox);
    }
}
tab.HitTester.polyAreaHit = function tab_HitTester$polyAreaHit(paneDrawInfo, markBoundingBox, offsetSelectionPts, markIndex, t, primitiveType) {
    switch (primitiveType) {
        case 'area':
            return tab.MarksRenderer._areaMarkPolygonAreaHitTest(paneDrawInfo, offsetSelectionPts, markIndex);
        case 'line':
            return tab.MarksRenderer._lineMarkPolygonAreaHitTest(paneDrawInfo, offsetSelectionPts, markIndex);
        case 'multipolygon':
            return tab.MarksRenderer._multipolygonMarkPolygonAreaHitTest(paneDrawInfo, offsetSelectionPts, markIndex);
        case 'pie':
            return tab.MarksRenderer._pieMarkPolygonAreaHitTest(paneDrawInfo, offsetSelectionPts, markIndex);
        case 'shape':
            return tab.MarksRenderer._shapeMarkPolygonAreaHitTest(paneDrawInfo, offsetSelectionPts, markIndex);
        default:
            var offsetBoundingBox = markBoundingBox;
            if (!t.get_isNull()) {
                offsetBoundingBox = tab.$create_RectXY(markBoundingBox.x - Math.round(t.get_translateX()), markBoundingBox.y, markBoundingBox.w, markBoundingBox.h);
            }
            return tab.GeometryUtil.polygonIntersectsRect(offsetSelectionPts, offsetBoundingBox);
    }
}
tab.HitTester.getTransformInfo = function tab_HitTester$getTransformInfo(pdi, node) {
    if (pdi.get_markType() === 'multipolygon' && !pdi.hasPixelGeometry) {
        var markIndex = node.get_objectId();
        var x = pdi.getMarkProperty('x', markIndex);
        var y = pdi.getMarkProperty('y', markIndex);
        var scale = pdi.getMarkProperty('size', markIndex);
        return tab.Transform.pixelToDomain(x, y, scale);
    }
    var worldOffsetPixels = pdi.getWorldOffset(node.get_worldOffset());
    return tab.Transform.worldOffset(worldOffsetPixels);
}
tab.HitTester.prototype = {
    _root: null,
    
    hitTestTrendLine: function tab_HitTester$hitTestTrendLine(selectionRect, isSingleSelect) {
        var toRet = new tab.HitTestResult(0, 0, 0);
        if (isSingleSelect) {
            var expandedSelectionRect = tab.RectXYUtil.dialate(selectionRect, tab.VisualPartsHitTest.visualPartNearHitTestExpansionPixels);
            var nearHitId = this._hitTestTrendLineHelper(expandedSelectionRect);
            if (ss.isValue(nearHitId)) {
                toRet = new tab.HitTestResult(nearHitId, 3, 2);
            }
        }
        if (toRet.get_hitType() === 2 || !isSingleSelect) {
            var exactHitId = this._hitTestTrendLineHelper(selectionRect);
            if (ss.isValue(exactHitId)) {
                toRet = new tab.HitTestResult(exactHitId, 3, 3);
            }
        }
        return toRet;
    },
    
    _hitTestTrendLineHelper: function tab_HitTester$_hitTestTrendLineHelper(selectionRect) {
        var stack = [];
        stack.push(this._root);
        while (stack.length > 0) {
            var node = stack.pop();
            var hit = tab.RectXYUtil.intersectsWith(node.get_boundingBox(), selectionRect);
            if (hit) {
                if (node.get_nodeType() === 4 || !node.get_nodeType()) {
                    var children = node.get_children();
                    children.forEach(function(child) {
                        stack.push(child);
                    });
                }
                else if (node.get_nodeType() === 5) {
                    return node.get_objectId();
                }
            }
        }
        return null;
    },
    
    hitTestPanes: function tab_HitTester$hitTestPanes(selectionRect) {
        var paneKeys = [];
        var stack = [];
        stack.push(this._root);
        while (stack.length > 0) {
            var node = stack.pop();
            var hit = tab.RectXYUtil.intersectsWith(node.get_boundingBox(), selectionRect);
            if (hit) {
                if (node.get_nodeType() === 1) {
                    paneKeys.add(node.get_paneKey());
                }
                else {
                    var children = node.get_children();
                    children.forEach(function(child) {
                        stack.push(child);
                    });
                }
            }
        }
        return paneKeys;
    },
    
    hitTest: function tab_HitTester$hitTest(selectionRect, isSingleSelect, sceneInfo) {
        tab.Log.get(this).debug('isSingleSelect: %s', isSingleSelect);
        if (tab.RectXYUtil.isEmpty(selectionRect)) {
            return new Array(0);
        }
        var intersectedBBoxes = this.hitTestBoundingBoxes(selectionRect, isSingleSelect, sceneInfo);
        return (isSingleSelect) ? this.hitTestSingle(selectionRect, sceneInfo, intersectedBBoxes) : this._hitTestArea(selectionRect, sceneInfo, intersectedBBoxes);
    },
    
    hitTestSingle: function tab_HitTester$hitTestSingle(selectionRect, sceneInfo, intersectedBBoxes) {
        var selCtrX = selectionRect.x + (selectionRect.w / 2);
        var selCtrY = selectionRect.y + (selectionRect.h / 2);
        var selectedId = null;
        var selectType = 0;
        var paneToMarkNodes = {};
        var paneNodes = [];
        for (var i = intersectedBBoxes.length - 1; i >= 0; i--) {
            var nn = intersectedBBoxes[i];
            if (nn.get_objectId() < 0) {
                tab.Log.get(this).warn('Mark Node has invalid mark index: ' + nn.get_objectId());
                continue;
            }
            var paneNode = tab.HitTargetNode.findPaneNode(nn);
            if (ss.isNullOrUndefined(paneNode)) {
                tab.Log.get(this).warn("Couldn't find idx #" + nn.get_objectId() + "'s pane node.");
                continue;
            }
            if (ss.isNullOrUndefined(paneToMarkNodes[paneNode.get_paneIndex()])) {
                paneToMarkNodes[paneNode.get_paneIndex()] = [];
                paneNodes.add(paneNode);
            }
            paneToMarkNodes[paneNode.get_paneIndex()].add(nn);
        }
        var exactHits = [];
        var exactLabelHits = [];
        var nearHits = [];
        var markStateMap = {};
        var $enum1 = ss.IEnumerator.getEnumerator(paneNodes);
        while ($enum1.moveNext()) {
            var paneNode = $enum1.current;
            var paneDrawInfo = sceneInfo.getPaneDrawInfoFromKey(paneNode.get_paneKey());
            var $enum2 = ss.IEnumerator.getEnumerator(paneToMarkNodes[paneNode.get_paneIndex()]);
            while ($enum2.moveNext()) {
                var nn = $enum2.current;
                var currentNodeMarkState = paneDrawInfo.getMarkState(nn.get_objectId());
                var pixelWorldOffset = paneDrawInfo.getWorldOffset(nn.get_worldOffset());
                var tupleId = paneDrawInfo.getMarkProperty('tuple_id', nn.get_objectId());
                var exactLabelHit = false;
                if (ss.isValue(nn.get_labelBox())) {
                    exactLabelHit = tab.RectXYUtil.intersectsWithMoreThanSharedEdge(nn.get_labelBox(), selectionRect);
                }
                if (exactLabelHit) {
                    exactLabelHits.push(tupleId);
                    markStateMap[tupleId] = currentNodeMarkState;
                    tab.Log.get(this).debug('Exact Label Hit: idx#%d, Tuple Id: %s, MarkState: %s', nn.get_objectId(), tupleId, currentNodeMarkState);
                }
                else if (!exactLabelHits.length) {
                    var exactHit = tab.HitTester._exactHit(paneDrawInfo, selectionRect, nn.get_objectId(), pixelWorldOffset, paneDrawInfo.get_markType());
                    if (exactHit) {
                        exactHits.push(tupleId);
                        markStateMap[tupleId] = currentNodeMarkState;
                        tab.Log.get(this).debug('Exact Hit: idx#%d, Tuple Id: %s, MarkState: %s', nn.get_objectId(), tupleId, currentNodeMarkState);
                    }
                    else if (!exactHits.length) {
                        var nearHit = tab.HitTester._nearHit(paneDrawInfo, selectionRect, nn.get_objectId(), pixelWorldOffset, paneDrawInfo.get_markType());
                        if (nearHit) {
                            var dist;
                            switch (paneDrawInfo.get_markType()) {
                                case 'line':
                                    dist = tab.MarksRenderer._lineMarkGetDistanceToMark(paneDrawInfo, selCtrX, selCtrY, nn.get_objectId());
                                    break;
                                case 'bar':
                                case 'square':
                                    dist = tab.MarksRenderer._barMarkGetDistanceToMark(paneDrawInfo, selCtrX, selCtrY, nn.get_objectId());
                                    break;
                                case 'shape':
                                    dist = tab.MarksRenderer._shapeMarkGetDistanceToMark(paneDrawInfo, selCtrX, selCtrY, nn.get_objectId());
                                    break;
                                case 'text':
                                    dist = tab.MarksRenderer._textMarkGetDistanceToMark(paneDrawInfo, selCtrX, selCtrY, nn.get_objectId());
                                    break;
                                case 'area':
                                    dist = tab.MarksRenderer._areaMarkGetDistanceToMark(paneDrawInfo, selCtrX, selCtrY, nn.get_objectId());
                                    break;
                                default:
                                    dist = tab.GeometryUtil.getSquaredDistanceToCenter(nn.get_boundingBox(), tab.$create_PointF(selCtrX, selCtrY));
                                    break;
                            }
                            nearHits.push(new ss.Tuple(tupleId, dist));
                            markStateMap[tupleId] = currentNodeMarkState;
                            tab.Log.get(this).debug('Near Hit: idx#%d, Tuple Id: %s, MarkState: %s', nn.get_objectId(), tupleId, currentNodeMarkState);
                        }
                        else {
                            tab.Log.get(this).debug('No hit');
                        }
                    }
                }
            }
        }
        if (exactLabelHits.length > 0) {
            selectedId = this._selectHighestZIndexMark(exactLabelHits, markStateMap);
            selectType = 3;
        }
        else if (exactHits.length > 0) {
            selectedId = this._selectHighestZIndexMark(exactHits, markStateMap);
            selectType = 3;
        }
        if (selectedId == null && nearHits.length > 0) {
            selectedId = this._selectClosestMark(nearHits, markStateMap);
            selectType = 2;
        }
        return (ss.isValue(selectedId)) ? [ new tab.HitTestResult(selectedId, 1, selectType) ] : new Array(0);
    },
    
    _hitTestArea: function tab_HitTester$_hitTestArea(selectionRect, sceneInfo, intersectedBBoxes) {
        var selectedIds = [];
        for (var i = intersectedBBoxes.length - 1; i >= 0; i--) {
            var nn = intersectedBBoxes[i];
            var markIndex = nn.get_objectId();
            if (markIndex < 0) {
                tab.Log.get(this).warn('Mark Node has invalid mark index: ' + markIndex);
                continue;
            }
            var paneNode = tab.HitTargetNode.findPaneNode(nn);
            if (ss.isNullOrUndefined(paneNode)) {
                tab.Log.get(this).warn("Couldn't find idx #" + markIndex + "'s pane node.");
                continue;
            }
            var paneDrawInfo = sceneInfo.getPaneDrawInfoFromKey(paneNode.get_paneKey());
            var transform = tab.HitTester.getTransformInfo(paneDrawInfo, nn);
            var areaHit = tab.HitTester.rectangleAreaHit(paneDrawInfo, nn.get_boundingBox(), selectionRect, markIndex, transform, paneDrawInfo.get_markType());
            if (areaHit) {
                selectedIds.push(new tab.HitTestResult(paneDrawInfo.getMarkProperty('tuple_id', markIndex), 1, 1));
            }
        }
        return selectedIds;
    },
    
    hitTestBoundingBoxes: function tab_HitTester$hitTestBoundingBoxes(selectionRect, isSingleSelect, sceneInfo) {
        if (tab.RectXYUtil.isEmpty(selectionRect)) {
            return [];
        }
        var intersectedBBoxes = [];
        var stack = [];
        var trueSelectionRectangles = {};
        stack.push(this._root);
        while (stack.length > 0) {
            var node = stack.pop();
            var trueSelectionRectangle = selectionRect;
            if (isSingleSelect && ss.isValue(sceneInfo) && node.get_nodeType() === 3) {
                var paneNode = tab.HitTargetNode.findPaneNode(node);
                if (ss.isValue(paneNode)) {
                    var paneKey = paneNode.get_paneKey();
                    if (Object.keyExists(trueSelectionRectangles, paneKey)) {
                        trueSelectionRectangle = trueSelectionRectangles[paneKey];
                    }
                    else {
                        var paneDrawInfo = sceneInfo.getPaneDrawInfoFromKey(paneNode.get_paneKey());
                        if (ss.isValue(paneDrawInfo)) {
                            var delta;
                            switch (paneDrawInfo.get_markType()) {
                                case 'bar':
                                case 'square':
                                    delta = tab.MarksRenderer._barMarkGetHitTestExpansion(paneDrawInfo, node.get_objectId());
                                    break;
                                case 'shape':
                                    delta = tab.MarksRenderer._shapeMarkGetHitTestExpansion(paneDrawInfo, node.get_objectId());
                                    break;
                                case 'text':
                                    delta = tab.MarksRenderer._textMarkGetHitTestExpansion(paneDrawInfo, node.get_objectId());
                                    break;
                                case 'area':
                                    delta = tab.MarksRenderer._areaMarkGetHitTestExpansion(paneDrawInfo, node.get_objectId());
                                    break;
                                default:
                                    delta = tab.$create_SizeF(0, 0);
                                    break;
                            }
                            if (!tab.SizeUtil.isEmpty(delta)) {
                                trueSelectionRectangle = tab.RectXYUtil.outsetRectSizeF(trueSelectionRectangle, delta);
                            }
                        }
                        trueSelectionRectangles[paneKey] = trueSelectionRectangle;
                    }
                }
            }
            var hit = tab.RectXYUtil.intersectsWithMoreThanSharedEdge(node.get_boundingBox(), trueSelectionRectangle);
            if (!hit && isSingleSelect && ss.isValue(node.get_labelBox())) {
                hit = tab.RectXYUtil.intersectsWithMoreThanSharedEdge(node.get_labelBox(), selectionRect);
            }
            if (hit) {
                if (node.get_nodeType() === 3) {
                    intersectedBBoxes.add(node);
                }
                else {
                    var children = node.get_children();
                    children.forEach(function(child) {
                        stack.push(child);
                    });
                }
            }
        }
        tab.Log.get(this).debug('Hit %d bounding boxes', intersectedBBoxes.length);
        return intersectedBBoxes;
    },
    
    _selectHighestZIndexMark: function tab_HitTester$_selectHighestZIndexMark(selectedIds, markStateMap) {
        var maxId = null;
        selectedIds.sort(function(Id1, Id2) {
            return (Id1 > Id2) ? -1 : 1;
        });
        var $enum1 = ss.IEnumerator.getEnumerator(selectedIds);
        while ($enum1.moveNext()) {
            var id = $enum1.current;
            if (!Object.keyExists(markStateMap, id)) {
                tab.Log.get(this).warn('Mark Node with tuple id:%s has no entry in markStateMap', id);
                continue;
            }
            if (markStateMap[id] === 'markStateInvisible') {
                continue;
            }
            if (!ss.isValue(maxId)) {
                maxId = id;
            }
            else if (this._markStateToInt(markStateMap[id]) > this._markStateToInt(markStateMap[maxId])) {
                maxId = id;
            }
        }
        return maxId;
    },
    
    _selectClosestMark: function tab_HitTester$_selectClosestMark(IdsAndDistances, markStateMap) {
        var closestId = null;
        var closestDistance = null;
        IdsAndDistances.sort(function(tuple1, tuple2) {
            return (tuple1.first > tuple2.first) ? -1 : 1;
        });
        var $enum1 = ss.IEnumerator.getEnumerator(IdsAndDistances);
        while ($enum1.moveNext()) {
            var t = $enum1.current;
            var id = t.first;
            var distance = t.second;
            if (!Object.keyExists(markStateMap, id)) {
                tab.Log.get(this).warn('Mark Node with tuple id:%s has no entry in markStateMap', id);
                continue;
            }
            if (markStateMap[id] === 'markStateInvisible') {
                continue;
            }
            if (ss.isNull(closestId)) {
                closestId = id;
                closestDistance = distance;
            }
            else if (distance < closestDistance) {
                closestId = id;
                closestDistance = distance;
            }
            else if ((distance === closestDistance) && (this._markStateToInt(markStateMap[id]) > this._markStateToInt(markStateMap[closestId]))) {
                closestId = id;
                closestDistance = distance;
            }
        }
        return closestId;
    },
    
    _markStateToInt: function tab_HitTester$_markStateToInt(markState) {
        switch (markState) {
            case 'markStateInvisible':
                return 0;
            case 'markStateNormal':
                return 1;
            case 'markStateHighlighted':
                return 2;
            case 'markStateSelected':
                return 3;
            default:
                tab.Log.get(this).warn('Unknown MarkState: %s. Time to update MarkStateToInt.', markState);
                return -1;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.HitTestStructureBuilder

tab.HitTestStructureBuilder = function tab_HitTestStructureBuilder() {
}
tab.HitTestStructureBuilder.buildBinnedHitTestStructure = function tab_HitTestStructureBuilder$buildBinnedHitTestStructure(sceneInfo, binCount) {
    ss.Debug.assert(!ss.isNullOrUndefined(sceneInfo), "Parameter 'sceneInfo' is required to build HitTestStructure.");
    ss.Debug.assert(binCount > 0, "Parameter 'binCount' must be greater than or equal to zero.");
    var root = tab.HitTargetNode.createRootNode();
    var panes = sceneInfo.get_scene().panes;
    var $enum1 = ss.IEnumerator.getEnumerator(panes);
    while ($enum1.moveNext()) {
        var pane = $enum1.current;
        var paneMarksPMs = tab.HitTestStructureBuilder._getChildPaneMarksPMs(pane);
        var $enum2 = ss.IEnumerator.getEnumerator(paneMarksPMs);
        while ($enum2.moveNext()) {
            var paneMarksPM = $enum2.current;
            var paneDrawInfo = sceneInfo._getPaneDrawInfo(paneMarksPM);
            var paneRect = paneDrawInfo.get_mapExtentOrPaneRect();
            var paneNode = new tab.HitTargetNode(paneRect, 1);
            var paneKey = tab.SceneInfo.getPaneMarksKey(paneMarksPM);
            paneNode.set_paneKey(paneKey);
            paneNode.set_paneIndex(paneMarksPM.paneIndex);
            root.addNode(paneNode);
            var binWidth = Math.ceil(paneRect.w / binCount);
            for (var b = 0; b < binCount; ++b) {
                var binX = (b * binWidth) + paneRect.x;
                var binY = paneRect.y;
                var binW = binWidth;
                var binH = paneRect.h;
                var binNode = new tab.HitTargetNode(tab.$create_RectXY(binX, binY, binW, binH), 2);
                paneNode.addNode(binNode);
            }
            var markNodes = tab.HitTestStructureBuilder.buildMarkBounds(paneDrawInfo);
            var $enum3 = ss.IEnumerator.getEnumerator(markNodes);
            while ($enum3.moveNext()) {
                var markNode = $enum3.current;
                var $enum4 = ss.IEnumerator.getEnumerator(paneNode.get_children());
                while ($enum4.moveNext()) {
                    var binNode = $enum4.current;
                    if (tab.RectXYUtil.intersectsWith(markNode.get_boundingBox(), binNode.get_boundingBox())) {
                        binNode.addNode(markNode);
                    }
                }
            }
        }
    }
    return root;
}
tab.HitTestStructureBuilder.buildLinearHitTestStructure = function tab_HitTestStructureBuilder$buildLinearHitTestStructure(sceneInfo) {
    ss.Debug.assert(!ss.isNullOrUndefined(sceneInfo), "Parameter 'sceneInfo' is required to build HitTestStructure.");
    var root = tab.HitTargetNode.createRootNode();
    var panes = sceneInfo.get_scene().panes;
    var $enum1 = ss.IEnumerator.getEnumerator(panes);
    while ($enum1.moveNext()) {
        var pane = $enum1.current;
        var paneMarksPMs = tab.HitTestStructureBuilder._getChildPaneMarksPMs(pane);
        var $enum2 = ss.IEnumerator.getEnumerator(paneMarksPMs);
        while ($enum2.moveNext()) {
            var paneMarksPM = $enum2.current;
            var paneDrawInfo = sceneInfo._getPaneDrawInfo(paneMarksPM);
            if (!ss.isValue(paneDrawInfo)) {
                continue;
            }
            var paneRect = paneDrawInfo.get_mapExtentOrPaneRect();
            var paneNode = new tab.HitTargetNode(paneRect, 1);
            var paneKey = tab.SceneInfo.getPaneMarksKey(paneMarksPM);
            paneNode.set_paneKey(paneKey);
            paneNode.set_paneIndex(paneMarksPM.paneIndex);
            root.addNode(paneNode);
            var markBBNodes = tab.HitTestStructureBuilder.buildMarkBounds(paneDrawInfo);
            paneNode.addNodes(markBBNodes);
        }
    }
    return root;
}
tab.HitTestStructureBuilder.buildTrendLineHitTestStructure = function tab_HitTestStructureBuilder$buildTrendLineHitTestStructure(trendLineDrawPath, lineWidth, objectId) {
    var points = trendLineDrawPath.pointsF;
    var instructions = trendLineDrawPath.pathElements;
    var numPoints = Math.floor(points.length / 2);
    if (numPoints < 2) {
        tab.Logger.lazyGetLogger(tab.HitTestStructureBuilder).error('Bad trend line. There are less then 2 points in the draw path.');
        return new tab.HitTargetNode(tab.$create_RectXY(0, 0, 0, 0), 0);
    }
    var lineSegmentNodes = [];
    var pc = 0;
    var $enum1 = ss.IEnumerator.getEnumerator(instructions);
    while ($enum1.moveNext()) {
        var instruction = $enum1.current;
        switch (instruction) {
            case 'moveto':
                pc += 2;
                break;
            case 'lineto':
                if (ss.isValue(points[pc + 3])) {
                    var line = [ points[pc], points[pc + 1], points[pc + 2], points[pc + 3] ];
                    var rectX = Math.min(line[0], line[2]);
                    var rectY = Math.min(line[1], line[3]);
                    var rectW = Math.max(line[0], line[2]) - rectX;
                    var rectH = Math.max(line[1], line[3]) - rectY;
                    var bb = tab.$create_RectXY(rectX, rectY, rectW, rectH);
                    bb = tab.RectXYUtil.dialate(bb, parseInt(lineWidth));
                    var lineSegmentNode = new tab.HitTargetNode(bb, 5, objectId);
                    lineSegmentNodes.add(lineSegmentNode);
                }
                pc += 2;
                break;
            case 'curveto':
                tab.Logger.lazyGetLogger(tab.HitTestStructureBuilder).debug("There's an unexpected %s instruction in trendline's draw path", 'curveto');
                pc += 6;
                break;
            default:
                ss.Debug.fail('Unknown path instruction: ' + instruction);
                break;
        }
    }
    var root = tab.HitTestStructureBuilder._buildRectUnionHierarchy(lineSegmentNodes, 4);
    return root;
}
tab.HitTestStructureBuilder.buildMarkBounds = function tab_HitTestStructureBuilder$buildMarkBounds(paneDrawInfo) {
    var markNodes = [];
    var markCount = paneDrawInfo.get_markCount();
    for (var markIndex = 0; markIndex < markCount; ++markIndex) {
        var bb = paneDrawInfo.getMarkBounds(markIndex);
        var lbb = (paneDrawInfo.markHasLabel(markIndex)) ? paneDrawInfo.getMarkLabelBounds(markIndex) : null;
        if (paneDrawInfo.get_isWrappedDomain()) {
            var minXDomain = paneDrawInfo.pixelToDomainX(bb.x);
            var maxXDomain = paneDrawInfo.pixelToDomainX(bb.x + bb.w);
            var instances = paneDrawInfo.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                var worldOffset = tab.$create_Point(parseInt(paneDrawInfo.getWorldOffset(instance)), 0);
                var newBound = tab.RectXYUtil.offsetRect(bb, worldOffset);
                var newLabelBound = (ss.isValue(lbb)) ? tab.RectXYUtil.offsetRect(lbb, worldOffset) : null;
                markNodes.add(new tab.HitTargetNode(newBound, 3, markIndex, newLabelBound, instance));
            }
        }
        else {
            markNodes.add(new tab.HitTargetNode(bb, 3, markIndex, lbb, 0));
        }
    }
    return markNodes;
}
tab.HitTestStructureBuilder.print = function tab_HitTestStructureBuilder$print(node, lv) {
    var indent = '';
    var indentCount = lv;
    while (indentCount > 0) {
        indent += ' ';
        --indentCount;
    }
    console.log(indent + node.get_objectId());
    if (node.get_nodeType() !== 3) {
        node.get_children().forEach(function(n) {
            tab.HitTestStructureBuilder.print(n, lv + 1);
        });
    }
}
tab.HitTestStructureBuilder._getChildPaneMarksPMs = function tab_HitTestStructureBuilder$_getChildPaneMarksPMs(pane) {
    var paneMarks = [];
    var $enum1 = ss.IEnumerator.getEnumerator(pane.drawPane);
    while ($enum1.moveNext()) {
        var visualListPM = $enum1.current;
        if (visualListPM.visualPart === 'marks') {
            paneMarks.add(visualListPM.paneMarks);
        }
    }
    return paneMarks;
}
tab.HitTestStructureBuilder._buildRectUnionHierarchy = function tab_HitTestStructureBuilder$_buildRectUnionHierarchy(orderedLineSegmentNodes, unionSize) {
    var previousLevel = orderedLineSegmentNodes;
    while (previousLevel.length > 1) {
        var newLevel = [];
        for (var ii = 0; ii < previousLevel.length; ii += unionSize) {
            var howManyToUnion = unionSize;
            var remaining = previousLevel.length - ii;
            if (remaining < unionSize) {
                howManyToUnion = remaining;
            }
            var childrenOfUnion = [];
            var unionRect = null;
            for (var cc = 0; cc < howManyToUnion; ++cc) {
                var node = previousLevel[ii + cc];
                childrenOfUnion.add(node);
                if (!cc) {
                    unionRect = tab.$create_RectXY(node.get_boundingBox().x, node.get_boundingBox().y, node.get_boundingBox().w, node.get_boundingBox().h);
                }
                else {
                    unionRect = tab.RectXYUtil.union(unionRect, childrenOfUnion[cc].get_boundingBox());
                }
            }
            var parentOfUnion = new tab.HitTargetNode(unionRect, 4);
            parentOfUnion.addNodes(childrenOfUnion);
            newLevel.add(parentOfUnion);
        }
        previousLevel = newLevel;
    }
    if (previousLevel.length !== 1) {
        tab.Logger.lazyGetLogger(tab.HitTestStructureBuilder).debug('Top rect hierarchy got more than 1 node (%i). This is most likely a bug.', previousLevel.length);
    }
    var root = tab.HitTargetNode.createRootNode();
    root.addNodes(previousLevel);
    return root;
}


////////////////////////////////////////////////////////////////////////////////
// tab.RectangleGeom

tab.RectangleGeom = function tab_RectangleGeom(geom) {
    this._geom = geom;
}
tab.RectangleGeom.prototype = {
    _geom: null,
    
    get_type: function tab_RectangleGeom$get_type() {
        return 0;
    },
    
    get_geom: function tab_RectangleGeom$get_geom() {
        return this._geom;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ModifierKeyState

tab.ModifierKeyState = function tab_ModifierKeyState() {
    this._hasFocus = true;
    $(document).bind('keydown.ModifierKeyState keyup.ModifierKeyState mouseover.ModifierKeyState', ss.Delegate.create(this, this._handleEvent));
    $(window).bind('focus.ModifierKeyState', ss.Delegate.create(this, function() {
        this._focus();
    }));
    $(window).bind('blur.ModifierKeyState', ss.Delegate.create(this, function() {
        this._blur();
    }));
    this._focusWindow();
}
tab.ModifierKeyState.prototype = {
    _hasFocus: false,
    
    dispose: function tab_ModifierKeyState$dispose() {
        $(document).unbind('.ModifierKeyState');
        $(window).unbind('.ModifierKeyState');
    },
    
    _focus: function tab_ModifierKeyState$_focus() {
        this._setFocus(true);
    },
    
    _blur: function tab_ModifierKeyState$_blur() {
        this._setFocus(false);
    },
    
    _focusWindow: function tab_ModifierKeyState$_focusWindow() {
        if (('focus' in window.self)) {
            window.focus();
        }
    },
    
    _handleEvent: function tab_ModifierKeyState$_handleEvent(e) {
        if (!this._hasFocus && !tab.BrowserSupport.get_isIE()) {
            if (tab.BrowserSupport.get_isFF() && ss.isValue(document.activeElement)) {
                document.activeElement.blur();
            }
            this._focusWindow();
        }
        dojo.publish(tab.EventMap.modifierKeysChanged, [ e ]);
    },
    
    _setFocus: function tab_ModifierKeyState$_setFocus(newFocus) {
        if (newFocus === this._hasFocus) {
            return;
        }
        tab.Log.get(this).debug('SetFocus: %s', newFocus);
        this._hasFocus = newFocus;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneDrawInfo

tab.PaneDrawInfo = function tab_PaneDrawInfo(pdMarksKey, scene, pane, paneMarks, pdMarks, colorDict) {
    this._constantColumnNamesSet = {};
    ss.Debug.assert(pane != null, "Can't have a null pane");
    ss.Debug.assert(paneMarks != null, "Can't have a null pane marks");
    ss.Debug.assert(pdMarks != null, "Can't have a null pdMarks");
    this._columns = {};
    this._geometryLookup = {};
    this._sceneInfo = scene;
    this._paneMarks = paneMarks;
    this._forceOpaqueColors = false;
    this._pdMarksKey = pdMarksKey;
    this._paneRect = tab.RecordCast.rectPresModelAsRectXY(pane.paneRect);
    this._domainExtents = tab.PaneDrawInfo._getDomainExtents(pane);
    this._markType = pdMarks.markLayoutPrimitive;
    this._markCount = tab.PaneDrawInfo._getNumPaneItems(this._paneMarks);
    this._paneFlags = pdMarks.intMap['pane_flags'];
    var constantColumns = tab.PaneDrawInfo._parsePDMarks(pdMarks);
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(constantColumns));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        this._columns[key] = constantColumns[key];
        this._constantColumnNamesSet[key] = '';
    }
    this._wrappedDomain = Object.keyExists(constantColumns, 'wrap_domain') && constantColumns['wrap_domain'][0];
    var $enum2 = ss.IEnumerator.getEnumerator(Object.keys(pdMarks.encodingColumns));
    while ($enum2.moveNext()) {
        var key = $enum2.current;
        this._columns[key] = tab.PaneDrawInfo._createDataArray(pdMarks.encodingColumns[key], this._paneMarks.startIndex, this.get_markCount());
    }
    this.hasPixelGeometry = this.get_scaleMarksInX() && this.get_scaleMarksInY();
    var backgroundColor = tab.ColorModel.fromArgbInt(pdMarks.intMap['background_color']);
    this._fogBlendFactor = tab.PaneDrawInfo.getFogBlendFactor(backgroundColor);
    this._foggedBackgroundColor = tab.PaneDrawInfo.applyFogToBackgroundColor(backgroundColor, this._fogBlendFactor);
    this._convertMapData(this._columns);
    this._colorTable = tab.PaneDrawInfo.buildColorTable(colorDict, this._columns, this._foggedBackgroundColor, this._fogBlendFactor);
    this._discreteColorTable = {};
    if (this._shouldGenerateOpaqueColors()) {
        this._opaqueColorTable = tab.PaneDrawInfo.buildOpaqueColorTable(this._colorTable);
        this._buildOpaqueColors(this._columns);
    }
    var labelsColumn = new Array(this.get_markCount());
    for (var i = 0; i < labelsColumn.length; i++) {
        labelsColumn[i] = -1;
    }
    this._columns['label_index'] = labelsColumn;
    if (this.get_markType() === 'line' || this.get_markType() === 'area') {
        this._prepareLeftRight();
    }
    if (this.get_markType() === 'line') {
        this._ensureLinePixelAlignment();
    }
    this._parseTextInfo(pdMarks, false);
    if (ss.isValue(this._paneRect) && ss.isValue(this._paneRect.w) && ss.isValue(this._domainExtents) && ss.isValue(this._domainExtents.w) && !!this._domainExtents.w) {
        this._worldWidth = this._paneRect.w / this._domainExtents.w;
    }
    this._cellClip = this._calcCellClip();
    this._mapExtents = tab.PaneDrawInfo._buildMapExtentsRect(paneMarks, this._domainExtents, this._paneRect);
    this._setupBoundingBoxes();
    this._setupCustomShapePositions();
}
tab.PaneDrawInfo.getFogBlendFactor = function tab_PaneDrawInfo$getFogBlendFactor(backgroundColor) {
    var DefaultFogBlendFactor = 0.185;
    var DarkBgFogBlendFactor = 0.275;
    var DarkBgThreshold = 75;
    var isDarkBackground = backgroundColor.get_r() <= DarkBgThreshold && backgroundColor.get_g() <= DarkBgThreshold && backgroundColor.get_b() <= DarkBgThreshold;
    return (isDarkBackground) ? DarkBgFogBlendFactor : DefaultFogBlendFactor;
}
tab.PaneDrawInfo.fogColorTransform = function tab_PaneDrawInfo$fogColorTransform(color, foggedBackgroundColor, fogBlendFactor) {
    var r = parseInt(foggedBackgroundColor.get_r() + (color.get_r() * fogBlendFactor));
    var g = parseInt(foggedBackgroundColor.get_g() + (color.get_g() * fogBlendFactor));
    var b = parseInt(foggedBackgroundColor.get_b() + (color.get_b() * fogBlendFactor));
    return new tab.ColorModel(r, g, b, color.get_a());
}
tab.PaneDrawInfo.parseDataTable = function tab_PaneDrawInfo$parseDataTable(encodingColumns) {
    var columns = {};
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(encodingColumns));
    while ($enum1.moveNext()) {
        var columnName = $enum1.current;
        columns[columnName] = encodingColumns[columnName].dataValues;
    }
    return columns;
}
tab.PaneDrawInfo.applyFogToBackgroundColor = function tab_PaneDrawInfo$applyFogToBackgroundColor(backgroundColor, fogBlendFactor) {
    var CloseToWhite = 245;
    if (backgroundColor.get_r() >= CloseToWhite && backgroundColor.get_g() >= CloseToWhite && backgroundColor.get_b() >= CloseToWhite) {
        backgroundColor = new tab.ColorModel(CloseToWhite, CloseToWhite, CloseToWhite, backgroundColor.get_a());
    }
    var r = parseInt((1 - fogBlendFactor) * backgroundColor.get_r());
    var g = parseInt((1 - fogBlendFactor) * backgroundColor.get_g());
    var b = parseInt((1 - fogBlendFactor) * backgroundColor.get_b());
    return new tab.ColorModel(r, g, b, backgroundColor.get_a());
}
tab.PaneDrawInfo.buildColorTable = function tab_PaneDrawInfo$buildColorTable(colorDict, markData, foggedBGColor, fogBlendFactor) {
    if (ss.isNullOrUndefined(colorDict) || ss.isNullOrUndefined(markData) || !Object.keyExists(markData, tab.PaneDrawInfo._markColorIndexKey)) {
        return null;
    }
    var colorAlpha = 1;
    if (Object.keyExists(markData, 'alpha') && markData['alpha'].length === 1) {
        colorAlpha = markData['alpha'][0];
    }
    var colorTable = [];
    var indexMap = {};
    var colorIndices = markData[tab.PaneDrawInfo._markColorIndexKey];
    var length = colorIndices.length;
    for (var i = 0; i < length; i++) {
        var index = colorIndices[i];
        if (Object.keyExists(indexMap, index)) {
            colorIndices[i] = indexMap[index];
        }
        else {
            var cm = tab.ColorModel.fromArgbInt(colorDict.colorList[index]);
            cm = new tab.ColorModel(cm.get_r(), cm.get_g(), cm.get_b(), colorAlpha);
            colorTable.add(tab.PaneDrawInfo._createColorCollection(cm, foggedBGColor, fogBlendFactor));
            colorIndices[i] = colorTable.length - 1;
            indexMap[index] = colorIndices[i];
        }
    }
    return colorTable;
}
tab.PaneDrawInfo.buildOpaqueColorTable = function tab_PaneDrawInfo$buildOpaqueColorTable(colorTable) {
    if (ss.isNullOrUndefined(colorTable)) {
        return null;
    }
    var opaqueTable = new Array(colorTable.length);
    for (var i = 0, il = colorTable.length; i < il; i++) {
        opaqueTable[i] = tab.PaneDrawInfo._createOpaqueColorCollection(colorTable[i]);
    }
    return opaqueTable;
}
tab.PaneDrawInfo._domainToPixel = function tab_PaneDrawInfo$_domainToPixel(val, domainOffset, pixelOffset, ratio) {
    return ((val - domainOffset) * ratio) + pixelOffset;
}
tab.PaneDrawInfo._domainToPixelX = function tab_PaneDrawInfo$_domainToPixelX(x, domainExtents, paneRect) {
    return tab.PaneDrawInfo._domainToPixel(x, domainExtents.x, paneRect.x, paneRect.w / domainExtents.w);
}
tab.PaneDrawInfo._domainToPixelY = function tab_PaneDrawInfo$_domainToPixelY(y, domainExtents, paneRect) {
    return tab.PaneDrawInfo._domainToPixel(y, domainExtents.y, paneRect.y, paneRect.h / domainExtents.h);
}
tab.PaneDrawInfo._domainToPixelWidth = function tab_PaneDrawInfo$_domainToPixelWidth(width, domainExtents, paneRect) {
    return ((width / domainExtents.w) * paneRect.w);
}
tab.PaneDrawInfo._domainToPixelHeight = function tab_PaneDrawInfo$_domainToPixelHeight(height, domainExtents, paneRect) {
    return ((height / domainExtents.h) * paneRect.h);
}
tab.PaneDrawInfo._domainToPixelMultipolygon = function tab_PaneDrawInfo$_domainToPixelMultipolygon(multipolygon, domainExtents, paneRect) {
    var PixelGridSize = 3;
    var xRatio = paneRect.w / domainExtents.w;
    var yRatio = paneRect.h / domainExtents.h;
    var polygons = multipolygon.polygonList;
    var polyCount = polygons.length;
    for (var polyIdx = 0; polyIdx < polyCount; polyIdx++) {
        var lines = polygons[polyIdx].lineList;
        var lineCount = lines.length;
        for (var lineIdx = 0; lineIdx < lineCount; lineIdx++) {
            var coords = lines[lineIdx].pointsF;
            var coordCount = coords.length;
            if (coordCount < 2) {
                continue;
            }
            var prevXSubPixelLoc = null;
            var prevYSubPixelLoc = null;
            var j = 0;
            for (var i = 0; i < coordCount; i = i + 2) {
                var xVal = tab.PaneDrawInfo._domainToPixel(coords[i], domainExtents.x, paneRect.x, xRatio);
                var yVal = tab.PaneDrawInfo._domainToPixel(coords[i + 1], domainExtents.y, paneRect.y, yRatio);
                var xSubPixelLoc = parseInt((xVal * PixelGridSize)) << 0;
                var ySubPixelLoc = parseInt((yVal * PixelGridSize)) << 0;
                if (xSubPixelLoc === prevXSubPixelLoc && ySubPixelLoc === prevYSubPixelLoc) {
                    continue;
                }
                prevXSubPixelLoc = xSubPixelLoc;
                prevYSubPixelLoc = ySubPixelLoc;
                coords[j] = xVal;
                coords[j + 1] = yVal;
                j += 2;
            }
            if ((j + j) < coordCount) {
                coords.splice(j, coordCount - j);
            }
            else {
                coords.length = j;
            }
        }
    }
}
tab.PaneDrawInfo._checkFor180DegLngLine = function tab_PaneDrawInfo$_checkFor180DegLngLine(multipolygon) {
    var polygons = multipolygon.polygonList;
    var polyCount = polygons.length;
    for (var polyIdx = 0; polyIdx < polyCount; polyIdx++) {
        var lines = polygons[polyIdx].lineList;
        var lineCount = lines.length;
        var isAt180DegLng = false;
        for (var lineIdx = 0; lineIdx < lineCount; lineIdx++) {
            var coords = lines[lineIdx].pointsF;
            var coordCount = coords.length;
            var startPathIndex = 0;
            for (var i = 0; i < coordCount; i = i + 2) {
                var tmpIsAt180DegLng = tab.PaneDrawInfo._isXCoordAt180DegLng(coords[i]);
                if (tmpIsAt180DegLng && isAt180DegLng) {
                    startPathIndex = i;
                    break;
                }
                isAt180DegLng = tmpIsAt180DegLng;
            }
            if (!!startPathIndex) {
                lines[lineIdx].pointsF = tab.PaneDrawInfo._shiftAndWrapCoordsArray(coords, startPathIndex);
            }
        }
    }
}
tab.PaneDrawInfo._isXCoordAt180DegLng = function tab_PaneDrawInfo$_isXCoordAt180DegLng(x) {
    var domainDistFrom180DegLng = x - 1;
    return domainDistFrom180DegLng < 1E-05 && domainDistFrom180DegLng > -1E-05;
}
tab.PaneDrawInfo._shiftAndWrapCoordsArray = function tab_PaneDrawInfo$_shiftAndWrapCoordsArray(coords, numElementsToShift) {
    var coordCount = coords.length;
    var isFirstPointEqualToLast = tab.FloatUtil.isEqual(coords[0], coords[coordCount - 2]) && tab.FloatUtil.isEqual(coords[1], coords[coordCount - 1]);
    if (isFirstPointEqualToLast) {
        coords.pop();
        coords.pop();
    }
    var toRet = coords.slice(numElementsToShift).concat(coords.slice(0, numElementsToShift));
    return toRet;
}
tab.PaneDrawInfo._buildMapExtentsRect = function tab_PaneDrawInfo$_buildMapExtentsRect(paneMarks, domainExtents, paneRect) {
    var mapDomainExtents = paneMarks.mapDomainExtents;
    if (ss.isNullOrUndefined(mapDomainExtents) || !mapDomainExtents.width || !mapDomainExtents.height) {
        return null;
    }
    return tab.$create_RectXY(parseInt(tab.PaneDrawInfo._domainToPixelX(mapDomainExtents.doubleLeft, domainExtents, paneRect)), parseInt(tab.PaneDrawInfo._domainToPixelY(mapDomainExtents.doubleTop, domainExtents, paneRect)), parseInt(tab.PaneDrawInfo._domainToPixelWidth(mapDomainExtents.width, domainExtents, paneRect)), parseInt(tab.PaneDrawInfo._domainToPixelHeight(mapDomainExtents.height, domainExtents, paneRect)));
}
tab.PaneDrawInfo._getNumPaneItems = function tab_PaneDrawInfo$_getNumPaneItems(paneMarksPM) {
    return (paneMarksPM.endIndex - paneMarksPM.startIndex);
}
tab.PaneDrawInfo._getDomainExtents = function tab_PaneDrawInfo$_getDomainExtents(pane) {
    if (ss.isValue(pane.drawPane)) {
        var $enum1 = ss.IEnumerator.getEnumerator(pane.drawPane);
        while ($enum1.moveNext()) {
            var vlpm = $enum1.current;
            var pmpm = vlpm.paneMarks;
            if (ss.isValue(pmpm) && ss.isValue(pmpm.domainExtents)) {
                ss.Debug.assert(!!pmpm.domainExtents.width && !!pmpm.domainExtents.height, 'Error: DomainExtents are degenerate.');
                return tab.RecordCast.doubleRectPresModelAsDoubleRectXY(pmpm.domainExtents);
            }
        }
    }
    return null;
}
tab.PaneDrawInfo._parsePDMarks = function tab_PaneDrawInfo$_parsePDMarks(pdMarks) {
    var toRet = {};
    var collections = [ pdMarks.intMap, pdMarks.floatMap, pdMarks.boolMap ];
    var $enum1 = ss.IEnumerator.getEnumerator(collections);
    while ($enum1.moveNext()) {
        var collection = $enum1.current;
        var dict = collection;
        if (ss.isValue(dict)) {
            var $enum2 = ss.IEnumerator.getEnumerator(Object.keys(dict));
            while ($enum2.moveNext()) {
                var key = $enum2.current;
                toRet[key] = [ dict[key] ];
            }
        }
    }
    return toRet;
}
tab.PaneDrawInfo._createPreparedFont = function tab_PaneDrawInfo$_createPreparedFont(textStyles, styleNum) {
    ss.Debug.assert(Object.keyExists(textStyles, 'font_size'), 'The font must have a size');
    ss.Debug.assert(Object.keyExists(textStyles, 'font'), 'The font must have a name');
    var fontDescription = new ss.StringBuilder();
    if (Object.keyExists(textStyles, 'font_style') && parseInt(textStyles['font_style'].dataValues[styleNum]) === 1) {
        fontDescription.append('italic ');
    }
    if (Object.keyExists(textStyles, 'font_weight') && parseInt(textStyles['font_weight'].dataValues[styleNum]) === 1) {
        fontDescription.append('bold ');
    }
    var pointSize = parseInt(textStyles['font_size'].dataValues[styleNum]);
    var fontName = textStyles['font'].dataValues[styleNum];
    fontDescription.append(pointSize + 'pt ' + fontName);
    return fontDescription.toString();
}
tab.PaneDrawInfo._getTextAngleInRad = function tab_PaneDrawInfo$_getTextAngleInRad(textOrientationVal) {
    var toRet = 0;
    if (textOrientationVal === 1) {
    }
    else if (textOrientationVal === 2) {
        toRet = -Math.PI * 0.5;
    }
    else if (textOrientationVal === 3) {
        toRet = Math.PI * 0.5;
    }
    else {
        ss.Debug.fail('unknown text orientation value: ' + textOrientationVal);
    }
    return toRet;
}
tab.PaneDrawInfo._convertDataHelper = function tab_PaneDrawInfo$_convertDataHelper(key, paneMapData, dataConverter) {
    if (Object.keyExists(paneMapData, key)) {
        var dataVals = paneMapData[key];
        for (var ii = 0; ii < dataVals.length; ++ii) {
            dataVals[ii] = dataConverter(dataVals[ii]);
        }
        paneMapData[key] = dataVals;
    }
}
tab.PaneDrawInfo._createDataArray = function tab_PaneDrawInfo$_createDataArray(data, startIndex, count) {
    var toRet = new Array(count);
    for (var ii = 0; ii < count; ii++) {
        toRet[ii] = data.dataValues[startIndex + ii];
    }
    return toRet;
}
tab.PaneDrawInfo._createColorCollection = function tab_PaneDrawInfo$_createColorCollection(color, fogBGColor, fogBlendFactor) {
    var colorCollection = {};
    colorCollection['colorOverrideOpaque'] = color.toRgb();
    colorCollection['colorOverrideNone'] = color.toRgba();
    colorCollection['colorOverrideFog'] = tab.PaneDrawInfo.fogColorTransform(color, fogBGColor, fogBlendFactor).toRgba();
    return colorCollection;
}
tab.PaneDrawInfo._createOpaqueColorCollection = function tab_PaneDrawInfo$_createOpaqueColorCollection(colorCollection) {
    var opaqueColors = {};
    var cm;
    cm = tab.ColorModel.fromColorCode(colorCollection['colorOverrideNone']);
    opaqueColors['colorOverrideNone'] = cm.toRgb();
    cm = tab.ColorModel.fromColorCode(colorCollection['colorOverrideFog']);
    opaqueColors['colorOverrideFog'] = cm.toRgb();
    cm = tab.ColorModel.fromColorCode(colorCollection['colorOverrideOpaque']);
    opaqueColors['colorOverrideOpaque'] = cm.toRgb();
    return opaqueColors;
}
tab.PaneDrawInfo.prototype = {
    hasPixelGeometry: false,
    _worldWidth: 0,
    _wrappedDomain: false,
    _sceneInfo: null,
    _columns: null,
    _domainExtents: null,
    _paneRect: null,
    _mapExtents: null,
    _markType: null,
    _paneFlags: 0,
    _markCount: 0,
    _paneMarks: null,
    _cellClip: 0,
    _fogBlendFactor: 0,
    _foggedBackgroundColor: null,
    _colorTable: null,
    _opaqueColorTable: null,
    _pdMarksKey: null,
    _geometryLookup: null,
    _labelColumns: null,
    _textRunColumns: null,
    _textStyleColumns: null,
    _dirtyMarks: null,
    _markState: null,
    _marksWithMarker: null,
    _left: null,
    _right: null,
    _forceOpaqueColors: false,
    _discreteColorTable: null,
    _lineDrawState: null,
    
    get_hasLabels: function tab_PaneDrawInfo$get_hasLabels() {
        return ss.isValue(this._labelColumns);
    },
    
    get_hasSelection: function tab_PaneDrawInfo$get_hasSelection() {
        return this._sceneInfo.get__hasSelection();
    },
    
    get_hasBrushing: function tab_PaneDrawInfo$get_hasBrushing() {
        return this._sceneInfo.get__hasBrushing();
    },
    
    get_markCount: function tab_PaneDrawInfo$get_markCount() {
        return this._markCount;
    },
    
    get_markType: function tab_PaneDrawInfo$get_markType() {
        return this._markType;
    },
    
    get_lineDrawState: function tab_PaneDrawInfo$get_lineDrawState() {
        if (ss.isNull(this._lineDrawState)) {
            ss.Debug.assert(false, 'LineDrawState requested before allocation');
            this._lineDrawState = new tab.LineMarkDrawState(this);
        }
        return this._lineDrawState;
    },
    
    get_hasBackground: function tab_PaneDrawInfo$get_hasBackground() {
        return Object.keyExists(this._columns, 'pane_has_background') && this._columns['pane_has_background'][0];
    },
    
    get_hasHalos: function tab_PaneDrawInfo$get_hasHalos() {
        return Object.keyExists(this._columns, 'has_halos') && this._columns['has_halos'][0];
    },
    
    get_fogBlendFactor: function tab_PaneDrawInfo$get_fogBlendFactor() {
        return this._fogBlendFactor;
    },
    
    get_foggedBackgroundColor: function tab_PaneDrawInfo$get_foggedBackgroundColor() {
        return this._foggedBackgroundColor;
    },
    
    get_forceOpaqueColors: function tab_PaneDrawInfo$get_forceOpaqueColors() {
        return this._forceOpaqueColors;
    },
    set_forceOpaqueColors: function tab_PaneDrawInfo$set_forceOpaqueColors(value) {
        this._forceOpaqueColors = value;
        return value;
    },
    
    get_hasHaloHighlightColor: function tab_PaneDrawInfo$get_hasHaloHighlightColor() {
        return Object.keyExists(this._columns, 'highlighted_halo_color') && ss.isValue(this._columns['highlighted_halo_color']);
    },
    
    get_hasFoldedAxis: function tab_PaneDrawInfo$get_hasFoldedAxis() {
        return Object.keyExists(this._columns, 'has_folded_axis') && this._columns['has_folded_axis'][0];
    },
    
    get_drawBorder: function tab_PaneDrawInfo$get_drawBorder() {
        return Object.keyExists(this._columns, 'draw_border') && this._columns['draw_border'][0];
    },
    
    get_borderColor: function tab_PaneDrawInfo$get_borderColor() {
        return (Object.keyExists(this._columns, 'border_color')) ? this._columns['border_color'][0] : null;
    },
    
    get_minBarWidth: function tab_PaneDrawInfo$get_minBarWidth() {
        return (Object.keyExists(this._columns, 'min_bar_width')) ? this._columns['min_bar_width'][0] : 0;
    },
    
    get_minBarHeight: function tab_PaneDrawInfo$get_minBarHeight() {
        return (Object.keyExists(this._columns, 'min_bar_height')) ? this._columns['min_bar_height'][0] : 0;
    },
    
    get_textStyleColumns: function tab_PaneDrawInfo$get_textStyleColumns() {
        return this._textStyleColumns;
    },
    
    get_isWrappedDomain: function tab_PaneDrawInfo$get_isWrappedDomain() {
        return this._wrappedDomain;
    },
    
    get_paneRect: function tab_PaneDrawInfo$get_paneRect() {
        return this._paneRect;
    },
    
    get_mapExtents: function tab_PaneDrawInfo$get_mapExtents() {
        return this._mapExtents;
    },
    
    get_mapExtentOrPaneRect: function tab_PaneDrawInfo$get_mapExtentOrPaneRect() {
        return (this.get_mapExtents() || this.get_paneRect());
    },
    
    get_clipCase: function tab_PaneDrawInfo$get_clipCase() {
        return this._cellClip;
    },
    
    get_paneDescriptorKey: function tab_PaneDrawInfo$get_paneDescriptorKey() {
        return this._paneMarks.paneDescrKey;
    },
    
    get_hasGlobalTransparency: function tab_PaneDrawInfo$get_hasGlobalTransparency() {
        return this.get_globalAlpha() < 1;
    },
    
    get_globalAlpha: function tab_PaneDrawInfo$get_globalAlpha() {
        if (Object.keyExists(this._columns, 'alpha') && this._columns['alpha'].length === 1) {
            return this._columns['alpha'][0];
        }
        else {
            return 1;
        }
    },
    
    get_allowHighQualityCustomImageScaling: function tab_PaneDrawInfo$get_allowHighQualityCustomImageScaling() {
        if (ss.isValue(this._sceneInfo.get__shapeManager())) {
            return this._sceneInfo.get__shapeManager().get_allowHighQualityImageScaling();
        }
        return false;
    },
    
    get_scaleMarksInX: function tab_PaneDrawInfo$get_scaleMarksInX() {
        return (!!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['enable-scale-x']));
    },
    
    get_scaleMarksInY: function tab_PaneDrawInfo$get_scaleMarksInY() {
        return (!!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['enable-scale-y']));
    },
    
    get_useCellClipForSelection: function tab_PaneDrawInfo$get_useCellClipForSelection() {
        return (!!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['clip-to-cell-for-selection']));
    },
    
    get_paneHasCellsX: function tab_PaneDrawInfo$get_paneHasCellsX() {
        return (!!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['has-cells-x']));
    },
    
    get_paneHasCellsY: function tab_PaneDrawInfo$get_paneHasCellsY() {
        return (!!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['has-cells-y']));
    },
    
    doesCustomImageExist: function tab_PaneDrawInfo$doesCustomImageExist(markIndex) {
        var shapeId = this.getMarkProperty('shape_id', markIndex);
        if (ss.isValue(shapeId)) {
            return ss.isValue(this.getImageForMark(shapeId));
        }
        return false;
    },
    
    getImageForMark: function tab_PaneDrawInfo$getImageForMark(shapeId) {
        var image = null;
        if (ss.isValue(this._sceneInfo.get__shapeManager())) {
            image = this._sceneInfo.get__shapeManager().getImageElement(shapeId);
        }
        return image;
    },
    
    getCachedShapeForMark: function tab_PaneDrawInfo$getCachedShapeForMark(shapeId, layer, colorOverrideMode, color, width, height, cacheableCanvasGenerator) {
        var image = null;
        if (ss.isValue(this._sceneInfo.get__shapeManager())) {
            image = this._sceneInfo.get__shapeManager().getCachedCanvas(shapeId, layer, colorOverrideMode, color, width, height, cacheableCanvasGenerator);
        }
        return image;
    },
    
    addLabelInfo: function tab_PaneDrawInfo$addLabelInfo(pdMarksPM, paneMarksPM) {
        this._labelColumns = {};
        var constantColumns = tab.PaneDrawInfo._parsePDMarks(pdMarksPM);
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(constantColumns));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            this._labelColumns[key] = constantColumns[key];
        }
        var labelCount = tab.PaneDrawInfo._getNumPaneItems(paneMarksPM);
        var $enum2 = ss.IEnumerator.getEnumerator(Object.keys(pdMarksPM.encodingColumns));
        while ($enum2.moveNext()) {
            var key = $enum2.current;
            this._labelColumns[key] = tab.PaneDrawInfo._createDataArray(pdMarksPM.encodingColumns[key], paneMarksPM.startIndex, labelCount);
        }
        this._convertMapData(this._labelColumns);
        var markIndexes = [];
        if (ss.isValue(this._labelColumns['tuple_id'])) {
            var tupleIDs = this._labelColumns['tuple_id'];
            for (var i = 0; i < tupleIDs.length; i++) {
                var markIndex = this._columns['tuple_id'].indexOf(tupleIDs[i]);
                if (markIndex !== -1) {
                    this._columns['label_index'][markIndex] = i;
                }
                markIndexes.add(markIndex);
            }
        }
        var labelBoundingBoxes = {};
        for (var i = 0; i < markIndexes.length; ++i) {
            labelBoundingBoxes[this._getMarkTupleID(markIndexes[i])] = tab.MarksRenderer._getMarkLabelBoundingBox(this, markIndexes[i]);
        }
        this._sceneInfo._addLabelBoundingBoxes(labelBoundingBoxes);
        this._parseTextInfo(pdMarksPM, true);
    },
    
    getTextRunProperty: function tab_PaneDrawInfo$getTextRunProperty(columnName, index) {
        if (!ss.isValue(this._textRunColumns) || !ss.isValue(this._textRunColumns[columnName])) {
            return null;
        }
        return this._textRunColumns[columnName][index];
    },
    
    markHasLabel: function tab_PaneDrawInfo$markHasLabel(index) {
        return this._markLabelIndex(index) !== -1;
    },
    
    getOneColor: function tab_PaneDrawInfo$getOneColor(color, mode) {
        return this.getOneColorAlpha(color, mode, 255);
    },
    
    getOneColorAlpha: function tab_PaneDrawInfo$getOneColorAlpha(color, mode, alpha) {
        if (!Object.keyExists(this._discreteColorTable, color)) {
            var cm = tab.ColorModel.fromArgbInt(color);
            this._discreteColorTable[color] = tab.PaneDrawInfo._createColorCollection(cm, this._foggedBackgroundColor, this._fogBlendFactor);
        }
        var colorCollection = this._discreteColorTable[color];
        if (mode === 'colorOverrideReplaceAlpha') {
            var cm = tab.ColorModel.fromArgbInt(color);
            return tab.ColorModel.fromColorModelPlusAlpha(cm, alpha / 255).toRgba();
        }
        return colorCollection[mode];
    },
    
    getMarkColors: function tab_PaneDrawInfo$getMarkColors(index) {
        var colors;
        if (Object.keyExists(this._columns, tab.PaneDrawInfo._markColorIndexKey)) {
            var colorIndex = this._getColumnValue(tab.PaneDrawInfo._markColorIndexKey, index);
            var dictionary;
            dictionary = (this._forceOpaqueColors && ss.isValue(this._opaqueColorTable)) ? this._opaqueColorTable : this._colorTable;
            colors = dictionary[colorIndex];
        }
        else {
            var colorKey = (this._forceOpaqueColors && Object.keyExists(this._columns, 'opaque_color')) ? 'opaque_color' : 'color';
            colors = this._getColumnValue(colorKey, index);
        }
        if (this.isMarkFiltered(index)) {
            var overrideColors = {};
            overrideColors['colorOverrideFog'] = colors['colorOverrideFog'];
            overrideColors['colorOverrideNone'] = colors['colorOverrideFog'];
            overrideColors['colorOverrideOpaque'] = colors['colorOverrideFog'];
            colors = overrideColors;
        }
        return colors;
    },
    
    getMarkProperty: function tab_PaneDrawInfo$getMarkProperty(columnName, index) {
        if (columnName === 'color') {
            return this.getMarkColors(index);
        }
        return this._getColumnValue(columnName, index);
    },
    
    getMarkGeometry: function tab_PaneDrawInfo$getMarkGeometry(geometryIndex) {
        if (ss.isNullOrUndefined(this._geometryLookup) || ss.isNullOrUndefined(this._geometryLookup[geometryIndex])) {
            return null;
        }
        return this._geometryLookup[geometryIndex];
    },
    
    doesMarkHaveProperty: function tab_PaneDrawInfo$doesMarkHaveProperty(columnName) {
        return ss.isValue(this._columns) && ss.isValue(this._columns[columnName]);
    },
    
    isMarkPropertyConstant: function tab_PaneDrawInfo$isMarkPropertyConstant(columnName) {
        if (columnName === 'color' && Object.keyExists(this._columns, tab.PaneDrawInfo._markColorIndexKey)) {
            columnName = tab.PaneDrawInfo._markColorIndexKey;
        }
        return Object.keyExists(this._constantColumnNamesSet, columnName);
    },
    
    computeDirtyMarks: function tab_PaneDrawInfo$computeDirtyMarks(dirtyRect) {
        this._dirtyMarks = {};
        var entirePaneDirty = tab.RectXYUtil.completelyContains(dirtyRect, this._paneRect);
        for (var i = 0; i < this._markCount; i++) {
            if (!this.isMarkVisible(i)) {
                continue;
            }
            if (entirePaneDirty) {
                this._dirtyMarks[i] = true;
                continue;
            }
            if (this.get_markType() === 'line' || this.get_markType() === 'area') {
                this._dirtyMarks[i] = true;
            }
            else {
                var markBounds = this.getMarkBounds(i);
                var bounds = this.getWorldOffsetMarkBounds(markBounds);
                if (tab.RectXYUtil.intersectsWithAny(dirtyRect, bounds)) {
                    this._dirtyMarks[i] = true;
                }
            }
        }
    },
    
    clearDirtyMarks: function tab_PaneDrawInfo$clearDirtyMarks() {
        this._dirtyMarks = null;
    },
    
    markNeedsDraw: function tab_PaneDrawInfo$markNeedsDraw(index) {
        return ss.isValue(this._dirtyMarks) && Object.keyExists(this._dirtyMarks, index);
    },
    
    markLabelNeedsDraw: function tab_PaneDrawInfo$markLabelNeedsDraw(index, dirtyRect) {
        if (!this.isMarkVisible(index)) {
            return false;
        }
        var sloppyMarkBounds = this.getSloppyMarkLabelBounds(index);
        var bounds = this.getWorldOffsetMarkBounds(sloppyMarkBounds);
        var result = tab.RectXYUtil.intersectsWithAny(dirtyRect, bounds);
        return result;
    },
    
    refreshMarkState: function tab_PaneDrawInfo$refreshMarkState() {
        this._markState = new Array(this._markCount);
        this._marksWithMarker = {};
        for (var i = 0; i < this._markCount; i++) {
            this._markState[i] = this._computeMarkState(i);
            if (this._computeShouldShowMarker(i)) {
                this._marksWithMarker[i] = true;
            }
        }
        if (this._isCompositeMarkType()) {
            this._lineDrawState = new tab.LineMarkDrawState(this);
        }
    },
    
    clearMarkState: function tab_PaneDrawInfo$clearMarkState() {
        this._markState = null;
        this._lineDrawState = null;
        this._marksWithMarker = null;
    },
    
    getMarkState: function tab_PaneDrawInfo$getMarkState(index) {
        if (ss.isValue(this._markState) && this._markState.length > index) {
            return this._markState[index];
        }
        return this._computeMarkState(index);
    },
    
    getMarkLabelState: function tab_PaneDrawInfo$getMarkLabelState(index) {
        if (this._isCompositeMarkType()) {
            var attributes = this.get_lineDrawState().get_lineAttributes();
            var $enum1 = ss.IEnumerator.getEnumerator(attributes);
            while ($enum1.moveNext()) {
                var la = $enum1.current;
                if (la.startIndex <= index && index <= la.endIndex) {
                    switch (la.get_lineState()) {
                        case 'lineStateHighlighted':
                            return (this._markHasOneLabelPerGroup(index)) ? 'markStateHighlighted' : this.getMarkState(index);
                        case 'lineStateSelected':
                            if (this.get_markType() === 'pie' && !this._markHasOneLabelPerGroup(index)) {
                                return this.getMarkState(index);
                            }
                            return 'markStateSelected';
                        case 'lineStateNormal':
                            return 'markStateNormal';
                    }
                    return 'markStateNormal';
                }
            }
        }
        return this.getMarkState(index);
    },
    
    getMarkLabelProperty: function tab_PaneDrawInfo$getMarkLabelProperty(columnName, markIndex) {
        if (this._markType === 'text') {
            return this.getMarkProperty(columnName, markIndex);
        }
        var labelIndex = this._markLabelIndex(markIndex);
        if (labelIndex === -1) {
            return null;
        }
        if (!ss.isValue(this._labelColumns) || !ss.isValue(this._labelColumns[columnName])) {
            return null;
        }
        var labelColumn = this._labelColumns[columnName];
        if (labelColumn.length === 1) {
            return labelColumn[0];
        }
        if (labelIndex < labelColumn.length) {
            return labelColumn[labelIndex];
        }
        return null;
    },
    
    getLeft: function tab_PaneDrawInfo$getLeft(markIndex) {
        return this._left[markIndex];
    },
    
    getRight: function tab_PaneDrawInfo$getRight(markIndex) {
        return this._right[markIndex];
    },
    
    getMarkBounds: function tab_PaneDrawInfo$getMarkBounds(markIndex) {
        return this._sceneInfo.getMarkBoundingBox(this._getMarkTupleID(markIndex));
    },
    
    getMarkIndexFromTupleID: function tab_PaneDrawInfo$getMarkIndexFromTupleID(tupleId) {
        return this._columns['tuple_id'].indexOf(tupleId);
    },
    
    getMarkLabelBounds: function tab_PaneDrawInfo$getMarkLabelBounds(markIndex) {
        return this._sceneInfo._getLabelBoundingBox(this._getMarkTupleID(markIndex));
    },
    
    getSloppyMarkLabelBounds: function tab_PaneDrawInfo$getSloppyMarkLabelBounds(markIndex) {
        return this._sceneInfo._getSloppyLabelBoundingBox(this._getMarkTupleID(markIndex));
    },
    
    getInsetPaneClipRect: function tab_PaneDrawInfo$getInsetPaneClipRect(inset) {
        return tab.RectXYUtil.dialate(this._paneRect, parseInt(-inset));
    },
    
    clippedByPane: function tab_PaneDrawInfo$clippedByPane(x, y, width, height) {
        var rect = tab.$create_RectXY(parseInt(x), parseInt(y), parseInt(width), parseInt(height));
        rect = tab.RectXYUtil.dialate(rect, 1);
        return !tab.RectXYUtil.completelyContains(this._paneRect, rect);
    },
    
    pixelToDomainX: function tab_PaneDrawInfo$pixelToDomainX(pixelX) {
        return ((((pixelX - this._paneRect.x) / this._paneRect.w) * this._domainExtents.w) + this._domainExtents.x);
    },
    
    getWorldOffset: function tab_PaneDrawInfo$getWorldOffset(instance) {
        return this._worldWidth * instance;
    },
    
    getMarkInstances: function tab_PaneDrawInfo$getMarkInstances(minXDomain, maxXDomain) {
        var domainLeft = 0;
        var domainRight = 0;
        if (this.get_isWrappedDomain()) {
            var domainMin = this._paneMarks.domainExtents.doubleLeft;
            var domainMax = domainMin + this._paneMarks.domainExtents.width;
            domainLeft = domainMin - maxXDomain;
            domainRight = domainMax - minXDomain;
        }
        return new ss.Tuple(parseInt(domainLeft), parseInt(domainRight));
    },
    
    getWorldOffsetMarkBounds: function tab_PaneDrawInfo$getWorldOffsetMarkBounds(bounds) {
        var offsetBounds = [];
        if (!this.get_isWrappedDomain()) {
            offsetBounds.push(bounds);
        }
        else {
            var minXDomain = this.pixelToDomainX(bounds.x);
            var maxXDomain = this.pixelToDomainX(bounds.x + bounds.w);
            var instances = this.getMarkInstances(minXDomain, maxXDomain);
            for (var instance = instances.first; instance <= instances.second; ++instance) {
                var offset = tab.$create_Point(parseInt(this.getWorldOffset(instance)), 0);
                var offsetBound = tab.RectXYUtil.offsetRect(bounds, offset);
                offsetBounds.push(offsetBound);
            }
        }
        return offsetBounds;
    },
    
    isTupleSelected: function tab_PaneDrawInfo$isTupleSelected(tupleID) {
        return !!tupleID && this._sceneInfo._isMarkSelected(tupleID);
    },
    
    isMarkSelected: function tab_PaneDrawInfo$isMarkSelected(index) {
        var tupleID = this._getMarkTupleID(index);
        return this.isTupleSelected(tupleID);
    },
    
    isMarkImpliedSelected: function tab_PaneDrawInfo$isMarkImpliedSelected(index) {
        var tupleID = this._getMarkTupleID(index);
        return !!tupleID && this._sceneInfo._isMarkImpliedSelected(tupleID);
    },
    
    isTupleHighlighted: function tab_PaneDrawInfo$isTupleHighlighted(tupleID) {
        return !!tupleID && this._sceneInfo._isMarkBrushed(tupleID);
    },
    
    isMarkHighlighted: function tab_PaneDrawInfo$isMarkHighlighted(index) {
        var tupleID = this._getMarkTupleID(index);
        return this.isTupleHighlighted(tupleID);
    },
    
    isMarkVisible: function tab_PaneDrawInfo$isMarkVisible(index) {
        var tupleID = this._getMarkTupleID(index);
        return this.isTupleVisible(tupleID);
    },
    
    isTupleVisible: function tab_PaneDrawInfo$isTupleVisible(tupleID) {
        return !!tupleID && this._sceneInfo._isMarkVisible(tupleID);
    },
    
    isMarkFiltered: function tab_PaneDrawInfo$isMarkFiltered(index) {
        var tupleID = this._getMarkTupleID(index);
        return !!tupleID && this._sceneInfo._isMarkFiltered(tupleID);
    },
    
    isLineSegmentVisible: function tab_PaneDrawInfo$isLineSegmentVisible(index0, index1) {
        return this.getMarkState(index0) !== 'markStateInvisible' && this.getMarkState(index1) !== 'markStateInvisible';
    },
    
    isLineSegmentFiltered: function tab_PaneDrawInfo$isLineSegmentFiltered(index0, index1) {
        return this.isMarkFiltered(index0) || this.isMarkFiltered(index1);
    },
    
    isMarkEndPrimitive: function tab_PaneDrawInfo$isMarkEndPrimitive(index) {
        var flags = this._getMarkFlags(index);
        return (!!(flags & tab.PaneDrawInfo._markFlagMapping['endprimitive']));
    },
    
    isMarkEnd: function tab_PaneDrawInfo$isMarkEnd(index) {
        var flags = this._getMarkFlags(index);
        return (!!(flags & tab.PaneDrawInfo._markFlagMapping['end']));
    },
    
    isMarkClosedPrimitive: function tab_PaneDrawInfo$isMarkClosedPrimitive(index) {
        var flags = this._getMarkFlags(index);
        return (!!(flags & tab.PaneDrawInfo._markFlagMapping['closedprimitive']));
    },
    
    isMarkDebug: function tab_PaneDrawInfo$isMarkDebug(index) {
        var flags = this._getMarkFlags(index);
        return (!!(flags & tab.PaneDrawInfo._markFlagMapping['debug']));
    },
    
    shouldShowMarker: function tab_PaneDrawInfo$shouldShowMarker(index) {
        if (this._marksWithMarker == null) {
            return this._computeShouldShowMarker(index);
        }
        return Object.keyExists(this._marksWithMarker, index);
    },
    
    _getTextStyleColor: function tab_PaneDrawInfo$_getTextStyleColor(styleId, markIdx, colorOverrideMode) {
        var colorModeDict;
        if (markIdx >= 0 && !this.isMarkPropertyConstant('color') && this.get_markType() === 'text') {
            colorModeDict = this.getMarkProperty('color', markIdx);
        }
        else {
            colorModeDict = this.get_textStyleColumns()['text_style_color'][styleId];
        }
        if (this.isMarkFiltered(markIdx)) {
            colorOverrideMode = 'colorOverrideFog';
        }
        return colorModeDict[colorOverrideMode];
    },
    
    thisDomainToPixelX: function tab_PaneDrawInfo$thisDomainToPixelX(x) {
        return tab.PaneDrawInfo._domainToPixelX(x, this._domainExtents, this._paneRect);
    },
    
    thisDomainToPixelY: function tab_PaneDrawInfo$thisDomainToPixelY(y) {
        return tab.PaneDrawInfo._domainToPixelY(y, this._domainExtents, this._paneRect);
    },
    
    _isCompositeMarkType: function tab_PaneDrawInfo$_isCompositeMarkType() {
        return (this._markType === 'line' || this._markType === 'area' || this._markType === 'pie');
    },
    
    _markHasOneLabelPerGroup: function tab_PaneDrawInfo$_markHasOneLabelPerGroup(index) {
        return this.getMarkLabelProperty('label_one_per_group', index);
    },
    
    _computeShouldShowMarker: function tab_PaneDrawInfo$_computeShouldShowMarker(index) {
        var flags = this._getMarkFlags(index);
        return (!!(flags & tab.PaneDrawInfo._markFlagMapping['marked'])) || ((!!(flags & tab.PaneDrawInfo._markFlagMapping['markediflabel'])) && this.markHasLabel(index) && !this._markHasOneLabelPerGroup(index));
    },
    
    _buildOpaqueColors: function tab_PaneDrawInfo$_buildOpaqueColors(paneMapData) {
        if (Object.keyExists(paneMapData, 'color')) {
            var dataVals = paneMapData['color'];
            var opaqueColors = new Array(dataVals.length);
            for (var ii = 0; ii < dataVals.length; ++ii) {
                opaqueColors[ii] = tab.PaneDrawInfo._createOpaqueColorCollection(dataVals[ii]);
            }
            paneMapData['opaque_color'] = opaqueColors;
        }
    },
    
    _getColumnValue: function tab_PaneDrawInfo$_getColumnValue(columnName, index) {
        var column = this._columns[columnName];
        if (ss.isNullOrUndefined(column)) {
            return null;
        }
        if (column.length === 1) {
            index = 0;
        }
        if (index < column.length) {
            return column[index];
        }
        return null;
    },
    
    _getMarkFlags: function tab_PaneDrawInfo$_getMarkFlags(index) {
        return this.getMarkProperty('mark_flags', index);
    },
    
    _getMarkTupleID: function tab_PaneDrawInfo$_getMarkTupleID(index) {
        var tupleID = this._getColumnValue('tuple_id', index);
        if (ss.isNullOrUndefined(tupleID)) {
            tupleID = 0;
        }
        return tupleID;
    },
    
    _shouldGenerateOpaqueColors: function tab_PaneDrawInfo$_shouldGenerateOpaqueColors() {
        return (this._markType === 'line') && this.get_hasGlobalTransparency();
    },
    
    _convertMapData: function tab_PaneDrawInfo$_convertMapData(paneMapData) {
        var hasAlpha = Object.keyExists(paneMapData, 'alpha') && paneMapData['alpha'].length === 1;
        var colorAlpha = 1;
        if (hasAlpha) {
            colorAlpha = paneMapData['alpha'][0] / 255;
        }
        _.each(tab.PaneDrawInfo._colorTypeNames, ss.Delegate.create(this, function(colorname, i) {
            var useAlpha = hasAlpha && (String.equals(colorname, 'color', true) || String.equals(colorname, 'text_style_color', true));
            tab.PaneDrawInfo._convertDataHelper(colorname, paneMapData, ss.Delegate.create(this, function(color) {
                var cm = tab.ColorModel.fromArgbInt(color);
                if (useAlpha) {
                    cm = new tab.ColorModel(cm.get_r(), cm.get_g(), cm.get_b(), colorAlpha);
                }
                return tab.PaneDrawInfo._createColorCollection(cm, this._foggedBackgroundColor, this._fogBlendFactor);
            }));
        }));
        tab.PaneDrawInfo._convertDataHelper('shape_id', paneMapData, function(shapeId) {
            return tab.PaneDrawInfo.shapeMapping[shapeId.toString()] || shapeId.toString();
        });
        tab.PaneDrawInfo._convertDataHelper('alpha', paneMapData, function(alpha) {
            return alpha / 255;
        });
        if (ss.isValue(this._paneRect) && ss.isValue(this._domainExtents) && !!this._domainExtents.w && !!this._domainExtents.h) {
            tab.PaneDrawInfo._convertDataHelper('geometry', paneMapData, ss.Delegate.create(this, function(geometry) {
                var geometryIndex = geometry;
                if (!Object.keyExists(this._geometryLookup, geometryIndex)) {
                    var result = this._sceneInfo._getMarkGeometry(this._pdMarksKey, geometryIndex);
                    if (ss.isValue(result) && this.hasPixelGeometry) {
                        if (this._sceneInfo.hasSharedData(this._pdMarksKey)) {
                            result = tab.MiscUtil.cloneObject(result);
                        }
                        tab.PaneDrawInfo._checkFor180DegLngLine(result);
                        tab.PaneDrawInfo._domainToPixelMultipolygon(result, this._domainExtents, this._paneRect);
                    }
                    this._geometryLookup[geometryIndex] = result;
                }
                return geometry;
            }));
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(tab.PaneDrawInfo._floatColumnsMappedToInt));
            while ($enum1.moveNext()) {
                var floatColName = $enum1.current;
                var scale = 1;
                var offset = 0;
                var intColName = floatColName + '_int';
                if (tab.PaneDrawInfo._columnsToConvertToXDomainCoords.contains(floatColName)) {
                    var divisor = 100 * Math.max(1, this._paneRect.w);
                    scale = this._domainExtents.w / divisor;
                    offset = this._domainExtents.x;
                }
                else if (tab.PaneDrawInfo._columnsToConvertToYDomainCoords.contains(floatColName)) {
                    var divisor = 100 * Math.max(1, this._paneRect.h);
                    scale = this._domainExtents.h / divisor;
                    offset = this._domainExtents.y;
                }
                else {
                    scale = (tab.PaneDrawInfo._floatColumnsMappedToInt[floatColName].y - tab.PaneDrawInfo._floatColumnsMappedToInt[floatColName].x) / 32767;
                    offset = tab.PaneDrawInfo._floatColumnsMappedToInt[floatColName].x;
                }
                tab.PaneDrawInfo._convertDataHelper(intColName, paneMapData, function(x) {
                    return (x * scale) + offset;
                });
                if (Object.keyExists(paneMapData, intColName)) {
                    paneMapData[floatColName] = paneMapData[intColName];
                    delete paneMapData[intColName];
                }
            }
            var $enum2 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo._columnsToConvertToXDomainCoords);
            while ($enum2.moveNext()) {
                var xColName = $enum2.current;
                tab.PaneDrawInfo._convertDataHelper(xColName, paneMapData, ss.Delegate.create(this, function(x) {
                    return tab.PaneDrawInfo._domainToPixelX(x, this._domainExtents, this._paneRect);
                }));
            }
            var $enum3 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo._columnsToConvertToWidthDomainCoords);
            while ($enum3.moveNext()) {
                var widthColName = $enum3.current;
                tab.PaneDrawInfo._convertDataHelper(widthColName, paneMapData, ss.Delegate.create(this, function(width) {
                    return tab.PaneDrawInfo._domainToPixelWidth(width, this._domainExtents, this._paneRect);
                }));
            }
            var $enum4 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo._columnsToConvertToYDomainCoords);
            while ($enum4.moveNext()) {
                var yColName = $enum4.current;
                tab.PaneDrawInfo._convertDataHelper(yColName, paneMapData, ss.Delegate.create(this, function(y) {
                    return tab.PaneDrawInfo._domainToPixelY(y, this._domainExtents, this._paneRect);
                }));
            }
            var $enum5 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo._columnsToConvertToHeightDomainCoords);
            while ($enum5.moveNext()) {
                var heightColName = $enum5.current;
                tab.PaneDrawInfo._convertDataHelper(heightColName, paneMapData, ss.Delegate.create(this, function(height) {
                    return tab.PaneDrawInfo._domainToPixelHeight(height, this._domainExtents, this._paneRect);
                }));
            }
        }
    },
    
    _createTextStyleColumns: function tab_PaneDrawInfo$_createTextStyleColumns(textStyles, useMarkAlpha) {
        var toRet = {};
        if (Object.keyExists(textStyles, 'font')) {
            var fontCol = textStyles['font'];
            var numStyles = fontCol.dataValues.length;
            var preparedFonts = new Array(numStyles);
            for (var ii = 0; ii < numStyles; ++ii) {
                preparedFonts[ii] = tab.PaneDrawInfo._createPreparedFont(textStyles, ii);
            }
            toRet['font'] = preparedFonts;
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(textStyles));
            while ($enum1.moveNext()) {
                var key = $enum1.current;
                if (!tab.PaneDrawInfo._combinedFontTerms.contains(key)) {
                    var styleDataCol = textStyles[key];
                    var objectCol = new Array(styleDataCol.dataValues.length);
                    for (var ii = 0; ii < objectCol.length; ii++) {
                        objectCol[ii] = styleDataCol.dataValues[ii];
                    }
                    toRet[key] = objectCol;
                }
            }
            if (useMarkAlpha) {
                var markAlpha = this.getMarkProperty('alpha', 0);
                if (ss.isValue(markAlpha)) {
                    toRet['alpha'] = [ markAlpha * 255 ];
                }
            }
            this._convertMapData(toRet);
            tab.PaneDrawInfo._convertDataHelper('text_orientation', toRet, function(styleVal) {
                return tab.PaneDrawInfo._getTextAngleInRad(styleVal);
            });
            tab.PaneDrawInfo._convertDataHelper('text_alignment', toRet, function(styleVal) {
                var textHAlign = 'start';
                var alignmentNum = styleVal;
                if (alignmentNum === 2) {
                    textHAlign = 'end';
                }
                return textHAlign;
            });
        }
        return toRet;
    },
    
    _prepareLeftRight: function tab_PaneDrawInfo$_prepareLeftRight() {
        this._left = new Array(this.get_markCount());
        for (var ii = 0; ii < this._left.length; ++ii) {
            this._left[ii] = -1;
        }
        this._right = new Array(this.get_markCount());
        for (var jj = 0; jj < this._right.length; ++jj) {
            this._right[jj] = -1;
        }
        var areaStart = 0;
        for (var mark = 0; mark < this.get_markCount(); mark++) {
            if (!this.isMarkEnd(mark)) {
                this._right[mark] = mark + 1;
                this._left[mark + 1] = mark;
            }
            if (this.isMarkClosedPrimitive(mark)) {
                this._right[mark] = areaStart;
                this._left[areaStart] = mark;
            }
            if (this.isMarkEndPrimitive(mark)) {
                areaStart = mark + 1;
            }
        }
    },
    
    _setupBoundingBoxes: function tab_PaneDrawInfo$_setupBoundingBoxes() {
        var markBoundingBoxes = {};
        for (var ii = 0; ii < this.get_markCount(); ++ii) {
            markBoundingBoxes[this._getMarkTupleID(ii)] = tab.PaneTable2DRenderer.getMarkBoundingBox(ii, this);
        }
        this._sceneInfo._addMarkBoundingBoxes(markBoundingBoxes);
        if (this.get_markType() === 'pie') {
            var fullMarkBoundingBoxes = {};
            var lmds = new tab.LineMarkDrawState(this);
            var $enum1 = ss.IEnumerator.getEnumerator(lmds.get_lineAttributes());
            while ($enum1.moveNext()) {
                var la = $enum1.current;
                var fullMarkBB = tab.PaneTable2DRenderer.getMarkBoundingBox(la.startIndex, this);
                for (var idx = la.startIndex + 1; idx <= la.endIndex; ++idx) {
                    fullMarkBB = tab.RectXYUtil.union(fullMarkBB, tab.PaneTable2DRenderer.getMarkBoundingBox(idx, this));
                }
                for (var idx = la.startIndex; idx <= la.endIndex; ++idx) {
                    fullMarkBoundingBoxes[this._getMarkTupleID(idx)] = fullMarkBB;
                }
            }
            this._sceneInfo._addFullMarkBoundingBoxes(fullMarkBoundingBoxes);
        }
    },
    
    _setupCustomShapePositions: function tab_PaneDrawInfo$_setupCustomShapePositions() {
        if (this._markType === 'shape' && ss.isValue(this._sceneInfo.get__shapeManager()) && this._sceneInfo.get__shapeManager().get_imageKeys().length > 0) {
            var leftValues = [];
            var topValues = [];
            for (var markIndex = 0; markIndex < this._markCount; ++markIndex) {
                if (!Object.keyExists(tab.PaneDrawInfo.shapeMapping, this.getMarkProperty('shape_id', markIndex))) {
                    leftValues[markIndex] = Math.round(this.getMarkProperty('x', markIndex) - (this.getMarkProperty('width', markIndex) / 2) + 1);
                    topValues[markIndex] = Math.round(this.getMarkProperty('y', markIndex) - (this.getMarkProperty('height', markIndex) / 2) + 1);
                }
            }
            if (leftValues.length > 0) {
                this._columns['left'] = leftValues;
                this._columns['top'] = topValues;
            }
        }
    },
    
    _calcCellClip: function tab_PaneDrawInfo$_calcCellClip() {
        var toRet = 0;
        var clipX = !!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['clip-to-cell-x']);
        var clipY = !!(this._paneFlags & tab.PaneDrawInfo._paneFlagMapping['clip-to-cell-y']);
        if (clipX && clipY) {
            toRet = 3;
        }
        else if (clipX) {
            toRet = 1;
        }
        else if (clipY) {
            toRet = 2;
        }
        return toRet;
    },
    
    _parseTextInfo: function tab_PaneDrawInfo$_parseTextInfo(pdMarks, isMarkLabel) {
        if (ss.isValue(pdMarks.textRunColumns)) {
            this._textRunColumns = {};
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(pdMarks.textRunColumns));
            while ($enum1.moveNext()) {
                var key = $enum1.current;
                var runDataCol = pdMarks.textRunColumns[key];
                var objectCol = new Array(runDataCol.dataValues.length);
                for (var ii = 0; ii < objectCol.length; ii++) {
                    objectCol[ii] = runDataCol.dataValues[ii];
                }
                this._textRunColumns[key] = objectCol;
            }
            this._convertMapData(this._textRunColumns);
        }
        if (ss.isValue(pdMarks.textStyleColumns)) {
            this._textStyleColumns = this._createTextStyleColumns(pdMarks.textStyleColumns, !isMarkLabel);
        }
    },
    
    _markLabelIndex: function tab_PaneDrawInfo$_markLabelIndex(markIndex) {
        return (Object.keyExists(this._columns, 'label_index')) ? this._columns['label_index'][markIndex] : -1;
    },
    
    _ensureLinePixelAlignment: function tab_PaneDrawInfo$_ensureLinePixelAlignment() {
        var count = this.get_markCount();
        for (var markIndex = 0; markIndex < count; markIndex++) {
            var rightIndex = this.getRight(markIndex);
            if (rightIndex !== -1) {
                var w1 = this.getMarkProperty('width', markIndex);
                var w2 = this.getMarkProperty('width', rightIndex);
                if (tab.FloatUtil.isEqual(w1, w2) && Math.round(w1) % 2 === 1) {
                    var x1 = this.getMarkProperty('x', markIndex);
                    var y1 = this.getMarkProperty('y', markIndex);
                    var p1 = tab.$create_PointF(x1, y1);
                    var x2 = this.getMarkProperty('x', rightIndex);
                    var y2 = this.getMarkProperty('y', rightIndex);
                    var p2 = tab.$create_PointF(x2, y2);
                    tab.CanvasRenderer.modifyLineEndpoints(p1, p2, w1);
                    this._columns['x'][markIndex] = p1.x;
                    this._columns['y'][markIndex] = p1.y;
                    if (this.getRight(rightIndex) === -1) {
                        this._columns['x'][rightIndex] = p2.x;
                        this._columns['y'][rightIndex] = p2.y;
                    }
                }
            }
        }
    },
    
    _computeMarkState: function tab_PaneDrawInfo$_computeMarkState(index) {
        var tupleID = this._getMarkTupleID(index);
        if (!this.isTupleVisible(tupleID)) {
            return 'markStateInvisible';
        }
        else if (this.isTupleSelected(tupleID)) {
            return 'markStateSelected';
        }
        else if (this.isTupleHighlighted(tupleID)) {
            return 'markStateHighlighted';
        }
        return 'markStateNormal';
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CanvasRenderer

tab.CanvasRenderer = function tab_CanvasRenderer(canvasElt, context) {
    this._mainCanvas = canvasElt;
    this._mainContext = context;
    this._renderOffscreen = false;
    this._renderOffset = tab.$create_Point(0, 0);
    if (tab.BrowserSupport.get_isSafari() && !tab.BrowserSupport.get_isMobile()) {
        this._mainCanvas.style['webkitFontSmoothing'] = 'antialiased';
    }
}
tab.CanvasRenderer.get_multipolyLineSizeOffset = function tab_CanvasRenderer$get_multipolyLineSizeOffset() {
    return (tab.BrowserSupport.get_isChrome()) ? 0.4 : 0;
}
tab.CanvasRenderer.bBoxMultipolygon = function tab_CanvasRenderer$bBoxMultipolygon(hasPixelGeometry, x, y, scale, placeholdersize, multipolygon) {
    var bounds;
    if (ss.isNullOrUndefined(multipolygon)) {
        var radius = placeholdersize / 2;
        var placeHolderSizeUpperBound = Math.floor(placeholdersize + 1);
        var topLeft = tab.$create_PointF(x - radius, y - radius);
        bounds = tab.$create_BBoxRectF(topLeft.x, topLeft.y, topLeft.x + placeHolderSizeUpperBound, topLeft.y + placeHolderSizeUpperBound);
    }
    else {
        bounds = tab.$create_BBoxRectF(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
        tab.CanvasRenderer.boundsMultipolygon(multipolygon, bounds);
    }
    if (hasPixelGeometry) {
        return tab.RectXYUtil.rectXYFromBBoxRectF(bounds);
    }
    var t = tab.Transform.domainToPixel(x, y, scale);
    return t.transformBounds(bounds);
}
tab.CanvasRenderer.modifyLineEndpoints = function tab_CanvasRenderer$modifyLineEndpoints(start, end, lineWidth) {
    if (Math.round(lineWidth) % 2 === 1) {
        var xDiff = end.x - start.x;
        var yDiff = end.y - start.y;
        if (!!xDiff || !!yDiff) {
            var curDistance = (xDiff * xDiff) + (yDiff * yDiff);
            curDistance = Math.sqrt(curDistance);
            var yShift = Math.abs(0.5 * (xDiff / curDistance));
            var xShift = Math.abs(0.5 * (yDiff / curDistance));
            start.x += xShift;
            start.y += yShift;
            end.x += xShift;
            end.y += yShift;
        }
    }
}
tab.CanvasRenderer.customShapeColor = function tab_CanvasRenderer$customShapeColor(pdInfo, markIndex, layer, colorOverrideMode) {
    switch (layer) {
        case 'highlightedUnder':
        case 'normalUnder':
            return (pdInfo.getMarkProperty('halo_color', markIndex))[colorOverrideMode];
        case 'selectedOn':
        case 'highlightedOn':
        case 'normalOn':
            return (pdInfo.getMarkProperty('color', markIndex))[colorOverrideMode];
        case 'selectedUnder':
        case 'hoverOverlay':
        case 'pressedOverlay':
            return (pdInfo.getMarkProperty('selected_halo_color', markIndex))[colorOverrideMode];
    }
    return 'rgba(255,255,255,1)';
}
tab.CanvasRenderer.getRenderContext = function tab_CanvasRenderer$getRenderContext(canvasElt) {
    return new tab.TabRenderContext2D(canvasElt.getContext('2d'));
}
tab.CanvasRenderer.addMultipolygonPath = function tab_CanvasRenderer$addMultipolygonPath(ctx, multipolygon) {
    var polygons = multipolygon.polygonList;
    var polyCount = polygons.length;
    for (var polyIdx = 0; polyIdx < polyCount; polyIdx++) {
        var lines = polygons[polyIdx].lineList;
        var lineCount = lines.length;
        for (var lineIdx = 0; lineIdx < lineCount; lineIdx++) {
            var coords = lines[lineIdx].pointsF;
            var coordCount = coords.length;
            if (coordCount < 2) {
                continue;
            }
            ctx.moveTo(coords[0], coords[1]);
            for (var j = 2; j < coordCount; j = j + 2) {
                ctx.lineTo(coords[j], coords[j + 1]);
            }
        }
    }
}
tab.CanvasRenderer.boundsMultipolygon = function tab_CanvasRenderer$boundsMultipolygon(multipolygon, bounds) {
    var minX = bounds.minX;
    var minY = bounds.minY;
    var maxX = bounds.maxX;
    var maxY = bounds.maxY;
    var polygons = multipolygon.polygonList;
    var polyCount = polygons.length;
    for (var polyIdx = 0; polyIdx < polyCount; polyIdx++) {
        var lines = polygons[polyIdx].lineList;
        var lineCount = lines.length;
        for (var lineIdx = 0; lineIdx < lineCount; lineIdx++) {
            var coords = lines[lineIdx].pointsF;
            var coordCount = coords.length;
            for (var i = 0; i < coordCount; i = i + 2) {
                var x = coords[i];
                var y = coords[i + 1];
                minX = Math.min(minX, x);
                minY = Math.min(minY, y);
                maxX = Math.max(maxX, x);
                maxY = Math.max(maxY, y);
            }
        }
    }
    bounds.minX = minX;
    bounds.minY = minY;
    bounds.maxX = maxX;
    bounds.maxY = maxY;
}
tab.CanvasRenderer.fillPath = function tab_CanvasRenderer$fillPath(context, points, close) {
    var numPoints = Math.floor(points.length / 2);
    if (numPoints < 2) {
        return;
    }
    context.beginPath();
    context.moveTo(points[0], points[1]);
    for (var index = 2; index < (numPoints * 2); index += 2) {
        context.lineTo(points[index], points[index + 1]);
    }
    if (close) {
        context.closePath();
    }
    context.fill();
}
tab.CanvasRenderer.strokePath = function tab_CanvasRenderer$strokePath(context, points, close, adjust) {
    var numPoints = Math.floor(points.length / 2);
    if (numPoints < 2) {
        return;
    }
    context.beginPath();
    for (var index = 0; index < (numPoints * 2) - 2; index += 2) {
        var start = tab.$create_PointF(points[index], points[index + 1]);
        var end = tab.$create_PointF(points[index + 2], points[index + 3]);
        if (numPoints <= 2 && adjust) {
            tab.CanvasRenderer.modifyLineEndpoints(start, end, context.get_lineWidth());
        }
        if (!index) {
            context.moveTo(start.x, start.y);
        }
        tab.CanvasRenderer._drawLineSegment(context, start, end);
    }
    if (close) {
        context.closePath();
        var lastIndex = numPoints * 2;
        var start = tab.$create_PointF(points[lastIndex - 2], points[lastIndex - 1]);
        var end = tab.$create_PointF(points[0], points[1]);
        if (numPoints <= 2 && adjust) {
            tab.CanvasRenderer.modifyLineEndpoints(start, end, context.get_lineWidth());
        }
        tab.CanvasRenderer._drawLineSegment(context, start, end);
    }
    var oldLineCap = context.get_lineCap();
    if (context.get_linePattern() === 'dashed' || context.get_linePattern() === 'dotted') {
        context.set_lineCap('butt');
    }
    context.stroke();
    if (context.get_linePattern() === 'dashed' || context.get_linePattern() === 'dotted') {
        context.set_lineCap(oldLineCap);
    }
}
tab.CanvasRenderer.toCanvasAngle = function tab_CanvasRenderer$toCanvasAngle(theta) {
    return ((theta * tab.CanvasRenderer.twoPI) - tab.CanvasRenderer.halfPI);
}
tab.CanvasRenderer.toCanvasLineCap = function tab_CanvasRenderer$toCanvasLineCap(tableauCap) {
    switch (tableauCap) {
        case 'flat':
            return 'butt';
        case 'square':
            return 'square';
        case 'round':
            return 'round';
        case 'triangle':
            break;
    }
    return 'butt';
}
tab.CanvasRenderer.toCanvasLineJoin = function tab_CanvasRenderer$toCanvasLineJoin(tableauJoin) {
    switch (tableauJoin) {
        case 'bevel':
            return 'bevel';
        case 'miter':
            return 'miter';
        case 'round':
            return 'round';
    }
    return 'miter';
}
tab.CanvasRenderer.lineEdgeContains = function tab_CanvasRenderer$lineEdgeContains(hitX, hitY, x0, y0, width0, x1, y1, width1) {
    var points = [];
    tab.CanvasRenderer._getLineEdgePoints(x0, y0, width0, x1, y1, width1, points);
    return tab.GeometryUtil.isPointInPoly(points, tab.$create_PointF(hitX, hitY));
}
tab.CanvasRenderer.boundLineEdge = function tab_CanvasRenderer$boundLineEdge(bound, x0, y0, width0, x1, y1, width1) {
    var points = [];
    tab.CanvasRenderer._getLineEdgePoints(x0, y0, width0, x1, y1, width1, points);
    var minx = points[0].x;
    var maxx = points[0].x;
    var miny = points[0].y;
    var maxy = points[0].y;
    var $enum1 = ss.IEnumerator.getEnumerator(points);
    while ($enum1.moveNext()) {
        var pt = $enum1.current;
        minx = Math.min(minx, pt.x);
        miny = Math.min(miny, pt.y);
        maxx = Math.max(maxx, pt.x);
        maxy = Math.max(maxy, pt.y);
    }
    return tab.RectXYUtil.union(bound, tab.$create_RectXY(parseInt(minx), parseInt(miny), parseInt((maxx - minx)) + 1, parseInt((maxy - miny)) + 1));
}
tab.CanvasRenderer.boundWedge = function tab_CanvasRenderer$boundWedge(x, y, radius, theta1, theta2) {
    if (theta1 > theta2) {
        var temp = theta1;
        theta1 = theta2;
        theta2 = temp;
    }
    if (theta2 - theta1 >= 1) {
        var d = Math.ceil(2 * radius);
        return tab.$create_RectXY(Math.floor(x - radius), Math.floor(y - radius), d, d);
    }
    var startAngle = tab.CanvasRenderer.toCanvasAngle(theta1);
    var endAngle = tab.CanvasRenderer.toCanvasAngle(theta2);
    var points = [];
    points.add(tab.$create_PointF(x, y));
    points.add(tab.$create_PointF(x + (radius * Math.cos(startAngle)), y + (radius * Math.sin(startAngle))));
    points.add(tab.$create_PointF(x + (radius * Math.cos(endAngle)), y + (radius * Math.sin(endAngle))));
    startAngle = tab.GeometryUtil.normalizeAngle(startAngle);
    endAngle = tab.GeometryUtil.normalizeAngle(endAngle);
    if (tab.GeometryUtil.isInBetweenAngles(0, startAngle, endAngle)) {
        points.add(tab.$create_PointF(x + radius, y));
    }
    if (tab.GeometryUtil.isInBetweenAngles(tab.CanvasRenderer.halfPI, startAngle, endAngle)) {
        points.add(tab.$create_PointF(x, y + radius));
    }
    if (tab.GeometryUtil.isInBetweenAngles(tab.CanvasRenderer.onePI, startAngle, endAngle)) {
        points.add(tab.$create_PointF(x - radius, y));
    }
    if (tab.GeometryUtil.isInBetweenAngles(tab.CanvasRenderer.oneAndHalfPI, startAngle, endAngle)) {
        points.add(tab.$create_PointF(x, y - radius));
    }
    var minX = Number.POSITIVE_INFINITY;
    var minY = Number.POSITIVE_INFINITY;
    var maxX = Number.NEGATIVE_INFINITY;
    var maxY = Number.NEGATIVE_INFINITY;
    var $enum1 = ss.IEnumerator.getEnumerator(points);
    while ($enum1.moveNext()) {
        var point = $enum1.current;
        minX = Math.min(minX, point.x);
        minY = Math.min(minY, point.y);
        maxX = Math.max(maxX, point.x);
        maxY = Math.max(maxY, point.y);
    }
    return tab.RectXYUtil.rectXYFromMinAndMax(minX, minY, maxX, maxY);
}
tab.CanvasRenderer.roundStartAndExtent = function tab_CanvasRenderer$roundStartAndExtent(start, extent, minSize) {
    var end = Math.round(start + extent);
    start = Math.round(start);
    extent = Math.max(Math.abs(end - start), minSize);
    return new ss.Tuple(start, extent);
}
tab.CanvasRenderer.isPointInExpandedRectHelperF = function tab_CanvasRenderer$isPointInExpandedRectHelperF(top, left, height, width, expandHeight, expandWidth, minHeight, minWidth, x, y) {
    if (height < 0) {
        top += height;
        height = Math.abs(height);
    }
    if (width < 0) {
        left += width;
        width = Math.abs(width);
    }
    var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(top - expandHeight, height + expandHeight + expandHeight, minHeight + expandHeight + expandHeight);
    var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(left - expandWidth, width + expandWidth + expandWidth, minWidth + expandWidth + expandWidth);
    var rect = tab.$create_RectXY(parseInt(xAndWidth.first), parseInt(yAndHeight.first), parseInt(xAndWidth.second), parseInt(yAndHeight.second));
    if (tab.RectXYUtil.inRectPointF(rect, tab.$create_PointF(x, y))) {
        return true;
    }
    return false;
}
tab.CanvasRenderer.renderCustomShape = function tab_CanvasRenderer$renderCustomShape(tabContext, pdInfo, markIndex, layer, colorOverrideMode) {
    var shapeId = pdInfo.getMarkProperty('shape_id', markIndex);
    if (ss.isValue(shapeId)) {
        var image = pdInfo.getImageForMark(shapeId);
        if (!ss.isValue(image)) {
            tab.CanvasRenderer.renderCircle(tabContext, pdInfo.getMarkProperty('x', markIndex), pdInfo.getMarkProperty('y', markIndex), pdInfo.getMarkProperty('width', markIndex), tab.CanvasRenderer.customShapeColor(pdInfo, markIndex, layer, colorOverrideMode), 2);
            return;
        }
        if (!image.complete) {
            return;
        }
        var constantColor = pdInfo.isMarkPropertyConstant('color');
        var allowHighQualityScaling = pdInfo.get_allowHighQualityCustomImageScaling();
        var originalWidth = pdInfo.getMarkProperty('width', markIndex);
        var originalHeight = pdInfo.getMarkProperty('height', markIndex);
        var left = pdInfo.getMarkProperty('left', markIndex);
        var top = pdInfo.getMarkProperty('top', markIndex);
        var width;
        var height;
        if (image.naturalWidth > image.naturalHeight) {
            var scaleFactor = image.naturalWidth / image.naturalHeight;
            width = originalWidth;
            height = originalHeight / scaleFactor;
            top += parseInt(((originalHeight - height) / 2));
        }
        else {
            var scaleFactor = image.naturalHeight / image.naturalWidth;
            width = originalWidth / scaleFactor;
            height = originalHeight;
            left += parseInt(((originalWidth - width) / 2));
        }
        var colorModel = tab.CanvasRenderer._getCustomShapeColorModel(pdInfo, markIndex, layer, colorOverrideMode);
        layer = (layer === 'normalOn' && colorOverrideMode === 'colorOverrideOpaque') ? 'selectedOn' : layer;
        var cacheableCanvasGenerator = null;
        switch (layer) {
            case 'normalUnder':
            case 'highlightedUnder':
            case 'selectedUnder':
                cacheableCanvasGenerator = function() {
                    return tab.ShapeUtil.generateSelectedUnderCustomShape(image, colorModel, tab.ShapeManager.selectionBorderSize, width, height, allowHighQualityScaling);
                };
                break;
            case 'normalOn':
                if (constantColor) {
                    if (colorOverrideMode === 'colorOverrideFog') {
                        cacheableCanvasGenerator = function() {
                            return tab.ShapeUtil.applyFoggingToImage(image, pdInfo.get_foggedBackgroundColor(), pdInfo.get_fogBlendFactor(), width, height, allowHighQualityScaling);
                        };
                    }
                }
                else {
                    cacheableCanvasGenerator = function() {
                        return tab.ShapeUtil.colorTransformImage(image, colorModel, width, height, allowHighQualityScaling);
                    };
                }
                break;
            case 'highlightedOn':
                if (!constantColor) {
                    cacheableCanvasGenerator = function() {
                        return tab.ShapeUtil.colorTransformImage(image, colorModel, width, height, allowHighQualityScaling);
                    };
                }
                break;
            case 'selectedOn':
                if (!constantColor) {
                    cacheableCanvasGenerator = function() {
                        colorModel = tab.ColorModel.fromColorModelPlusAlpha(colorModel, 255);
                        return tab.ShapeUtil.colorTransformImage(image, colorModel, width, height, allowHighQualityScaling);
                    };
                }
                break;
            case 'hoverOverlay':
                cacheableCanvasGenerator = function() {
                    return tab.ShapeUtil.generateOverlayForShape(image, colorModel, tab.ShapeManager.selectionBorderSize, width, height, allowHighQualityScaling);
                };
                break;
            case 'pressedOverlay':
                cacheableCanvasGenerator = function() {
                    return tab.ShapeUtil.generateOverlayForShape(image, colorModel, tab.ShapeManager.selectionBorderSize * 2, width, height, allowHighQualityScaling);
                };
                break;
        }
        if (!ss.isValue(cacheableCanvasGenerator)) {
            cacheableCanvasGenerator = function() {
                return tab.ShapeUtil.generateCanvasAndPrescaleAsNeeded(image, width, height, allowHighQualityScaling);
            };
        }
        var cachedCanvas = pdInfo.getCachedShapeForMark(shapeId, layer, colorOverrideMode, colorModel.toString(), width, height, cacheableCanvasGenerator);
        if (ss.isValue(cachedCanvas)) {
            switch (layer) {
                case 'normalUnder':
                case 'highlightedUnder':
                case 'selectedUnder':
                case 'hoverOverlay':
                    tabContext.drawImage3(cachedCanvas, left - tab.ShapeManager.selectionBorderSize, top - tab.ShapeManager.selectionBorderSize, cachedCanvas.width, cachedCanvas.height);
                    break;
                case 'pressedOverlay':
                    tabContext.drawImage3(cachedCanvas, left - (tab.ShapeManager.selectionBorderSize * 2), top - (tab.ShapeManager.selectionBorderSize * 2), cachedCanvas.width, cachedCanvas.height);
                    break;
                case 'normalOn':
                    tabContext.set_alpha(colorModel.get_a());
                    tabContext.drawImage3(cachedCanvas, left, top, width, height);
                    break;
                default:
                    tabContext.drawImage3(cachedCanvas, left, top, width, height);
                    break;
            }
        }
        else {
            tab.Log.get(tabContext).warn('Shape was not found, and could not be drawn!');
        }
    }
}
tab.CanvasRenderer._getCustomShapeColorModel = function tab_CanvasRenderer$_getCustomShapeColorModel(pdInfo, markIndex, layer, colorOverrideMode) {
    var color = tab.CanvasRenderer.customShapeColor(pdInfo, markIndex, layer, colorOverrideMode);
    var colorModel = tab.ColorModel.fromColorCode(color);
    colorModel = tab.ColorModel.fromColorModelPlusAlpha(colorModel, colorModel.get_a() * 255);
    return colorModel;
}
tab.CanvasRenderer.renderBarOutline = function tab_CanvasRenderer$renderBarOutline(context, x, y, width, height, color, strokeWidth, minWidth, minHeight, isSquare) {
    context.set_lineWidth(strokeWidth);
    context.set_strokeStyle(color);
    var pixelAdjustment = (!(Math.round(strokeWidth) % 2)) ? 0 : 0.5;
    var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, minHeight);
    var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, minWidth);
    if (isSquare) {
        xAndWidth.second = yAndHeight.second = Math.min(xAndWidth.second, yAndHeight.second);
    }
    context.strokeRect(xAndWidth.first + pixelAdjustment, yAndHeight.first + pixelAdjustment, xAndWidth.second, yAndHeight.second);
}
tab.CanvasRenderer.renderFilledBar = function tab_CanvasRenderer$renderFilledBar(context, x, y, width, height, color, minWidth, minHeight, isSquare) {
    context.set_shapeFillStyle(color);
    var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, minHeight);
    var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, minWidth);
    if (isSquare) {
        xAndWidth.second = yAndHeight.second = Math.min(xAndWidth.second, yAndHeight.second);
    }
    context.fillRect(xAndWidth.first, yAndHeight.first, xAndWidth.second, yAndHeight.second);
}
tab.CanvasRenderer.renderRectangle = function tab_CanvasRenderer$renderRectangle(context, x, y, width, height, color, strokeWidth) {
    var w2 = width / 2;
    var h2 = height / 2;
    context.set_lineJoin('miter');
    context.set_lineWidth(strokeWidth);
    context.set_strokeStyle(color);
    context.strokeRect(x - w2, y - h2, width, height);
}
tab.CanvasRenderer.renderCircle = function tab_CanvasRenderer$renderCircle(context, x, y, diameter, color, strokeWidth) {
    context.beginPath();
    context.arc(x, y, diameter / 2, 0, tab.CanvasRenderer.twoPI, true);
    context.closePath();
    context.set_lineWidth(strokeWidth);
    context.set_strokeStyle(color);
    context.stroke();
}
tab.CanvasRenderer.renderFilledCircle = function tab_CanvasRenderer$renderFilledCircle(context, x, y, diameter, color) {
    context.beginPath();
    context.arc(x, y, diameter / 2, 0, tab.CanvasRenderer.twoPI, true);
    context.closePath();
    context.set_shapeFillStyle(color);
    context.fill();
}
tab.CanvasRenderer.renderWedge = function tab_CanvasRenderer$renderWedge(context, x, y, radius, theta1, theta2, color, strokeWidth, anticlockwise) {
    var angle1 = tab.CanvasRenderer.toCanvasAngle(theta1);
    var angle2 = tab.CanvasRenderer.toCanvasAngle(theta2);
    if (Math.abs(angle2 - angle1) < tab.CanvasRenderer.angleEpsilon) {
        return;
    }
    if (ss.isNullOrUndefined(anticlockwise)) {
        anticlockwise = false;
    }
    var fullPie = false;
    if (Math.abs(theta2 - theta1) >= 1) {
        fullPie = true;
    }
    context.beginPath();
    if (!fullPie) {
        context.moveTo(x, y);
    }
    angle1 = tab.CanvasRenderer._limitPrecision(angle1);
    angle2 = tab.CanvasRenderer._limitPrecision(angle2);
    context.arc(x, y, radius, angle1, angle2, anticlockwise);
    context.closePath();
    context.set_lineWidth(strokeWidth);
    context.set_strokeStyle(color);
    context.stroke();
}
tab.CanvasRenderer.createMultipolygonPath = function tab_CanvasRenderer$createMultipolygonPath(ctx, hasPixelGeometry, x, y, scale, placeholderSize, multipolygon) {
    ctx.save();
    ctx.beginPath();
    if (ss.isNull(multipolygon)) {
        ctx.arc(x, y, placeholderSize / 2, 0, tab.CanvasRenderer.twoPI, true);
    }
    else {
        if (!hasPixelGeometry) {
            ctx.translate(x, y);
            ctx.scale(scale, scale);
        }
        tab.CanvasRenderer.addMultipolygonPath(ctx, multipolygon);
    }
    ctx.closePath();
    ctx.restore();
}
tab.CanvasRenderer._getLineEdgePoints = function tab_CanvasRenderer$_getLineEdgePoints(x0, y0, width0, x1, y1, width1, points) {
    var angle = Math.atan2(y1 - y0, x1 - x0);
    var cosAngle = Math.cos(angle);
    var sinAngle = Math.sin(angle);
    width0 /= 2;
    width1 /= 2;
    var width0sinAngle = width0 * sinAngle;
    var width1sinAngle = width1 * sinAngle;
    var width0cosAngle = width0 * cosAngle;
    var width1cosAngle = width1 * cosAngle;
    points.add(tab.$create_PointF(x0 + width0sinAngle, y0 - width0cosAngle));
    points.add(tab.$create_PointF(x1 + width1sinAngle, y1 - width1cosAngle));
    points.add(tab.$create_PointF(x1 - width1sinAngle, y1 + width1cosAngle));
    points.add(tab.$create_PointF(x0 - width0sinAngle, y0 + width0cosAngle));
}
tab.CanvasRenderer._drawLineSegment = function tab_CanvasRenderer$_drawLineSegment(context, start, end) {
    if (tab.BrowserSupport.get_canvasLinePattern()) {
        context.lineTo(end.x, end.y);
    }
    else {
        switch (context.get_linePattern()) {
            case 'dashed':
                tab.CanvasRenderer._drawDashedLineSegment(context, start, end, tab.TabRenderContext2D.defaultLineDashDashed[0], tab.TabRenderContext2D.defaultLineDashDashed[1]);
                break;
            case 'dotted':
                tab.CanvasRenderer._drawDashedLineSegment(context, start, end, tab.TabRenderContext2D.defaultLineDashDotted[0], tab.TabRenderContext2D.defaultLineDashDotted[1]);
                break;
            case 'solid':
            default:
                context.lineTo(end.x, end.y);
                break;
        }
    }
}
tab.CanvasRenderer._drawDashedLineSegment = function tab_CanvasRenderer$_drawDashedLineSegment(context, start, end, dashLength, gapLength) {
    var lineWidth = context.get_lineWidth();
    dashLength = lineWidth * dashLength;
    gapLength = lineWidth * gapLength;
    context.moveTo(start.x, start.y);
    var penUp = false;
    var lengthRemaining = dashLength;
    var prevX = start.x;
    var prevY = start.y;
    var xDiff = end.x - start.x;
    var yDiff = end.y - start.y;
    var curDistance = (xDiff * xDiff) + (yDiff * yDiff);
    curDistance = Math.sqrt(curDistance);
    var vecX = xDiff / curDistance;
    var vecY = yDiff / curDistance;
    while (curDistance > 0) {
        var segmentLength = (curDistance > lengthRemaining) ? lengthRemaining : curDistance;
        var curX = prevX + (segmentLength * vecX);
        var curY = prevY + (segmentLength * vecY);
        if (penUp) {
            context.moveTo(curX, curY);
        }
        else {
            context.lineTo(curX, curY);
        }
        curDistance -= segmentLength;
        lengthRemaining -= segmentLength;
        if (!lengthRemaining) {
            penUp = !penUp;
            lengthRemaining = (penUp) ? gapLength : dashLength;
        }
        prevX = curX;
        prevY = curY;
    }
}
tab.CanvasRenderer._getEffectiveWidth = function tab_CanvasRenderer$_getEffectiveWidth(canvas, defaultValue) {
    var effectiveWidth = tab.DomUtil.parseWidthFromStyle(canvas.style);
    effectiveWidth = (isNaN(effectiveWidth)) ? defaultValue : effectiveWidth;
    return effectiveWidth;
}
tab.CanvasRenderer._getEffectiveHeight = function tab_CanvasRenderer$_getEffectiveHeight(canvas, defaultValue) {
    var effectiveHeight = tab.DomUtil.parseHeightFromStyle(canvas.style);
    effectiveHeight = (isNaN(effectiveHeight)) ? defaultValue : effectiveHeight;
    return effectiveHeight;
}
tab.CanvasRenderer._limitPrecision = function tab_CanvasRenderer$_limitPrecision(value) {
    return parseInt((value * 100000)) / 100000;
}
tab.CanvasRenderer.prototype = {
    _mainCanvas: null,
    _mainContext: null,
    _offscreenCanvas: null,
    _offscreenContext: null,
    _renderOffscreen: false,
    _prevTextInfo: null,
    _renderOffset: null,
    
    get_renderOffset: function tab_CanvasRenderer$get_renderOffset() {
        return this._renderOffset;
    },
    set_renderOffset: function tab_CanvasRenderer$set_renderOffset(value) {
        this._renderOffset = value;
        this.get_currentContext().translate(-this._renderOffset.x, -this._renderOffset.y);
        return value;
    },
    
    get_currentCanvas: function tab_CanvasRenderer$get_currentCanvas() {
        return (this._renderOffscreen) ? this._offscreenCanvas : this._mainCanvas;
    },
    
    get_currentContext: function tab_CanvasRenderer$get_currentContext() {
        return (this._renderOffscreen) ? this._offscreenContext : this._mainContext;
    },
    
    get_visibleRect: function tab_CanvasRenderer$get_visibleRect() {
        var effectiveWidth = tab.CanvasRenderer._getEffectiveWidth(this.get_currentCanvas(), this.get_currentCanvas().width);
        var effectiveHeight = tab.CanvasRenderer._getEffectiveHeight(this.get_currentCanvas(), this.get_currentCanvas().height);
        return tab.$create_RectXY(this._renderOffset.x, this._renderOffset.y, effectiveWidth, effectiveHeight);
    },
    
    clear: function tab_CanvasRenderer$clear() {
        var effectiveCanvas = this.get_visibleRect();
        this.get_currentContext().clearRect(effectiveCanvas.x, effectiveCanvas.y, effectiveCanvas.w, effectiveCanvas.h);
    },
    
    reset: function tab_CanvasRenderer$reset() {
        this._renderOffscreen = false;
        this._offscreenContext = null;
        this._offscreenCanvas = null;
        this.get_currentContext().reset();
        this.set_renderOffset(tab.$create_Point(0, 0));
        this.clearPrevTextRunInfo();
    },
    
    setRenderOffsetNoTranslate: function tab_CanvasRenderer$setRenderOffsetNoTranslate(offset) {
        this._renderOffset = offset;
    },
    
    isRectVisible: function tab_CanvasRenderer$isRectVisible(rect) {
        return tab.RectXYUtil.intersectsWith(rect, this.get_visibleRect());
    },
    
    beginOffScreenRender: function tab_CanvasRenderer$beginOffScreenRender() {
        if (this._renderOffscreen) {
            return;
        }
        if (ss.isNullOrUndefined(this._offscreenCanvas)) {
            this._offscreenCanvas = document.createElement('canvas');
            var actual = tab.$create_Size(this._mainCanvas.width, this._mainCanvas.height);
            var effective = tab.$create_Size(tab.CanvasRenderer._getEffectiveWidth(this._mainCanvas, 0), tab.CanvasRenderer._getEffectiveHeight(this._mainCanvas, 0));
            tab.CanvasUtil.densifyCanvasUsingSize(this._offscreenCanvas, actual, effective);
        }
        if (ss.isNullOrUndefined(this._offscreenContext)) {
            this._offscreenContext = tab.CanvasRenderer.getRenderContext(this._offscreenCanvas);
        }
        else {
            this._offscreenContext.reset();
        }
        var pixelRatio = this._mainCanvas.width / tab.CanvasRenderer._getEffectiveWidth(this._mainCanvas, this._mainCanvas.width);
        if (pixelRatio !== 1) {
            tab.CanvasUtil.scaleCanvasDrawing(this._offscreenContext, pixelRatio);
        }
        this._offscreenContext.translate(-this.get_renderOffset().x, -this.get_renderOffset().y);
        this._renderOffscreen = true;
        this.clear();
    },
    
    endOffScreenRender: function tab_CanvasRenderer$endOffScreenRender(alpha) {
        if (!this._renderOffscreen) {
            return;
        }
        this._renderOffscreen = false;
        this._mainContext.save();
        this._mainContext.set_alpha(alpha);
        this._mainContext.setTransform(1, 0, 0, 1, 0, 0);
        this._mainContext.drawImage1(this._offscreenCanvas, 0, 0);
        this._mainContext.restore();
    },
    
    renderFilledRectangle: function tab_CanvasRenderer$renderFilledRectangle(x, y, width, height, color) {
        var w2 = width / 2;
        var h2 = height / 2;
        var context = this.get_currentContext();
        context.set_shapeFillStyle(color);
        context.fillRect(x - w2, y - h2, width, height);
    },
    
    renderFilledWedge: function tab_CanvasRenderer$renderFilledWedge(x, y, radius, theta1, theta2, color, anticlockwise) {
        var angle1 = tab.CanvasRenderer.toCanvasAngle(theta1);
        var angle2 = tab.CanvasRenderer.toCanvasAngle(theta2);
        if (Math.abs(angle2 - angle1) < tab.CanvasRenderer.angleEpsilon) {
            return;
        }
        if (ss.isNullOrUndefined(anticlockwise)) {
            anticlockwise = false;
        }
        var context = this.get_currentContext();
        context.beginPath();
        context.moveTo(x, y);
        angle1 = tab.CanvasRenderer._limitPrecision(angle1);
        angle2 = tab.CanvasRenderer._limitPrecision(angle2);
        context.arc(x, y, radius, angle1, angle2, anticlockwise);
        context.closePath();
        context.set_shapeFillStyle(color);
        context.fill();
    },
    
    renderLine: function tab_CanvasRenderer$renderLine(points, strokeWidth, color, adjust) {
        var context = this.get_currentContext();
        context.set_linePattern('solid');
        context.set_lineWidth(strokeWidth);
        context.set_strokeStyle(color);
        tab.CanvasRenderer.strokePath(context, points, false, adjust);
    },
    
    renderLineLoop: function tab_CanvasRenderer$renderLineLoop(points, strokeWidth, color) {
        var context = this.get_currentContext();
        context.set_linePattern('solid');
        context.set_lineWidth(strokeWidth);
        context.set_strokeStyle(color);
        tab.CanvasRenderer.strokePath(context, points, true, false);
    },
    
    renderLineEdge: function tab_CanvasRenderer$renderLineEdge(x0, x1, y0, y1, width0, width1, haloColor, strokeWidth) {
        var context = this.get_currentContext();
        context.set_linePattern('solid');
        context.set_lineWidth(strokeWidth);
        context.set_strokeStyle(haloColor);
        var angle = Math.atan2(y1 - y0, x1 - x0);
        var cosAngle = Math.cos(angle);
        var sinAngle = Math.sin(angle);
        width0 /= 2;
        width1 /= 2;
        var width0sinAngle = width0 * sinAngle;
        var width1sinAngle = width1 * sinAngle;
        var width0cosAngle = width0 * cosAngle;
        var width1cosAngle = width1 * cosAngle;
        context.beginPath();
        context.moveTo(x0 + width0sinAngle, y0 - width0cosAngle);
        context.lineTo(x1 + width1sinAngle, y1 - width1cosAngle);
        context.lineTo(x1 - width1sinAngle, y1 + width1cosAngle);
        context.lineTo(x0 - width0sinAngle, y0 + width0cosAngle);
        context.closePath();
        context.stroke();
    },
    
    renderFilledLineEdge: function tab_CanvasRenderer$renderFilledLineEdge(x0, x1, y0, y1, width0, width1, color0, color1) {
        var finalColor;
        var context = this.get_currentContext();
        if (color0 === color1) {
            finalColor = color0;
        }
        else {
            var colorGrad = context.createLinearGradient(x0, y0, x1, y1);
            colorGrad.addColorStop(0, color0);
            colorGrad.addColorStop(1, color1);
            finalColor = colorGrad;
        }
        if (width0 === width1) {
            context.set_lineWidth(width0);
            context.set_linePattern('solid');
            context.set_strokeStyle(finalColor);
            context.beginPath();
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
            context.closePath();
            context.stroke();
        }
        else {
            var angle = Math.atan2(y1 - y0, x1 - x0);
            var cosAngle = Math.cos(angle);
            var sinAngle = Math.sin(angle);
            width0 /= 2;
            width1 /= 2;
            var width0sinAngle = width0 * sinAngle;
            var width1sinAngle = width1 * sinAngle;
            var width0cosAngle = width0 * cosAngle;
            var width1cosAngle = width1 * cosAngle;
            context.beginPath();
            context.moveTo(x0 + width0sinAngle, y0 - width0cosAngle);
            context.lineTo(x1 + width1sinAngle, y1 - width1cosAngle);
            context.lineTo(x1 - width1sinAngle, y1 + width1cosAngle);
            context.lineTo(x0 - width0sinAngle, y0 + width0cosAngle);
            context.closePath();
            context.set_shapeFillStyle(finalColor);
            context.fill();
        }
    },
    
    renderPolygon: function tab_CanvasRenderer$renderPolygon(points, strokeWidth, color) {
        var context = this.get_currentContext();
        context.set_lineWidth(strokeWidth);
        context.set_strokeStyle(color);
        tab.CanvasRenderer.strokePath(context, points, true, true);
    },
    
    renderFilledPolygon: function tab_CanvasRenderer$renderFilledPolygon(points, color) {
        var context = this.get_currentContext();
        context.set_shapeFillStyle(color);
        tab.CanvasRenderer.fillPath(context, points, true);
    },
    
    setupContextForTextRendering: function tab_CanvasRenderer$setupContextForTextRendering(paneDrawInfo) {
        var commonColor = 'black';
        if (ss.isValue(paneDrawInfo.get_textStyleColumns()) && Object.keyExists(paneDrawInfo.get_textStyleColumns(), 'text_style_color')) {
            commonColor = paneDrawInfo._getTextStyleColor(0, -1, 'colorOverrideNone');
        }
        this.get_currentContext().set_shapeFillStyle(commonColor);
        var styleSetter = this.createStyleSettersAndSetDominantStyle(paneDrawInfo.get_textStyleColumns());
        return styleSetter;
    },
    
    createStyleSettersAndSetDominantStyle: function tab_CanvasRenderer$createStyleSettersAndSetDominantStyle(styleDict) {
        if (ss.isNullOrUndefined(styleDict)) {
            return function(styleNum) {
            };
        }
        var stylesDifferForValue = [];
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(styleDict));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            var styleValues = styleDict[key];
            var allSame = true;
            var refValue = styleValues[0];
            for (var ii = 1; ii < styleValues.length && allSame; ++ii) {
                if (refValue !== styleValues[ii]) {
                    allSame = false;
                }
            }
            if (allSame) {
                this.setTextStyleProprty(key, refValue);
            }
            else {
                stylesDifferForValue.add(key);
            }
        }
        stylesDifferForValue.remove('text_style_color');
        var toRet = ss.Delegate.create(this, function(styleNum) {
            var $enum1 = ss.IEnumerator.getEnumerator(stylesDifferForValue);
            while ($enum1.moveNext()) {
                var styleKey = $enum1.current;
                var styleColumn = styleDict[styleKey];
                this.setTextStyleProprty(styleKey, styleColumn[styleNum]);
            }
        });
        return toRet;
    },
    
    setTextStyleProprty: function tab_CanvasRenderer$setTextStyleProprty(styleKey, styleVal) {
        switch (styleKey) {
            case 'font':
                this.get_currentContext().set_font(styleVal);
                break;
            case 'text_orientation':
                this.get_currentContext().set_textAngle(styleVal);
                break;
            case 'text_alignment':
                this.get_currentContext().set_textAlign(styleVal);
                break;
            case 'alpha':
            case 'text_style_color':
                break;
            case 'text_decoration':
                this.get_currentContext().set_shouldUnderlineText(styleVal);
                break;
            default:
                ss.Debug.fail('Unknown text style setting ' + styleKey);
                break;
        }
    },
    
    renderText: function tab_CanvasRenderer$renderText(text, x, y, maxWidth, color, multiRunText) {
        if (multiRunText && ss.isValue(this._prevTextInfo) && this._prevTextInfo._alignsWith(x, y)) {
            var drawPoint = this._prevTextInfo._getNewPosition(x, y);
            x = drawPoint.x;
            y = drawPoint.y;
        }
        else {
            this.clearPrevTextRunInfo();
        }
        if (ss.isValue(color)) {
            this.get_currentContext().set_textFillStyle(color);
        }
        if (maxWidth > 0) {
            if (!multiRunText) {
                text = text.trimEnd();
            }
            this.get_currentContext().fillText2(text, x, y, maxWidth);
        }
        else {
            this.get_currentContext().fillText1(text, x, y);
        }
        if (multiRunText) {
            var width = this.get_currentContext().measureText(text).width;
            var endAligned = this.get_currentContext().get_textAlign() === 'end';
            var textAngle = this.get_currentContext().get_textAngle();
            var orientation;
            if (textAngle > 1) {
                orientation = 'down';
            }
            else if (textAngle < -1) {
                orientation = 'up';
            }
            else {
                orientation = 'horizontal';
            }
            this._prevTextInfo = new tab._textRunLayoutInfo(x, y, width, endAligned, orientation);
        }
        else {
            this.clearPrevTextRunInfo();
        }
    },
    
    clearPrevTextRunInfo: function tab_CanvasRenderer$clearPrevTextRunInfo() {
        this._prevTextInfo = null;
    },
    
    strokeCurrentPath: function tab_CanvasRenderer$strokeCurrentPath(strokeWidth, color) {
        var ctx = this.get_currentContext();
        ctx.set_lineWidth(strokeWidth);
        ctx.set_strokeStyle(color);
        ctx.stroke();
    },
    
    fillCurrentPath: function tab_CanvasRenderer$fillCurrentPath(color) {
        var ctx = this.get_currentContext();
        ctx.set_shapeFillStyle(color);
        ctx.fill();
    },
    
    clipRect: function tab_CanvasRenderer$clipRect(cellClipCase, x, y, width, height) {
        var BIG_VAL = 100000;
        switch (cellClipCase) {
            case 0:
                return;
            case 1:
                y = -BIG_VAL;
                height = 2 * BIG_VAL;
                break;
            case 2:
                x = -BIG_VAL;
                width = 2 * BIG_VAL;
                break;
        }
        var yAndHeight = tab.CanvasRenderer.roundStartAndExtent(y, height, 0);
        var xAndWidth = tab.CanvasRenderer.roundStartAndExtent(x, width, 0);
        this.get_currentContext().setClip(tab.$create_RectXY(parseInt(xAndWidth.first), parseInt(yAndHeight.first), parseInt(xAndWidth.second), parseInt(yAndHeight.second)));
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._textRunLayoutInfo

tab._textRunLayoutInfo = function tab__textRunLayoutInfo(x, y, width, endAligned, orientation) {
    this._x = x;
    this._y = y;
    this._width = width;
    this._isEndAligned = endAligned;
    this._orientation = orientation;
}
tab._textRunLayoutInfo.prototype = {
    _x: 0,
    _y: 0,
    _width: 0,
    _isEndAligned: false,
    _orientation: null,
    
    _alignsWith: function tab__textRunLayoutInfo$_alignsWith(x, y) {
        var toRet;
        if (this._orientation === 'horizontal') {
            toRet = Math.round(this._y) === Math.round(y);
        }
        else {
            toRet = Math.round(this._x) === Math.round(x);
        }
        return toRet;
    },
    
    _getNewPosition: function tab__textRunLayoutInfo$_getNewPosition(newX, newY) {
        var widthOffset = this._width;
        var x = newX;
        var y = newY;
        switch (this._orientation) {
            case 'horizontal':
                if (this._isEndAligned) {
                    widthOffset = -widthOffset;
                }
                x = this._x + widthOffset;
                break;
            case 'up':
                if (!this._isEndAligned) {
                    widthOffset = -widthOffset;
                }
                y = this._y + widthOffset;
                break;
            case 'down':
                if (this._isEndAligned) {
                    widthOffset = -widthOffset;
                }
                y = this._y + widthOffset;
                break;
            default:
                ss.Debug.fail('Unknown orientation' + this._orientation);
                break;
        }
        return tab.$create_PointF(x, y);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DisplayList2DRenderer

tab.DisplayList2DRenderer = function tab_DisplayList2DRenderer(canvas, context) {
    tab.DisplayList2DRenderer.initializeBase(this, [ canvas, context ]);
}
tab.DisplayList2DRenderer.setTextProperties = function tab_DisplayList2DRenderer$setTextProperties(context, textStyle, fontSize) {
    context.set_textFillStyle(textStyle.color);
    var fontDescription = new ss.StringBuilder();
    if (textStyle.fontStyle === 'font-style-italic') {
        fontDescription.append('italic ');
    }
    if (textStyle.fontWeight === 'font-weight-bold') {
        fontDescription.append('bold ');
    }
    if (ss.isValue(textStyle.textDecoration) && textStyle.textDecoration === 'text-decoration-underline') {
        context.set_shouldUnderlineText(true);
    }
    ss.Debug.assert(ss.isNullOrUndefined(textStyle.textDecoration) || textStyle.textDecoration === 'text-decoration-none' || textStyle.textDecoration === 'text-decoration-underline', 'Canvas does not support decorations (though we kind of support underline)');
    if (ss.isNullOrUndefined(fontSize) || fontSize <= 0) {
        fontSize = textStyle.fontSize;
    }
    fontDescription.append(fontSize + 'pt ' + textStyle.fontName);
    context.set_font(fontDescription.toString());
    context.set_textBaseline(tab.FormattingConverters._getTextBaseline(textStyle.valign));
}
tab.DisplayList2DRenderer._applyDrawTextProps$1 = function tab_DisplayList2DRenderer$_applyDrawTextProps$1(context, item) {
    var textProperties = item;
    context.set_textFillStyle(tab.ColorModel.convertColorForCanvas(textProperties.color));
    if (ss.isValue(textProperties.angle)) {
        var angleInRad = textProperties.angle * Math.PI / 180;
        context.set_textAngle(angleInRad);
    }
    else {
        context.set_textAngle(0);
    }
    var fontDescription = new ss.StringBuilder();
    if (textProperties.isItalics) {
        fontDescription.append('italic ');
    }
    if (textProperties.isBold) {
        fontDescription.append('bold ');
    }
    if (textProperties.isStrikeThrough) {
    }
    var textAlign = tab.TabRenderContext2D.defaultTextAlign;
    if (context.get_isTextAngleHorizontal()) {
        var horizAlign = (textProperties.horizontalLabelAlignment || 'h-align-left');
        if (horizAlign === 'h-align-right') {
            textAlign = 'end';
        }
    }
    else {
        var vertAlign = (textProperties.verticalLabelAlignment || 'v-align-top');
        if ((context.get_textAngle() < 0 && vertAlign === 'v-align-top') || (context.get_textAngle() > 0 && vertAlign === 'v-align-bottom')) {
            textAlign = 'end';
        }
    }
    context.set_textAlign(textAlign);
    context.set_shouldUnderlineText((textProperties.isUnderlined || false));
    var fontName = (textProperties.fontName || 'Arial');
    var fontSize = (textProperties.pointSize || 8);
    fontDescription.append(fontSize + 'pt ' + fontName);
    context.set_font(fontDescription.toString());
}
tab.DisplayList2DRenderer._drawEllipse$1 = function tab_DisplayList2DRenderer$_drawEllipse$1(context, item, shouldFill) {
    ss.Debug.assert(item.type === 'draw-fill-ellipse' || item.type === 'draw-ellipse', 'This method assumes we are drawing an ellipse');
    var drawPoints = item;
    if (drawPoints.points.length !== 4) {
        return;
    }
    var width = drawPoints.points[2] - drawPoints.points[0];
    var height = drawPoints.points[3] - drawPoints.points[1];
    var centerX = drawPoints.points[0] + (width / 2);
    var centerY = drawPoints.points[1] + (height / 2);
    var radius = ((width < height) ? width : height) / 2;
    var scaleX = (width < height) ? 1 : width / height;
    var scaleY = (height < width) ? 1 : height / width;
    context.save();
    context.beginPath();
    context.translate(centerX, centerY);
    context.scale(scaleX, scaleY);
    context.arc(0, 0, radius, 0, tab.CanvasRenderer.twoPI, false);
    context.closePath();
    if (shouldFill) {
        context.fill();
    }
    else {
        context.stroke();
    }
    context.restore();
}
tab.DisplayList2DRenderer._drawPath$1 = function tab_DisplayList2DRenderer$_drawPath$1(context, drawPathPM, fill) {
    var points = drawPathPM.pointsF;
    if (!fill && Math.round(context.get_lineWidth()) % 2 === 1) {
        points = points.clone();
        for (var ii = 0, len = points.length; ii < len; ++ii) {
            points[ii] += 0.5;
        }
    }
    var instructions = drawPathPM.pathElements;
    var numPoints = Math.floor(points.length / 2);
    if (numPoints < 2) {
        return;
    }
    var originalLineCap = context.get_lineCap();
    if (context.get_linePattern() !== 'solid') {
        context.set_lineCap('butt');
    }
    context.beginPath();
    var pc = 0;
    var $enum1 = ss.IEnumerator.getEnumerator(instructions);
    while ($enum1.moveNext()) {
        var instruction = $enum1.current;
        switch (instruction) {
            case 'moveto':
                context.moveTo(points[pc], points[pc + 1]);
                pc += 2;
                break;
            case 'lineto':
                context.lineTo(points[pc], points[pc + 1]);
                pc += 2;
                break;
            case 'curveto':
                context.bezierCurveTo(points[pc], points[pc + 1], points[pc + 2], points[pc + 3], points[pc + 4], points[pc + 5]);
                pc += 6;
                break;
            default:
                ss.Debug.fail('Unknown path instruction: ' + instruction);
                break;
        }
    }
    if (fill) {
        context.fill();
    }
    else {
        context.stroke();
    }
    context.set_lineCap(originalLineCap);
}
tab.DisplayList2DRenderer._isPropertyItem$1 = function tab_DisplayList2DRenderer$_isPropertyItem$1(item) {
    switch (item.type) {
        case 'draw-pen':
        case 'draw-solid-brush':
        case 'draw-gradient-brush':
        case 'clip-rect':
        case 'draw-text-props':
        case 'transform':
        case 'transform-pop':
        case 'transform-push':
        case 'draw-antialias':
            return true;
    }
    return false;
}
tab.DisplayList2DRenderer._modifyDrawItemOrderForRightAlignedText$1 = function tab_DisplayList2DRenderer$_modifyDrawItemOrderForRightAlignedText$1(drawItems, isAnnotationPart) {
    if (!isAnnotationPart) {
        return drawItems;
    }
    var rightTextInfo = tab.DisplayList2DRenderer._getAnnotationMultipleRightAlignedTextRunInfo$1(drawItems);
    if (!rightTextInfo.length) {
        return drawItems;
    }
    var toRet = drawItems.clone();
    var swapArrayVals = function(p1, p2) {
        var temp = toRet[p1];
        toRet[p1] = toRet[p2];
        toRet[p2] = temp;
    };
    var $enum1 = ss.IEnumerator.getEnumerator(rightTextInfo);
    while ($enum1.moveNext()) {
        var line = $enum1.current;
        for (var runNum = 0; runNum < line.length / 2; ++runNum) {
            var otherRunNum = line.length - 1 - runNum;
            swapArrayVals(line[runNum].first, line[otherRunNum].first);
            swapArrayVals(line[runNum].second, line[otherRunNum].second);
        }
    }
    return toRet;
}
tab.DisplayList2DRenderer._getAnnotationMultipleRightAlignedTextRunInfo$1 = function tab_DisplayList2DRenderer$_getAnnotationMultipleRightAlignedTextRunInfo$1(drawItems) {
    var lineRunPositions = [];
    var prevYPos = -99999999;
    var rightAligned = false;
    var textPropsIndex = -1;
    var curLine = [];
    for (var ii = 0; ii < drawItems.length; ii++) {
        var drawItem = drawItems[ii];
        if (drawItem.type === 'draw-text-props') {
            var textPropsItem = drawItem;
            rightAligned = ss.isValue(textPropsItem.horizontalLabelAlignment) && textPropsItem.horizontalLabelAlignment === 'h-align-right';
            textPropsIndex = ii;
        }
        else if (rightAligned && drawItem.type === 'draw-text') {
            var textItem = drawItem;
            var yPos = textItem.points[1];
            if (yPos !== prevYPos) {
                if (curLine.length >= 2) {
                    lineRunPositions.push(curLine);
                }
                curLine = [];
            }
            curLine.push(new ss.Tuple(textPropsIndex, ii));
            prevYPos = yPos;
        }
    }
    if (curLine.length >= 2) {
        lineRunPositions.push(curLine);
    }
    return lineRunPositions;
}
tab.DisplayList2DRenderer.prototype = {
    
    renderVisualListHelper: function tab_DisplayList2DRenderer$renderVisualListHelper(vlvm, imageDict) {
        var items = vlvm.get_visualListPM().drawItems;
        this.renderDrawItems(items, vlvm, imageDict, null);
    },
    
    renderDrawItems: function tab_DisplayList2DRenderer$renderDrawItems(items, vlvm, imageDict, mapClipRect) {
        var context = this.get_currentContext();
        var originalNumSavedStates = context.get_numberSavedStates();
        var MaxItemstoCheckForTranslate = 4;
        for (var ii = 0; ii < items.length; ++ii) {
            var item = items[ii];
            if (true && ii < MaxItemstoCheckForTranslate && item.type === 'transform') {
            }
            else if (item.type === 'draw-group') {
                var drawGroup = item;
                this._drawGroup$1(vlvm, drawGroup, imageDict, mapClipRect);
            }
            else {
                this._renderDrawItem$1(context, item, imageDict, null, mapClipRect, false);
            }
        }
        while (context.get_numberSavedStates() > originalNumSavedStates) {
            context.restore();
        }
    },
    
    renderVisualList: function tab_DisplayList2DRenderer$renderVisualList(vlvm, imageDict) {
        if (ss.isValue(vlvm.get_defaultBackgroundColor())) {
            this.get_currentContext().set_shapeFillStyle(vlvm.get_defaultBackgroundColor());
            this.get_currentContext().fillRect(this.get_visibleRect().x, this.get_visibleRect().y, this.get_visibleRect().w, this.get_visibleRect().h);
        }
        this.renderVisualListHelper(vlvm, imageDict);
    },
    
    renderDrawItemList: function tab_DisplayList2DRenderer$renderDrawItemList(items) {
        this.renderDrawItems(items, null, null, null);
    },
    
    _renderCanvasBorders: function tab_DisplayList2DRenderer$_renderCanvasBorders(vlvm) {
        var visualPart = vlvm.get_visualListPM().visualPart;
        var $enum1 = ss.IEnumerator.getEnumerator(vlvm.get_visualListPM().drawItems);
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            if (item.type === 'draw-pen' || (item.type === 'draw-solid-brush')) {
                this.renderDrawItemDefaultOptions(this.get_currentContext(), item);
            }
            else if (item.type === 'draw-polyline') {
                var canvasWidth = this.get_currentCanvas().width;
                var canvasHeight = this.get_currentCanvas().height;
                var drawPoints = item;
                var points = drawPoints.points;
                if (tab.DisplayList2DRenderer._scrollableXParts$1.contains(visualPart)) {
                    if (Math.abs(points[3] - points[1]) >= canvasHeight) {
                        var newItem = {};
                        newItem.type = item.type;
                        newItem.points = [ 0, 0, 0, canvasHeight ];
                        this.renderDrawItemDefaultOptions(this.get_currentContext(), newItem);
                        newItem.points[0] += canvasWidth - 1;
                        newItem.points[2] += canvasWidth - 1;
                        this.renderDrawItemDefaultOptions(this.get_currentContext(), newItem);
                        return;
                    }
                }
                else if (tab.DisplayList2DRenderer._scrollableYParts$1.contains(visualPart)) {
                    if (Math.abs(points[2] - points[0]) >= this.get_currentCanvas().width) {
                        var newItem = {};
                        newItem.type = item.type;
                        newItem.points = [ 0, 0, canvasWidth, 0 ];
                        this.renderDrawItemDefaultOptions(this.get_currentContext(), newItem);
                        newItem.points[1] += canvasHeight - 1;
                        newItem.points[3] += canvasHeight - 1;
                        this.renderDrawItemDefaultOptions(this.get_currentContext(), newItem);
                        return;
                    }
                }
            }
        }
    },
    
    renderDrawItemDefaultOptions: function tab_DisplayList2DRenderer$renderDrawItemDefaultOptions(context, item) {
        this._renderDrawItem$1(context, item, null, null, null, false);
    },
    
    _renderDrawItem$1: function tab_DisplayList2DRenderer$_renderDrawItem$1(context, item, imageDict, enclosingRect, mapClipRect, alignNeighboringTextRuns) {
        if (!ss.isValue(context) || !ss.isValue(item)) {
            return;
        }
        switch (item.type) {
            case 'draw-pen':
                var drawPen = item;
                context.set_lineJoin((ss.isValue(drawPen.lineJoin)) ? tab.CanvasRenderer.toCanvasLineJoin(drawPen.lineJoin) : tab.TabRenderContext2D.defaultLineJoin);
                context.set_lineCap((ss.isValue(drawPen.lineCap)) ? tab.CanvasRenderer.toCanvasLineCap(drawPen.lineCap) : tab.TabRenderContext2D.defaultLineCap);
                context.set_linePattern((drawPen.linePattern || tab.TabRenderContext2D.defaultLinePattern));
                context.set_strokeStyle((tab.ColorModel.convertColorForCanvas(drawPen.color) || 'rgb(0,0,0)'));
                context.set_lineWidth((drawPen.strokeWidth || 1));
                break;
            case 'draw-solid-brush':
                var drawSolidBrush = item;
                context.set_shapeFillStyle(tab.ColorModel.convertColorForCanvas(drawSolidBrush.color));
                break;
            case 'draw-gradient-brush':
                var drawGradientBrush = item;
                var p1 = drawGradientBrush.pt1;
                var p2 = drawGradientBrush.pt2;
                var colorGrad = context.createLinearGradient(p1.x, p1.y, p2.x, p2.y);
                colorGrad.addColorStop(0, tab.ColorModel.convertColorForCanvas(drawGradientBrush.color1));
                colorGrad.addColorStop(1, tab.ColorModel.convertColorForCanvas(drawGradientBrush.color2));
                context.set_shapeFillStyle(colorGrad);
                break;
            case 'draw-rect':
                var drawPoints = item;
                if (drawPoints.points.length !== 4) {
                    ss.Debug.fail('the draw item for a rectangle should always specify 4 values.');
                    return;
                }
                var rect = tab.DisplayList2DUtils.rectXYFromDrawRect(drawPoints.points);
                context.strokeRect(rect.x, rect.y, rect.w, rect.h);
                break;
            case 'draw-fill-rect':
                var drawPoints = item;
                if (drawPoints.points.length !== 4) {
                    ss.Debug.fail('the draw item for a rectangle should always specify 4 values.');
                    return;
                }
                var rect = tab.DisplayList2DUtils.rectXYFromDrawRect(drawPoints.points);
                context.fillRect(rect.x, rect.y, rect.w, rect.h);
                break;
            case 'draw-ellipse':
                tab.DisplayList2DRenderer._drawEllipse$1(context, item, false);
                break;
            case 'draw-fill-ellipse':
                tab.DisplayList2DRenderer._drawEllipse$1(context, item, true);
                break;
            case 'draw-polyline':
                var drawPoints = item;
                var points = drawPoints.points;
                tab.CanvasRenderer.strokePath(context, points, false, true);
                break;
            case 'draw-polygon':
                var drawPoints = item;
                tab.CanvasRenderer.strokePath(context, drawPoints.points, true, true);
                break;
            case 'draw-fill-polygon':
                var drawPoints = item;
                tab.CanvasRenderer.fillPath(context, drawPoints.points, true);
                break;
            case 'draw-fill-path':
                tab.DisplayList2DRenderer._drawPath$1(context, item, true);
                break;
            case 'draw-path':
                tab.DisplayList2DRenderer._drawPath$1(context, item, false);
                break;
            case 'clip-rect':
                var drawPoints = item;
                ss.Debug.assert(drawPoints.points.length === 4, 'the draw item for a clip-rect should always specify 4 values.');
                if (drawPoints.points.length === 4) {
                    if (true && drawPoints.points[2] - drawPoints.points[0] === 2) {
                        break;
                    }
                    context.setClip(tab.$create_RectXY(drawPoints.points[0], drawPoints.points[1], drawPoints.points[2] - drawPoints.points[0], drawPoints.points[3] - drawPoints.points[1]));
                }
                break;
            case 'draw-text':
                var drawText = item;
                if (drawText.points.length !== 2) {
                    ss.Debug.fail('the draw item for a text should always specify a point with 2 values');
                    return;
                }
                var xPos = drawText.points[0];
                var yPos = drawText.points[1];
                var maxTextWidth = -1;
                if (ss.isValue(enclosingRect) && !!enclosingRect.w && !!enclosingRect.h) {
                    var textStartPos;
                    var rectExtent;
                    if (context.get_isTextAngleHorizontal()) {
                        textStartPos = (enclosingRect.x > xPos) ? xPos : xPos - enclosingRect.x;
                        rectExtent = enclosingRect.w;
                    }
                    else {
                        textStartPos = (enclosingRect.y > yPos) ? yPos : yPos - enclosingRect.y;
                        rectExtent = enclosingRect.h;
                    }
                    maxTextWidth = Math.max(textStartPos, rectExtent - textStartPos);
                }
                this.renderText(drawText.text, xPos, yPos, maxTextWidth, null, alignNeighboringTextRuns);
                break;
            case 'draw-text-props':
                tab.DisplayList2DRenderer._applyDrawTextProps$1(context, item);
                break;
            case 'transform':
                var transformProperties = item;
                if (ss.isValue(transformProperties.transformOffset) && transformProperties.transformOffset.length === 2) {
                    context.translate(transformProperties.transformOffset[0], transformProperties.transformOffset[1]);
                }
                if (ss.isValue(transformProperties.transformScale) && transformProperties.transformScale.length === 2) {
                    context.scale(transformProperties.transformScale[0], transformProperties.transformScale[1]);
                }
                if (ss.isValue(transformProperties.transformAngle)) {
                    context.rotate(transformProperties.transformAngle * Math.PI / 180);
                }
                break;
            case 'transform-pop':
                var oldStateToPreserve = new tab._contextStatePreserver(context);
                context.restore();
                oldStateToPreserve._resetState(context);
                break;
            case 'transform-push':
                context.save();
                break;
            case 'draw-antialias':
                var antialias = item;
                context.set_shouldAntialias(antialias.state);
                break;
            case 'draw-image':
                var imagePM = item;
                if (ss.isValue(imageDict) && Object.keyExists(imageDict, imagePM.imageHash)) {
                    var imgData = imageDict[imagePM.imageHash];
                    if (ss.isValue(imgData) && imgData.complete) {
                        context.save();
                        if (ss.isValue(mapClipRect)) {
                            context.setClip(mapClipRect);
                        }
                        context.set_alpha(imagePM.alpha);
                        context.drawImage4(imgData, imagePM.destBox[0], imagePM.destBox[1], imagePM.destBox[2] - imagePM.destBox[0], imagePM.destBox[3] - imagePM.destBox[1]);
                        context.restore();
                    }
                }
                else {
                    tab.Log.get(context).debug("Couldn't find image dict entry when requested for hash %s", imagePM.imageHash);
                }
                break;
            default:
                ss.Debug.fail('Unknown display list directive: ' + item.type);
                break;
        }
    },
    
    _drawGroup$1: function tab_DisplayList2DRenderer$_drawGroup$1(vlvm, drawGroup, imageDict, mapClipRect) {
        var isAnnotationsPart = ss.isValue(vlvm) && vlvm.get_visualListPM().visualPart === 'annotations';
        this.clearPrevTextRunInfo();
        var context = this.get_currentContext();
        var skipDrawItems = false;
        drawGroup.extentsX = (drawGroup.extentsX || 0);
        drawGroup.extentsY = (drawGroup.extentsY || 0);
        drawGroup.extentsWidth = (drawGroup.extentsWidth || 0);
        drawGroup.extentsHeight = (drawGroup.extentsHeight || 0);
        var extentsXY = tab.$create_RectXY(drawGroup.extentsX, drawGroup.extentsY, drawGroup.extentsWidth, drawGroup.extentsHeight);
        var dirtyRect = tab.RectXYUtil.offsetRect(context.get_dirtyRect(), this.get_renderOffset());
        if (drawGroup.extentsWidth > 0 && drawGroup.extentsHeight > 0 && (!this.isRectVisible(extentsXY) || !tab.RectXYUtil.intersectsWith(dirtyRect, extentsXY))) {
            skipDrawItems = true;
        }
        var statePreserver = this._preserveGroupState$1(vlvm, drawGroup, skipDrawItems);
        var drawItems = tab.DisplayList2DRenderer._modifyDrawItemOrderForRightAlignedText$1(drawGroup.drawItems, isAnnotationsPart);
        if (statePreserver.get_state() === 'hover') {
            var renderOffset = this.get_renderOffset();
            var offset = tab.$create_Point((drawGroup.offsetX || 0) - renderOffset.x, (drawGroup.offsetY || 0) - renderOffset.y);
            var topLeft = tab.$create_Point(drawGroup.extentsX - offset.x, drawGroup.extentsY - offset.y);
            var drawRect = {};
            drawRect.points = [ topLeft.x, topLeft.y, topLeft.x + drawGroup.extentsWidth, topLeft.y + drawGroup.extentsHeight ];
            drawRect.type = 'draw-fill-rect';
            this._renderDrawItem$1(context, drawRect, imageDict, extentsXY, mapClipRect, isAnnotationsPart);
        }
        var isSelectedOrHighlighted = statePreserver.get_state() === 'selected' || statePreserver.get_state() === 'highlighted';
        var $enum1 = ss.IEnumerator.getEnumerator(drawItems);
        while ($enum1.moveNext()) {
            var groupSubItem = $enum1.current;
            if (statePreserver.get_state() !== 'normal' && groupSubItem.type === 'draw-solid-brush') {
                var drawSolidBrush = groupSubItem;
                statePreserver.shapeFillStyle = tab.ColorModel.convertColorForCanvas(drawSolidBrush.color);
            }
            else {
                var tempFilledTextStyle = null;
                if (isSelectedOrHighlighted && groupSubItem.type === 'draw-text-props') {
                    var textProperties = groupSubItem;
                    statePreserver.textFillStyle = tab.ColorModel.convertColorForCanvas(textProperties.color);
                    tempFilledTextStyle = context.get_textFillStyle();
                }
                if (!skipDrawItems || tab.DisplayList2DRenderer._isPropertyItem$1(groupSubItem)) {
                    this._renderDrawItem$1(context, groupSubItem, imageDict, extentsXY, mapClipRect, isAnnotationsPart);
                }
                if (tempFilledTextStyle != null) {
                    context.set_textFillStyle(tempFilledTextStyle);
                }
            }
        }
        if (statePreserver.get_state() !== 'normal') {
            context.set_shapeFillStyle(statePreserver.shapeFillStyle);
            if (isSelectedOrHighlighted) {
                context.set_textFillStyle(statePreserver.textFillStyle);
            }
        }
    },
    
    _preserveGroupState$1: function tab_DisplayList2DRenderer$_preserveGroupState$1(vlvm, drawGroup, skipDrawItems) {
        var state = 'normal';
        if (!skipDrawItems && ss.isValue(vlvm)) {
            if (vlvm.isSelected(drawGroup)) {
                state = 'selected';
            }
            else if (vlvm.isBrushed(drawGroup)) {
                state = 'highlighted';
            }
            else if (vlvm.isHovered(drawGroup)) {
                state = 'hover';
            }
        }
        var statePreserver = new tab._groupStatePreserver(state);
        if (state === 'normal') {
            return statePreserver;
        }
        var context = this.get_currentContext();
        statePreserver.shapeFillStyle = context.get_shapeFillStyle();
        statePreserver.textFillStyle = context.get_textFillStyle();
        switch (state) {
            case 'selected':
                context.set_textFillStyle('rgb(255,255,255)');
                context.set_shapeFillStyle('rgb(46,106,197)');
                break;
            case 'highlighted':
                context.set_textFillStyle('rgb(0,0,0)');
                context.set_shapeFillStyle('rgb(255,255,204)');
                break;
            case 'hover':
                context.set_shapeFillStyle('rgb(239,239,239)');
                break;
        }
        if (state === 'selected' || state === 'highlighted') {
            var accountForDrawGroupExtentsOffset = ss.isValue(drawGroup.offsetX) || ss.isValue(drawGroup.offsetY);
            if (accountForDrawGroupExtentsOffset) {
                drawGroup.offsetX = (drawGroup.offsetX || 0);
                drawGroup.offsetY = (drawGroup.offsetY || 0);
                context.translate(-drawGroup.offsetX, -drawGroup.offsetY);
            }
            context.fillRect(drawGroup.extentsX, drawGroup.extentsY, drawGroup.extentsWidth, drawGroup.extentsHeight);
            if (accountForDrawGroupExtentsOffset) {
                context.translate(drawGroup.offsetX, drawGroup.offsetY);
            }
        }
        return statePreserver;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._groupStatePreserver

tab._groupStatePreserver = function tab__groupStatePreserver(state) {
    this._state = state;
}
tab._groupStatePreserver.prototype = {
    shapeFillStyle: null,
    textFillStyle: null,
    _state: null,
    
    get_state: function tab__groupStatePreserver$get_state() {
        return this._state;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._contextStatePreserver

tab._contextStatePreserver = function tab__contextStatePreserver(context) {
    this._alpha = context.get_alpha();
    this._lineJoin = context.get_lineJoin();
    this._lineCap = context.get_lineCap();
    this._linePattern = context.get_linePattern();
    this._strokeStyle = context.get_strokeStyle();
    this._lineWidth = context.get_lineWidth();
    this._textAngle = context.get_textAngle();
    this._font = context.get_font();
    this._shapeFillStyle = context.get_shapeFillStyle();
    this._textFillStyle = context.get_textFillStyle();
    this._textAlign = context.get_textAlign();
}
tab._contextStatePreserver.prototype = {
    _alpha: 0,
    _lineWidth: 0,
    _linePattern: null,
    _lineJoin: null,
    _lineCap: null,
    _strokeStyle: null,
    _shapeFillStyle: null,
    _textFillStyle: null,
    _textAngle: 0,
    _font: null,
    _textAlign: null,
    
    _resetState: function tab__contextStatePreserver$_resetState(context) {
        context.set_alpha(this._alpha);
        context.set_lineJoin(this._lineJoin);
        context.set_lineCap(this._lineCap);
        context.set_linePattern(this._linePattern);
        context.set_strokeStyle(this._strokeStyle);
        context.set_lineWidth(this._lineWidth);
        context.set_textAngle(this._textAngle);
        context.set_font(this._font);
        context.set_shapeFillStyle(this._shapeFillStyle);
        context.set_textFillStyle(this._textFillStyle);
        context.set_textAlign(this._textAlign);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FontNormalizer

tab.FontNormalizer = function tab_FontNormalizer() {
    this.normalizeFont = (tab.BrowserSupport.get_isIE()) ? tab.FontNormalizer._ieFontNormalizer : tab.FontNormalizer._noOpFontNormalizer;
}
tab.FontNormalizer.instance = function tab_FontNormalizer$instance() {
    if (tab.FontNormalizer._instance == null) {
        tab.FontNormalizer._instance = new tab.FontNormalizer();
        tab.FontNormalizer._initializeFontMap();
    }
    return tab.FontNormalizer._instance;
}
tab.FontNormalizer._ieFontNormalizer = function tab_FontNormalizer$_ieFontNormalizer(font) {
    var fontParts = font.split(' ');
    var normalizedPart;
    var dirty = false;
    for (var i = 0; i < fontParts.length; ++i) {
        normalizedPart = tab.FontNormalizer._fontMap[fontParts[i]];
        if (!ss.isUndefined(normalizedPart)) {
            dirty = true;
            fontParts[i] = normalizedPart;
        }
    }
    if (dirty) {
        return fontParts.join(' ');
    }
    return font;
}
tab.FontNormalizer._noOpFontNormalizer = function tab_FontNormalizer$_noOpFontNormalizer(font) {
    return font;
}
tab.FontNormalizer._initializeFontMap = function tab_FontNormalizer$_initializeFontMap() {
    if (tab.FontNormalizer._fontMap != null) {
        return;
    }
    if (tab.BrowserSupport.get_isIE()) {
        tab.FontNormalizer._fontMap = {};
        tab.FontNormalizer._fontMap['\u83ef\u5eb7\u4e2d\u660e\u9ad4'] = 'DLCMingMedium';
        tab.FontNormalizer._fontMap['\u83ef\u5eb7\u7c97\u660e\u9ad4'] = 'DLCMingBold';
        tab.FontNormalizer._fontMap['\u7d30\u660e\u9ad4'] = 'Ming Light';
        tab.FontNormalizer._fontMap['\u65b0\u7d30\u660e\u9ad4'] = 'PMingLiU';
        tab.FontNormalizer._fontMap['\u7d30\u660e\u9ad4-ExtB'] = 'MingLiU-ExtB';
        tab.FontNormalizer._fontMap['\u65b0\u7d30\u660e\u9ad4-ExtB'] = 'PMingLiU-ExtB';
        tab.FontNormalizer._fontMap['MS\u5b8b\u4f53'] = 'MS Song';
        tab.FontNormalizer._fontMap['\u65b0\u5b8b\u4f53'] = 'NSimSun';
        tab.FontNormalizer._fontMap['\u4e2d\u6613\u5b8b\u4f53'] = 'SimSun';
        tab.FontNormalizer._fontMap['\u5b8b\u4f53'] = 'SimSun';
        tab.FontNormalizer._fontMap['\u5b8b\u4f53-18030'] = 'SimSun-18030';
        tab.FontNormalizer._fontMap['\u65b0\u5b8b\u4f53-18030'] = 'NSimSun-18030';
        tab.FontNormalizer._fontMap['\u5b8b\u4f53\u2013\u65b9\u6b63\u8d85\u5927\u5b57\u7b26\u96c6'] = 'SimSun (Founder Extended)';
        tab.FontNormalizer._fontMap['\u5b8b\u9ad4ExtA'] = 'SimSun-ExtA';
        tab.FontNormalizer._fontMap['\u5b8b\u9ad4ExtB'] = 'SimSun-ExtB';
        tab.FontNormalizer._fontMap['\u534e\u6587\u5b8b\u4f53'] = 'STSong';
        tab.FontNormalizer._fontMap['\u534e\u6587\u4e2d\u5b8b'] = 'STZhongsong';
        tab.FontNormalizer._fontMap['\uff2d\uff33'] = 'MS';
        tab.FontNormalizer._fontMap['\u660e\u671d'] = 'Mincho';
        tab.FontNormalizer._fontMap['\uff30\u660e\u671d'] = 'PMincho';
        tab.FontNormalizer._fontMap['\u5e73\u6210\u660e\u671d'] = 'Heisei Minch\u014d';
        tab.FontNormalizer._fontMap['\u30ea\u30e5\u30a6\u30df\u30f3'] = 'Ry\u00ad\u016bbund\u014d Minch\u014d';
        tab.FontNormalizer._fontMap['\u5c0f\u585a\u660e\u671d'] = 'Kozuka Minch\u014d';
        tab.FontNormalizer._fontMap['\ubc14\ud0d5'] = 'Batang';
        tab.FontNormalizer._fontMap['\ubc14\ud0d5\uccb4'] = 'BatangChe';
        tab.FontNormalizer._fontMap['\uad81\uc11c'] = 'Gungsuh';
        tab.FontNormalizer._fontMap['\uad81\uc11c\uccb4'] = 'GungsuhChe';
        tab.FontNormalizer._fontMap['\u534e\u6587\u7ec6\u9ed1'] = 'STHeiti Light';
        tab.FontNormalizer._fontMap['\u5fae\u8edf\u6b63\u9ed1\u9ad4'] = 'Microsoft JhengHei';
        tab.FontNormalizer._fontMap['\u5fae\u8f6f\u96c5\u9ed1'] = 'Microsoft YaHei';
        tab.FontNormalizer._fontMap['MS\u9ed1\u4f53'] = 'MS Hei';
        tab.FontNormalizer._fontMap['\u8499\u7eb3\u9ed1\u4f53'] = 'MHei';
        tab.FontNormalizer._fontMap['\u4e2d\u6613\u9ed1\u4f53'] = 'SimHei';
        tab.FontNormalizer._fontMap['\u30e1\u30a4\u30ea\u30aa'] = 'Meiryo';
        tab.FontNormalizer._fontMap['\u30b4\u30b7\u30c3\u30af'] = 'Gothic';
        tab.FontNormalizer._fontMap['\uff30\u30b4\u30b7\u30c3\u30af'] = 'PGothic';
        tab.FontNormalizer._fontMap['\ub3cb\uc6c0'] = 'Dotum';
        tab.FontNormalizer._fontMap['\ub3cb\uc6c0\uccb4'] = 'DotumChe';
        tab.FontNormalizer._fontMap['\uad74\ub9bc'] = 'Gulim';
        tab.FontNormalizer._fontMap['\uad74\ub9bc\uccb4'] = 'GulimChe';
        tab.FontNormalizer._fontMap['\ub9d1\uc740'] = 'Malgun';
        tab.FontNormalizer._fontMap['\uace0\ub515'] = 'Gothic';
        tab.FontNormalizer._fontMap['\uc0c8\uad74\ub9bc'] = 'New Gulim';
        tab.FontNormalizer._fontMap['\u6a19\u6977\u9ad4'] = 'KaiU';
        tab.FontNormalizer._fontMap['\u4e2d\u6613\u6977\u4f53'] = 'SimKai';
        tab.FontNormalizer._fontMap['\u6977\u4f53_GB2312'] = 'SimKai';
        tab.FontNormalizer._fontMap['\u534e\u6587\u6977\u4f53'] = 'STKaiti';
        tab.FontNormalizer._fontMap['\u4e2d\u6613\u96b6\u4e66'] = 'SimLi';
        tab.FontNormalizer._fontMap['\u96b6\u4e66'] = 'SimLi';
        tab.FontNormalizer._fontMap['\u4e2d\u6613\u4eff\u5b8b'] = 'SimFang';
        tab.FontNormalizer._fontMap['\u4eff\u5b8b'] = 'SimFang';
        tab.FontNormalizer._fontMap['\u5e7c\u5706'] = 'SimYou';
        tab.FontNormalizer._fontMap['\u534e\u6587\u884c\u6977'] = 'HuaWen Xingkai';
        tab.FontNormalizer._fontMap['\u534e\u6587\u5f69\u4e91'] = 'HuaWen CaiYun';
        tab.FontNormalizer._fontMap['\u65b9\u6b63\u8212\u4f53'] = 'FangZheng ShuTi';
        tab.FontNormalizer._fontMap['\u65b9\u6b63\u542f\u4f53'] = 'FangZheng QiTi';
        tab.FontNormalizer._fontMap['\u6c49\u4eea\u96ea\u541b\u4f53'] = 'HanYi XueJun';
        tab.FontNormalizer._fontMap['\u83ef\u5eb7\u5c11\u5973\u9ad4'] = 'HuaKang ShaoNu';
        tab.FontNormalizer._fontMap['\u83ef\u5eb7\u5a03\u5a03\u9ad4'] = 'HuaKang WuaWua';
    }
}
tab.FontNormalizer.prototype = {
    normalizeFont: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneTable2DRenderer

tab.PaneTable2DRenderer = function tab_PaneTable2DRenderer(canvas, context) {
    tab.PaneTable2DRenderer.initializeBase(this, [ canvas, context ]);
    this._displayListRenderer$1 = new tab.DisplayList2DRenderer(canvas, context);
}
tab.PaneTable2DRenderer.getMarkBoundingBox = function tab_PaneTable2DRenderer$getMarkBoundingBox(index, paneDrawInfo) {
    var bbox = tab.$create_RectXY(0, 0, 0, 0);
    if (!ss.isValue(paneDrawInfo) || index < 0) {
        return bbox;
    }
    var markType = paneDrawInfo.get_markType();
    switch (markType) {
        case 'shape':
            return tab.MarksRenderer._shapeMarkBuildMarkBound(paneDrawInfo, index);
        case 'bar':
        case 'square':
            return tab.MarksRenderer._barMarkBuildMarkBound(paneDrawInfo, index);
        case 'pie':
            return tab.MarksRenderer._getPieBoundingBox(paneDrawInfo, index);
        case 'text':
            return tab.MarksRenderer._getTextMarkBoundingBox(paneDrawInfo, index);
        case 'label':
            return tab.MarksRenderer._getMarkLabelBoundingBox(paneDrawInfo, index);
        case 'line':
            return tab.MarksRenderer._lineMarkBuildMarkBound(paneDrawInfo, index);
        case 'area':
            return tab.MarksRenderer._areaMarkBuildMarkBound(paneDrawInfo, index);
        case 'multipolygon':
            return tab.MarksRenderer._getMultipolygonBoundingBox(paneDrawInfo, index);
    }
    var x = paneDrawInfo.getMarkProperty('x', index);
    var y = paneDrawInfo.getMarkProperty('y', index);
    var width = paneDrawInfo.getMarkProperty('width', index);
    var height = paneDrawInfo.getMarkProperty('height', index);
    bbox.x = Math.floor(x - (width / 2) + 0.5);
    bbox.y = Math.floor(y - (height / 2) + 0.5);
    bbox.w = Math.ceil(width);
    bbox.h = Math.ceil(height);
    return bbox;
}
tab.PaneTable2DRenderer.renderHoverOverlay = function tab_PaneTable2DRenderer$renderHoverOverlay(tupleId, pdInfo, overlayCanvas) {
    if (ss.isNullOrUndefined(overlayCanvas) || ss.isNullOrUndefined(pdInfo)) {
        return;
    }
    var mc = tabBootstrap.MetricsController.get_instance().createContext('RenderHoverOverlay', tabBootstrap.MetricsSuites.debug);
    var markIndex = pdInfo.getMarkIndexFromTupleID(tupleId);
    var shouldShowOverlay = !!tab.FeatureParamsLookup.getBool(tab.FeatureParam.responsiveUi);
    switch (pdInfo.get_markType()) {
        case 'area':
            tab.MarksRenderer._renderAreaMarkHoverOverlayImage(overlayCanvas, pdInfo, tupleId);
            break;
        case 'bar':
        case 'square':
            if (shouldShowOverlay) {
                tab.MarksRenderer._renderBarHoverOverlayImage(overlayCanvas, pdInfo, markIndex);
            }
            break;
        case 'line':
            tab.MarksRenderer._renderLineMarkHoverOverlayImage(overlayCanvas, pdInfo, tupleId);
            break;
        case 'multipolygon':
            if (shouldShowOverlay) {
                tab.MarksRenderer._renderMultipolygonMarkHoverOverlayImage(overlayCanvas, pdInfo, markIndex);
            }
            break;
        case 'pie':
            if (shouldShowOverlay) {
                tab.MarksRenderer._renderPieHoverOverlayImage(overlayCanvas, pdInfo, markIndex);
            }
            break;
        case 'shape':
            if (shouldShowOverlay) {
                tab.MarksRenderer._renderShapeHoverOverlayImage(overlayCanvas, pdInfo, tupleId);
            }
            break;
        case 'text':
            if (shouldShowOverlay) {
                tab.MarksRenderer._renderTextHoverOverlayImage(overlayCanvas, pdInfo, markIndex);
            }
            break;
    }
    mc.close();
}
tab.PaneTable2DRenderer.renderPressedOverlay = function tab_PaneTable2DRenderer$renderPressedOverlay(tupleId, pdInfo, overlayCanvas) {
    if (ss.isNullOrUndefined(overlayCanvas) || ss.isNullOrUndefined(pdInfo)) {
        return;
    }
    var mc = tabBootstrap.MetricsController.get_instance().createContext('RenderPressedOverlay', tabBootstrap.MetricsSuites.debug);
    var markIndex = pdInfo.getMarkIndexFromTupleID(tupleId);
    switch (pdInfo.get_markType()) {
        case 'area':
            tab.MarksRenderer._renderAreaMarkPressedOverlayImage(overlayCanvas, pdInfo, markIndex);
            break;
        case 'bar':
        case 'square':
            tab.MarksRenderer._renderBarPressedOverlayImage(overlayCanvas, pdInfo, markIndex);
            break;
        case 'line':
            tab.MarksRenderer._renderLineMarkPressedOverlayImage(overlayCanvas, pdInfo, markIndex);
            break;
        case 'multipolygon':
            tab.MarksRenderer._renderMultipolygonMarkPressedOverlayImage(overlayCanvas, pdInfo, markIndex);
            break;
        case 'pie':
            tab.MarksRenderer._renderPiePressedOverlayImage(overlayCanvas, pdInfo, markIndex);
            break;
        case 'shape':
            tab.MarksRenderer._renderShapePressedOverlayImage(overlayCanvas, pdInfo, tupleId);
            break;
        case 'text':
            tab.MarksRenderer._renderTextPressedOverlayImage(overlayCanvas, pdInfo, markIndex);
            break;
    }
    mc.close();
}
tab.PaneTable2DRenderer._setCoordinatesFromPoints$1 = function tab_PaneTable2DRenderer$_setCoordinatesFromPoints$1(pointsToAlter, start, end) {
    pointsToAlter[0] = start.x;
    pointsToAlter[1] = start.y;
    pointsToAlter[2] = end.x;
    pointsToAlter[3] = end.y;
}
tab.PaneTable2DRenderer._calculateColorForState$1 = function tab_PaneTable2DRenderer$_calculateColorForState$1(colorModel, targetState, type, applyFog) {
    var isTypeVisuallyAffected = type === 'draw-polyline' || type === 'draw-path' || type === 'draw-rect' || type === 'draw-fill-rect';
    if (targetState === 'selected' && isTypeVisuallyAffected) {
        if (tab.FeatureFlags.isEnabled('AOSelectionRed')) {
            return tab.ColorModel.convertColorForCanvas('rgba(255,0,0,255)');
        }
        else {
            if (tab.ColorModel.isFullyTransparent(colorModel)) {
                return tab.ColorModel.convertColorForCanvas('rgba(0,0,0,255)');
            }
            else {
                return colorModel.toString();
            }
        }
    }
    if (targetState === 'hover' && isTypeVisuallyAffected) {
        var DarkThreshold = 77;
        var White = new tab.ColorModel(255, 255, 255, 0.45);
        var Black = new tab.ColorModel(0, 0, 0, 0.45);
        var hoverColor = (tab.ColorModel.isDark(colorModel, DarkThreshold)) ? White : Black;
        return (colorModel.get_a() < 1) ? hoverColor.toString() : tab.ColorModel.alphaBlend(hoverColor, colorModel).toString();
    }
    if (targetState === 'normal' && ss.isValue(applyFog)) {
        return tab.PaneDrawInfo.fogColorTransform(colorModel, applyFog.second, applyFog.first).toString();
    }
    return colorModel.toString();
}
tab.PaneTable2DRenderer.prototype = {
    _displayListRenderer$1: null,
    _sceneInfo$1: null,
    
    drawReferenceLineAndTrendLineGroup: function tab_PaneTable2DRenderer$drawReferenceLineAndTrendLineGroup(items, targetState, context, drawAll, applyFog) {
        var colorUpdatedForState = false;
        var originalStrokeStyle = null;
        var originalShapeFillStyle = null;
        var originalTextFillStyle = null;
        var $enum1 = ss.IEnumerator.getEnumerator(items);
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            var isFillRectOrDrawText = item.type === 'draw-fill-rect' || item.type === 'draw-text';
            var isHoverOrSelected = targetState === 'hover' || targetState === 'selected';
            var shouldApplyStateColorChange = true;
            if (isFillRectOrDrawText && isHoverOrSelected) {
                var colorModel = tab.ColorModel.fromColorCode(context.get_shapeFillStyle());
                if (colorModel.get_a() < 1) {
                    if (targetState === 'hover') {
                        continue;
                    }
                    shouldApplyStateColorChange = false;
                }
            }
            var isStyleItem = item.type === 'draw-pen' || item.type === 'draw-solid-brush' || item.type === 'draw-text-props';
            if (drawAll || isStyleItem) {
                if ((isStyleItem || !shouldApplyStateColorChange) && colorUpdatedForState) {
                    context.set_strokeStyle(originalStrokeStyle.toString());
                    context.set_shapeFillStyle(originalShapeFillStyle.toString());
                    context.set_textFillStyle(originalTextFillStyle.toString());
                    colorUpdatedForState = false;
                }
                if ((ss.isValue(applyFog) || targetState !== 'normal') && !colorUpdatedForState && !isStyleItem && shouldApplyStateColorChange) {
                    originalStrokeStyle = tab.ColorModel.fromColorCode(context.get_strokeStyle());
                    originalShapeFillStyle = tab.ColorModel.fromColorCode(context.get_shapeFillStyle());
                    originalTextFillStyle = tab.ColorModel.fromColorCode(context.get_textFillStyle());
                    var newStrokeStyle = tab.PaneTable2DRenderer._calculateColorForState$1(originalStrokeStyle, targetState, item.type, applyFog);
                    var newShapeFillStyle = tab.PaneTable2DRenderer._calculateColorForState$1(originalShapeFillStyle, targetState, item.type, applyFog);
                    var newTextFillStyle = tab.PaneTable2DRenderer._calculateColorForState$1(originalTextFillStyle, targetState, item.type, applyFog);
                    colorUpdatedForState = (newStrokeStyle !== originalStrokeStyle.toString()) || (newShapeFillStyle !== originalShapeFillStyle.toString()) || (newTextFillStyle !== originalTextFillStyle.toString());
                    if (colorUpdatedForState) {
                        context.set_strokeStyle(newStrokeStyle);
                        context.set_shapeFillStyle(newShapeFillStyle);
                        context.set_textFillStyle(newTextFillStyle);
                    }
                }
                this.renderVisualParts(context, item);
            }
        }
        if (colorUpdatedForState) {
            context.set_strokeStyle(originalStrokeStyle.toString());
            context.set_shapeFillStyle(originalShapeFillStyle.toString());
            context.set_textFillStyle(originalTextFillStyle.toString());
        }
    },
    
    renderScene: function tab_PaneTable2DRenderer$renderScene(paneTableVm) {
        ss.Debug.assert(paneTableVm != null, 'Cant render a null scene');
        this._sceneInfo$1 = paneTableVm.get_scene();
        var scenePresModel = this._sceneInfo$1.get_scene();
        if (!ss.isValue(scenePresModel)) {
            return;
        }
        this._displayListRenderer$1.setRenderOffsetNoTranslate(this.get_renderOffset());
        var startingNumSavedStates = this.get_currentContext().get_numberSavedStates();
        var fastMaps = paneTableVm.get_mapServerModel().get_useFastMaps();
        if (!fastMaps) {
            this._renderVisualRegions$1(paneTableVm.get_vizRegionMap(), paneTableVm.get_drawFirstParts());
        }
        var sceneDirtyRect = tab.RectXYUtil.offsetRect(this.get_currentContext().get_dirtyRect(), this.get_renderOffset());
        var Slop = 3;
        sceneDirtyRect = tab.RectXYUtil.outsetRect(sceneDirtyRect, Slop, Slop);
        this._sceneInfo$1.prepareForDraw(sceneDirtyRect);
        this._renderPanes$1(scenePresModel.panes, fastMaps);
        this._sceneInfo$1.cleanupFromDraw();
        this._renderVisualRegions$1(paneTableVm.get_vizRegionMap(), paneTableVm.get_drawLastParts());
        ss.Debug.assert(this.get_currentContext().get_numberSavedStates() === startingNumSavedStates, 'The saves/restores of states should be balanced');
        while (this.get_currentContext().get_numberSavedStates() > startingNumSavedStates) {
            this.get_currentContext().restore();
        }
    },
    
    renderViewportBorders: function tab_PaneTable2DRenderer$renderViewportBorders(paneTableVm) {
        ss.Debug.assert(paneTableVm != null, 'Cant render a null scene');
        this._sceneInfo$1 = paneTableVm.get_scene();
        var scenePresModel = this._sceneInfo$1.get_scene();
        if (ss.isNullOrUndefined(scenePresModel)) {
            return;
        }
        var paneBorderDisplayList = this._getFirstPaneBorderVisualList$1(scenePresModel.panes);
        if (ss.isNullOrUndefined(paneBorderDisplayList)) {
            return;
        }
        var viewportBorderDrawItems = paneBorderDisplayList.drawItems.clone();
        var borderWidth = this.get_currentCanvas().width - 1;
        var borderHeight = this.get_currentCanvas().height - 1;
        var topLeft = tab.$create_Point(0, 0);
        var topRight = tab.$create_Point(borderWidth, 0);
        var bottomLeft = tab.$create_Point(0, borderHeight);
        var bottomRight = tab.$create_Point(borderWidth, borderHeight);
        var seenOneHorizontal = false;
        var seenOneVertical = false;
        for (var ii = viewportBorderDrawItems.length - 1; ii >= 0; --ii) {
            var drawItem = viewportBorderDrawItems[ii];
            if (drawItem.type === 'clip-rect' || drawItem.type === 'transform') {
                viewportBorderDrawItems.removeAt(ii);
            }
            else if (drawItem.type === 'draw-polyline') {
                var drawPoints = tab.MiscUtil.cloneObject(drawItem);
                viewportBorderDrawItems[ii] = drawPoints;
                if (drawPoints.points[1] === drawPoints.points[3]) {
                    if (seenOneHorizontal) {
                        tab.PaneTable2DRenderer._setCoordinatesFromPoints$1(drawPoints.points, bottomLeft, bottomRight);
                    }
                    else {
                        tab.PaneTable2DRenderer._setCoordinatesFromPoints$1(drawPoints.points, topLeft, topRight);
                    }
                    seenOneHorizontal = true;
                }
                else {
                    ss.Debug.assert(drawPoints.points[0] === drawPoints.points[2], "Assuming if it's not horizontal then it's vertical");
                    if (seenOneVertical) {
                        tab.PaneTable2DRenderer._setCoordinatesFromPoints$1(drawPoints.points, topRight, bottomRight);
                    }
                    else {
                        tab.PaneTable2DRenderer._setCoordinatesFromPoints$1(drawPoints.points, topLeft, bottomLeft);
                    }
                    seenOneVertical = true;
                }
            }
        }
        this.get_currentContext().save();
        this._renderDrawItems$1(viewportBorderDrawItems, null, 'pane-borders');
        this.get_currentContext().restore();
    },
    
    renderAxisRulers: function tab_PaneTable2DRenderer$renderAxisRulers(paneTableVm, docSize, scrollPos) {
        var vlvm = paneTableVm.get_vizRegionMap()['axis-rules'];
        if (ss.isValue(vlvm)) {
            var lineMaker = function(start, end) {
                var line = {};
                line.type = 'draw-polyline';
                line.points = new Array(4);
                tab.PaneTable2DRenderer._setCoordinatesFromPoints$1(line.points, start, end);
                return line;
            };
            var pixelRatio = tab.RenderUtil.calculatePixelRatio();
            var canvasBottom = this.get_currentCanvas().height - 1;
            var rulersDrawItems = [];
            var $enum1 = ss.IEnumerator.getEnumerator(vlvm.get_visualListPM().drawItems);
            while ($enum1.moveNext()) {
                var drawItem = $enum1.current;
                if (drawItem.type === 'draw-pen') {
                    rulersDrawItems.add(drawItem);
                }
                else if (drawItem.type === 'draw-polyline') {
                    var drawPoints = drawItem;
                    if (drawPoints.points[0] === drawPoints.points[2]) {
                        rulersDrawItems.add(lineMaker(tab.$create_Point(0, -scrollPos.y), tab.$create_Point(0, Math.round(pixelRatio * docSize.h) - scrollPos.y)));
                    }
                    else if (drawPoints.points[1] === drawPoints.points[3]) {
                        rulersDrawItems.add(lineMaker(tab.$create_Point(-scrollPos.x, canvasBottom), tab.$create_Point(Math.round(pixelRatio * docSize.w) - scrollPos.x, canvasBottom)));
                    }
                }
            }
            this.get_currentContext().save();
            this._renderDrawItems$1(rulersDrawItems, null, 'axis-rules');
            this.get_currentContext().restore();
        }
    },
    
    _getFirstPaneBorderVisualList$1: function tab_PaneTable2DRenderer$_getFirstPaneBorderVisualList$1(panes) {
        var $enum1 = ss.IEnumerator.getEnumerator(panes);
        while ($enum1.moveNext()) {
            var panePM = $enum1.current;
            var $enum2 = ss.IEnumerator.getEnumerator(panePM.drawPane);
            while ($enum2.moveNext()) {
                var vlpm = $enum2.current;
                if (vlpm.visualPart === 'pane-borders') {
                    return vlpm;
                }
            }
        }
        return null;
    },
    
    _renderVisualRegions$1: function tab_PaneTable2DRenderer$_renderVisualRegions$1(lists, parts) {
        if (!ss.isValue(lists)) {
            return;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(parts);
        while ($enum1.moveNext()) {
            var part = $enum1.current;
            var vlvm = lists[part];
            if (!tab.PaneTableViewModel.blackListVisualParts.contains(part) && part !== 'axis-rules') {
                ss.Debug.assert(ss.isValue(vlvm), 'VisualListViewModel should always be non-null');
                if (ss.isValue(vlvm)) {
                    this.get_currentContext().save();
                    var imgDict = this._sceneInfo$1.get_imageDictionary();
                    this._displayListRenderer$1.renderVisualListHelper(vlvm, imgDict);
                    this.get_currentContext().restore();
                }
            }
        }
    },
    
    _renderVisualList$1: function tab_PaneTable2DRenderer$_renderVisualList$1(list, pdi) {
        if (!ss.isValue(list)) {
            return;
        }
        this.get_currentContext().save();
        this._renderDrawItems$1(list.drawItems, pdi, list.visualPart);
        this.get_currentContext().restore();
    },
    
    _renderPanes$1: function tab_PaneTable2DRenderer$_renderPanes$1(panes, fastMaps) {
        if (!ss.isValue(panes)) {
            return;
        }
        if (!fastMaps) {
            this._renderVisualLists$1(panes, 'background');
        }
        this._renderMarksPanes$1(panes);
        this._renderVisualLists$1(panes, 'foreground');
    },
    
    _renderVisualLists$1: function tab_PaneTable2DRenderer$_renderVisualLists$1(panes, role) {
        var $enum1 = ss.IEnumerator.getEnumerator(panes);
        while ($enum1.moveNext()) {
            var pane = $enum1.current;
            if (!this._isPaneVisible$1(pane)) {
                continue;
            }
            var $enum2 = ss.IEnumerator.getEnumerator(pane.drawPane);
            while ($enum2.moveNext()) {
                var visualList = $enum2.current;
                if (role === this._getDrawRole$1(visualList.visualPart)) {
                    this._renderVisualList$1(visualList, this._getPDIAssociatedWithPane$1(pane));
                }
            }
        }
    },
    
    _getPDIAssociatedWithPane$1: function tab_PaneTable2DRenderer$_getPDIAssociatedWithPane$1(pane) {
        var paneVL = _.find(pane.drawPane, function(vlpm) {
            return vlpm.visualPart === 'marks';
        });
        if (ss.isValue(paneVL)) {
            return this._sceneInfo$1._getPaneDrawInfo(paneVL.paneMarks);
        }
        return null;
    },
    
    _renderMarksPanes$1: function tab_PaneTable2DRenderer$_renderMarksPanes$1(panes) {
        var $enum1 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo.renderPassOrder);
        while ($enum1.moveNext()) {
            var renderPass = $enum1.current;
            var $enum2 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo.drawRoleOrder);
            while ($enum2.moveNext()) {
                var role = $enum2.current;
                var $enum3 = ss.IEnumerator.getEnumerator(panes);
                while ($enum3.moveNext()) {
                    var pane = $enum3.current;
                    if (!this._isPaneVisible$1(pane)) {
                        continue;
                    }
                    var paneDrawInfo = null;
                    var $enum4 = ss.IEnumerator.getEnumerator(pane.drawPane);
                    while ($enum4.moveNext()) {
                        var visualList = $enum4.current;
                        if (visualList.visualPart === 'marks') {
                            paneDrawInfo = this._sceneInfo$1._getPaneDrawInfo(visualList.paneMarks);
                            break;
                        }
                    }
                    if (paneDrawInfo == null) {
                        continue;
                    }
                    if (role === 'marks' || role === 'label') {
                        var $enum5 = ss.IEnumerator.getEnumerator(pane.drawPane);
                        while ($enum5.moveNext()) {
                            var visualList = $enum5.current;
                            if (visualList.visualPart === 'marks') {
                                if (role === 'marks') {
                                    ss.Debug.assert(ss.isValue(visualList.paneMarks), "We should never be drawing marks as a visual list!!! You probably want to change the layout of the viz to Cartesian or you don't want to use browser rendering");
                                    this.get_currentContext().save();
                                    var paneRect = paneDrawInfo.get_mapExtentOrPaneRect();
                                    this.get_currentContext().setClip(paneRect);
                                    this._renderMarkLayer$1(paneDrawInfo, renderPass);
                                    this.get_currentContext().restore();
                                    break;
                                }
                                else if (role === 'label') {
                                    if (paneDrawInfo.get_hasLabels()) {
                                        this.get_currentContext().save();
                                        var paneRect = paneDrawInfo.get_mapExtentOrPaneRect();
                                        this.get_currentContext().setClip(paneRect);
                                        this._renderLabelLayer$1(paneDrawInfo, renderPass);
                                        this.get_currentContext().restore();
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        var $enum6 = ss.IEnumerator.getEnumerator(pane.renderNodes);
                        while ($enum6.moveNext()) {
                            var renderNode = $enum6.current;
                            switch (renderNode.type) {
                                case 'prediction-band':
                                    var renderer = new tab.MarksRenderer(this.get_currentCanvas(), this.get_currentContext());
                                    renderer.setRenderOffsetNoTranslate(this.get_renderOffset());
                                    renderer._renderPredictionBand(paneDrawInfo, renderPass, renderNode, role);
                                    break;
                                case 'prediction-whisker':
                                    var renderer = new tab.MarksRenderer(this.get_currentCanvas(), this.get_currentContext());
                                    renderer.setRenderOffsetNoTranslate(this.get_renderOffset());
                                    renderer._renderPredictionWhisker(paneDrawInfo, renderPass, renderNode, role);
                                    break;
                            }
                        }
                    }
                }
            }
        }
    },
    
    _renderDrawItems$1: function tab_PaneTable2DRenderer$_renderDrawItems$1(items, pdi, visPart) {
        if (!ss.isValue(items)) {
            return;
        }
        var imgDict = this._sceneInfo$1.get_imageDictionary();
        if (visPart !== 'ref-lines' && visPart !== 'ref-bands' && visPart !== 'trend-lines') {
            var mapClipRect = null;
            if (visPart === 'decoration') {
                if (ss.isValue(pdi)) {
                    mapClipRect = pdi.get_mapExtents();
                }
            }
            this._displayListRenderer$1.renderDrawItems(items, null, imgDict, mapClipRect);
        }
        else {
            var $enum1 = ss.IEnumerator.getEnumerator(items);
            while ($enum1.moveNext()) {
                var item = $enum1.current;
                if (item.type === 'draw-group') {
                    var drawGroup = item;
                    var isSelected = false;
                    var isFogged = false;
                    switch (visPart) {
                        case 'ref-lines':
                            isSelected = this._sceneInfo$1.get__selections().get_refLineSelection().isMarkSelected(drawGroup.objectId);
                            isFogged = !isSelected && (!this._sceneInfo$1.get__selections().get_refLineSelection().get_isEmpty() || !this._sceneInfo$1.get__selections().get_trendLineSelection().get_isEmpty());
                            break;
                        case 'ref-bands':
                            isFogged = (!this._sceneInfo$1.get__selections().get_refLineSelection().get_isEmpty() || !this._sceneInfo$1.get__selections().get_trendLineSelection().get_isEmpty()) && !this._sceneInfo$1.get__selections().get_refLineSelection().isMarkSelected(drawGroup.objectId);
                            break;
                        case 'trend-lines':
                            isSelected = this._sceneInfo$1.get__selections().get_trendLineSelection().isMarkSelected(drawGroup.objectId);
                            isFogged = !isSelected && (this._sceneInfo$1.get__hasBrushing() || this._sceneInfo$1.get__hasSelection());
                            break;
                    }
                    var targetState = (isSelected) ? 'selected' : 'normal';
                    var fogInfo = null;
                    if (isFogged) {
                        if (ss.isValue(pdi) && ss.isValue(pdi.get_fogBlendFactor()) && ss.isValue(pdi.get_foggedBackgroundColor())) {
                            fogInfo = new ss.Tuple(pdi.get_fogBlendFactor(), pdi.get_foggedBackgroundColor());
                        }
                        else {
                            var defaultBackground = tab.ColorModel.fromColorCode('rgba(255,255,255,255)');
                            var defaultBlendFactor = tab.PaneDrawInfo.getFogBlendFactor(defaultBackground);
                            var defaultFoggedBackground = tab.PaneDrawInfo.applyFogToBackgroundColor(defaultBackground, defaultBlendFactor);
                            fogInfo = new ss.Tuple(defaultBlendFactor, defaultFoggedBackground);
                        }
                    }
                    this.drawReferenceLineAndTrendLineGroup(drawGroup.drawItems, targetState, this.get_currentContext(), true, fogInfo);
                }
                else {
                    this.renderVisualParts(this.get_currentContext(), item);
                }
            }
        }
    },
    
    renderVisualParts: function tab_PaneTable2DRenderer$renderVisualParts(context, item) {
        this._displayListRenderer$1.renderDrawItemDefaultOptions(context, item);
    },
    
    _isPaneVisible$1: function tab_PaneTable2DRenderer$_isPaneVisible$1(pane) {
        return this.isRectVisible(tab.RecordCast.rectPresModelAsRectXY(pane.paneRect));
    },
    
    _renderMarkLayer$1: function tab_PaneTable2DRenderer$_renderMarkLayer$1(paneDrawInfo, renderPass) {
        if (!paneDrawInfo.get_markCount()) {
            return;
        }
        var renderer = new tab.MarksRenderer(this.get_currentCanvas(), this.get_currentContext());
        renderer.setRenderOffsetNoTranslate(this.get_renderOffset());
        var markType = paneDrawInfo.get_markType();
        switch (markType) {
            case 'shape':
                renderer._renderShapeMark(paneDrawInfo, renderPass);
                break;
            case 'square':
            case 'bar':
                renderer._renderBarMark(paneDrawInfo, renderPass);
                break;
            case 'pie':
                renderer._renderPieMark(paneDrawInfo, renderPass);
                break;
            case 'line':
                renderer._renderLineMark(paneDrawInfo, renderPass);
                break;
            case 'area':
                renderer._renderAreaMark(paneDrawInfo, renderPass);
                break;
            case 'text':
                renderer._renderTextMarks(paneDrawInfo, renderPass);
                break;
            case 'multipolygon':
                renderer._renderMultipolygonMark(paneDrawInfo, renderPass);
                break;
        }
    },
    
    _renderLabelLayer$1: function tab_PaneTable2DRenderer$_renderLabelLayer$1(paneDrawInfo, renderPass) {
        if (!ss.isValue(paneDrawInfo)) {
            return;
        }
        if (!paneDrawInfo.get_markCount()) {
            return;
        }
        var renderer = new tab.MarksRenderer(this.get_currentCanvas(), this.get_currentContext());
        renderer.setRenderOffsetNoTranslate(this.get_renderOffset());
        renderer._renderMarkLabels(paneDrawInfo, renderPass);
    },
    
    _getDrawRole$1: function tab_PaneTable2DRenderer$_getDrawRole$1(part) {
        switch (part) {
            case 'background':
            case 'decoration':
            case 'ref-bands':
            case 'cell-borders':
                return 'background';
            case 'mark-trails':
            case 'marks':
            case 'mark-labels':
                return 'marks';
            case 'borders':
            case 'trend-lines':
            case 'ref-lines':
            case 'pane-borders':
            case 'annotations':
            case 'axis-rules':
                return 'foreground';
        }
        return 'background';
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RenderUtil

tab.RenderUtil = function tab_RenderUtil() {
}
tab.RenderUtil.calculatePixelRatio = function tab_RenderUtil$calculatePixelRatio(forCanvas) {
    var pixelRatioResult = 1;
    if (ss.isValue(tsConfig.highDpi) && tsConfig.highDpi) {
        if (ss.isValue(tsConfig.pixelRatio)) {
            pixelRatioResult = tsConfig.pixelRatio;
        }
        else {
            if (ss.isValue(forCanvas) && !forCanvas) {
                pixelRatioResult = tab.BrowserSupport.get_devicePixelRatio();
            }
            else {
                pixelRatioResult = tab.BrowserSupport.get_devicePixelRatio() / tab.BrowserSupport.get_backingStoragePixelRatio();
            }
        }
    }
    return pixelRatioResult;
}
tab.RenderUtil.manualFadeAnimation = function tab_RenderUtil$manualFadeAnimation(element, fromOpacity, toOpacity, fps, animationLengthMilliseconds, exponentialSlowDown) {
    var current = fromOpacity;
    var end = toOpacity;
    var totalSteps = (animationLengthMilliseconds / 1000) * fps;
    var step = (toOpacity - fromOpacity) / totalSteps;
    var intervalMilliseconds = 1000 / fps;
    var animationStep = null;
    animationStep = function() {
        if (current > end) {
            element.css('filter', 'alpha(opacity=' + end + ')');
            element.css('opacity', (end / 100).toString());
            return;
        }
        element.css('filter', 'alpha(opacity=' + current + ')');
        element.css('opacity', (current / 100).toString());
        current += step;
        if (ss.isValue(exponentialSlowDown)) {
            intervalMilliseconds += intervalMilliseconds;
        }
        window.setTimeout(animationStep, intervalMilliseconds);
    };
    window.setTimeout(animationStep, intervalMilliseconds);
}


////////////////////////////////////////////////////////////////////////////////
// tab.TabRenderContext2D

tab.TabRenderContext2D = function tab_TabRenderContext2D(baseContext) {
    this._baseContext = baseContext;
    this._extraStateStack = [];
    this._fontNormalizer = tab.FontNormalizer.instance();
    this.reset();
    this.clearDirtyRect();
}
tab.TabRenderContext2D._findFontSize = function tab_TabRenderContext2D$_findFontSize(font) {
    var fontParts = font.split(' ');
    var $enum1 = ss.IEnumerator.getEnumerator(fontParts);
    while ($enum1.moveNext()) {
        var fontPart = $enum1.current;
        var val = parseFloat(fontPart);
        if (isFinite(val)) {
            return val;
        }
    }
    return 8;
}
tab.TabRenderContext2D.prototype = {
    _baseContext: null,
    _extraStateStack: null,
    _fontNormalizer: null,
    _linePattern: null,
    _textAngle: 0,
    _shapeFillStyle: null,
    _textFillStyle: null,
    _shouldAntialias: false,
    _shouldUnderlineText: false,
    _fontSize: 0,
    _numSavedStates: 0,
    _dirtyRect: null,
    
    get_textAngle: function tab_TabRenderContext2D$get_textAngle() {
        return this._textAngle;
    },
    set_textAngle: function tab_TabRenderContext2D$set_textAngle(value) {
        this._textAngle = value;
        return value;
    },
    
    get_isTextAngleHorizontal: function tab_TabRenderContext2D$get_isTextAngleHorizontal() {
        return Math.abs(this.get_textAngle()) < 0.01;
    },
    
    get_numberSavedStates: function tab_TabRenderContext2D$get_numberSavedStates() {
        return this._numSavedStates;
    },
    
    get_alpha: function tab_TabRenderContext2D$get_alpha() {
        return this._baseContext.globalAlpha;
    },
    set_alpha: function tab_TabRenderContext2D$set_alpha(value) {
        if (value !== this._baseContext.globalAlpha) {
            this._baseContext.globalAlpha = value;
        }
        return value;
    },
    
    get_compositeOperation: function tab_TabRenderContext2D$get_compositeOperation() {
        return this._baseContext.globalCompositeOperation;
    },
    set_compositeOperation: function tab_TabRenderContext2D$set_compositeOperation(value) {
        this._baseContext.globalCompositeOperation = value;
        return value;
    },
    
    get_font: function tab_TabRenderContext2D$get_font() {
        return this._baseContext.font;
    },
    set_font: function tab_TabRenderContext2D$set_font(value) {
        var normalizedValue = this._fontNormalizer.normalizeFont(value);
        if (normalizedValue !== this._baseContext.font) {
            this._baseContext.font = normalizedValue;
        }
        this._fontSize = tab.TabRenderContext2D._findFontSize(normalizedValue);
        return value;
    },
    
    get_lineCap: function tab_TabRenderContext2D$get_lineCap() {
        return this._baseContext.lineCap;
    },
    set_lineCap: function tab_TabRenderContext2D$set_lineCap(value) {
        if (value !== this._baseContext.lineCap) {
            this._baseContext.lineCap = value;
        }
        return value;
    },
    
    get_lineJoin: function tab_TabRenderContext2D$get_lineJoin() {
        return this._baseContext.lineJoin;
    },
    set_lineJoin: function tab_TabRenderContext2D$set_lineJoin(value) {
        if (value !== this._baseContext.lineJoin) {
            this._baseContext.lineJoin = value;
        }
        return value;
    },
    
    get_lineWidth: function tab_TabRenderContext2D$get_lineWidth() {
        return this._baseContext.lineWidth;
    },
    set_lineWidth: function tab_TabRenderContext2D$set_lineWidth(value) {
        if (value !== this._baseContext.lineWidth) {
            this._baseContext.lineWidth = value;
            this._updateLinePattern();
        }
        return value;
    },
    
    get_linePattern: function tab_TabRenderContext2D$get_linePattern() {
        return this._linePattern;
    },
    set_linePattern: function tab_TabRenderContext2D$set_linePattern(value) {
        if (value !== this._linePattern) {
            this._linePattern = value;
            this._updateLinePattern();
        }
        return value;
    },
    
    get_miterLimit: function tab_TabRenderContext2D$get_miterLimit() {
        return this._baseContext.miterLimit;
    },
    set_miterLimit: function tab_TabRenderContext2D$set_miterLimit(value) {
        if (value !== this._baseContext.miterLimit) {
            this._baseContext.miterLimit = value;
        }
        return value;
    },
    
    get_shadowBlur: function tab_TabRenderContext2D$get_shadowBlur() {
        return this._baseContext.shadowBlur;
    },
    set_shadowBlur: function tab_TabRenderContext2D$set_shadowBlur(value) {
        this._baseContext.shadowBlur = value;
        return value;
    },
    
    get_shadowColor: function tab_TabRenderContext2D$get_shadowColor() {
        return this._baseContext.shadowColor;
    },
    set_shadowColor: function tab_TabRenderContext2D$set_shadowColor(value) {
        this._baseContext.shadowColor = value;
        return value;
    },
    
    get_shadowOffsetX: function tab_TabRenderContext2D$get_shadowOffsetX() {
        return this._baseContext.shadowOffsetX;
    },
    set_shadowOffsetX: function tab_TabRenderContext2D$set_shadowOffsetX(value) {
        this._baseContext.shadowOffsetX = value;
        return value;
    },
    
    get_shadowOffsetY: function tab_TabRenderContext2D$get_shadowOffsetY() {
        return this._baseContext.shadowOffsetY;
    },
    set_shadowOffsetY: function tab_TabRenderContext2D$set_shadowOffsetY(value) {
        this._baseContext.shadowOffsetY = value;
        return value;
    },
    
    get_strokeStyle: function tab_TabRenderContext2D$get_strokeStyle() {
        return this._baseContext.strokeStyle;
    },
    set_strokeStyle: function tab_TabRenderContext2D$set_strokeStyle(value) {
        if (value !== this._baseContext.strokeStyle) {
            this._baseContext.strokeStyle = value;
        }
        return value;
    },
    
    get_shapeFillStyle: function tab_TabRenderContext2D$get_shapeFillStyle() {
        return this._shapeFillStyle;
    },
    set_shapeFillStyle: function tab_TabRenderContext2D$set_shapeFillStyle(value) {
        this._shapeFillStyle = value;
        this._setBaseFillStyle(value);
        return value;
    },
    
    get_shouldAntialias: function tab_TabRenderContext2D$get_shouldAntialias() {
        return this._shouldAntialias;
    },
    set_shouldAntialias: function tab_TabRenderContext2D$set_shouldAntialias(value) {
        this._shouldAntialias = value;
        return value;
    },
    
    get_shouldUnderlineText: function tab_TabRenderContext2D$get_shouldUnderlineText() {
        return this._shouldUnderlineText;
    },
    set_shouldUnderlineText: function tab_TabRenderContext2D$set_shouldUnderlineText(value) {
        this._shouldUnderlineText = value;
        return value;
    },
    
    get_textFillStyle: function tab_TabRenderContext2D$get_textFillStyle() {
        return this._textFillStyle;
    },
    set_textFillStyle: function tab_TabRenderContext2D$set_textFillStyle(value) {
        this._textFillStyle = value;
        return value;
    },
    
    get_textAlign: function tab_TabRenderContext2D$get_textAlign() {
        return this._baseContext.textAlign;
    },
    set_textAlign: function tab_TabRenderContext2D$set_textAlign(value) {
        this._baseContext.textAlign = value;
        return value;
    },
    
    get_textBaseline: function tab_TabRenderContext2D$get_textBaseline() {
        return this._baseContext.textBaseline;
    },
    set_textBaseline: function tab_TabRenderContext2D$set_textBaseline(value) {
        this._baseContext.textBaseline = value;
        return value;
    },
    
    get_dirtyRect: function tab_TabRenderContext2D$get_dirtyRect() {
        return this._dirtyRect;
    },
    set_dirtyRect: function tab_TabRenderContext2D$set_dirtyRect(value) {
        this._dirtyRect = value;
        return value;
    },
    
    get__canvasSize: function tab_TabRenderContext2D$get__canvasSize() {
        var elt = this._baseContext.canvas;
        var canvasSize = tab.$create_Size(elt.width, elt.height);
        return canvasSize;
    },
    
    clearDirtyRect: function tab_TabRenderContext2D$clearDirtyRect() {
        this.set_dirtyRect(tab.$create_RectXY(0, 0, 0, 0));
    },
    
    setDefaultPropertyValues: function tab_TabRenderContext2D$setDefaultPropertyValues() {
        this.set_alpha(1);
        this.set_strokeStyle('rgb(0,0,0)');
        this.set_linePattern(tab.TabRenderContext2D.defaultLinePattern);
        this.set_lineWidth(1);
        this.set_lineJoin(tab.TabRenderContext2D.defaultLineJoin);
        this.set_lineCap(tab.TabRenderContext2D.defaultLineCap);
        this.set_shapeFillStyle('rgb(0,0,0)');
        this.set_textFillStyle('rgb(0,0,0)');
        this.set_textBaseline(tab.TabRenderContext2D.defaultTextBaseline);
        this.set_textAlign(tab.TabRenderContext2D.defaultTextAlign);
        this.set_textAngle(0);
        this.set_font(8 + 'pt ' + 'Arial');
        this._shouldAntialias = true;
        this._shouldUnderlineText = false;
    },
    
    setClip: function tab_TabRenderContext2D$setClip(clipRect) {
        this.beginPath();
        this.rect(clipRect.x, clipRect.y, clipRect.w, clipRect.h);
        this._clip();
    },
    
    arc: function tab_TabRenderContext2D$arc(x, y, radius, startAngle, endAngle, anticlockwise) {
        this._baseContext.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    },
    
    arcTo: function tab_TabRenderContext2D$arcTo(x1, y1, x2, y2, radius) {
        this._baseContext.arcTo(x1, y1, x2, y2, radius);
    },
    
    beginPath: function tab_TabRenderContext2D$beginPath() {
        this._baseContext.beginPath();
    },
    
    bezierCurveTo: function tab_TabRenderContext2D$bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
        this._baseContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    },
    
    clearRect: function tab_TabRenderContext2D$clearRect(x, y, w, h) {
        this._baseContext.clearRect(x, y, w, h);
    },
    
    closePath: function tab_TabRenderContext2D$closePath() {
        this._baseContext.closePath();
    },
    
    createImageData1: function tab_TabRenderContext2D$createImageData1(imagedata) {
        return this._baseContext.createImageData(imagedata);
    },
    
    createImageData2: function tab_TabRenderContext2D$createImageData2(sw, sh) {
        return this._baseContext.createImageData(sw, sh);
    },
    
    createLinearGradient: function tab_TabRenderContext2D$createLinearGradient(x0, y0, x1, y1) {
        return this._baseContext.createLinearGradient(x0, y0, x1, y1);
    },
    
    createPattern1: function tab_TabRenderContext2D$createPattern1(canvas, repetition) {
        return this._baseContext.createPattern(canvas, repetition);
    },
    
    createPattern2: function tab_TabRenderContext2D$createPattern2(image, repetition) {
        return this._baseContext.createPattern(image, repetition);
    },
    
    createRadialGradient: function tab_TabRenderContext2D$createRadialGradient(x0, y0, r0, x1, y1, r1) {
        return this._baseContext.createRadialGradient(x0, y0, r0, x1, y1, r1);
    },
    
    drawImage1: function tab_TabRenderContext2D$drawImage1(image, dx, dy) {
        this._baseContext.drawImage(image, dx, dy);
    },
    
    drawImage2: function tab_TabRenderContext2D$drawImage2(image, dx, dy) {
        this._baseContext.drawImage(image, dx, dy);
    },
    
    drawImage3: function tab_TabRenderContext2D$drawImage3(image, dx, dy, dw, dh) {
        this._baseContext.drawImage(image, dx, dy, dw, dh);
    },
    
    drawImage4: function tab_TabRenderContext2D$drawImage4(image, dx, dy, dw, dh) {
        this._baseContext.drawImage(image, dx, dy, dw, dh);
    },
    
    drawImage5: function tab_TabRenderContext2D$drawImage5(image, sx, sy, sw, sh, dx, dy, dw, dh) {
        this._baseContext.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
    },
    
    drawImage6: function tab_TabRenderContext2D$drawImage6(image, sx, sy, sw, sh, dx, dy, dw, dh) {
        this._baseContext.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
    },
    
    fill: function tab_TabRenderContext2D$fill() {
        this._baseContext.fill();
    },
    
    fillRect: function tab_TabRenderContext2D$fillRect(x, y, w, h) {
        this._baseContext.fillRect(x, y, w, h);
    },
    
    fillText1: function tab_TabRenderContext2D$fillText1(text, x, y) {
        if (this._shouldWrapTextCalls()) {
            var drawText = ss.Delegate.create(this, function(s) {
                this._baseContext.fillText(s, 0, 0);
            });
            this._executeTextDrawCommand(drawText, text, x, y);
        }
        else {
            this._baseContext.fillText(text, x, y);
        }
    },
    
    fillText2: function tab_TabRenderContext2D$fillText2(text, x, y, maxWidth) {
        if (this._shouldWrapTextCalls()) {
            var drawText = ss.Delegate.create(this, function(s) {
                this._baseContext.fillText(s, 0, 0, maxWidth);
            });
            this._executeTextDrawCommand(drawText, text, x, y);
        }
        else {
            this._baseContext.fillText(text, x, y, maxWidth);
        }
    },
    
    getImageData: function tab_TabRenderContext2D$getImageData(sx, sy, sw, sh) {
        return this._baseContext.getImageData(sx, sy, sw, sh);
    },
    
    isPointInPath: function tab_TabRenderContext2D$isPointInPath(x, y) {
        return this._baseContext.isPointInPath(x, y);
    },
    
    lineTo: function tab_TabRenderContext2D$lineTo(x, y) {
        this._baseContext.lineTo(x, y);
    },
    
    measureText: function tab_TabRenderContext2D$measureText(text) {
        return this._baseContext.measureText(text);
    },
    
    moveTo: function tab_TabRenderContext2D$moveTo(x, y) {
        this._baseContext.moveTo(x, y);
    },
    
    putImageData1: function tab_TabRenderContext2D$putImageData1(imagedata, dx, dy) {
        this._baseContext.putImageData(imagedata, dx, dy);
    },
    
    putImageData2: function tab_TabRenderContext2D$putImageData2(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
        this._baseContext.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
    },
    
    quadraticCurveTo: function tab_TabRenderContext2D$quadraticCurveTo(cpx, cpy, x, y) {
        this._baseContext.quadraticCurveTo(cpx, cpy, x, y);
    },
    
    rect: function tab_TabRenderContext2D$rect(x, y, w, h) {
        this._baseContext.rect(x, y, w, h);
    },
    
    reset: function tab_TabRenderContext2D$reset() {
        while (this._numSavedStates > 0) {
            this.restore();
        }
        this.setDefaultPropertyValues();
        this.setTransform(1, 0, 0, 1, 0, 0);
        this.save();
    },
    
    restore: function tab_TabRenderContext2D$restore() {
        this._baseContext.restore();
        var restoreState = this._extraStateStack.pop();
        restoreState.applyState(this);
        --this._numSavedStates;
    },
    
    rotate: function tab_TabRenderContext2D$rotate(angle) {
        this._baseContext.rotate(angle);
    },
    
    save: function tab_TabRenderContext2D$save() {
        var saveState = new tab._extraContextState(this._linePattern, this._textAngle, this._shapeFillStyle, this._textFillStyle, this._shouldAntialias, this._shouldUnderlineText);
        this._extraStateStack.push(saveState);
        this._baseContext.save();
        ++this._numSavedStates;
    },
    
    scale: function tab_TabRenderContext2D$scale(x, y) {
        this._baseContext.scale(x, y);
    },
    
    setTransform: function tab_TabRenderContext2D$setTransform(m11, m12, m21, m22, dx, dy) {
        this._baseContext.setTransform(m11, m12, m21, m22, dx, dy);
    },
    
    stroke: function tab_TabRenderContext2D$stroke() {
        this._baseContext.stroke();
    },
    
    strokeRect: function tab_TabRenderContext2D$strokeRect(x, y, w, h) {
        this._baseContext.strokeRect(x, y, w, h);
    },
    
    strokeText1: function tab_TabRenderContext2D$strokeText1(text, x, y) {
        ss.Debug.fail('Not implemented. This requires the same handling as fill color to multiplex the stroke color for lines and text');
    },
    
    strokeText2: function tab_TabRenderContext2D$strokeText2(text, x, y, maxWidth) {
        ss.Debug.fail('Not implemented. This requires the same handling as fill color to multiplex the stroke color for lines and text');
    },
    
    transform: function tab_TabRenderContext2D$transform(m11, m12, m21, m22, dx, dy) {
        this._baseContext.transform(m11, m12, m21, m22, dx, dy);
    },
    
    translate: function tab_TabRenderContext2D$translate(x, y) {
        this._baseContext.translate(x, y);
    },
    
    _clip: function tab_TabRenderContext2D$_clip() {
        this._baseContext.clip();
    },
    
    _shouldWrapTextCalls: function tab_TabRenderContext2D$_shouldWrapTextCalls() {
        return !this.get_isTextAngleHorizontal() || this._shapeFillStyle == null || this._shapeFillStyle !== this._textFillStyle || this._shouldUnderlineText;
    },
    
    _executeTextDrawCommand: function tab_TabRenderContext2D$_executeTextDrawCommand(textDrawingAction, text, x, y) {
        this._baseContext.save();
        this.translate(x, y);
        if (!this.get_isTextAngleHorizontal()) {
            this.rotate(this.get_textAngle());
        }
        this._setBaseFillStyle(this._textFillStyle);
        textDrawingAction(text);
        if (this._shouldUnderlineText) {
            var textWidth = this.measureText(text).width;
            var underlineStrokeWidth = Math.round(Math.max(1, (this._fontSize - 5) / 10));
            var yOffset = Math.round((this._fontSize - 5) / 10);
            var xOffset = 0;
            if (this.get_textAlign() === 'center') {
                xOffset -= textWidth / 2;
            }
            else if (this.get_textAlign() === 'end') {
                xOffset -= textWidth;
            }
            this._baseContext.fillRect(xOffset, yOffset, textWidth, underlineStrokeWidth);
        }
        this._baseContext.restore();
    },
    
    _setBaseFillStyle: function tab_TabRenderContext2D$_setBaseFillStyle(val) {
        if (val !== this._baseContext.fillStyle) {
            this._baseContext.fillStyle = val;
        }
    },
    
    _updateLinePattern: function tab_TabRenderContext2D$_updateLinePattern() {
        var dashedLineArguments = null;
        switch (this._linePattern) {
            case 'solid':
                dashedLineArguments = [];
                break;
            case 'dashed':
                dashedLineArguments = [ tab.TabRenderContext2D.defaultLineDashDashed[0] * this._baseContext.lineWidth, tab.TabRenderContext2D.defaultLineDashDashed[1] * this._baseContext.lineWidth ];
                break;
            case 'dotted':
                dashedLineArguments = [ tab.TabRenderContext2D.defaultLineDashDotted[0] * this._baseContext.lineWidth, tab.TabRenderContext2D.defaultLineDashDotted[1] * this._baseContext.lineWidth ];
                break;
        }
        if ((typeof(this._baseContext.setLineDash) === 'function')) {
            this._baseContext.setLineDash(dashedLineArguments);
        }
        else if (('mozDash' in this._baseContext)) {
            this._baseContext.mozDash = dashedLineArguments;
        }
        else if (('webkitLineDash' in this._baseContext)) {
            this._baseContext.webkitLineDash = dashedLineArguments;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._extraContextState

tab._extraContextState = function tab__extraContextState(linePattern, textAngle, shapeFill, textFill, shouldAntialias, shouldUnderlineText) {
    this._linePattern = linePattern;
    this._textAngle = textAngle;
    this._shapeFillStyle = shapeFill;
    this._textFillStyle = textFill;
    this._shouldAntialias = shouldAntialias;
    this._shouldUnderlineText = shouldUnderlineText;
}
tab._extraContextState.prototype = {
    _linePattern: null,
    _textAngle: 0,
    _shapeFillStyle: null,
    _textFillStyle: null,
    _shouldAntialias: false,
    _shouldUnderlineText: false,
    
    applyState: function tab__extraContextState$applyState(context) {
        context.set_linePattern(this._linePattern);
        context.set_textAngle(this._textAngle);
        context.set_shapeFillStyle(this._shapeFillStyle);
        context.set_textFillStyle(this._textFillStyle);
        context.set_shouldAntialias(this._shouldAntialias);
        context.set_shouldUnderlineText(this._shouldUnderlineText);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SceneInfo

tab.SceneInfo = function tab_SceneInfo() {
    this._hashToImageEltMap = {};
    this._paneDrawInfoMap = {};
    this._markBoundingBoxes = {};
    this._labelBoundingBoxes = {};
    this._fullMarkBoundingBoxes = {};
    this._hiddenTuples = {};
    this._filteredTuples = {};
    this._markGeometries = {};
}
tab.SceneInfo.getPaneMarksKey = function tab_SceneInfo$getPaneMarksKey(paneMarksPM) {
    var rowCol = paneMarksPM.paneId;
    return paneMarksPM.paneDescrKey + '_' + rowCol['columnIndex'] + '_' + rowCol['rowIndex'] + '_' + paneMarksPM.paneIndex;
}
tab.SceneInfo.prototype = {
    _scene: null,
    _brushings: null,
    _isTargetOfBrushingAction: false,
    _impliedSelection: null,
    _selections: null,
    _pdMarksRefCount: null,
    
    get_scene: function tab_SceneInfo$get_scene() {
        return this._scene;
    },
    
    get__hasLabels: function tab_SceneInfo$get__hasLabels() {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._paneDrawInfoMap));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            if (this._paneDrawInfoMap[key].get_hasLabels()) {
                return true;
            }
        }
        return false;
    },
    
    get__hasSelection: function tab_SceneInfo$get__hasSelection() {
        return ss.isValue(this._selections) && this._selections.get_hasPaneTableObjectSelection();
    },
    
    get__hasBrushing: function tab_SceneInfo$get__hasBrushing() {
        return this._isTargetOfBrushingAction || (ss.isValue(this._brushings) && this._brushings.get_hasPaneTableObjectSelection()) || (ss.isValue(this._impliedSelection) && !this._impliedSelection.get_isEmpty());
    },
    
    get_imageDictionary: function tab_SceneInfo$get_imageDictionary() {
        return this._hashToImageEltMap;
    },
    
    get__shapeManager: function tab_SceneInfo$get__shapeManager() {
        return tab.ApplicationModel.get_instance().get_shapeManager();
    },
    
    get__hiddenTuples: function tab_SceneInfo$get__hiddenTuples() {
        return this._hiddenTuples;
    },
    set__hiddenTuples: function tab_SceneInfo$set__hiddenTuples(value) {
        this._hiddenTuples = (value || {});
        return value;
    },
    
    get__filteredTuples: function tab_SceneInfo$get__filteredTuples() {
        return this._filteredTuples;
    },
    set__filteredTuples: function tab_SceneInfo$set__filteredTuples(value) {
        this._filteredTuples = (value || {});
        return value;
    },
    
    get__brushings: function tab_SceneInfo$get__brushings() {
        return this._brushings;
    },
    
    get__selections: function tab_SceneInfo$get__selections() {
        return this._selections;
    },
    
    get__impliedTupleSelection: function tab_SceneInfo$get__impliedTupleSelection() {
        return this._impliedSelection;
    },
    
    _setSceneData: function tab_SceneInfo$_setSceneData(scenePM, selectionsModel, impliedSelectionModel, brushingsModel, colorDict, newHiddenTuples, newFilteredTuples) {
        Object.clearKeys(this._markBoundingBoxes);
        Object.clearKeys(this._fullMarkBoundingBoxes);
        Object.clearKeys(this._labelBoundingBoxes);
        Object.clearKeys(this._paneDrawInfoMap);
        Object.clearKeys(this._markGeometries);
        this._scene = scenePM;
        this.set__hiddenTuples(newHiddenTuples);
        this.set__filteredTuples(newFilteredTuples);
        if (ss.isValue(scenePM) && ss.isValue(scenePM.pdMarksMap)) {
            var pdMarksKeys = Object.keys(scenePM.pdMarksMap);
            var $enum1 = ss.IEnumerator.getEnumerator(pdMarksKeys);
            while ($enum1.moveNext()) {
                var pdMarkKey = $enum1.current;
                var geometries = scenePM.pdMarksMap[pdMarkKey].markGeometries;
                if (ss.isValue(geometries)) {
                    var geometryCount = geometries.length;
                    var parsedGeometries = new Array(geometryCount);
                    for (var i = 0; i < geometryCount; i++) {
                        var strGeometry = geometries[i];
                        var poly = null;
                        if (!tab.MiscUtil.isNullOrEmpty(strGeometry)) {
                            poly = JSON.parse(strGeometry);
                            poly = tab.RleDecoder.decode(poly);
                        }
                        parsedGeometries[i] = poly;
                    }
                    this._markGeometries[pdMarkKey] = parsedGeometries;
                }
            }
            this._pdMarksRefCount = {};
            if (ss.isValue(scenePM.panes)) {
                var $enum2 = ss.IEnumerator.getEnumerator(scenePM.panes);
                while ($enum2.moveNext()) {
                    var pane = $enum2.current;
                    var $enum3 = ss.IEnumerator.getEnumerator(pane.drawPane);
                    while ($enum3.moveNext()) {
                        var vlpm = $enum3.current;
                        if (ss.isValue(vlpm.paneMarks)) {
                            var pdMarksKey = vlpm.paneMarks.paneDescrKey;
                            var initialValue = 0;
                            if (Object.keyExists(this._pdMarksRefCount, pdMarksKey)) {
                                initialValue = this._pdMarksRefCount[pdMarksKey];
                            }
                            this._pdMarksRefCount[pdMarksKey] = initialValue + 1;
                        }
                    }
                }
                var $enum4 = ss.IEnumerator.getEnumerator(scenePM.panes);
                while ($enum4.moveNext()) {
                    var pane = $enum4.current;
                    var $enum5 = ss.IEnumerator.getEnumerator(pane.drawPane);
                    while ($enum5.moveNext()) {
                        var vlpm = $enum5.current;
                        if (ss.isValue(vlpm.paneMarks)) {
                            var paneMarksPM = vlpm.paneMarks;
                            var pdMarksKey = paneMarksPM.paneDescrKey;
                            var pdMarksPM = this._scene.pdMarksMap[pdMarksKey];
                            var pdi = new tab.PaneDrawInfo(pdMarksKey, this, pane, paneMarksPM, pdMarksPM, colorDict);
                            var key = tab.SceneInfo.getPaneMarksKey(paneMarksPM);
                            ss.Debug.assert(!Object.keyExists(this._paneDrawInfoMap, key) || paneMarksPM.startIndex === paneMarksPM.endIndex, 'The key should not be in the dictionary yet, or the pane has no marks.');
                            this._paneDrawInfoMap[key] = pdi;
                        }
                    }
                }
            }
        }
        if (ss.isValue(selectionsModel)) {
            this._selections = selectionsModel;
            this._impliedSelection = impliedSelectionModel;
        }
        if (ss.isValue(brushingsModel)) {
            this._brushings = brushingsModel;
        }
    },
    
    hasSharedData: function tab_SceneInfo$hasSharedData(pdMarksKey) {
        if (ss.isNullOrUndefined(this._pdMarksRefCount) || !Object.keyExists(this._pdMarksRefCount, pdMarksKey)) {
            return false;
        }
        return this._pdMarksRefCount[pdMarksKey] > 1;
    },
    
    getMarkBoundingBox: function tab_SceneInfo$getMarkBoundingBox(tupleID) {
        if (Object.keyExists(this._markBoundingBoxes, tupleID)) {
            return this._markBoundingBoxes[tupleID];
        }
        else {
            return tab.$create_RectXY(0, 0, 0, 0);
        }
    },
    
    _getMarkGeometry: function tab_SceneInfo$_getMarkGeometry(pdMarkKey, geometryIndex) {
        if (Object.keyExists(this._markGeometries, pdMarkKey) && geometryIndex >= 0 && geometryIndex < this._markGeometries[pdMarkKey].length) {
            return this._markGeometries[pdMarkKey][geometryIndex];
        }
        return null;
    },
    
    prepareForDraw: function tab_SceneInfo$prepareForDraw(dirtyRect) {
        this._computeDirtyMarks(dirtyRect);
        this._refreshMarkState();
    },
    
    cleanupFromDraw: function tab_SceneInfo$cleanupFromDraw() {
        this._clearDirtyMarks();
    },
    
    _getLabelBoundingBox: function tab_SceneInfo$_getLabelBoundingBox(tupleID) {
        if (Object.keyExists(this._labelBoundingBoxes, tupleID)) {
            return this._labelBoundingBoxes[tupleID];
        }
        else {
            return tab.$create_RectXY(0, 0, 0, 0);
        }
    },
    
    _getSloppyLabelBoundingBox: function tab_SceneInfo$_getSloppyLabelBoundingBox(tupleID) {
        var Slop = 1;
        var bbox = this._getLabelBoundingBox(tupleID);
        if (tab.RectXYUtil.isNull(bbox)) {
            return bbox;
        }
        return tab.RectXYUtil.outsetRect(bbox, Slop, Slop);
    },
    
    _getMarksInvalidationRects: function tab_SceneInfo$_getMarksInvalidationRects(tupleIDs) {
        var rects = [];
        var $enum1 = ss.IEnumerator.getEnumerator(tupleIDs);
        while ($enum1.moveNext()) {
            var tupleID = $enum1.current;
            var markInvalRects = this._getMarkInvalidationRects(tupleID);
            rects.addRange(markInvalRects);
        }
        return rects;
    },
    
    _getMarkInvalidationRects: function tab_SceneInfo$_getMarkInvalidationRects(tupleID) {
        var invalAll = false;
        var invalRects = [];
        var paneRects = [];
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._paneDrawInfoMap));
        while ($enum1.moveNext()) {
            var pdiKey = $enum1.current;
            var markType = this._paneDrawInfoMap[pdiKey].get_markType();
            if (markType === 'area' || markType === 'line') {
                invalAll = true;
            }
            paneRects.add(this._paneDrawInfoMap[pdiKey].get_paneRect());
        }
        var $enum2 = ss.IEnumerator.getEnumerator(this._scene.panes);
        while ($enum2.moveNext()) {
            var ppm = $enum2.current;
            if (ppm.renderNodes.length > 0) {
                invalAll = true;
                break;
            }
        }
        if (invalAll) {
            invalRects.addRange(paneRects);
        }
        else {
            var markRect = this._getFullMarkSloppyBounds(tupleID);
            var paneDrawInfo = this._getPaneDrawInfoFromTupleId(tupleID);
            if (ss.isValue(paneDrawInfo)) {
                var boundingBoxes = paneDrawInfo.getWorldOffsetMarkBounds(markRect);
                invalRects.addRange(boundingBoxes);
                var labelRect = this._getSloppyLabelBoundingBox(tupleID);
                if (!tab.RectXYUtil.isNull(labelRect)) {
                    invalRects.add(labelRect);
                }
            }
        }
        return invalRects;
    },
    
    _updateImageMap: function tab_SceneInfo$_updateImageMap(imageDictPM, imageLoadedCallback) {
        if (ss.isValue(imageDictPM) && ss.isValue(imageDictPM.imageMap)) {
            var $dict1 = imageDictPM.imageMap;
            for (var $key2 in $dict1) {
                var hashImagePair = { key: $key2, value: $dict1[$key2] };
                var imageKey = hashImagePair.key;
                if (!Object.keyExists(this._hashToImageEltMap, imageKey)) {
                    var imageData = hashImagePair.value;
                    var imgElt = document.createElement('img');
                    imgElt.src = 'data:image/jpeg;base64,' + imageData;
                    this._hashToImageEltMap[imageKey] = imgElt;
                    var imageFinishedLoad = null;
                    imageFinishedLoad = function() {
                        if (ss.isValue(imageLoadedCallback)) {
                            imageLoadedCallback();
                        }
                        imgElt.removeEventListener('load', imageFinishedLoad, false);
                    };
                    imgElt.addEventListener('load', imageFinishedLoad, false);
                }
            }
            var $enum3 = ss.IEnumerator.getEnumerator(Object.keys(this._hashToImageEltMap));
            while ($enum3.moveNext()) {
                var imgHash = $enum3.current;
                if (!Object.keyExists(imageDictPM.imageMap, imgHash)) {
                    delete this._hashToImageEltMap[imgHash];
                }
            }
        }
    },
    
    _isMarkSelected: function tab_SceneInfo$_isMarkSelected(tupleID) {
        return this.get__hasSelection() && this._selections.get_tupleSelection().isMarkSelected(tupleID);
    },
    
    _isMarkBrushed: function tab_SceneInfo$_isMarkBrushed(tupleID) {
        return this.get__hasBrushing() && ((ss.isValue(this._brushings) && this._brushings.get_tupleSelection().isMarkSelected(tupleID)) || this._isMarkImpliedSelected(tupleID));
    },
    
    _isMarkImpliedSelected: function tab_SceneInfo$_isMarkImpliedSelected(tupleId) {
        return ss.isValue(this._impliedSelection) && this._impliedSelection.isMarkSelected(tupleId);
    },
    
    _isMarkVisible: function tab_SceneInfo$_isMarkVisible(tupleID) {
        return !Object.keyExists(this._hiddenTuples, tupleID.toString());
    },
    
    _isMarkFiltered: function tab_SceneInfo$_isMarkFiltered(tupleID) {
        return Object.keyExists(this._filteredTuples, tupleID.toString());
    },
    
    _setLabelInfo: function tab_SceneInfo$_setLabelInfo(labelPM) {
        if (ss.isValue(labelPM) && ss.isValue(labelPM.panes)) {
            var $enum1 = ss.IEnumerator.getEnumerator(labelPM.panes);
            while ($enum1.moveNext()) {
                var pane = $enum1.current;
                var $enum2 = ss.IEnumerator.getEnumerator(pane.drawPane);
                while ($enum2.moveNext()) {
                    var vlpm = $enum2.current;
                    if (ss.isValue(vlpm.paneMarks)) {
                        var paneMarksPM = vlpm.paneMarks;
                        var key = tab.SceneInfo.getPaneMarksKey(paneMarksPM);
                        if (ss.isValue(Object.keyExists(this._paneDrawInfoMap, key))) {
                            var pdi = this._paneDrawInfoMap[key];
                            var pdMarksKey = paneMarksPM.paneDescrKey;
                            var pdMarksPM = labelPM.pdMarksMap[pdMarksKey];
                            pdi.addLabelInfo(pdMarksPM, paneMarksPM);
                        }
                    }
                }
            }
        }
    },
    
    _getPaneDrawInfo: function tab_SceneInfo$_getPaneDrawInfo(paneMarks) {
        var toRet = null;
        if (ss.isValue(paneMarks)) {
            toRet = this._paneDrawInfoMap[tab.SceneInfo.getPaneMarksKey(paneMarks)];
        }
        return toRet;
    },
    
    getPaneDrawInfoFromKey: function tab_SceneInfo$getPaneDrawInfoFromKey(paneMarksKey) {
        return this._paneDrawInfoMap[paneMarksKey];
    },
    
    _getPaneDrawInfoFromTupleId: function tab_SceneInfo$_getPaneDrawInfoFromTupleId(tupleId) {
        var tupleIndex = -1;
        var paneKey = '';
        var pdMarks = this._scene.pdMarksMap;
        var $dict1 = pdMarks;
        for (var $key2 in $dict1) {
            var pair = { key: $key2, value: $dict1[$key2] };
            var dataCol = pair.value.encodingColumns['tuple_id'];
            var tuples = dataCol.dataValues;
            tupleIndex = tuples.indexOf(tupleId);
            if (tupleIndex !== -1) {
                paneKey = pair.key;
                break;
            }
        }
        var targetPaneMarks = null;
        if (tupleIndex !== -1 && !tab.MiscUtil.isNullOrEmpty(paneKey)) {
            var $enum3 = ss.IEnumerator.getEnumerator(this._scene.panes);
            while ($enum3.moveNext()) {
                var pane = $enum3.current;
                var paneVlpm = _.find(pane.drawPane, function(iterator) {
                    return ss.isValue(iterator.paneMarks);
                });
                if (ss.isValue(paneVlpm)) {
                    var paneMarks = paneVlpm.paneMarks;
                    if (paneKey === paneMarks.paneDescrKey && tupleIndex >= paneMarks.startIndex && tupleIndex < paneMarks.endIndex) {
                        targetPaneMarks = paneMarks;
                    }
                }
            }
        }
        if (ss.isValue(targetPaneMarks)) {
            return this._getPaneDrawInfo(targetPaneMarks);
        }
        tab.Log.get(this).warn('Failed getting pane draw info for tuple id: %i', tupleId);
        return null;
    },
    
    _setIsTargetOfBrushingAction: function tab_SceneInfo$_setIsTargetOfBrushingAction(isTarget) {
        this._isTargetOfBrushingAction = isTarget;
    },
    
    _addMarkBoundingBoxes: function tab_SceneInfo$_addMarkBoundingBoxes(bboxes) {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(bboxes));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            this._markBoundingBoxes[key] = bboxes[key];
        }
    },
    
    _addLabelBoundingBoxes: function tab_SceneInfo$_addLabelBoundingBoxes(bboxes) {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(bboxes));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            this._labelBoundingBoxes[key] = bboxes[key];
        }
    },
    
    _addFullMarkBoundingBoxes: function tab_SceneInfo$_addFullMarkBoundingBoxes(bboxes) {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(bboxes));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            this._fullMarkBoundingBoxes[key] = bboxes[key];
        }
    },
    
    _getFullMarkSloppyBounds: function tab_SceneInfo$_getFullMarkSloppyBounds(tupleID) {
        var Slop = 3;
        var bbox = this._fullMarkBoundingBoxes[tupleID];
        if (ss.isNullOrUndefined(bbox)) {
            bbox = this.getMarkBoundingBox(tupleID);
        }
        if (tab.RectXYUtil.isNull(bbox)) {
            return bbox;
        }
        return tab.RectXYUtil.outsetRect(bbox, Slop, Slop);
    },
    
    _computeDirtyMarks: function tab_SceneInfo$_computeDirtyMarks(dirtyRect) {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._paneDrawInfoMap));
        while ($enum1.moveNext()) {
            var pdiKey = $enum1.current;
            var pdi = this._paneDrawInfoMap[pdiKey];
            pdi.computeDirtyMarks(dirtyRect);
        }
    },
    
    _clearDirtyMarks: function tab_SceneInfo$_clearDirtyMarks() {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._paneDrawInfoMap));
        while ($enum1.moveNext()) {
            var pdiKey = $enum1.current;
            var pdi = this._paneDrawInfoMap[pdiKey];
            pdi.clearDirtyMarks();
        }
    },
    
    _refreshMarkState: function tab_SceneInfo$_refreshMarkState() {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._paneDrawInfoMap));
        while ($enum1.moveNext()) {
            var pdiKey = $enum1.current;
            var pdi = this._paneDrawInfoMap[pdiKey];
            pdi.refreshMarkState();
        }
    },
    
    _clearMarkState: function tab_SceneInfo$_clearMarkState() {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._paneDrawInfoMap));
        while ($enum1.moveNext()) {
            var pdiKey = $enum1.current;
            var pdi = this._paneDrawInfoMap[pdiKey];
            pdi.clearMarkState();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShapeUtil

tab.ShapeUtil = function tab_ShapeUtil() {
}
tab.ShapeUtil.generateSelectedUnderCustomShape = function tab_ShapeUtil$generateSelectedUnderCustomShape(image, color, borderSize, scaleWidth, scaleHeight, allowHighQualityScaling) {
    var element = tab.ShapeUtil.colorTransformImage(image, color, scaleWidth, scaleHeight, allowHighQualityScaling);
    var selected = document.createElement('canvas');
    var sizeIncrease = borderSize * 2;
    selected.width = Math.ceil(scaleWidth + sizeIncrease);
    selected.height = Math.ceil(scaleHeight + sizeIncrease);
    var context = selected.getContext('2d');
    context.drawImage(element, 0, 0, scaleWidth, scaleHeight);
    context.drawImage(element, borderSize, 0, scaleWidth, scaleHeight);
    context.drawImage(element, sizeIncrease, 0, scaleWidth, scaleHeight);
    context.drawImage(element, sizeIncrease, borderSize, scaleWidth, scaleHeight);
    context.drawImage(element, sizeIncrease, sizeIncrease, scaleWidth, scaleHeight);
    context.drawImage(element, borderSize, sizeIncrease, scaleWidth, scaleHeight);
    context.drawImage(element, 0, sizeIncrease, scaleWidth, scaleHeight);
    context.drawImage(element, 0, borderSize, scaleWidth, scaleHeight);
    return selected;
}
tab.ShapeUtil.generateOverlayForShape = function tab_ShapeUtil$generateOverlayForShape(image, color, overlayBorderSize, scaleWidth, scaleHeight, allowHighQualityScaling) {
    var element = tab.ShapeUtil.generateSelectedUnderCustomShape(image, color, overlayBorderSize, scaleWidth, scaleHeight, allowHighQualityScaling);
    var context = element.getContext('2d');
    context.globalCompositeOperation = 'destination-out';
    context.drawImage(image, overlayBorderSize, overlayBorderSize, scaleWidth, scaleHeight);
    return element;
}
tab.ShapeUtil.colorTransformImage = function tab_ShapeUtil$colorTransformImage(image, color, width, height, allowHighQualityScaling) {
    var element = tab.ShapeUtil.generateCanvasAndPrescaleAsNeeded(image, width, height, allowHighQualityScaling);
    var context = element.getContext('2d');
    var pixels = context.getImageData(0, 0, element.width, element.height);
    for (var i = 0; i < pixels.data.length; i += 4) {
        if (pixels.data[i + 3] > 0) {
            pixels.data[i] = color.get_r();
            pixels.data[i + 1] = color.get_g();
            pixels.data[i + 2] = color.get_b();
        }
    }
    context.putImageData(pixels, 0, 0);
    return element;
}
tab.ShapeUtil.applyFoggingToImage = function tab_ShapeUtil$applyFoggingToImage(image, fogBackgroundColor, fogBlendAlpha, width, height, allowHighQualityScaling) {
    var element = tab.ShapeUtil.generateCanvasAndPrescaleAsNeeded(image, width, height, allowHighQualityScaling);
    var context = element.getContext('2d');
    var pixels = context.getImageData(0, 0, element.width, element.height);
    for (var i = 0; i < pixels.data.length; i += 4) {
        if (pixels.data[i + 3] > 0) {
            pixels.data[i] = fogBackgroundColor.get_r() + (pixels.data[i] * fogBlendAlpha);
            pixels.data[i + 1] = fogBackgroundColor.get_g() + (pixels.data[i + 1] * fogBlendAlpha);
            pixels.data[i + 2] = fogBackgroundColor.get_b() + (pixels.data[i + 2] * fogBlendAlpha);
        }
    }
    context.putImageData(pixels, 0, 0);
    return element;
}
tab.ShapeUtil.generateCanvasAndPrescaleAsNeeded = function tab_ShapeUtil$generateCanvasAndPrescaleAsNeeded(image, finalWidth, finalHeight, allowHighQualityScaling) {
    if (!ss.isValue(image)) {
        return document.createElement('canvas');
    }
    if (image.width > finalWidth * 2 && image.height > finalHeight * 2) {
        if (allowHighQualityScaling) {
            return tab.ImageUtil.scaleImage(image, Math.floor(finalWidth), Math.floor(finalHeight), image.naturalWidth, image.naturalHeight);
        }
        else {
            var element = document.createElement('canvas');
            element.width = image.naturalWidth / 2;
            element.height = image.naturalHeight / 2;
            var context = element.getContext('2d');
            context.drawImage(image, 0, 0, element.width, element.height);
            return element;
        }
    }
    else {
        var element = document.createElement('canvas');
        element.width = image.naturalWidth;
        element.height = image.naturalHeight;
        var context = element.getContext('2d');
        context.drawImage(image, 0, 0, element.width, element.height);
        return element;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ResolveSelectAction

tab.ResolveSelectAction = function tab_ResolveSelectAction() {
}
tab.ResolveSelectAction.fromNormalizedEvent = function tab_ResolveSelectAction$fromNormalizedEvent(pseudoEvent, isMultiSelect, selectingMarks) {
    var action = tableau.util.getSelectAction(pseudoEvent);
    if (ss.isValue(isMultiSelect) && isMultiSelect && action === 'toggle') {
        action = 'range';
    }
    else if (!!!isMultiSelect && !!selectingMarks && action === 'range') {
        action = 'simple';
    }
    return action;
}


////////////////////////////////////////////////////////////////////////////////
// tableau.util

tableau.util = function tableau_util() {
}
tableau.util.assetUrl = function tableau_util$assetUrl(res, useLocal) {
    var prefix = (useLocal) ? tsConfig.local_static_asset_prefix : tsConfig.external_static_asset_prefix;
    if (res.charAt(0) === '/') {
        var last_prefix_char_index = prefix.length - 1;
        if (prefix.charAt(last_prefix_char_index) === '/') {
            return prefix.substring(0, last_prefix_char_index - 1) + res;
        }
        else {
            return prefix + res;
        }
    }
    else {
        return prefix + '/' + res;
    }
}
tableau.util.selectText = function tableau_util$selectText(field, start, end) {
    if (ss.isNullOrUndefined(field)) {
        return;
    }
    if ((typeof(field.createTextRange) === 'function')) {
        var selRange = field.createTextRange();
        selRange.collapse(true);
        selRange.moveStart('character', start);
        selRange.moveEnd('character', end - start);
        selRange.select();
    }
    else if ((typeof(field.setSelectionRange) === 'function')) {
        field.setSelectionRange(start, end);
    }
    else if ((typeof(field.selectionStart) === 'function')) {
        field.selectionStart = start;
        field.selectionEnd = end;
    }
    field.focus();
}
tableau.util.isPrintableNonNumericKeyPressed = function tableau_util$isPrintableNonNumericKeyPressed(e) {
    return tableau.util.isPrintableNonNumericInput(e.which, e.shiftKey, e.ctrlKey);
}
tableau.util.isPrintableNonNumericInput = function tableau_util$isPrintableNonNumericInput(charCode, shiftKey, ctlKey) {
    var isNavigationOrNumPadkeyCode = (charCode >= 91 && charCode <= 105);
    var isFunctionKeyCode = (charCode >= 112 && charCode <= 123);
    var isNonPrintable = charCode < 47;
    var isNumber = !shiftKey && !ctlKey && (charCode >= 48 && charCode <= 57);
    return !isNavigationOrNumPadkeyCode && !isNonPrintable && !isNumber && !isFunctionKeyCode;
}
tableau.util.preventNonNumericInput = function tableau_util$preventNonNumericInput(e) {
    if (tableau.util.isPrintableNonNumericKeyPressed(e)) {
        e.preventDefault();
        e.stopPropagation();
    }
}
tableau.util.isElementVisible = function tableau_util$isElementVisible(node) {
    node = dojo.byId(node);
    return dojo.style(node, 'display') !== 'none';
}
tableau.util.overElement = function tableau_util$overElement(node, e) {
    node = dojo.byId(node);
    var mouse = tab.$create_Point(e.pageX, e.pageY);
    var absolute = dojo.coords(node, true);
    var top = absolute.y;
    var bottom = top + absolute.h;
    var left = absolute.x;
    var right = left + absolute.w;
    return (mouse.x >= left && mouse.x <= right && mouse.y >= top && mouse.y <= bottom);
}
tableau.util.disableTextSelection = function tableau_util$disableTextSelection(element) {
    if ((typeof(element.onselectstart) === 'function')) {
        var onselStart = function(e) {
            dojo.stopEvent(e);
        };
        element.onselectstart = onselStart;
    }
    else if (('MozUserSelect' in element.style)) {
        element.style['MozUserSelect'] = 'none';
    }
    element.style.cursor = 'default';
}
tableau.util.getSelectAction = function tableau_util$getSelectAction(e) {
    var action = 'simple';
    var toggle = spiff.EventUtil.isCtrlKey(e);
    if (e.shiftKey) {
        action = 'range';
    }
    if (toggle) {
        action = 'toggle';
    }
    return action;
}
tableau.util.resize = function tableau_util$resize(node, bbox) {
    if ((typeof(node.resize) === 'function')) {
        node.resize(tab.$create_Rect(bbox.x, bbox.y, bbox.w, bbox.h));
    }
    else {
        if (('domNode' in node)) {
            node = node.domNode;
        }
        dojo.marginBox(node, tab.$create_Rect(bbox.x, bbox.y, bbox.w, bbox.h));
    }
}
tableau.util.findElementByTagName = function tableau_util$findElementByTagName(rootNode, tagName, attrMap) {
    rootNode = (rootNode || dojo.body());
    if (tableau.util.isNodeMatch(rootNode, tagName, attrMap)) {
        return rootNode;
    }
    var elems = rootNode.getElementsByTagName(tagName);
    var length = elems.length;
    for (var i = 0; i < length; i += 1) {
        if (tableau.util.isNodeMatch(elems[i], tagName, attrMap)) {
            return elems[i];
        }
    }
    return null;
}
tableau.util.findDirectParentByClassName = function tableau_util$findDirectParentByClassName(startNode, className, endNode) {
    if (ss.isNullOrUndefined(startNode) || tab.MiscUtil.isNullOrEmpty(className)) {
        return null;
    }
    endNode = (endNode || document.body);
    var currentNode = startNode.parentNode;
    while (!ss.isNullOrUndefined(currentNode) && currentNode !== endNode) {
        if (!tab.MiscUtil.isNullOrEmpty(currentNode.className)) {
            if (currentNode.className.toLowerCase() === className.toLowerCase()) {
                return currentNode;
            }
            currentNode = currentNode.parentNode;
        }
    }
    return null;
}
tableau.util.isNodeMatch = function tableau_util$isNodeMatch(node, tagName, attrMap) {
    if (ss.isNullOrUndefined(node) || node.tagName.toLowerCase() !== tagName.toLowerCase()) {
        return false;
    }
    if (ss.isNullOrUndefined(attrMap)) {
        return true;
    }
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(attrMap));
    while ($enum1.moveNext()) {
        var attr = $enum1.current;
        if ((attr in attrMap) && node[attr] !== attrMap[attr]) {
            return false;
        }
    }
    return true;
}
tableau.util.binarySearch = function tableau_util$binarySearch(value, array, startIndex, endIndex, comparer) {
    var min = (tab.MiscUtil.isValidIndex(startIndex || -1, array)) ? startIndex : 0;
    var max = (tab.MiscUtil.isValidIndex(endIndex || -1, array)) ? endIndex : (array.length - 1);
    if (ss.isNullOrUndefined(comparer)) {
        comparer = tableau.util._defaultComparer;
    }
    var res = {};
    while (min <= max) {
        var mid = Math.floor(min + ((max - min) / 2));
        var compare = comparer(array[mid], value);
        if (!compare) {
            res.found = true;
            res.index = mid;
            return res;
        }
        else if (compare < 0) {
            min = mid + 1;
        }
        else {
            max = mid - 1;
        }
    }
    res.found = false;
    res.index = min;
    return res;
}
tableau.util._defaultComparer = function tableau_util$_defaultComparer(item1, item2) {
    if (item1 === item2) {
        return 0;
    }
    else if (item1 > item2) {
        return -1;
    }
    else {
        return 1;
    }
}
tableau.util.showAlertDialog = function tableau_util$showAlertDialog(content, title, isContentSelectable) {
    var options = {};
    options.content = content;
    options.title = title;
    options.buttons = 'None';
    var dialog = new tableau.base.widget.Dialog(options);
    if (isContentSelectable) {
        tableau.util._makeDialogContentsSelectable(dialog);
    }
    dialog.show();
    dialog.layout();
}
tableau.util.showConfirmationDialog = function tableau_util$showConfirmationDialog(content, title, isContentSelectable, onYes, onNo) {
    var options = {};
    options.content = content;
    options.title = title;
    options.buttons = 'YesNo';
    options.onYes = onYes;
    options.onNo = onNo;
    var dialog = new tableau.base.widget.Dialog(options);
    if (isContentSelectable) {
        tableau.util._makeDialogContentsSelectable(dialog);
    }
    dialog.show();
    dialog.layout();
}
tableau.util._makeDialogContentsSelectable = function tableau_util$_makeDialogContentsSelectable(dialog) {
    spiff.Widget.enableTextSelectionOnElement($(dialog.containerNode));
}
tableau.util.transform = function tableau_util$transform(node, spec) {
    var str = '';
    var defaults = tab.$create_TransformSpec();
    defaults.scaleX = 1;
    defaults.scaleY = 1;
    defaults.translateX = 0;
    defaults.translateY = 0;
    defaults.time = 0;
    spec = dojo.mixin(defaults, (spec || tab.$create_TransformSpec()));
    if (!!spec.scale) {
        spec.scaleX = spec.scaleY = spec.scale;
    }
    if (tableau.util.has3D) {
        str = ([ 'translate3d(', spec.translateX.toString(), 'px,', spec.translateY.toString(), 'px, 0px)' ]).join('');
    }
    else {
        str = ([ 'translate(', spec.translateX.toString(), 'px,', spec.translateY.toString(), 'px)' ]).join('');
    }
    str += ([ ' scale(', spec.scaleX.toString(), ', ', spec.scaleY.toString(), ')' ]).join('');
    if (tab.BrowserSupport.get_cssTransform() && ss.isValue(tab.BrowserSupport.get_cssTransitionName())) {
        node.style['transitionProperty'] = 'transform';
        node.style['transitionTimingFunction'] = 'cubic-bezier(0, 0, 0.25, 1)';
        node.style['transitionDuration'] = spec.time + 'ms';
        node.style['transform'] = str;
        node.style['webkitTransitionProperty'] = '-webkit-transform';
        node.style['webkitTransitionTimingFunction'] = 'cubic-bezier(0, 0, 0.25, 1)';
        node.style['webkitTransitionDuration'] = spec.time + 'ms';
        node.style['webkitTransform'] = str;
        node.style['MozTransitionProperty'] = '-moz-transform';
        node.style['MozTransitionTimingFunction'] = 'cubic-bezier(0, 0, 0.25, 1)';
        node.style['MozTransitionDuration'] = spec.time + 'ms';
        node.style['MozTransform'] = str;
    }
    else if (tab.BrowserSupport.get_isIE()) {
        if (tab.BrowserSupport.get_browserVersion() > 8) {
            node.style['msTransform'] = str;
        }
        else if (spec.scaleX === 1 && spec.scaleY === 1) {
            dojo.marginBox(node, { t: spec.translateY, l: spec.translateX });
        }
    }
}
tableau.util.defer = function tableau_util$defer(action) {
    if (!tableau.util.bIsAnimationShown) {
        tableau.util._deferredCalls.add(action);
    }
    else {
        action();
    }
}
tableau.util.performDeferredCalls = function tableau_util$performDeferredCalls() {
    var ln = tableau.util._deferredCalls.length;
    for (var i = 0; i < ln; i++) {
        window.setTimeout(tableau.util._deferredCalls[i], i);
    }
    tableau.util._deferredCalls.clear();
    tableau.util.bIsAnimationShown = true;
}
tableau.util.localizeDojoLabeledControls = function tableau_util$localizeDojoLabeledControls(controlStringKeyPairs) {
    var pairs = controlStringKeyPairs;
    var len = pairs.length;
    for (var i = 0; i < len; i++) {
        var control = pairs[i].first;
        var stringKey = pairs[i].second;
        if (ss.isValue(control)) {
            control.attr('label', tab.Strings.getString(stringKey));
        }
    }
}
tableau.util.createCheckBox = function tableau_util$createCheckBox(clickHandler, label, checkClass, tabIndex, isChecked, disposables) {
    var checkboxLabel = $('<span>').addClass(checkClass).append($("<input type='checkbox' " + ((isChecked) ? 'checked' : '') + '>').attr('tabindex', tabIndex.toString())).append($('<label>').text(label));
    disposables.add(spiff.ClickHandler.targetAndClick(checkboxLabel.find('input'), clickHandler));
    disposables.add(spiff.ClickHandler.targetAndClick(checkboxLabel.find('label'), clickHandler));
    return checkboxLabel;
}
tableau.util.createMobileCheckBox = function tableau_util$createMobileCheckBox(changeHandler, label, checkClass, tabIndex, isChecked, disposables) {
    var checkboxLabel = $('<label>').addClass(checkClass);
    var checkboxControl = $('<div>').addClass('tabAuthCheckbox');
    checkboxControl.toggleClass('checked', isChecked).attr('tabindex', tabIndex.toString());
    checkboxLabel.append(checkboxControl);
    disposables.add(spiff.ClickHandler.targetAndClick(checkboxLabel, function(e) {
        checkboxControl.toggleClass('checked');
        changeHandler(checkboxControl.hasClass('checked'));
    }));
    checkboxLabel.append($('<span>').text(label));
    return checkboxLabel;
}
tableau.util.parseUri = function tableau_util$parseUri(uri) {
    var a = document.createElement('a');
    if (ss.isNullOrUndefined(uri)) {
        return null;
    }
    a.href = uri;
    var parsedUri = { href: uri, host: a.host, hostname: a.hostname, pathname: a.pathname, port: a.port, protocol: a.protocol, search: a.search };
    return parsedUri;
}
tableau.util.setupTitleEllipsis = function tableau_util$setupTitleEllipsis(domTitleBar) {
    var div = domTitleBar.find('div');
    var partitions = div.children('span');
    var ellipsisPart = null;
    var titleWidth = div.width();
    var ELLIPSIS_BUFFER = 10;
    titleWidth -= ELLIPSIS_BUFFER;
    for (var i = 0; i < partitions.length; i++) {
        var partition = partitions[i];
        var partWidth = $(partition).width();
        ellipsisPart = partition;
        if (partWidth > titleWidth) {
            break;
        }
        titleWidth -= partWidth;
    }
    if (ss.isValue(ellipsisPart)) {
        div.css('font-family', ellipsisPart.style.fontFamily);
        div.css('font-size', ellipsisPart.style.fontSize);
        div.css('line-height', ellipsisPart.style.lineHeight);
        div.css('color', ellipsisPart.style.color);
        div.css('font-weight', ellipsisPart.style.fontWeight);
        div.css('font-style', ellipsisPart.style.fontStyle);
        div.css('text-decoration', ellipsisPart.style.textDecoration);
    }
    div.css('text-overflow', 'ellipsis');
    div.css('overflow', 'hidden');
}


////////////////////////////////////////////////////////////////////////////////
// tableau.util.NoClickDelay

tableau.util.NoClickDelay = function tableau_util_NoClickDelay(el) {
    this._element = el;
    this._handler = this;
    if (tab.BrowserSupport.get_touch()) {
        this._element.addEventListener('touchstart', this._handler, false);
    }
}
tableau.util.NoClickDelay.prototype = {
    _element: null,
    _moved: false,
    _handler: null,
    
    handleEvent: function tableau_util_NoClickDelay$handleEvent(e) {
        switch (e.type) {
            case 'touchstart':
                this._onTouchStart(e);
                break;
            case 'touchmove':
                this._onTouchMove(e);
                break;
            case 'touchend':
                this._onTouchEnd(e);
                break;
        }
    },
    
    _onTouchStart: function tableau_util_NoClickDelay$_onTouchStart(e) {
        e.preventDefault();
        this._moved = false;
        this._element.addEventListener('touchmove', this._handler, false);
        this._element.addEventListener('touchend', this._handler, false);
    },
    
    _onTouchMove: function tableau_util_NoClickDelay$_onTouchMove(e) {
        this._moved = true;
    },
    
    _onTouchEnd: function tableau_util_NoClickDelay$_onTouchEnd(e) {
        this._element.removeEventListener('touchmove', this._handler, false);
        this._element.removeEventListener('touchend', this._handler, false);
        if (!this._moved) {
            var theTarget = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY);
            if (theTarget.nodeType === 3) {
                theTarget = theTarget.parentNode;
            }
            var theEvent = document.createEvent('MouseEvents');
            theEvent.initEvent('click', true, true);
            theTarget.dispatchEvent(theEvent);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.URIUtil

tab.URIUtil = function tab_URIUtil() {
}
tab.URIUtil.absolutizeURI = function tab_URIUtil$absolutizeURI(uri) {
    if (ss.isValue(uri)) {
        uri = uri.trim();
    }
    if (String.isNullOrEmpty(uri)) {
        return uri;
    }
    var schemeRegex = new RegExp('^([a-zA-Z0-9]+):(?!\\d+(/|$))');
    var matches = uri.match(schemeRegex);
    if (ss.isValue(matches) && matches[1] !== 'http' && matches[1] !== 'https') {
        return uri;
    }
    var cleanHTTP = 'http://';
    var httpsRegex = new RegExp('^https:|^/?/?[a-zA-Z0-9.-]+:443(/|$)');
    if (httpsRegex.test(uri)) {
        cleanHTTP = 'https://';
    }
    var sloppyHTTPRegex = new RegExp('^(https?:)?/?/?');
    uri = uri.replace(sloppyHTTPRegex, cleanHTTP);
    return uri;
}


////////////////////////////////////////////////////////////////////////////////
// tab.ViewState2

tab.ViewState2 = function tab_ViewState2() {
}
tab.ViewState2.prototype = {
    newActive: null,
    oldActive: null,
    data: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.WidgetUtil

tab.WidgetUtil = function tab_WidgetUtil() {
}
tab.WidgetUtil.newMenuItemsFromCommands = function tab_WidgetUtil$newMenuItemsFromCommands(items, c, createItemData, commandPermission) {
    if (ss.isNullOrUndefined(c)) {
        return;
    }
    var commandsWrapper = tab.CommandsPresModelWrapper.create(c);
    if (!ss.isValue(commandsWrapper.get_commandItems())) {
        return;
    }
    var lastAddedWasDivider = true;
    var $enum1 = ss.IEnumerator.getEnumerator(commandsWrapper.get_commandItems());
    while ($enum1.moveNext()) {
        var ci = $enum1.current;
        var mi = null;
        var itemWrapper = tab.CommandItemWrapper.create(ci);
        var isPermissable = true;
        if (ss.isValue(itemWrapper.get_command()) && ss.isValue(commandPermission)) {
            var com = tab.$create_CommandModel();
            com.command = tab.CommandSerializer.deserialize(itemWrapper.get_command());
            tab.UbertipSerializer.setCommandType(com);
            isPermissable = commandPermission.test(com);
        }
        if (!isPermissable || (ss.isValue(itemWrapper.get_isVisible()) && !itemWrapper.get_isVisible())) {
            continue;
        }
        switch (itemWrapper.get_commandsType()) {
            case 'item':
                mi = spiff.MenuItem.newItem(createItemData(ci), itemWrapper.get_name());
                mi.set_description(itemWrapper.get_description());
                break;
            case 'separator':
                if (!lastAddedWasDivider) {
                    mi = spiff.MenuItem.newDivider();
                }
                break;
            case 'subcommands':
                var subItems = [];
                tab.WidgetUtil.newMenuItemsFromCommands(subItems, itemWrapper.get_commands(), createItemData, commandPermission);
                if (subItems.length > 0) {
                    mi = spiff.MenuItem.newItem(null, itemWrapper.get_name(), spiff.MenuItemCheckState.none, new spiff.Menu(subItems));
                }
                break;
        }
        if (ss.isValue(mi)) {
            mi.set_enabled(!ss.isValue(itemWrapper.get_enabled()) || itemWrapper.get_enabled());
            if (itemWrapper.get_isRadioOn()) {
                mi.set_checkState(spiff.MenuItemCheckState.radio);
            }
            else if (itemWrapper.get_isChecked()) {
                mi.set_checkState(spiff.MenuItemCheckState.check);
            }
            items.add(mi);
            lastAddedWasDivider = mi.get_isDivider();
        }
    }
    if (items.length > 0 && items[items.length - 1].get_isDivider()) {
        items.removeAt(items.length - 1);
    }
}
tab.WidgetUtil.createDropdownMenuCommands = function tab_WidgetUtil$createDropdownMenuCommands(commandModel) {
    var c = tab.CommandSerializer.deserialize(tab.CommandItemWrapper.create(commandModel).get_command());
    var cmdAction = function() {
        tab.ServerCommands.executeServerCommand(c, 'immediately');
    };
    return cmdAction;
}


////////////////////////////////////////////////////////////////////////////////
// tab.ViewController

tab.ViewController = function tab_ViewController(sheetName, session, id) {
    this.id = -1;
    this._disposables = new tab.DisposableHolder();
    this.sheetName = sheetName;
    this.viewSession = session;
    this.id = id;
    tab.Log.get(this).debug('New: %s %s', this.sheetName, this.id);
    this._registerForEvents();
}
tab.ViewController.prototype = {
    controller: null,
    sheetName: '',
    viewSession: null,
    active: false,
    imageCacheVersion: 0,
    viewModified: false,
    viewWidget: null,
    
    get_cacheVersion: function tab_ViewController$get_cacheVersion() {
        return this.imageCacheVersion;
    },
    
    get_viewWidget: function tab_ViewController$get_viewWidget() {
        return this.viewWidget;
    },
    
    get_viewSession: function tab_ViewController$get_viewSession() {
        return this.viewSession;
    },
    
    get_sheetName: function tab_ViewController$get_sheetName() {
        return this.sheetName;
    },
    
    get_id: function tab_ViewController$get_id() {
        return this.id;
    },
    
    dispose: function tab_ViewController$dispose() {
        this.destroy();
    },
    
    destroy: function tab_ViewController$destroy() {
        tab.Log.get(this).debug('Destroy: %s %s', this.sheetName, this.id);
        this.viewWidget = null;
        this._disposables.dispose();
    },
    
    setTiledViewer: function tab_ViewController$setTiledViewer(tv) {
        this.viewWidget = tv;
    },
    
    _doMinorUpdate: function tab_ViewController$_doMinorUpdate(selectionLayoutStatus) {
        if (ss.isNullOrUndefined(selectionLayoutStatus)) {
            return;
        }
        var layoutStatus = selectionLayoutStatus.layoutStatus;
        var primarySheet = selectionLayoutStatus.primarySheet;
        if (ss.isNullOrUndefined(layoutStatus)) {
            tab.Log.get(this).warn('UpdateCacheUrl: Layout Status not found. This might be a legacy selection json object!');
            return;
        }
        if (ss.isValue(layoutStatus.isViewModified) && primarySheet === this.sheetName) {
            this.viewModified = layoutStatus.isViewModified;
        }
        if (!tab.CommandController.get().get_processingRenderModeChange() && !tab.CommandController.get().get_processingStoryPointChange()) {
            this.incrementCacheVersion();
            var vm = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), this.sheetName);
            if (vm.get_isVisualValid()) {
                this.viewWidget.doTiledViewerRefreshImages(vm.get_cacheUrlInfo());
                this.get_viewSession().fireRefreshLegacyLegendImages(vm.get_cacheUrlInfo());
            }
        }
    },
    
    _updateActiveView: function tab_ViewController$_updateActiveView(newViewState) {
        if (!ss.isValue(newViewState)) {
            return;
        }
        if (ss.isValue(newViewState.data)) {
            if (ss.isValue(newViewState.data.layoutStatus)) {
                if (ss.isValue(newViewState.data.layoutStatus.isViewModified)) {
                    this.viewModified = newViewState.data.layoutStatus.isViewModified;
                }
            }
            else {
                tab.Log.get(this).warn('UpdateActiveView: Layout Status not found. This *might* be a legacy view json object!');
            }
        }
        if (newViewState.oldActive === this.viewWidget) {
            this.active = false;
        }
        else if (newViewState.newActive === this.viewWidget) {
            this.active = true;
        }
    },
    
    incrementCacheVersion: function tab_ViewController$incrementCacheVersion() {
        this.imageCacheVersion += 1;
    },
    
    _registerForEvents: function tab_ViewController$_registerForEvents() {
        var session = this.viewSession;
        this._disposables.add(new tab.SubscriptionDisposable(session.registerEventListener('activeViewChanged', ss.Delegate.create(this, this._updateActiveView))));
        this._disposables.add(new tab.SubscriptionDisposable(session.registerEventListener('selectionChanged', ss.Delegate.create(this, this._doMinorUpdate))));
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ApplicationViewModel

tab.ApplicationViewModel = function tab_ApplicationViewModel(skipInit, layoutSession) {
    this._connections = [];
    this._subscriptions = [];
    tab.ApplicationViewModel.initializeBase(this, [ $(null) ]);
    this.session = layoutSession;
    this.skipInit = skipInit;
    var bootstrap = tabBootstrap.ViewerBootstrap.get_instance();
    if (ss.isNullOrUndefined(bootstrap)) {
        throw new Error('tabBootstrap.ViewerBootstrap is undefined');
    }
    this._ts$1 = new Date().getTime();
    if (bootstrap.get_hasBootstrapCompleted()) {
        tab.XhrUtil.set_currentTabName(tsConfig.current_sheet_name);
    }
    tab.XhrUtil.guid = tsConfig.guid;
    tab.XhrUtil.parentID = tsConfig.parentID;
    this._postMixInProperties$1();
    this._toolbarCommands$1 = new tab.ViewingToolbarCommands(this);
    this._interacted$1 = false;
    this.enableTextSelection();
}
tab.ApplicationViewModel._synchronizeWithZoneZIndex$1 = function tab_ApplicationViewModel$_synchronizeWithZoneZIndex$1(z, e) {
    var zindex = tab.ZoneViewModel.calculateZoneZIndex(z);
    tab.Logger.lazyGetLogger(tab.ApplicationViewModel).debug('Updating z-index: %s %o', zindex, e);
    $(e).css('z-index', zindex.toString());
}
tab.ApplicationViewModel.prototype = {
    session: null,
    skipInit: false,
    _legacyMenus$1: null,
    _toolbar$1: null,
    _shareDialog$1: null,
    _shareDialogElement$1: null,
    _activeController$1: null,
    _ts$1: 0,
    _layoutTimeout$1: null,
    _doneInitialLayout$1: false,
    _lastSize$1: null,
    _toolbarCommands$1: null,
    _activeSheet$1: null,
    _applicationViewModelReal$1: null,
    _applicationView$1: null,
    _authorByline$1: null,
    _viewCount$1: 0,
    _interacted$1: false,
    _doneInitialUpdateLayout$1: false,
    _hasTriggeredResize$1: false,
    
    get_flipboardNavigatorViewModel: function tab_ApplicationViewModel$get_flipboardNavigatorViewModel() {
        if (ss.isValue(this._applicationViewModelReal$1) && ss.isValue(this._applicationViewModelReal$1.get_dashboardViewModel())) {
            return this._applicationViewModelReal$1.get_dashboardViewModel().get_flipboardNavigatorViewModel();
        }
        return null;
    },
    
    get_hasContainedSheet: function tab_ApplicationViewModel$get_hasContainedSheet() {
        return ss.isValue(this.get_containedSheetZoneId());
    },
    
    get_containedSheetName: function tab_ApplicationViewModel$get_containedSheetName() {
        var flipboardVm = this.get__flipboardViewModel$1();
        if (ss.isNullOrUndefined(flipboardVm) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel()) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel().get_dashboardModel())) {
            return null;
        }
        return flipboardVm.get_dashboardViewModel().get_dashboardModel().get_sheetName();
    },
    
    get_containedSheetZoneId: function tab_ApplicationViewModel$get_containedSheetZoneId() {
        var flipboardVm = this.get__flipboardViewModel$1();
        if (ss.isNullOrUndefined(flipboardVm) || ss.isNull(flipboardVm.get_flipboardModel())) {
            return null;
        }
        return flipboardVm.get_flipboardModel().get_zoneId();
    },
    
    get_containedSheetType: function tab_ApplicationViewModel$get_containedSheetType() {
        var flipboardVm = this.get__flipboardViewModel$1();
        if (ss.isNullOrUndefined(flipboardVm) || ss.isNullOrUndefined(flipboardVm.get_flipboardModel()) || ss.isNullOrUndefined(flipboardVm.get_flipboardModel().get_storyPointModel())) {
            return 'worksheet';
        }
        return (flipboardVm.get_flipboardModel().get_storyPointModel().get_isBackingSheetDashboard()) ? 'dashboard' : 'worksheet';
    },
    
    get_containedDashboardZones: function tab_ApplicationViewModel$get_containedDashboardZones() {
        var flipboardVm = this.get__flipboardViewModel$1();
        if (ss.isNullOrUndefined(flipboardVm) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel()) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel().get_dashboardModel()) || ss.isNullOrUndefined(flipboardVm.get_dashboardViewModel().get_dashboardModel().get_dashboardPresModel())) {
            return null;
        }
        return flipboardVm.get_dashboardViewModel().get_dashboardModel().get_dashboardPresModel().zones;
    },
    
    get_autoUpdate: function tab_ApplicationViewModel$get_autoUpdate() {
        return tab.ApplicationModel.get_instance().get_autoUpdate();
    },
    set_autoUpdate: function tab_ApplicationViewModel$set_autoUpdate(value) {
        tab.ApplicationModel.get_instance().set_autoUpdate(value);
        return value;
    },
    
    get_isDashboard: function tab_ApplicationViewModel$get_isDashboard() {
        return this.get__dashboardViewModel$1().get_isDashboard();
    },
    
    get_vizSize: function tab_ApplicationViewModel$get_vizSize() {
        return tab.ApplicationModel.get_instance().get_workbook().get_outerDashboardPortSize();
    },
    
    get_session: function tab_ApplicationViewModel$get_session() {
        return this.session;
    },
    
    get_vFilterList: function tab_ApplicationViewModel$get_vFilterList() {
        return null;
    },
    
    get_clientContentSize: function tab_ApplicationViewModel$get_clientContentSize() {
        return tabBootstrap.ViewerBootstrap.get_instance().getWebClientContentSize();
    },
    
    get_applicationPresModel: function tab_ApplicationViewModel$get_applicationPresModel() {
        return tab.ApplicationModel.get_instance().get_appPresModel();
    },
    
    get_requestURI: function tab_ApplicationViewModel$get_requestURI() {
        return tsConfig.requestURI;
    },
    
    get_viewControllers: function tab_ApplicationViewModel$get_viewControllers() {
        if (ss.isValue(this.get__contentDashboardViewModel$1())) {
            return this.get__contentDashboardViewModel$1().viewControllersList;
        }
        return [];
    },
    
    get_toolbarDisplayed: function tab_ApplicationViewModel$get_toolbarDisplayed() {
        return tabBootstrap.ViewerBootstrap.get_instance().toolbarDisplayed;
    },
    set_toolbarDisplayed: function tab_ApplicationViewModel$set_toolbarDisplayed(value) {
        tabBootstrap.ViewerBootstrap.get_instance().toolbarDisplayed = value;
        if (value) {
            if (!ss.isValue(this.get_toolbarContainer())) {
                this._setupToolbar$1();
            }
            this.get_toolbarContainer().show();
        }
        else {
            this.get_toolbarContainer().hide();
        }
        return value;
    },
    
    get_invalid: function tab_ApplicationViewModel$get_invalid() {
        return tab.ApplicationModel.get_instance().get_invalid();
    },
    set_invalid: function tab_ApplicationViewModel$set_invalid(value) {
        tab.ApplicationModel.get_instance().set_invalid(value);
        return value;
    },
    
    get_skipInit: function tab_ApplicationViewModel$get_skipInit() {
        return this.skipInit;
    },
    
    get_toolbarCommands: function tab_ApplicationViewModel$get_toolbarCommands() {
        return this._toolbarCommands$1;
    },
    
    get_toolbar: function tab_ApplicationViewModel$get_toolbar() {
        return this._toolbar$1;
    },
    
    get_customViewsViewModel: function tab_ApplicationViewModel$get_customViewsViewModel() {
        return (ss.isValue(this._toolbar$1)) ? this._toolbar$1.get__customViewsViewModel() : null;
    },
    
    get__log$1: function tab_ApplicationViewModel$get__log$1() {
        return tab.Logger.getLoggerWithName((tab.ApplicationViewModel).get_name() + tsConfig.layoutid.toString());
    },
    
    get__flipboardViewModel$1: function tab_ApplicationViewModel$get__flipboardViewModel$1() {
        if (ss.isValue(this._applicationViewModelReal$1) && ss.isValue(this._applicationViewModelReal$1.get_dashboardViewModel())) {
            return this._applicationViewModelReal$1.get_dashboardViewModel().get_flipboardViewModel();
        }
        return null;
    },
    
    get__dashboardViewModel$1: function tab_ApplicationViewModel$get__dashboardViewModel$1() {
        if (ss.isValue(this._applicationViewModelReal$1)) {
            return this._applicationViewModelReal$1.get_dashboardViewModel();
        }
        return null;
    },
    
    get__contentDashboardViewModel$1: function tab_ApplicationViewModel$get__contentDashboardViewModel$1() {
        if (ss.isValue(this._applicationViewModelReal$1)) {
            return this._applicationViewModelReal$1.get_contentDashboardViewModel();
        }
        return null;
    },
    
    get_domNode: function tab_ApplicationViewModel$get_domNode() {
        return this._applicationView$1.get_dom().domNode;
    },
    
    get__domWatermarkParent$1: function tab_ApplicationViewModel$get__domWatermarkParent$1() {
        return this._applicationView$1.get_dom().watermarkParent;
    },
    
    get__domViewCount$1: function tab_ApplicationViewModel$get__domViewCount$1() {
        return this._applicationView$1.get_dom().viewCount;
    },
    
    get__interpunct$1: function tab_ApplicationViewModel$get__interpunct$1() {
        return this._applicationView$1.get_dom().interpunct;
    },
    
    get__domSharePerspective$1: function tab_ApplicationViewModel$get__domSharePerspective$1() {
        return this._applicationView$1.get_dom().sharePerspective;
    },
    
    get__domPlaceholder$1: function tab_ApplicationViewModel$get__domPlaceholder$1() {
        return this._applicationView$1.get_dom().placeholder;
    },
    
    get__domWatermarkLink$1: function tab_ApplicationViewModel$get__domWatermarkLink$1() {
        return this._applicationView$1.get_dom().watermarkLink;
    },
    
    get__domWatermarkImage$1: function tab_ApplicationViewModel$get__domWatermarkImage$1() {
        return this._applicationView$1.get_dom().watermarkImage;
    },
    
    get__toolbarIsBottom$1: function tab_ApplicationViewModel$get__toolbarIsBottom$1() {
        return this._applicationView$1.get_toolbarIsBottom();
    },
    
    get_toolbarContainer: function tab_ApplicationViewModel$get_toolbarContainer() {
        return this._applicationView$1.get_toolbarContainer();
    },
    
    get_containerNode: function tab_ApplicationViewModel$get_containerNode() {
        return this._applicationView$1.get_containerNode();
    },
    
    getLegacyMenus: function tab_ApplicationViewModel$getLegacyMenus() {
        return this._legacyMenus$1;
    },
    
    startup: function tab_ApplicationViewModel$startup() {
        this._applicationViewModelReal$1 = new tab.ApplicationViewModelReal(tab.ApplicationModel.get_instance());
        this._applicationView$1 = spiff.ObjectRegistry.newView(tab.ApplicationView, this._applicationViewModelReal$1);
        this._applicationViewModelReal$1.add_applicationUpdate(ss.Delegate.create(this, this._onUpdateLayout$1));
        this._connections.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._applicationViewModelReal$1.remove_applicationUpdate(ss.Delegate.create(this, this._onUpdateLayout$1));
        })));
        this._setupDomAndEvents$1();
        this.resize(false);
    },
    
    destroyRecursive: function tab_ApplicationViewModel$destroyRecursive() {
        this.get__log$1().debug('DestroyRecursive');
        this.destroy();
    },
    
    destroy: function tab_ApplicationViewModel$destroy() {
        this.get__log$1().debug('Destroy');
        if (ss.isValue(this._layoutTimeout$1)) {
            window.clearTimeout(this._layoutTimeout$1);
            this._layoutTimeout$1 = null;
        }
        if (ss.isValue(this._shareDialog$1)) {
            this._shareDialog$1.destroyRecursive(false);
        }
        if (ss.isValue(this._toolbar$1)) {
            this._toolbar$1.dispose();
            this._toolbar$1 = null;
            this._toolbarCommands$1.dispose();
            this._toolbarCommands$1 = null;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(this._connections);
        while ($enum1.moveNext()) {
            var disposable = $enum1.current;
            disposable.dispose();
        }
        this._connections.clear();
        var $enum2 = ss.IEnumerator.getEnumerator(this._subscriptions);
        while ($enum2.moveNext()) {
            var subscription = $enum2.current;
            dojo.unsubscribe(subscription);
        }
        if (ss.isValue(this._applicationViewModelReal$1)) {
            this._applicationViewModelReal$1.dispose();
            this._applicationViewModelReal$1 = null;
        }
        $('body').unbind(this.createNamespacedEventName('mouseenter')).unbind(this.createNamespacedEventName('mouseleave'));
        this._applicationView$1.dispose();
        this._legacyMenus$1 = null;
        this._shareDialog$1 = null;
        this._shareDialogElement$1 = null;
        this._activeController$1 = null;
        this._applicationView$1 = null;
        this._authorByline$1 = null;
        this.dispose();
    },
    
    showShareDialog: function tab_ApplicationViewModel$showShareDialog() {
        this._shareDialogElement$1.css({ opacity: 1 });
        this._shareDialog$1.show();
    },
    
    saveSharedView: function tab_ApplicationViewModel$saveSharedView(button) {
        if (!this._shouldStatefullyShare$1()) {
            var data = {};
            data.button = button;
            this._doShareAction$1(data);
            return;
        }
        tab.XhrUtil.guid = null;
        if (tsConfig.statefulURL) {
            var primaryContentUrl = this._getPrimaryContentUrl$1();
            if (primaryContentUrl === 'null' || primaryContentUrl == null) {
                primaryContentUrl = '';
            }
            this.get_session().saveSharedView(button, primaryContentUrl, ss.Delegate.create(this, this._doShareAction$1));
        }
    },
    
    doResize: function tab_ApplicationViewModel$doResize() {
        if (tsConfig.is_mobile) {
            this._safeLayout$1();
        }
        else {
            this._scheduleLayout$1(!this._doneInitialLayout$1);
        }
    },
    
    _getExportPdfDialog: function tab_ApplicationViewModel$_getExportPdfDialog() {
        return this.makeExportPdfDialog(this.get_session());
    },
    
    createTapToInteractTransition: function tab_ApplicationViewModel$createTapToInteractTransition(animateTransition, initialDelay) {
    },
    
    createTapToInteractTouchHandler: function tab_ApplicationViewModel$createTapToInteractTouchHandler(tapToInteractElem) {
    },
    
    makeAuthorByline: function tab_ApplicationViewModel$makeAuthorByline() {
        return new tab.AuthorByline(tsConfig.workbook_repo_url);
    },
    
    resize: function tab_ApplicationViewModel$resize(forceUpdate) {
        if (tableau.base.widget.FilterPanel.measuringMetrics) {
            return;
        }
        if (!forceUpdate && ss.isValue(this._lastSize$1)) {
            var boxInfo = tabBootstrap.ViewerBootstrap.get_instance().getWebClientContentSize();
            if (boxInfo.w === this._lastSize$1.w && boxInfo.h === this._lastSize$1.h) {
                this._hasTriggeredResize$1 = false;
                return;
            }
            if (this._hasTriggeredResize$1) {
                this._lastSize$1 = boxInfo;
                this._hasTriggeredResize$1 = false;
                return;
            }
            this._hasTriggeredResize$1 = true;
        }
        else {
            this._hasTriggeredResize$1 = false;
        }
        this.doResize();
    },
    
    doMeasureMetrics: function tab_ApplicationViewModel$doMeasureMetrics() {
    },
    
    _hookupInvalidationHandlers$1: function tab_ApplicationViewModel$_hookupInvalidationHandlers$1() {
        tab.CommandController.get().resetInvalidationHandlers();
        tab.CommandController.get().add_onUrlActionsResponse(tab.ActionUtils.launchActionUrls);
        this._connections.add(new tab.CallOnDispose(function() {
            tab.CommandController.get().remove_onUrlActionsResponse(tab.ActionUtils.launchActionUrls);
        }));
        tab.CommandController.get().add_onInvalidation(ss.Delegate.create(this, this._onInvalidation$1));
        this._connections.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            tab.CommandController.get().remove_onInvalidation(ss.Delegate.create(this, this._onInvalidation$1));
        })));
        tab.CommandController.get().add_onBootstrapSuccess(ss.Delegate.create(this, this._onBootstrapSuccess$1));
        this._connections.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            tab.CommandController.get().remove_onBootstrapSuccess(ss.Delegate.create(this, this._onBootstrapSuccess$1));
        })));
    },
    
    _onClick$1: function tab_ApplicationViewModel$_onClick$1(e) {
        if (ss.isValue(e.target)) {
            if (e.target === this.get_domNode().get(0) || e.target === this.get_containerNode().get(0) || (ss.isValue(this._toolbar$1) && e.target === this._toolbar$1.get_element().get(0)) || $(e.target).hasClass('wcLayoutContainer')) {
                var visualModel = tab.ModelUtils.findActiveOrDefaultVisual();
                if (ss.isValue(visualModel)) {
                    tab.SelectionClientCommands.clearAllSelections(visualModel.get_visualId());
                }
                this._clearActiveView$1();
                e.preventDefault();
            }
        }
    },
    
    _setupDomAndEvents$1: function tab_ApplicationViewModel$_setupDomAndEvents$1() {
        this.get__log$1().debug('SetupDomAndEvents');
        $('.tabbedNavigationWrapper').after(this.get_domNode());
        var applicationViewModelsClickDetector = new tab._applicationViewModelsClickDetector();
        this.get_domNode().bind(this.createNamespacedEventName('contextmenu'), ss.Delegate.create(this, this._onContextMenu$1)).bind(this.createNamespacedEventName('mousedown'), ss.Delegate.create(applicationViewModelsClickDetector, applicationViewModelsClickDetector.onMouseDown)).bind(this.createNamespacedEventName('mouseup'), ss.Delegate.create(applicationViewModelsClickDetector, applicationViewModelsClickDetector.onMouseUp));
        this._connections.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.get_domNode().unbind(this.createNamespacedEventName('contextmenu')).unbind(this.createNamespacedEventName('mousedown')).unbind(this.createNamespacedEventName('mouseup'));
        })));
        applicationViewModelsClickDetector.add_clicked(ss.Delegate.create(this, this._onClick$1));
        this._connections.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            applicationViewModelsClickDetector.remove_clicked(ss.Delegate.create(this, this._onClick$1));
        })));
        this._applicationView$1.onAddedToDom();
        $('body').bind(this.createNamespacedEventName('mouseenter'), ss.Delegate.create(this, this._onMouseEnter$1)).bind(this.createNamespacedEventName('mouseleave'), ss.Delegate.create(this, this._onMouseLeave$1));
        this.session.get_waitHandler().unlock();
        this.doMeasureMetrics();
        this._shareDialog$1 = new tableau.base.widget.ShareDialog({ id: 'share_dialog' });
        this._shareDialogElement$1 = this.get_domNode().find('#share_dialog').replaceWith(this._shareDialog$1.domNode);
        this._setupToolbar$1();
        this._updateToolbar$1();
        tab.BaseSession.linkTarget = tsConfig.linktarget;
        this._subscriptions.add(dojo.subscribe('onDoLaunchAuthoring', ss.Delegate.create(this, this._doLaunchAuthoring$1)));
        this._subscriptions.add(dojo.subscribe('newGuid', ss.Delegate.create(this, this._doShareAction$1)));
        this._hookupInvalidationHandlers$1();
        if (this._shouldShowAuthorByline$1()) {
            this._setupAuthorByline$1();
        }
    },
    
    _shouldShowAuthorByline$1: function tab_ApplicationViewModel$_shouldShowAuthorByline$1() {
        return tsConfig.show_byline;
    },
    
    _setupToolbar$1: function tab_ApplicationViewModel$_setupToolbar$1() {
        this._applicationView$1.get_unusedToolbarContainer().hide();
        if (this.get_toolbarDisplayed()) {
            this.get_toolbarContainer().show();
        }
        else {
            this.get_toolbarContainer().hide();
        }
        if (!(tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false)) {
            this.get_toolbarContainer().addClass('tab-toolbar-container');
            this.get_toolbarContainer().css('visibility', 'hidden');
            this._toolbar$1 = this.makeViewingToolbar(!this.get__toolbarIsBottom$1());
            this._toolbar$1.createItems();
            this.get_toolbarContainer().append(this._toolbar$1.get_element());
            this._toolbar$1.bindEvents();
        }
        this._subscriptions.add(dojo.subscribe('modifiedSheetsChanged', ss.Delegate.create(this, this._updateSharingForInteractionOnModifiedSheetsChanged$1)));
        if ((tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false)) {
            this.get__log$1().debug('NewBrowserToolbar is TRUE');
        }
        else {
            this.get__log$1().debug('NewBrowserToolbar is FALSE');
        }
    },
    
    _setupAuthorByline$1: function tab_ApplicationViewModel$_setupAuthorByline$1() {
        this._authorByline$1 = this.makeAuthorByline();
        this.get__domWatermarkParent$1().append(this._authorByline$1.get_element());
    },
    
    _postMixInProperties$1: function tab_ApplicationViewModel$_postMixInProperties$1() {
        this.get__log$1().debug('PostMixInProperties');
        if (tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted()) {
            this._subscriptions.add(this.session.registerEventListener('activeViewChanged', ss.Delegate.create(this, this._showActiveViewHighlight$1)));
        }
    },
    
    _onMouseEnter$1: function tab_ApplicationViewModel$_onMouseEnter$1(e) {
        this.get_domNode().addClass('mousePresent');
    },
    
    _onMouseLeave$1: function tab_ApplicationViewModel$_onMouseLeave$1(e) {
        this.get_domNode().removeClass('mousePresent');
    },
    
    _doLaunchAuthoring$1: function tab_ApplicationViewModel$_doLaunchAuthoring$1(arg) {
        this.get_session().launchEditing(this._activeSheet$1);
    },
    
    _doShareAction$1: function tab_ApplicationViewModel$_doShareAction$1(arg) {
        var data = arg;
        if (!ss.isValue(data)) {
            return;
        }
        if (data.button === 'link') {
            this._setupShareDialog$1();
        }
        else if (data.button === 'facebook') {
            tab.Social.facebookPopup(tsConfig.facebookAppID, this._getShareUrl$1(), this._getThumbnailUrl$1(), tsConfig.shareDescription, tsConfig.facebookDescription, this._getFacebookRedirectUri$1());
        }
        else if (data.button === 'twitter') {
            tab.Social.twitterPopup(this._getShareUrl$1(), tsConfig.shareDescription);
        }
        else if (data.button === 'mail') {
            tab.Social.mailTo(this._getShareUrl$1(), tsConfig.shareDescription);
        }
    },
    
    _getFacebookRedirectUri$1: function tab_ApplicationViewModel$_getFacebookRedirectUri$1() {
        if (ss.isValue(tsConfig.facebookRedirectURI)) {
            return tsConfig.facebookRedirectURI;
        }
        return 'http://facebook.com';
    },
    
    _getThumbnailUrl$1: function tab_ApplicationViewModel$_getThumbnailUrl$1() {
        var xhrGuid = tab.XhrUtil.guid;
        if (this._shouldStatefullyShare$1() && ss.isValue(xhrGuid)) {
            var staticImageUrl = this._getStaticImageUrl$1();
            var arr = staticImageUrl.split('/');
            arr[arr.length - 1] = 'thumb.png';
            var thumbImageUrl = arr.join('/');
            thumbImageUrl += '?vizqlid=' + this.get_session().get_id();
            return thumbImageUrl;
        }
        return tsConfig.baseViewThumbLink;
    },
    
    _getPrimaryContentUrl$1: function tab_ApplicationViewModel$_getPrimaryContentUrl$1() {
        if (!String.isNullOrEmpty(tsConfig.primaryContentUrl)) {
            return tsConfig.primaryContentUrl;
        }
        if (window.self === window.top) {
            return null;
        }
        var embeddingUri = tableau.util.parseUri(document.referrer);
        if (!ss.isValue(embeddingUri) || (ss.isValue(embeddingUri['hostname']) && embeddingUri['hostname'] === window.location.hostname)) {
            return null;
        }
        return document.referrer;
    },
    
    _areAnySheetsModified$1: function tab_ApplicationViewModel$_areAnySheetsModified$1() {
        return tab.ApplicationModel.get_instance().get_workbook().get_isCurrentDashboardModified();
    },
    
    _updateSharingForInteraction$1: function tab_ApplicationViewModel$_updateSharingForInteraction$1() {
        if (!this._shouldStatefullyShare$1() || !this._areAnySheetsModified$1()) {
            return;
        }
        if (this._shouldShowViewCount$1()) {
            this.get__interpunct$1().css('display', '');
        }
        if (this._interacted$1) {
            return;
        }
        this._interacted$1 = true;
        var hintText = 'Share your perspective';
        this.get__domSharePerspective$1().html(hintText);
        this.get__domSharePerspective$1().fadeIn();
    },
    
    _updateSharingForInteractionOnModifiedSheetsChanged$1: function tab_ApplicationViewModel$_updateSharingForInteractionOnModifiedSheetsChanged$1(modifiedSheets) {
        if (this._shouldStatefullyShare$1()) {
            this._updateSharingForInteraction$1();
        }
    },
    
    _onUpdateLayout$1: function tab_ApplicationViewModel$_onUpdateLayout$1() {
        this.get__log$1().debug('OnUpdateLayout');
        if (ss.isNullOrUndefined(this.get__dashboardViewModel$1())) {
            return;
        }
        if (this._shouldShowViewCount$1()) {
            this._displayViewCount$1();
        }
        if (ss.isValue(this.get__contentDashboardViewModel$1()) && Object.getKeyCount(this.get__contentDashboardViewModel$1().viewControllersBySheet) === 1) {
            this._updateActiveView$1(0);
        }
        this._updateToolbar$1();
        var domPlaceholderBox = tab.DomUtil.getContentBox(this.get__domPlaceholder$1().get(0));
        this._setupWatermarkArea$1(domPlaceholderBox);
        if (!this.get_skipInit() && !this._doneInitialUpdateLayout$1) {
            this._setupShareDialog$1();
            this.session.get_waitHandler().onNextHide(ss.Delegate.create(this, this._doLoadingTransition$1));
            if (!(tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false)) {
                this.session.performPostLoadOperations(tsConfig.current_sheet_name, ss.Delegate.create(this, this._processPostLoadData$1));
            }
            this._setBackgroundFrameSourceIfNeed$1();
        }
        this._doneInitialUpdateLayout$1 = true;
        this.resize(false);
        dojo.publish('layoutUpdated', null);
    },
    
    _updateToolbar$1: function tab_ApplicationViewModel$_updateToolbar$1() {
        if (ss.isNullOrUndefined(this.get__contentDashboardViewModel$1())) {
            return;
        }
        var prevMenus = this._legacyMenus$1;
        this._legacyMenus$1 = this.get__contentDashboardViewModel$1().get_legacyMenus();
        if (ss.isValue(this._toolbar$1) && tsConfig.toolbarvis) {
            var menusChanged = ss.isValue(this._legacyMenus$1) && (ss.isNullOrUndefined(prevMenus) || !_.isEqual(this._legacyMenus$1, prevMenus));
            if (menusChanged) {
                this._toolbar$1.updateMenus(this._legacyMenus$1);
            }
            this._toolbar$1._setRenderState(tab.ApplicationModel.get_instance().get_isLocalRenderMode());
            this._toolbar$1.setAutoUpdate(this.get_autoUpdate());
            var domPlaceholderBox = tab.DomUtil.getContentBox(this.get__domPlaceholder$1().get(0));
            if (tsConfig.isPublic && !tsConfig.showRefreshData) {
                this._toolbar$1.hideRefreshButtons();
            }
            if (!this.get__toolbarIsBottom$1() && this._shouldShowTabs$1()) {
                this._toolbar$1.setStyle('background-color', 'transparent');
            }
            else {
                this._toolbar$1.setStyles(this.get__dashboardViewModel$1().get_formats());
                this._toolbar$1.setStyle('max-width', domPlaceholderBox.w + 'px');
            }
            this._toolbar$1.layout();
        }
        else if ((tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false)) {
            this._applicationViewModelReal$1.get_toolbarViewModel().updateRenderModeText(tab.ApplicationModel.get_instance().get_isLocalRenderMode());
        }
    },
    
    _setBackgroundFrameSourceIfNeed$1: function tab_ApplicationViewModel$_setBackgroundFrameSourceIfNeed$1() {
        if (tsConfig.showLytebox) {
            $('#primaryContent').attr('src', this._getPrimaryContentUrl$1());
        }
    },
    
    _showActiveViewHighlight$1: function tab_ApplicationViewModel$_showActiveViewHighlight$1(dataObject) {
        if (tsConfig.is_authoring || tsConfig.isPublic) {
            return;
        }
        var data = dataObject;
        if (this.get_viewControllers().length <= 1) {
            return;
        }
        this._activeSheet$1 = (ss.isValue(data) && ss.isValue(data.newActive)) ? data.newActive.get_sheetid() : null;
    },
    
    _clearActiveView$1: function tab_ApplicationViewModel$_clearActiveView$1() {
        if (this.get_viewControllers().length <= 1) {
            return;
        }
        this._updateActiveView$1();
    },
    
    _updateActiveView$1: function tab_ApplicationViewModel$_updateActiveView$1(idxController, data) {
        var state = { data: data, oldActive: null, newActive: null };
        var oldActive = null;
        var newActive = null;
        if (ss.isValue(this._activeController$1)) {
            oldActive = this._activeController$1;
            state['oldActive'] = oldActive.get_viewWidget();
        }
        if (ss.isValue(idxController)) {
            newActive = this.get_viewControllers()[idxController];
            state['newActive'] = newActive.get_viewWidget();
        }
        if (newActive === oldActive) {
            return;
        }
        this._activeController$1 = newActive;
        if (ss.isValue(this._toolbar$1)) {
            this._toolbar$1.updateActiveView((ss.isValue(newActive)) ? newActive.get_viewSession() : null);
        }
        if (this.get_autoUpdate() || !this.get_invalid()) {
            var sel = data;
            if (ss.isValue(sel) && ss.isValue(sel.layoutStatus) && ss.isValue(this._toolbar$1) && tsConfig.toolbarvis) {
                this._toolbar$1.updateMenus(sel.layoutStatus.legacyMenus);
            }
            this.session.fireEvent('activeViewChanged', state);
        }
    },
    
    _setupWatermarkArea$1: function tab_ApplicationViewModel$_setupWatermarkArea$1(oContent) {
        var parentLocation = (ss.isValue(tabBootstrap.ViewerBootstrap.get_instance().location)) ? tabBootstrap.ViewerBootstrap.get_instance().location.toString() : '';
        if (!tsConfig.watermarkdisplay) {
            return;
        }
        if ((tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false)) {
            this.get__domWatermarkParent$1().css({ display: 'none' });
            return;
        }
        this.get__domWatermarkParent$1().css({ display: 'block', width: oContent.w + 'px' });
        this.get__domWatermarkLink$1().prop('href', tsConfig.watermarklink + '?ref=' + parentLocation.split('?')[0]);
        this.get__domWatermarkImage$1().prop('src', tsConfig.watermarklogo);
        if (ss.isValue(this._authorByline$1) && this._shouldShowAuthorByline$1()) {
            this._authorByline$1.displayAuthorByline(this.get__domWatermarkParent$1().width());
        }
    },
    
    _getVizParameterInfo$1: function tab_ApplicationViewModel$_getVizParameterInfo$1() {
        var vizParams = tab.$create_VizParameterInfo();
        vizParams.toolbar = tsConfig.toolbarvis;
        vizParams.toolbar_default = tsConfig.toolbarvisDefault;
        vizParams.show_tabs = this._shouldShowTabs$1();
        vizParams.show_tabs_default = tsConfig.showTabsDefault;
        vizParams.show_view_count = this._shouldShowViewCount$1();
        vizParams.show_view_count_default = tsConfig.showViewCountDefault;
        return vizParams;
    },
    
    _shouldStatefullyShare$1: function tab_ApplicationViewModel$_shouldStatefullyShare$1() {
        if (!tsConfig.isPublic || !tsConfig.statefulURL) {
            return false;
        }
        if (tsConfig.fromWg || tsConfig.previewMode) {
            return this._areAnySheetsModified$1();
        }
        return true;
    },
    
    _getShareUrl$1: function tab_ApplicationViewModel$_getShareUrl$1() {
        return tab.ShareDialogUtil.getShareUrl(this._getShareUrlSansParameters$1(), this._getVizParameterInfo$1());
    },
    
    _getShareUrlSansParameters$1: function tab_ApplicationViewModel$_getShareUrlSansParameters$1() {
        var base_location = (tsConfig.single_frame) ? window.location : window.parent.location;
        var xhrGuid = tab.XhrUtil.guid;
        var base_url = base_location.protocol + '//' + base_location.hostname + '/shared/';
        if (this._shouldStatefullyShare$1() && !tab.MiscUtil.isNullOrEmpty(xhrGuid)) {
            return base_url + xhrGuid;
        }
        if (!tab.MiscUtil.isNullOrEmpty(tsConfig.guid)) {
            return base_url + tsConfig.guid;
        }
        return tsConfig.requestURI;
    },
    
    _getStaticImageUrl$1: function tab_ApplicationViewModel$_getStaticImageUrl$1() {
        var xhrGuid = tab.XhrUtil.guid;
        var staticImageUrl = tsConfig.staticImage;
        if (!ss.isValue(staticImageUrl)) {
            return '';
        }
        if (this._shouldStatefullyShare$1() && ss.isValue(xhrGuid)) {
            var base_endIdx = staticImageUrl.indexOf('/images/') + 8;
            var static_image_base = staticImageUrl.substr(0, base_endIdx);
            staticImageUrl = static_image_base + xhrGuid.substr(0, 2) + '/' + xhrGuid + '/1_rss.png';
        }
        return staticImageUrl;
    },
    
    _setupShareDialog$1: function tab_ApplicationViewModel$_setupShareDialog$1() {
        var shareSettings = tab.$create_ShareSettings();
        shareSettings.request = this._getShareUrlSansParameters$1();
        shareSettings.blog = this._getPrimaryContentUrl$1();
        shareSettings.title = tsConfig.embeddedTitle;
        shareSettings.beaker = tsConfig.isPublic;
        shareSettings.search = tabBootstrap.ViewerBootstrap.get_instance().location.search;
        shareSettings.static_image = this._getStaticImageUrl$1();
        shareSettings.width = this.get_vizSize().w;
        shareSettings.height = this.get_vizSize().h;
        shareSettings.controller_id = tsConfig.repositoryUrl;
        shareSettings.watermark_link = tsConfig.watermarklink;
        shareSettings.toolbar_bottom = this.get__toolbarIsBottom$1();
        shareSettings.watermark_image = tsConfig.watermarklogo;
        shareSettings.server_name = tsConfig.serverName;
        shareSettings.server_logo = tsConfig.serverLogo;
        shareSettings.tabs_allowed = tsConfig.tabs_allowed;
        shareSettings.is_stateful_url = this._shouldStatefullyShare$1();
        shareSettings.api_url = '/javascripts/api/viz_v1.js';
        shareSettings.site_root = tsConfig.site_root;
        shareSettings.vizParameterInfo = this._getVizParameterInfo$1();
        tab.ShareDialogUtil.setupShareDialog(shareSettings);
    },
    
    _onContextMenu$1: function tab_ApplicationViewModel$_onContextMenu$1(e) {
        var target = $(e.target);
        if (!target.filter('input[type=text]').length && !target.filter('textarea').length) {
            e.preventDefault();
            e.stopPropagation();
        }
    },
    
    _shouldShowTabs$1: function tab_ApplicationViewModel$_shouldShowTabs$1() {
        return tabBootstrap.ViewerBootstrap.get_instance().shouldShowTabs();
    },
    
    _shouldShowViewCount$1: function tab_ApplicationViewModel$_shouldShowViewCount$1() {
        return tsConfig.isPublic && tsConfig.showViewCount && this._viewCount$1 > tsConfig.viewCountThreshold;
    },
    
    _displayViewCount$1: function tab_ApplicationViewModel$_displayViewCount$1() {
        var count = tableau.format.formatIntAuto(this._viewCount$1, 't', ',', '3:0');
        this.get__domViewCount$1().html(count + ' views');
    },
    
    _updateViewCount$1: function tab_ApplicationViewModel$_updateViewCount$1(viewCnt) {
        this._viewCount$1 = viewCnt;
        if (this._shouldShowViewCount$1()) {
            this._displayViewCount$1();
            this._updateSharingForInteraction$1();
        }
    },
    
    _processPostLoadData$1: function tab_ApplicationViewModel$_processPostLoadData$1(dataObject) {
        var data = dataObject;
        if (ss.isValue(data['viewCount'])) {
            this._updateViewCount$1(parseInt(data['viewCount'], 10));
        }
    },
    
    _onBootstrapSuccess$1: function tab_ApplicationViewModel$_onBootstrapSuccess$1(bootstrapResponse, hackToCheckpoint) {
        tsConfig.layoutid = bootstrapResponse.layoutId;
        this.get__log$1().info('Bootstrap succeeded: layoutId=%s', tsConfig.layoutid.toString());
        var sessionId = bootstrapResponse.newSessionId;
        if (!tab.MiscUtil.isNullOrEmpty(sessionId)) {
            tsConfig.sessionid = sessionId;
        }
        var workbookLocale = bootstrapResponse.workbookLocale;
        if (!String.isNullOrEmpty(workbookLocale)) {
            tsConfig.workbookLocale = workbookLocale;
        }
        var clientNum = bootstrapResponse.newClientNum;
        if (!String.isNullOrEmpty(clientNum)) {
            tsConfig.clientNumber = clientNum;
            tabBootstrap.Utility.addToUrlHash(tabBootstrap.Utility.CLIENTNO, clientNum);
        }
        this.session.set_layoutId(bootstrapResponse.layoutId.toString());
        this._subscriptions.add(this.session.registerEventListener('activeViewChanged', ss.Delegate.create(this, this._showActiveViewHighlight$1)));
        tsConfig.current_sheet_name = bootstrapResponse.sheetName;
        tab.XhrUtil.set_currentTabName(tsConfig.current_sheet_name.toString());
        tsConfig.workbook_allow_subscriptions = bootstrapResponse.allowSubscriptions;
        if (!(tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false) && ss.isValue(this.get_toolbar()) && tsConfig.workbook_allow_subscriptions && tsConfig.allow_subscriptions && !tsConfig.is_guest) {
            this._toolbar$1.showSubscribeButton();
        }
        var primaryAppPresModel = bootstrapResponse.worldUpdate.applicationPresModel;
        var applicationModel = tab.ApplicationModel.get_instance();
        var initModelsContext = tabBootstrap.MetricsController.get_instance().createContext('MDLINI', tabBootstrap.MetricsSuites.bootstrap);
        applicationModel.update(primaryAppPresModel);
        initModelsContext.close();
        hackToCheckpoint.checkpointAppPresModel();
        var onSuccess = this.session.getBootstrapRequestLayoutModelSuccessFunction(bootstrapResponse.sheetName);
        onSuccess(primaryAppPresModel);
        var modelEventsContext = tabBootstrap.MetricsController.get_instance().createContext('MDLEVT', tabBootstrap.MetricsSuites.bootstrap);
        tab.Model.fireDeferredEvents(tab.CommandController.handleBootstrapException);
        modelEventsContext.close();
    },
    
    _onInvalidation$1: function tab_ApplicationViewModel$_onInvalidation$1(invalidationInfo) {
        var layoutStatus = invalidationInfo.layoutStatus;
        if (ss.isValue(invalidationInfo.primarySheet)) {
            var newVC = this.get__contentDashboardViewModel$1().viewControllersBySheet['v_' + invalidationInfo.primarySheet];
            if (ss.isValue(newVC)) {
                this._updateActiveView$1(newVC.get_id(), invalidationInfo);
            }
        }
        this.set_invalid((ss.isNullOrUndefined(layoutStatus.invalidatedLayout)) ? false : layoutStatus.invalidatedLayout);
        if (ss.isValue(layoutStatus.vizStateList) && layoutStatus.vizStateList.length > 0) {
            var dirtyViews = [];
            var $enum1 = ss.IEnumerator.getEnumerator(layoutStatus.vizStateList);
            while ($enum1.moveNext()) {
                var vizStatePM = $enum1.current;
                if (!dirtyViews.contains(vizStatePM.sheet) && vizStatePM.vizRegionRectList.length > 0) {
                    dirtyViews.add(vizStatePM.sheet);
                }
            }
            var viewControllers = this.get_viewControllers();
            var $enum2 = ss.IEnumerator.getEnumerator(dirtyViews);
            while ($enum2.moveNext()) {
                var viewName = $enum2.current;
                var vc = _.find(viewControllers, function(iterator) {
                    return iterator.get_sheetName() === viewName;
                });
                if (ss.isValue(vc)) {
                    vc.get_viewSession().fireSelectionChanged(invalidationInfo);
                }
            }
        }
    },
    
    _scheduleLayout$1: function tab_ApplicationViewModel$_scheduleLayout$1(immediate) {
        this.get__log$1().debug('ScheduleLayout: immediate=%s', immediate);
        var waitTime = (immediate) ? 0 : 1000;
        if (ss.isValue(this._layoutTimeout$1)) {
            window.clearTimeout(this._layoutTimeout$1);
            this._layoutTimeout$1 = null;
        }
        this._layoutTimeout$1 = window.setTimeout(ss.Delegate.create(this, this._safeLayout$1), waitTime);
    },
    
    _safeLayout$1: function tab_ApplicationViewModel$_safeLayout$1() {
        this.get__log$1().debug('SafeLayout');
        if (!this.session.get_waitHandler().isBusy() && (!this._doneInitialLayout$1 || ss.isValue(tsConfig.layoutid)) && ss.isValue(this._applicationViewModelReal$1)) {
            this._layout$1();
            return;
        }
        if (ss.isValue(this._layoutTimeout$1)) {
            window.clearTimeout(this._layoutTimeout$1);
            this._layoutTimeout$1 = null;
        }
        this._layoutTimeout$1 = window.setTimeout(ss.Delegate.create(this, this._safeLayout$1), 100);
    },
    
    _layout$1: function tab_ApplicationViewModel$_layout$1() {
        this.get__log$1().debug('Layout');
        this._lastSize$1 = tabBootstrap.ViewerBootstrap.get_instance().getWebClientContentSize();
        var contentBounds = tabBootstrap.ViewerBootstrap.get_instance().getWebClientContentSize();
        var tabsHeight = tabBootstrap.ViewerBootstrap.get_instance().get_tabsHeight();
        var newBounds = tab.$create_Rect(0, tabsHeight, contentBounds.w, contentBounds.h);
        if (!this.get__toolbarIsBottom$1() && !tsConfig.is_authoring) {
            newBounds.t += tabBootstrap.ViewerBootstrap.get_instance().toolbarHeight;
        }
        tab.DomUtil.setContentBox(this.get__domPlaceholder$1().get(0), newBounds);
        this._updateClientBound$1(newBounds);
        tab.CommandController.get().refreshLayout();
        if ((tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false) && tsConfig.toolbarContainerVis) {
            this.get_toolbarContainer().css('visibility', 'visible');
            if (this.get__toolbarIsBottom$1() || !this._shouldShowTabs$1()) {
                this.get_toolbarContainer().css('max-width', newBounds.w + 'px');
            }
        }
        if (!(tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false) && ss.isValue(this._toolbar$1) && tsConfig.toolbarContainerVis) {
            this.get_toolbarContainer().css('visibility', 'visible');
            if (this.get__toolbarIsBottom$1() || !this._shouldShowTabs$1()) {
                this._toolbar$1.setStyle('max-width', newBounds.w + 'px');
            }
        }
        this._setupWatermarkArea$1(newBounds);
        if (tsConfig.isPublic && !(tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false) && ss.isValue(this._toolbar$1) && tsConfig.toolbarContainerVis) {
            this.get__domWatermarkParent$1().css('visibility', 'visible');
        }
        this._doneInitialLayout$1 = true;
    },
    
    _updateClientBound$1: function tab_ApplicationViewModel$_updateClientBound$1(newBounds) {
        if (!tabBootstrap.ViewerBootstrap.get_instance().get_hasBootstrapCompleted() || (this.skipInit && !this._doneInitialLayout$1)) {
            return;
        }
        var metrics = $.extend(true, {}, tabBootstrap.ViewerBootstrap.get_instance().metricsUsedForInitialLayout);
        var portSize = {};
        portSize.w = newBounds.w;
        portSize.h = newBounds.h;
        var container = {};
        container.clientDashboardUiMetrics = metrics.toPresModel();
        tab.SheetClientCommands.setPortSize(portSize, container);
    },
    
    _notifyAppInteractive$1: function tab_ApplicationViewModel$_notifyAppInteractive$1() {
        var parameters = {};
        parameters['t'] = tabBootstrap.MetricsController.getTiming();
        parameters['d'] = 'APPINT';
        var evt = new tabBootstrap.MetricsEvent('gen', tabBootstrap.MetricsSuites.bootstrap, parameters);
        tabBootstrap.MetricsController.get_instance().logEvent(evt);
        tab.BrowserSupport.doPostMessageWithContext('tableau.responsive');
    },
    
    _doLoadingTransition$1: function tab_ApplicationViewModel$_doLoadingTransition$1() {
        var FadeDuration = 450;
        this._notifyAppInteractive$1();
        var staticImageNode = $('#staticImage');
        var glassPaneNode = $('#loadingGlassPane');
        var spinnerNode = $('#loadingSpinner');
        var tapNode = $('#tapToInteract');
        this.createTapToInteractTouchHandler(tapNode);
        if (tsConfig.animateTransition) {
            spinnerNode.fadeOut(FadeDuration, function() {
                $(this).hide();
            });
            staticImageNode.fadeOut(FadeDuration, function() {
                $(this).hide();
            });
            glassPaneNode.fadeOut(FadeDuration, function() {
                $(this).css('cursor', 'default');
                $(this).hide();
            });
            if (glassPaneNode.size() > 0) {
                this.createTapToInteractTransition(tsConfig.animateTransition, FadeDuration);
            }
        }
        else {
            spinnerNode.css('display', 'none');
            staticImageNode.css('display', 'none');
            glassPaneNode.css('display', 'none');
            this.createTapToInteractTransition(tsConfig.animateTransition, 0);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._applicationViewModelsClickDetector

tab._applicationViewModelsClickDetector = function tab__applicationViewModelsClickDetector() {
}
tab._applicationViewModelsClickDetector.prototype = {
    _startX: 0,
    _startY: 0,
    _lastStartEvent: null,
    
    add_clicked: function tab__applicationViewModelsClickDetector$add_clicked(value) {
        this.__clicked = ss.Delegate.combine(this.__clicked, value);
    },
    remove_clicked: function tab__applicationViewModelsClickDetector$remove_clicked(value) {
        this.__clicked = ss.Delegate.remove(this.__clicked, value);
    },
    
    __clicked: null,
    
    onMouseDown: function tab__applicationViewModelsClickDetector$onMouseDown(e) {
        this._lastStartEvent = Date.get_now();
        this._startX = e.pageX;
        this._startY = e.pageY;
    },
    
    onMouseUp: function tab__applicationViewModelsClickDetector$onMouseUp(e) {
        this._testClickEvent(e);
    },
    
    _testClickEvent: function tab__applicationViewModelsClickDetector$_testClickEvent(e) {
        var timeDiff = Date.get_now() - this._lastStartEvent;
        var xDiff = Math.abs(e.pageX - this._startX);
        var yDiff = Math.abs(e.pageY - this._startY);
        tab.Log.get(this).debug('Time difference: %s. X difference: %s. Y difference: %s', timeDiff, xDiff, yDiff);
        if (timeDiff <= 600 && xDiff <= 10 && yDiff <= 10 && ss.isValue(this.__clicked)) {
            this.__clicked(e);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ApplicationViewModelReal

tab.ApplicationViewModelReal = function tab_ApplicationViewModelReal(applicationModel) {
    tab.ApplicationViewModelReal.initializeBase(this);
    this._applicationModel$1 = applicationModel;
    this._applicationModel$1.add_newWorkbook(ss.Delegate.create(this, this.handleNewWorkbook));
    if (ss.isValue(this._applicationModel$1.get_workbook())) {
        this.handleNewWorkbook(this._applicationModel$1.get_workbook());
    }
    this._applicationModel$1.add_applicationUpdate(ss.Delegate.create(this, this.handleApplicationUpdate));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._applicationModel$1.remove_applicationUpdate(ss.Delegate.create(this, this.handleApplicationUpdate));
    })));
    this._toolbarViewModel$1 = new tab.ToolbarViewModel(this._applicationModel$1.get_toolbar());
}
tab.ApplicationViewModelReal.prototype = {
    _applicationModel$1: null,
    _workbookViewModel$1: null,
    _toolbarViewModel$1: null,
    
    add_applicationUpdate: function tab_ApplicationViewModelReal$add_applicationUpdate(value) {
        this.__applicationUpdate$1 = ss.Delegate.combine(this.__applicationUpdate$1, value);
    },
    remove_applicationUpdate: function tab_ApplicationViewModelReal$remove_applicationUpdate(value) {
        this.__applicationUpdate$1 = ss.Delegate.remove(this.__applicationUpdate$1, value);
    },
    
    __applicationUpdate$1: null,
    
    get_dashboardViewModel: function tab_ApplicationViewModelReal$get_dashboardViewModel() {
        return this._workbookViewModel$1.get_dashboardViewModel();
    },
    
    get_contentDashboardViewModel: function tab_ApplicationViewModelReal$get_contentDashboardViewModel() {
        return this._workbookViewModel$1.get_contentDashboardViewModel();
    },
    
    get_workbookViewModel: function tab_ApplicationViewModelReal$get_workbookViewModel() {
        return this._workbookViewModel$1;
    },
    
    get_toolbarViewModel: function tab_ApplicationViewModelReal$get_toolbarViewModel() {
        return this._toolbarViewModel$1;
    },
    
    dispose: function tab_ApplicationViewModelReal$dispose() {
        if (ss.isValue(this._toolbarViewModel$1)) {
            this._toolbarViewModel$1.dispose();
        }
        this._disposeWorkbook$1();
        this._applicationModel$1.remove_newWorkbook(ss.Delegate.create(this, this.handleNewWorkbook));
        tab.ApplicationViewModelReal.callBaseMethod(this, 'dispose');
    },
    
    handleNewWorkbook: function tab_ApplicationViewModelReal$handleNewWorkbook(workbookModel) {
        this._disposeWorkbook$1();
        this._workbookViewModel$1 = new tab.WorkbookViewModel(workbookModel);
    },
    
    _disposeWorkbook$1: function tab_ApplicationViewModelReal$_disposeWorkbook$1() {
        if (ss.isValue(this._workbookViewModel$1)) {
            this._workbookViewModel$1.dispose();
            this._workbookViewModel$1 = null;
        }
    },
    
    handleApplicationUpdate: function tab_ApplicationViewModelReal$handleApplicationUpdate() {
        this.raiseActionEvent(this.__applicationUpdate$1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ConfirmationViewModel

tab.ConfirmationViewModel = function tab_ConfirmationViewModel() {
    this._confirmText$1 = tab.Strings.ConfirmationButtonConfirm;
    this._denyText$1 = tab.Strings.ConfirmationButtonDeny;
    this._titleText$1 = tab.Strings.ConfirmationTitle;
    tab.ConfirmationViewModel.initializeBase(this);
}
tab.ConfirmationViewModel.create = function tab_ConfirmationViewModel$create(messageHtml, callback) {
    var vm = new tab.ConfirmationViewModel();
    vm.set_messageHtml(messageHtml);
    vm.disposeOnHide();
    vm.add_hidden(callback);
    vm.disposables.add(new tab.CallOnDispose(function() {
        vm.remove_hidden(callback);
    }));
    return vm;
}
tab.ConfirmationViewModel.showConfirmation = function tab_ConfirmationViewModel$showConfirmation(messageHtml, callback) {
    var vm = tab.ConfirmationViewModel.create(messageHtml, callback);
    vm.show();
}
tab.ConfirmationViewModel.showNotification = function tab_ConfirmationViewModel$showNotification(messageHtml, callback) {
    var vm = tab.ConfirmationViewModel.create(messageHtml, callback);
    vm.set_showDenyButton(false);
    vm.set_confirmText(tab.Strings.DialogButtonOK);
    vm.show();
}
tab.ConfirmationViewModel.prototype = {
    _messageHtml$1: null,
    _showConfirmBtn$1: true,
    _showDenyBtn$1: true,
    _visible$1: false,
    _view$1: null,
    
    add_shown: function tab_ConfirmationViewModel$add_shown(value) {
        this.__shown$1 = ss.Delegate.combine(this.__shown$1, value);
    },
    remove_shown: function tab_ConfirmationViewModel$remove_shown(value) {
        this.__shown$1 = ss.Delegate.remove(this.__shown$1, value);
    },
    
    __shown$1: null,
    
    add_hidden: function tab_ConfirmationViewModel$add_hidden(value) {
        this.__hidden$1 = ss.Delegate.combine(this.__hidden$1, value);
    },
    remove_hidden: function tab_ConfirmationViewModel$remove_hidden(value) {
        this.__hidden$1 = ss.Delegate.remove(this.__hidden$1, value);
    },
    
    __hidden$1: null,
    
    get_messageHtml: function tab_ConfirmationViewModel$get_messageHtml() {
        return this._messageHtml$1;
    },
    set_messageHtml: function tab_ConfirmationViewModel$set_messageHtml(value) {
        this._messageHtml$1 = value;
        return value;
    },
    
    get_visible: function tab_ConfirmationViewModel$get_visible() {
        return this._visible$1;
    },
    
    get_confirmText: function tab_ConfirmationViewModel$get_confirmText() {
        return this._confirmText$1;
    },
    set_confirmText: function tab_ConfirmationViewModel$set_confirmText(value) {
        this._confirmText$1 = value;
        return value;
    },
    
    get_denyText: function tab_ConfirmationViewModel$get_denyText() {
        return this._denyText$1;
    },
    set_denyText: function tab_ConfirmationViewModel$set_denyText(value) {
        this._denyText$1 = value;
        return value;
    },
    
    get_titleText: function tab_ConfirmationViewModel$get_titleText() {
        return this._titleText$1;
    },
    set_titleText: function tab_ConfirmationViewModel$set_titleText(value) {
        this._titleText$1 = value;
        return value;
    },
    
    get_showConfirmButton: function tab_ConfirmationViewModel$get_showConfirmButton() {
        return this._showConfirmBtn$1;
    },
    set_showConfirmButton: function tab_ConfirmationViewModel$set_showConfirmButton(value) {
        this._showConfirmBtn$1 = value;
        return value;
    },
    
    get_showDenyButton: function tab_ConfirmationViewModel$get_showDenyButton() {
        return this._showDenyBtn$1;
    },
    set_showDenyButton: function tab_ConfirmationViewModel$set_showDenyButton(value) {
        this._showDenyBtn$1 = value;
        return value;
    },
    
    dispose: function tab_ConfirmationViewModel$dispose() {
        this._view$1 = null;
        this.__shown$1 = null;
        this.__hidden$1 = null;
        tab.ConfirmationViewModel.callBaseMethod(this, 'dispose');
    },
    
    show: function tab_ConfirmationViewModel$show() {
        if (this._visible$1) {
            return;
        }
        if (ss.isNullOrUndefined(this._view$1)) {
            this._view$1 = spiff.ObjectRegistry.newView(tab.ConfirmationView, this);
        }
        this._visible$1 = true;
        this.raiseActionEvent(this.__shown$1);
    },
    
    disposeOnHide: function tab_ConfirmationViewModel$disposeOnHide() {
        var dispose = ss.Delegate.create(this, function() {
            this.dispose();
        });
        this.add_hidden(dispose);
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.remove_hidden(dispose);
        })));
    },
    
    confirm: function tab_ConfirmationViewModel$confirm() {
        this._hide$1('confirm');
    },
    
    deny: function tab_ConfirmationViewModel$deny() {
        this._hide$1('deny');
    },
    
    cancel: function tab_ConfirmationViewModel$cancel() {
        this._hide$1('cancel');
    },
    
    _hide$1: function tab_ConfirmationViewModel$_hide$1(confirmed) {
        if (!this._visible$1) {
            return;
        }
        this._visible$1 = false;
        if (ss.isValue(this.__hidden$1)) {
            this.__hidden$1(confirmed);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalFilterViewModel

tab.CategoricalFilterViewModel = function tab_CategoricalFilterViewModel(filterModel) {
    tab.CategoricalFilterViewModel.initializeBase(this);
    this._model$1 = filterModel;
    this._model$1.add_filterUpdated(ss.Delegate.create(this, this.handleUpdateFilterContent));
}
tab.CategoricalFilterViewModel.prototype = {
    _model$1: null,
    
    get_filterType: function tab_CategoricalFilterViewModel$get_filterType() {
        return this._model$1.get_filterType();
    },
    
    get_categoricalFilterModel: function tab_CategoricalFilterViewModel$get_categoricalFilterModel() {
        return this._model$1;
    },
    
    get_mode: function tab_CategoricalFilterViewModel$get_mode() {
        return this._model$1.get_mode();
    },
    
    get_pattern: function tab_CategoricalFilterViewModel$get_pattern() {
        return this._model$1.get_pattern();
    },
    
    get_isAllMode: function tab_CategoricalFilterViewModel$get_isAllMode() {
        return this._model$1.get_isAllMode();
    },
    
    get_allItemsAreChecked: function tab_CategoricalFilterViewModel$get_allItemsAreChecked() {
        return this._model$1.get_allItemsAreChecked();
    },
    
    get_noItemsAreChecked: function tab_CategoricalFilterViewModel$get_noItemsAreChecked() {
        return this._model$1.get_noItemsAreChecked();
    },
    
    get_exclude: function tab_CategoricalFilterViewModel$get_exclude() {
        return this._model$1.get_exclude();
    },
    
    get_isTiled: function tab_CategoricalFilterViewModel$get_isTiled() {
        return this._model$1.get_isTiled();
    },
    
    get_isSearchable: function tab_CategoricalFilterViewModel$get_isSearchable() {
        return this._model$1.get_isSearchable();
    },
    
    get_summary: function tab_CategoricalFilterViewModel$get_summary() {
        return this._model$1.get_summary();
    },
    
    get_underlyingDataSourceIsCube: function tab_CategoricalFilterViewModel$get_underlyingDataSourceIsCube() {
        return this._model$1.get_underlyingDataSourceIsCube();
    },
    
    get_condition: function tab_CategoricalFilterViewModel$get_condition() {
        return this._model$1.get_condition();
    },
    
    get_limit: function tab_CategoricalFilterViewModel$get_limit() {
        return this._model$1.get_limit();
    },
    
    get_rangeType: function tab_CategoricalFilterViewModel$get_rangeType() {
        return this._model$1.get_rangeType();
    },
    
    get_catFilterTable: function tab_CategoricalFilterViewModel$get_catFilterTable() {
        return this._model$1.get_catFilterTable();
    },
    
    get_domainActualSize: function tab_CategoricalFilterViewModel$get_domainActualSize() {
        return this._model$1.get_domainActualSize();
    },
    
    get_tuples: function tab_CategoricalFilterViewModel$get_tuples() {
        return this._model$1.get_tuples();
    },
    
    handleUpdateFilterContent: function tab_CategoricalFilterViewModel$handleUpdateFilterContent() {
    },
    
    dispose: function tab_CategoricalFilterViewModel$dispose() {
        this._model$1.remove_filterUpdated(ss.Delegate.create(this, this.handleUpdateFilterContent));
        this._model$1 = null;
        tab.CategoricalFilterViewModel.callBaseMethod(this, 'dispose');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DownloadViewModel

tab.DownloadViewModel = function tab_DownloadViewModel(toolbarViewModel) {
    tab.DownloadViewModel.initializeBase(this);
    this._toolbarViewModel$1 = toolbarViewModel;
}
tab.DownloadViewModel.prototype = {
    _toolbarViewModel$1: null,
    
    get_viewType: function tab_DownloadViewModel$get_viewType() {
        return tab.DownloadView;
    },
    
    get_viewModel: function tab_DownloadViewModel$get_viewModel() {
        return this;
    },
    
    get_toolbarIsBottom: function tab_DownloadViewModel$get_toolbarIsBottom() {
        return this._toolbarViewModel$1.get_toolbarIsBottom();
    },
    
    get_shouldShowDownloadWorkbook: function tab_DownloadViewModel$get_shouldShowDownloadWorkbook() {
        return !tsConfig.is_mobile;
    },
    
    get_downloadWorkbookEnabled: function tab_DownloadViewModel$get_downloadWorkbookEnabled() {
        return !tsConfig.is_mobile && ((!tsConfig.previewMode && !String.isNullOrEmpty(tsConfig.downloadURI)) || tsConfig.is_metrics_view);
    },
    
    get_downloadAppUrl: function tab_DownloadViewModel$get_downloadAppUrl() {
        var parentLocation = (ss.isValue(tabBootstrap.ViewerBootstrap.get_instance().location)) ? tabBootstrap.ViewerBootstrap.get_instance().location.toString() : '';
        return 'http://publicrevizit.tableausoftware.com/s/download' + '?source=viz_toolbar&ref=' + parentLocation.split('?')[0];
    },
    
    get_shouldShowPdf: function tab_DownloadViewModel$get_shouldShowPdf() {
        return this._getLegacyMenuState$1('print');
    },
    
    get_shouldShowImage: function tab_DownloadViewModel$get_shouldShowImage() {
        return this._getLegacyMenuState$1('exportimage');
    },
    
    get_exportDataEnabled: function tab_DownloadViewModel$get_exportDataEnabled() {
        return this._getLegacyMenuState$1('exportdata');
    },
    
    get_exportCrosstabEnabled: function tab_DownloadViewModel$get_exportCrosstabEnabled() {
        return this._getLegacyMenuState$1('exportcrosstab');
    },
    
    disposeViewModel: function tab_DownloadViewModel$disposeViewModel() {
        this.dispose();
    },
    
    downloadWorkbook: function tab_DownloadViewModel$downloadWorkbook() {
        tab.ToolbarServerCommands.downloadWorkbook();
    },
    
    exportImage: function tab_DownloadViewModel$exportImage() {
        var helper = new tab.ExportHelper();
        helper.setSheetScrollPositions(tab.Application.get_instance().get_client().get_viewControllers());
        tab.ToolbarServerCommands.exportImage(helper);
    },
    
    exportData: function tab_DownloadViewModel$exportData() {
        tab.ToolbarServerCommands.exportData();
    },
    
    exportCrosstab: function tab_DownloadViewModel$exportCrosstab() {
        tab.ToolbarServerCommands.exportCrosstab();
    },
    
    exportPdf: function tab_DownloadViewModel$exportPdf() {
        tab.ToolbarServerCommands.exportPdf(new tab.ExportHelper());
    },
    
    updateUberPopupViewModel: function tab_DownloadViewModel$updateUberPopupViewModel(vm) {
    },
    
    _getLegacyMenuState$1: function tab_DownloadViewModel$_getLegacyMenuState$1(name) {
        if (ss.isNullOrUndefined(this._toolbarViewModel$1.get_downloadableItems())) {
            return false;
        }
        var legacyMenuItem = _.find(this._toolbarViewModel$1.get_downloadableItems(), function(menuItem) {
            return menuItem.legacyMenuName === name;
        });
        if (ss.isNullOrUndefined(legacyMenuItem)) {
            return false;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(legacyMenuItem.legacyMenuStates);
        while ($enum1.moveNext()) {
            var state = $enum1.current;
            if (state === 'grayed') {
                return false;
            }
        }
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ReferenceLineConstantValueEditorViewModel

tab.ReferenceLineConstantValueEditorViewModel = function tab_ReferenceLineConstantValueEditorViewModel() {
    tab.ReferenceLineConstantValueEditorViewModel.initializeBase(this);
}
tab.ReferenceLineConstantValueEditorViewModel.add_showReferenceLineConstantValueEditor = function tab_ReferenceLineConstantValueEditorViewModel$add_showReferenceLineConstantValueEditor(value) {
    tab.ReferenceLineConstantValueEditorViewModel.__showReferenceLineConstantValueEditor$1 = ss.Delegate.combine(tab.ReferenceLineConstantValueEditorViewModel.__showReferenceLineConstantValueEditor$1, value);
}
tab.ReferenceLineConstantValueEditorViewModel.remove_showReferenceLineConstantValueEditor = function tab_ReferenceLineConstantValueEditorViewModel$remove_showReferenceLineConstantValueEditor(value) {
    tab.ReferenceLineConstantValueEditorViewModel.__showReferenceLineConstantValueEditor$1 = ss.Delegate.remove(tab.ReferenceLineConstantValueEditorViewModel.__showReferenceLineConstantValueEditor$1, value);
}
tab.ReferenceLineConstantValueEditorViewModel.constantLinePillDropped = function tab_ReferenceLineConstantValueEditorViewModel$constantLinePillDropped(referenceLinePresModel) {
    if (ss.isValue(referenceLinePresModel)) {
        var viewModel = new tab.ReferenceLineConstantValueEditorViewModel();
        viewModel._referenceLinePresModel$1 = referenceLinePresModel;
        tab.ReferenceLineConstantValueEditorViewModel.__showReferenceLineConstantValueEditor$1(viewModel);
    }
}
tab.ReferenceLineConstantValueEditorViewModel.prototype = {
    _referenceLinePresModel$1: null,
    
    get_constantValue: function tab_ReferenceLineConstantValueEditorViewModel$get_constantValue() {
        return this._referenceLinePresModel$1.formattedValue;
    },
    
    get_refLineId: function tab_ReferenceLineConstantValueEditorViewModel$get_refLineId() {
        return this._referenceLinePresModel$1.refLineId;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.StoryPointCaptionViewModel

tab.StoryPointCaptionViewModel = function tab_StoryPointCaptionViewModel(flipboardNavigatorModel, storyPointIndex) {
    tab.StoryPointCaptionViewModel.initializeBase(this);
    this._model$1 = flipboardNavigatorModel;
    this._storyPointIndex$1 = storyPointIndex;
    this._model$1.add_newFlipboardNav(ss.Delegate.create(this, this.handleNewFlipboardNav));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._model$1.remove_newFlipboardNav(ss.Delegate.create(this, this.handleNewFlipboardNav));
    })));
}
tab.StoryPointCaptionViewModel.prototype = {
    _model$1: null,
    _storyPointIndex$1: 0,
    
    add_updatePoint: function tab_StoryPointCaptionViewModel$add_updatePoint(value) {
        this.__updatePoint$1 = ss.Delegate.combine(this.__updatePoint$1, value);
    },
    remove_updatePoint: function tab_StoryPointCaptionViewModel$remove_updatePoint(value) {
        this.__updatePoint$1 = ss.Delegate.remove(this.__updatePoint$1, value);
    },
    
    __updatePoint$1: null,
    
    get__presModel$1: function tab_StoryPointCaptionViewModel$get__presModel$1() {
        return this._model$1.get_storyPoints()[this._storyPointIndex$1];
    },
    
    get_isCurrentPoint: function tab_StoryPointCaptionViewModel$get_isCurrentPoint() {
        return this._storyPointIndex$1 === this._model$1.get_currentPointIndex();
    },
    
    get_isCaptured: function tab_StoryPointCaptionViewModel$get_isCaptured() {
        return this.get__presModel$1().isCaptured;
    },
    
    get_caption: function tab_StoryPointCaptionViewModel$get_caption() {
        return this.get__presModel$1().storyPointCaption;
    },
    
    get_storyPointId: function tab_StoryPointCaptionViewModel$get_storyPointId() {
        return this.get__presModel$1().storyPointId;
    },
    
    get_storyPointIndex: function tab_StoryPointCaptionViewModel$get_storyPointIndex() {
        return this._storyPointIndex$1;
    },
    
    get_isFirstPoint: function tab_StoryPointCaptionViewModel$get_isFirstPoint() {
        return !this.get_storyPointIndex();
    },
    
    get_isLastPoint: function tab_StoryPointCaptionViewModel$get_isLastPoint() {
        return this._storyPointIndex$1 === this._model$1.get_storyPoints().length - 1;
    },
    
    get_storyPointStyle: function tab_StoryPointCaptionViewModel$get_storyPointStyle() {
        if (this.get_isCurrentPoint()) {
            return this.get_selectedStoryPointStyle();
        }
        else {
            return this.get_unselectedStoryPointStyle();
        }
    },
    
    get_selectedStoryPointStyle: function tab_StoryPointCaptionViewModel$get_selectedStoryPointStyle() {
        return this._model$1.get_flipboardNavPresModel().selectedStoryPointStyle;
    },
    
    get_unselectedStoryPointStyle: function tab_StoryPointCaptionViewModel$get_unselectedStoryPointStyle() {
        return this._model$1.get_flipboardNavPresModel().unselectedStoryPointStyle;
    },
    
    handleNewFlipboardNav: function tab_StoryPointCaptionViewModel$handleNewFlipboardNav() {
        this.raiseActionEvent(this.__updatePoint$1);
    },
    
    clickStoryPoint: function tab_StoryPointCaptionViewModel$clickStoryPoint() {
        var deferred = $.DeferredData();
        if (this.get_isCurrentPoint()) {
            deferred.resolve(this);
        }
        else {
            var success = ss.Delegate.create(this, function() {
                deferred.resolve(this);
            });
            var failure = function() {
                deferred.reject(arguments[0]);
            };
            var activationDone = tab.StoryClientCommands.setActiveStoryPoint(this._storyPointIndex$1, this._model$1);
            activationDone.then(success, failure);
        }
        return deferred.promise();
    },
    
    revertStoryPoint: function tab_StoryPointCaptionViewModel$revertStoryPoint() {
        var deferred = $.DeferredData();
        if (this.get_isCaptured()) {
            deferred.resolve(this);
        }
        else {
            var success = ss.Delegate.create(this, function() {
                deferred.resolve(this);
            });
            var failure = function() {
                deferred.reject(arguments[0]);
            };
            var activationDone = tab.StoryClientCommands.revertStoryPoint(tab.ModelUtils.findContentDashboard().get_sheetPath(), this.get__presModel$1().storyPointId);
            activationDone.then(success, failure);
        }
        return deferred.promise();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.HierarchicalFilterViewModel

tab.HierarchicalFilterViewModel = function tab_HierarchicalFilterViewModel(filterModel) {
    tab.HierarchicalFilterViewModel.initializeBase(this);
    this._model$1 = filterModel;
}
tab.HierarchicalFilterViewModel.prototype = {
    _model$1: null,
    
    get_filterType: function tab_HierarchicalFilterViewModel$get_filterType() {
        return this._model$1.get_filterType();
    },
    
    get_hierarchicalFilterModel: function tab_HierarchicalFilterViewModel$get_hierarchicalFilterModel() {
        return this._model$1;
    },
    
    get_hierarchyTables: function tab_HierarchicalFilterViewModel$get_hierarchyTables() {
        return this._model$1.get_hierarchyTables();
    },
    
    get_levels: function tab_HierarchicalFilterViewModel$get_levels() {
        return this._model$1.get_levels();
    },
    
    get_isSearchable: function tab_HierarchicalFilterViewModel$get_isSearchable() {
        return this._model$1.get_isSearchable();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuantitativeFilterViewModel

tab.QuantitativeFilterViewModel = function tab_QuantitativeFilterViewModel(filterModel) {
    tab.QuantitativeFilterViewModel.initializeBase(this);
    this._model$1 = filterModel;
}
tab.QuantitativeFilterViewModel.prototype = {
    _model$1: null,
    
    get_filterType: function tab_QuantitativeFilterViewModel$get_filterType() {
        return this._model$1.get_filterType();
    },
    
    get_quantitativeFilterModel: function tab_QuantitativeFilterViewModel$get_quantitativeFilterModel() {
        return this._model$1;
    },
    
    get_range: function tab_QuantitativeFilterViewModel$get_range() {
        return this._model$1.get_range();
    },
    
    get_data: function tab_QuantitativeFilterViewModel$get_data() {
        return this._model$1.get_data();
    },
    
    get_dateFormat: function tab_QuantitativeFilterViewModel$get_dateFormat() {
        return this._model$1.get_dateFormat();
    },
    
    get_editingFormat: function tab_QuantitativeFilterViewModel$get_editingFormat() {
        return this._model$1.get_editingFormat();
    },
    
    get_format: function tab_QuantitativeFilterViewModel$get_format() {
        return this._model$1.get_format();
    },
    
    get_calendarControlStartOfWeek: function tab_QuantitativeFilterViewModel$get_calendarControlStartOfWeek() {
        return this._model$1.get_calendarControlStartOfWeek();
    },
    
    get_dataSourceStartOfWeek: function tab_QuantitativeFilterViewModel$get_dataSourceStartOfWeek() {
        return this._model$1.get_dataSourceStartOfWeek();
    },
    
    get_quantitativeFilterTable: function tab_QuantitativeFilterViewModel$get_quantitativeFilterTable() {
        return this._model$1.get_quantitativeFilterTable();
    },
    
    get_column: function tab_QuantitativeFilterViewModel$get_column() {
        return this.get_quantitativeFilterTable().column;
    },
    
    get_included: function tab_QuantitativeFilterViewModel$get_included() {
        return this.get_quantitativeFilterTable().included;
    },
    
    get_min: function tab_QuantitativeFilterViewModel$get_min() {
        return this.get_quantitativeFilterTable().min;
    },
    
    get_max: function tab_QuantitativeFilterViewModel$get_max() {
        return this.get_quantitativeFilterTable().max;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RelativeDateFilterViewModel

tab.RelativeDateFilterViewModel = function tab_RelativeDateFilterViewModel(filterModel) {
    tab.RelativeDateFilterViewModel.initializeBase(this);
    this._model$1 = filterModel;
}
tab.RelativeDateFilterViewModel.prototype = {
    _model$1: null,
    
    get_filterType: function tab_RelativeDateFilterViewModel$get_filterType() {
        return this._model$1.get_filterType();
    },
    
    get_relativeDateFilterModel: function tab_RelativeDateFilterViewModel$get_relativeDateFilterModel() {
        return this._model$1;
    },
    
    get_defaultFormat: function tab_RelativeDateFilterViewModel$get_defaultFormat() {
        return this._model$1.get_defaultFormat();
    },
    
    get_fiscalYearStart: function tab_RelativeDateFilterViewModel$get_fiscalYearStart() {
        return this._model$1.get_fiscalYearStart();
    },
    
    get_noTime: function tab_RelativeDateFilterViewModel$get_noTime() {
        return this._model$1.get_noTime();
    },
    
    get_isRelativeDatePick: function tab_RelativeDateFilterViewModel$get_isRelativeDatePick() {
        return this._model$1.get_isRelativeDatePick();
    },
    
    get_text: function tab_RelativeDateFilterViewModel$get_text() {
        return this._model$1.get_text();
    },
    
    get_relativeDateTable: function tab_RelativeDateFilterViewModel$get_relativeDateTable() {
        return this._model$1.get_relativeDateTable();
    },
    
    get_periodType: function tab_RelativeDateFilterViewModel$get_periodType() {
        return this.get_relativeDateTable().periodType;
    },
    
    get_rangeType: function tab_RelativeDateFilterViewModel$get_rangeType() {
        return this.get_relativeDateTable().rangeType;
    },
    
    get_rangeN: function tab_RelativeDateFilterViewModel$get_rangeN() {
        return this.get_relativeDateTable().rangeN;
    },
    
    get_anchor: function tab_RelativeDateFilterViewModel$get_anchor() {
        return (ss.isValue(this.get_relativeDateTable().anchor)) ? this.get_relativeDateTable().anchor : null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardNavigatorViewModel

tab.FlipboardNavigatorViewModel = function tab_FlipboardNavigatorViewModel(flipboardNavigatorModel) {
    this._captions$1 = [];
    tab.FlipboardNavigatorViewModel.initializeBase(this);
    this._model$1 = flipboardNavigatorModel;
    this._model$1.add_newFlipboardNav(ss.Delegate.create(this, this.handleNewFlipboardNav));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._model$1.remove_newFlipboardNav(ss.Delegate.create(this, this.handleNewFlipboardNav));
    })));
    this._model$1.get_zone().add_resizeZone(ss.Delegate.create(this, this._handleResize$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._model$1.get_zone().remove_resizeZone(ss.Delegate.create(this, this._handleResize$1));
    })));
    this._addPoints$1();
}
tab.FlipboardNavigatorViewModel.prototype = {
    _model$1: null,
    _listeningToPostRemoteCommand$1: false,
    
    add_resizeZone: function tab_FlipboardNavigatorViewModel$add_resizeZone(value) {
        this.__resizeZone$1 = ss.Delegate.combine(this.__resizeZone$1, value);
    },
    remove_resizeZone: function tab_FlipboardNavigatorViewModel$remove_resizeZone(value) {
        this.__resizeZone$1 = ss.Delegate.remove(this.__resizeZone$1, value);
    },
    
    __resizeZone$1: null,
    
    add_updateActivePoint: function tab_FlipboardNavigatorViewModel$add_updateActivePoint(value) {
        this.__updateActivePoint$1 = ss.Delegate.combine(this.__updateActivePoint$1, value);
    },
    remove_updateActivePoint: function tab_FlipboardNavigatorViewModel$remove_updateActivePoint(value) {
        this.__updateActivePoint$1 = ss.Delegate.remove(this.__updateActivePoint$1, value);
    },
    
    __updateActivePoint$1: null,
    
    add_remoteUpdateComplete: function tab_FlipboardNavigatorViewModel$add_remoteUpdateComplete(value) {
        this.__remoteUpdateComplete$1 = ss.Delegate.combine(this.__remoteUpdateComplete$1, value);
    },
    remove_remoteUpdateComplete: function tab_FlipboardNavigatorViewModel$remove_remoteUpdateComplete(value) {
        this.__remoteUpdateComplete$1 = ss.Delegate.remove(this.__remoteUpdateComplete$1, value);
    },
    
    __remoteUpdateComplete$1: null,
    
    get_currentPointIndex: function tab_FlipboardNavigatorViewModel$get_currentPointIndex() {
        return this._model$1.get_currentPointIndex();
    },
    
    get_numberOfPoints: function tab_FlipboardNavigatorViewModel$get_numberOfPoints() {
        return this._model$1.get_storyPoints().length;
    },
    
    get_storyPointHeight: function tab_FlipboardNavigatorViewModel$get_storyPointHeight() {
        return this._model$1.get_flipboardNavPresModel().selectedStoryPointStyle.h;
    },
    
    get_storyPointWidth: function tab_FlipboardNavigatorViewModel$get_storyPointWidth() {
        return this._model$1.get_flipboardNavPresModel().selectedStoryPointStyle.w;
    },
    
    get_previousDisabled: function tab_FlipboardNavigatorViewModel$get_previousDisabled() {
        return this.get_currentPointIndex() <= 0;
    },
    
    get_nextDisabled: function tab_FlipboardNavigatorViewModel$get_nextDisabled() {
        return this.get_currentPointIndex() >= this.get_numberOfPoints() - 1;
    },
    
    get_showArrows: function tab_FlipboardNavigatorViewModel$get_showArrows() {
        return this._model$1.get_flipboardNavPresModel().navArrowsVisible;
    },
    
    get_captions: function tab_FlipboardNavigatorViewModel$get_captions() {
        return this._captions$1;
    },
    
    handleNewFlipboardNav: function tab_FlipboardNavigatorViewModel$handleNewFlipboardNav() {
        if (ss.isValue(this.__updateActivePoint$1)) {
            this.__updateActivePoint$1(this.get_currentPointIndex());
        }
        if (!this._listeningToPostRemoteCommand$1) {
            var controller = tab.CommandController.get();
            var handlePostRemoteCommand = null;
            handlePostRemoteCommand = ss.Delegate.create(this, function() {
                controller.remove_postRemoteCommand(handlePostRemoteCommand);
                this._listeningToPostRemoteCommand$1 = false;
                this.raiseActionEvent(this.__remoteUpdateComplete$1);
            });
            controller.add_postRemoteCommand(handlePostRemoteCommand);
            this._listeningToPostRemoteCommand$1 = true;
        }
    },
    
    _handleResize$1: function tab_FlipboardNavigatorViewModel$_handleResize$1() {
        this.raiseActionEvent(this.__resizeZone$1);
    },
    
    _removePoints$1: function tab_FlipboardNavigatorViewModel$_removePoints$1() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._captions$1);
        while ($enum1.moveNext()) {
            var sp = $enum1.current;
            sp.dispose();
        }
        this._captions$1.clear();
    },
    
    _addPoints$1: function tab_FlipboardNavigatorViewModel$_addPoints$1() {
        for (var i = 0; i < this.get_numberOfPoints(); i++) {
            this._captions$1.add(new tab.StoryPointCaptionViewModel(this._model$1, i));
        }
    },
    
    clickNext: function tab_FlipboardNavigatorViewModel$clickNext() {
        var deferred = $.DeferredData();
        if (this.get_nextDisabled()) {
            deferred.resolve(this.get_currentPointIndex());
        }
        else {
            this._setupNextPreviousClickDeferredHandlers$1(deferred, ss.Delegate.create(this, function() {
                return tab.StoryClientCommands.nextStoryPoint(this._model$1);
            }));
        }
        return deferred.promise();
    },
    
    clickPrevious: function tab_FlipboardNavigatorViewModel$clickPrevious() {
        var deferred = $.DeferredData();
        if (this.get_previousDisabled()) {
            deferred.resolve(this.get_currentPointIndex());
        }
        else {
            this._setupNextPreviousClickDeferredHandlers$1(deferred, ss.Delegate.create(this, function() {
                return tab.StoryClientCommands.previousStoryPoint(this._model$1);
            }));
        }
        return deferred.promise();
    },
    
    dispose: function tab_FlipboardNavigatorViewModel$dispose() {
        this._removePoints$1();
        tab.FlipboardNavigatorViewModel.callBaseMethod(this, 'dispose');
    },
    
    _setupNextPreviousClickDeferredHandlers$1: function tab_FlipboardNavigatorViewModel$_setupNextPreviousClickDeferredHandlers$1(deferred, commandFunc) {
        var resolve = ss.Delegate.create(this, function() {
            deferred.resolve(this.get_currentPointIndex());
        });
        var reject = function() {
            deferred.reject(arguments[0]);
        };
        commandFunc().then(resolve, reject);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardViewModel

tab.FlipboardViewModel = function tab_FlipboardViewModel(flipboardModel, parentZone) {
    tab.FlipboardViewModel.initializeBase(this);
    this._model$1 = flipboardModel;
    this._parentZone$1 = parentZone;
    this._model$1.add_invalidateZone(ss.Delegate.create(this, this._invalidate$1));
    this._model$1.get_storyPointModel().add_newStoryPoint(ss.Delegate.create(this, this._handleNewStoryPoint$1));
    this._model$1.get_storyPointModel().add_dashboardDisposal(ss.Delegate.create(this, this._disposeDashboard$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._model$1.remove_invalidateZone(ss.Delegate.create(this, this._invalidate$1));
        this._model$1.get_storyPointModel().remove_newStoryPoint(ss.Delegate.create(this, this._handleNewStoryPoint$1));
        this._model$1.get_storyPointModel().remove_dashboardDisposal(ss.Delegate.create(this, this._disposeDashboard$1));
    })));
    if (ss.isValue(this.get_flipboardModel().get_dashboardModel())) {
        this._handleNewStoryPoint$1();
    }
}
tab.FlipboardViewModel.prototype = {
    _model$1: null,
    _parentZone$1: null,
    _dashboardViewModel$1: null,
    
    add_newStoryPoint: function tab_FlipboardViewModel$add_newStoryPoint(value) {
        this.__newStoryPoint$1 = ss.Delegate.combine(this.__newStoryPoint$1, value);
    },
    remove_newStoryPoint: function tab_FlipboardViewModel$remove_newStoryPoint(value) {
        this.__newStoryPoint$1 = ss.Delegate.remove(this.__newStoryPoint$1, value);
    },
    
    __newStoryPoint$1: null,
    
    get_flipboardModel: function tab_FlipboardViewModel$get_flipboardModel() {
        return this._model$1;
    },
    
    get_dashboardViewModel: function tab_FlipboardViewModel$get_dashboardViewModel() {
        return this._dashboardViewModel$1;
    },
    
    get__dashboardPresModel$1: function tab_FlipboardViewModel$get__dashboardPresModel$1() {
        return this.get_flipboardModel().get_dashboardModel().get_dashboardPresModel();
    },
    
    get_parentZone: function tab_FlipboardViewModel$get_parentZone() {
        return this._parentZone$1;
    },
    
    _handleNewStoryPoint$1: function tab_FlipboardViewModel$_handleNewStoryPoint$1() {
        this._disposeDashboard$1();
        if (ss.isValue(this.get__dashboardPresModel$1())) {
            this._dashboardViewModel$1 = new tab.DashboardViewModel(this.get_flipboardModel().get_dashboardModel());
            this.raiseActionEvent(this.__newStoryPoint$1);
        }
    },
    
    _invalidate$1: function tab_FlipboardViewModel$_invalidate$1() {
        this._parentZone$1.forceZoneValidState(false);
    },
    
    dispose: function tab_FlipboardViewModel$dispose() {
        this._disposeDashboard$1();
        tab.FlipboardViewModel.callBaseMethod(this, 'dispose');
    },
    
    _disposeDashboard$1: function tab_FlipboardViewModel$_disposeDashboard$1() {
        if (ss.isValue(this.get_dashboardViewModel())) {
            this._dashboardViewModel$1.dispose();
            this._dashboardViewModel$1 = null;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParameterControlViewModel

tab.ParameterControlViewModel = function tab_ParameterControlViewModel(parameterCtrlModel) {
    tab.ParameterControlViewModel.initializeBase(this);
    this._parameterCtrlModel$1 = parameterCtrlModel;
    this._parameterCtrlModel$1.add_newParameterCtrl(ss.Delegate.create(this, this._handleNewParameterControl$1));
    this._parameterCtrlModel$1.get_zoneModel().add_resizeZone(ss.Delegate.create(this, this._handleParentZoneResized$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._parameterCtrlModel$1.remove_newParameterCtrl(ss.Delegate.create(this, this._handleNewParameterControl$1));
    })));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._parameterCtrlModel$1.get_zoneModel().remove_resizeZone(ss.Delegate.create(this, this._handleParentZoneResized$1));
    })));
}
tab.ParameterControlViewModel.prototype = {
    _parameterCtrlModel$1: null,
    
    add_newParameterControl: function tab_ParameterControlViewModel$add_newParameterControl(value) {
        this.__newParameterControl$1 = ss.Delegate.combine(this.__newParameterControl$1, value);
    },
    remove_newParameterControl: function tab_ParameterControlViewModel$remove_newParameterControl(value) {
        this.__newParameterControl$1 = ss.Delegate.remove(this.__newParameterControl$1, value);
    },
    
    __newParameterControl$1: null,
    
    add_resized: function tab_ParameterControlViewModel$add_resized(value) {
        this.__resized$1 = ss.Delegate.combine(this.__resized$1, value);
    },
    remove_resized: function tab_ParameterControlViewModel$remove_resized(value) {
        this.__resized$1 = ss.Delegate.remove(this.__resized$1, value);
    },
    
    __resized$1: null,
    
    get_parameterCtrlModel: function tab_ParameterControlViewModel$get_parameterCtrlModel() {
        return this._parameterCtrlModel$1;
    },
    
    get_frame: function tab_ParameterControlViewModel$get_frame() {
        return this._parameterCtrlModel$1.get_frame();
    },
    
    get_zone: function tab_ParameterControlViewModel$get_zone() {
        return this._parameterCtrlModel$1.get_zone();
    },
    
    get_viewSession: function tab_ParameterControlViewModel$get_viewSession() {
        return tab.ModelUtils.getViewSession(this.get_zone().sheet);
    },
    
    get_layoutSession: function tab_ParameterControlViewModel$get_layoutSession() {
        return tab.CommandController.get().get_legacySession();
    },
    
    get_hasBorder: function tab_ParameterControlViewModel$get_hasBorder() {
        return this._parameterCtrlModel$1.get_zoneModel().get_hasBorder();
    },
    
    _handleNewParameterControl$1: function tab_ParameterControlViewModel$_handleNewParameterControl$1(presModel) {
        this.raiseActionEvent(this.__newParameterControl$1);
    },
    
    _handleParentZoneResized$1: function tab_ParameterControlViewModel$_handleParentZoneResized$1() {
        this.raiseActionEvent(this.__resized$1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuickFilterDisplayViewModel

tab.QuickFilterDisplayViewModel = function tab_QuickFilterDisplayViewModel(quickFilterDisplayModel, filterModel) {
    tab.QuickFilterDisplayViewModel.initializeBase(this);
    this._quickFilterDisplayModel$1 = quickFilterDisplayModel;
    this._quickFilterDisplayModel$1.add_quickFilterDisplayUpdated(ss.Delegate.create(this, this.handleUpdateQuickFilterDisplay));
    this._quickFilterDisplayModel$1.get_zoneModel().add_resizeZone(ss.Delegate.create(this, this._handleParentZoneResized$1));
    this._filterModel$1 = filterModel;
    this._filterModel$1.add_filterUpdated(ss.Delegate.create(this, this._handleUpdateQuickFilterContent$1));
    this._handleNewFilterModel$1();
}
tab.QuickFilterDisplayViewModel.prototype = {
    _quickFilterDisplayModel$1: null,
    _filterModel$1: null,
    _needToUpdate$1: true,
    _filterViewModel$1: null,
    
    add_updateQuickFilterDisplay: function tab_QuickFilterDisplayViewModel$add_updateQuickFilterDisplay(value) {
        this.__updateQuickFilterDisplay$1 = ss.Delegate.combine(this.__updateQuickFilterDisplay$1, value);
    },
    remove_updateQuickFilterDisplay: function tab_QuickFilterDisplayViewModel$remove_updateQuickFilterDisplay(value) {
        this.__updateQuickFilterDisplay$1 = ss.Delegate.remove(this.__updateQuickFilterDisplay$1, value);
    },
    
    __updateQuickFilterDisplay$1: null,
    
    add_updateQuickFilterContent: function tab_QuickFilterDisplayViewModel$add_updateQuickFilterContent(value) {
        this.__updateQuickFilterContent$1 = ss.Delegate.combine(this.__updateQuickFilterContent$1, value);
    },
    remove_updateQuickFilterContent: function tab_QuickFilterDisplayViewModel$remove_updateQuickFilterContent(value) {
        this.__updateQuickFilterContent$1 = ss.Delegate.remove(this.__updateQuickFilterContent$1, value);
    },
    
    __updateQuickFilterContent$1: null,
    
    add_resized: function tab_QuickFilterDisplayViewModel$add_resized(value) {
        this.__resized$1 = ss.Delegate.combine(this.__resized$1, value);
    },
    remove_resized: function tab_QuickFilterDisplayViewModel$remove_resized(value) {
        this.__resized$1 = ss.Delegate.remove(this.__resized$1, value);
    },
    
    __resized$1: null,
    
    get_quickFilterDisplayModel: function tab_QuickFilterDisplayViewModel$get_quickFilterDisplayModel() {
        return this._quickFilterDisplayModel$1;
    },
    
    get_frame: function tab_QuickFilterDisplayViewModel$get_frame() {
        return this._quickFilterDisplayModel$1.get_frame();
    },
    
    get_zone: function tab_QuickFilterDisplayViewModel$get_zone() {
        return this._quickFilterDisplayModel$1.get_zone();
    },
    
    get_quickFilterDisplayPresModel: function tab_QuickFilterDisplayViewModel$get_quickFilterDisplayPresModel() {
        return this._quickFilterDisplayModel$1.get_quickFilterDisplayPresModel();
    },
    
    get_viewSession: function tab_QuickFilterDisplayViewModel$get_viewSession() {
        return tab.ModelUtils.getViewSession(this.get_zone().sheet);
    },
    
    get_layoutSession: function tab_QuickFilterDisplayViewModel$get_layoutSession() {
        return tab.CommandController.get().get_legacySession();
    },
    
    get_hasBorder: function tab_QuickFilterDisplayViewModel$get_hasBorder() {
        return this._quickFilterDisplayModel$1.get_zoneModel().get_hasBorder();
    },
    
    get_filterPresModel: function tab_QuickFilterDisplayViewModel$get_filterPresModel() {
        return this._filterModel$1.get_filterPresModel();
    },
    
    get_filterTypeViewModel: function tab_QuickFilterDisplayViewModel$get_filterTypeViewModel() {
        return this._filterViewModel$1;
    },
    
    get_needToUpdate: function tab_QuickFilterDisplayViewModel$get_needToUpdate() {
        return this._needToUpdate$1;
    },
    set_needToUpdate: function tab_QuickFilterDisplayViewModel$set_needToUpdate(value) {
        this._needToUpdate$1 = value;
        return value;
    },
    
    get_visualId: function tab_QuickFilterDisplayViewModel$get_visualId() {
        return tab.ModelUtils.getVisualId(this.get_zone().sheet);
    },
    
    handleUpdateQuickFilterDisplay: function tab_QuickFilterDisplayViewModel$handleUpdateQuickFilterDisplay(presModel) {
        this._needToUpdate$1 = true;
        _.defer(ss.Delegate.create(this, function() {
            this.raiseActionEvent(this.__updateQuickFilterDisplay$1);
        }));
    },
    
    _handleParentZoneResized$1: function tab_QuickFilterDisplayViewModel$_handleParentZoneResized$1() {
        this.raiseActionEvent(this.__resized$1);
    },
    
    _handleUpdateQuickFilterContent$1: function tab_QuickFilterDisplayViewModel$_handleUpdateQuickFilterContent$1() {
        this._needToUpdate$1 = true;
        _.defer(ss.Delegate.create(this, function() {
            this.raiseActionEvent(this.__updateQuickFilterContent$1);
        }));
    },
    
    _handleNewFilterModel$1: function tab_QuickFilterDisplayViewModel$_handleNewFilterModel$1() {
        this._disposeFilterViewModel$1();
        switch (this._filterModel$1.get_filterType()) {
            case 'Categorical':
                this._filterViewModel$1 = new tab.CategoricalFilterViewModel(this._filterModel$1);
                break;
            case 'Hierarchical':
                this._filterViewModel$1 = new tab.HierarchicalFilterViewModel(this._filterModel$1);
                break;
            case 'Quantitative':
                this._filterViewModel$1 = new tab.QuantitativeFilterViewModel(this._filterModel$1);
                break;
            case 'RelativeDate':
            case 'RelativeDatePick':
                this._filterViewModel$1 = new tab.RelativeDateFilterViewModel(this._filterModel$1);
                break;
        }
    },
    
    _disposeFilterViewModel$1: function tab_QuickFilterDisplayViewModel$_disposeFilterViewModel$1() {
        if (ss.isValue(this._filterViewModel$1)) {
            this._filterViewModel$1.dispose();
            this._filterViewModel$1 = null;
        }
    },
    
    dispose: function tab_QuickFilterDisplayViewModel$dispose() {
        this._quickFilterDisplayModel$1.remove_quickFilterDisplayUpdated(ss.Delegate.create(this, this.handleUpdateQuickFilterDisplay));
        this._quickFilterDisplayModel$1.get_zoneModel().remove_resizeZone(ss.Delegate.create(this, this._handleParentZoneResized$1));
        this._quickFilterDisplayModel$1 = null;
        this._filterModel$1.remove_filterUpdated(ss.Delegate.create(this, this._handleUpdateQuickFilterContent$1));
        this._filterModel$1 = null;
        this._disposeFilterViewModel$1();
        tab.QuickFilterDisplayViewModel.callBaseMethod(this, 'dispose');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShareViewModel

tab.ShareViewModel = function tab_ShareViewModel(toolbarViewModel) {
    tab.ShareViewModel.initializeBase(this);
    this._toolbarViewModel$1 = toolbarViewModel;
    this._shareOriginalView$1 = !this.get__isBaseViewASharedView$1();
    this.saveSharedView();
}
tab.ShareViewModel._getFacebookRedirectUri$1 = function tab_ShareViewModel$_getFacebookRedirectUri$1() {
    return (tsConfig.facebookRedirectURI || tab.ShareViewModel._defaultFacebookUrl$1);
}
tab.ShareViewModel._fixURIParam$1 = function tab_ShareViewModel$_fixURIParam$1(requestURI, isNewSetting, isDefaultSetting, paramNameStr) {
    var isDifferentFromDefault = (isNewSetting !== isDefaultSetting);
    var newRequestURI = requestURI;
    var newValue = ':' + paramNameStr + '=' + ((isNewSetting) ? 'yes' : 'no');
    var regex = new RegExp(':' + paramNameStr + '=[^&]+');
    if (!!newRequestURI.match(regex)) {
        if (isDifferentFromDefault) {
            newRequestURI = newRequestURI.replace(regex, newValue);
        }
        else {
            newRequestURI = newRequestURI.replace(regex, '');
            newRequestURI = newRequestURI.replace(new RegExp('&&'), '&');
            newRequestURI = newRequestURI.replace(new RegExp('\\?&'), '?');
            newRequestURI = newRequestURI.replace(new RegExp('&$'), '');
            newRequestURI = newRequestURI.replace(new RegExp('\\?$'), '');
        }
    }
    else {
        if (isDifferentFromDefault) {
            if (!!newRequestURI.match(new RegExp('[?]'))) {
                newRequestURI = newRequestURI + '&' + newValue;
            }
            else {
                newRequestURI = newRequestURI + '?' + newValue;
            }
        }
    }
    return newRequestURI;
}
tab.ShareViewModel.prototype = {
    _toolbarViewModel$1: null,
    _shareOriginalView$1: true,
    
    get_viewType: function tab_ShareViewModel$get_viewType() {
        return tab.ShareView;
    },
    
    get_viewModel: function tab_ShareViewModel$get_viewModel() {
        return this;
    },
    
    get_toolbarIsBottom: function tab_ShareViewModel$get_toolbarIsBottom() {
        return this._toolbarViewModel$1.get_toolbarIsBottom();
    },
    
    get_allowSharingDifferentViews: function tab_ShareViewModel$get_allowSharingDifferentViews() {
        if (!tsConfig.isPublic || !tsConfig.statefulURL) {
            return false;
        }
        if (this.get__isBaseViewASharedView$1()) {
            return true;
        }
        return tab.ApplicationModel.get_instance().get_workbook().get_isCurrentDashboardModified();
    },
    
    get_shouldShareOriginalView: function tab_ShareViewModel$get_shouldShareOriginalView() {
        return this._shareOriginalView$1;
    },
    set_shouldShareOriginalView: function tab_ShareViewModel$set_shouldShareOriginalView(value) {
        this._shareOriginalView$1 = value;
        return value;
    },
    
    get_shouldShowSocialShareOptions: function tab_ShareViewModel$get_shouldShowSocialShareOptions() {
        return tsConfig.isPublic;
    },
    
    get_linkLabel: function tab_ShareViewModel$get_linkLabel() {
        return tab.Strings.ToolbarSendTitle;
    },
    
    get_embedLabel: function tab_ShareViewModel$get_embedLabel() {
        return tab.Strings.ToolbarEmbedTitle;
    },
    
    get_currentViewLabel: function tab_ShareViewModel$get_currentViewLabel() {
        return tab.Strings.ToolbarCurrentView;
    },
    
    get_originalViewLabel: function tab_ShareViewModel$get_originalViewLabel() {
        return tab.Strings.ToolbarOriginalView;
    },
    
    get__isBaseViewASharedView$1: function tab_ShareViewModel$get__isBaseViewASharedView$1() {
        return !tab.MiscUtil.isNullOrEmpty(tsConfig.guid);
    },
    
    disposeViewModel: function tab_ShareViewModel$disposeViewModel() {
        this.dispose();
    },
    
    saveSharedView: function tab_ShareViewModel$saveSharedView() {
        if (!this.get_allowSharingDifferentViews()) {
            return;
        }
        tab.XhrUtil.guid = null;
        if (tsConfig.statefulURL) {
            var primaryContentUrl = this._getPrimaryContentUrl$1();
            if (primaryContentUrl === 'null' || primaryContentUrl == null) {
                primaryContentUrl = '';
            }
            tab.CommandController.get().get_legacySession().saveSharedView('', primaryContentUrl, function() {
            });
        }
    },
    
    generateShareUrl: function tab_ShareViewModel$generateShareUrl() {
        var uri = tsConfig.requestURI;
        if (!this.get_shouldShareOriginalView() && this.get_allowSharingDifferentViews()) {
            var xhrGuid = tab.XhrUtil.guid;
            var base_location = (tsConfig.single_frame) ? window.location : window.parent.location;
            var base_url = base_location.protocol + '//' + base_location.hostname + tab.ShareViewModel.currentViewPath;
            if (!tab.MiscUtil.isNullOrEmpty(xhrGuid)) {
                uri = base_url + xhrGuid;
            }
            else if (!tab.MiscUtil.isNullOrEmpty(tsConfig.guid)) {
                uri = base_url + tsConfig.guid;
            }
        }
        uri = tab.ShareViewModel._fixURIParam$1(uri, tsConfig.toolbarvis, tsConfig.toolbarvisDefault, 'toolbar');
        uri = tab.ShareViewModel._fixURIParam$1(uri, tabBootstrap.ViewerBootstrap.get_instance().shouldShowTabs(), tsConfig.showTabsDefault, 'tabs');
        uri = tab.ShareViewModel._fixURIParam$1(uri, tsConfig.isPublic && tsConfig.showViewCount, tsConfig.showViewCountDefault, 'display_count');
        uri = tab.ShareViewModel._fixURIParam$1(uri, tab.MiscUtil.sanatizeBoolean(tsConfig.showVizHome), true, 'showVizHome');
        return uri;
    },
    
    generateEmbedUrl: function tab_ShareViewModel$generateEmbedUrl() {
        var baseLocation = (tsConfig.single_frame) ? window.location : window.parent.location;
        var esc = tableau.format.escapeHTML;
        var blog_uri = this._getPrimaryContentUrl$1();
        var title = tsConfig.embeddedTitle;
        var static_image = this._getStaticImageUrl$1();
        var search = tabBootstrap.ViewerBootstrap.get_instance().location.search;
        var api_url = '/javascripts/api/viz_v1.js';
        var controller_id = tsConfig.repositoryUrl;
        var site_root = tsConfig.site_root;
        var size = this._calculateEmbedSize$1();
        if (api_url.indexOf('http://') === -1 && api_url.indexOf('https://') === -1) {
            api_url = baseLocation.protocol + '//' + baseLocation.host + api_url;
        }
        var dimstr = "width='" + size.w + "' height='" + size.h + "'";
        var scrstr = "<script type='text/javascript' src='" + api_url + "'></script>";
        var objstr = "<object class='tableauViz' " + dimstr + " style='display:none;'>";
        var ignoreParams = [];
        ignoreParams.add('embed');
        ignoreParams.add('preview');
        ignoreParams.add('show_tabs');
        ignoreParams.add('loadOrderID');
        objstr += "<param name='host_url' value='" + esc(encodeURIComponent((baseLocation.protocol + '//' + baseLocation.host + '/'))) + "' /> ";
        ignoreParams.add('host_url');
        if (!this.get_allowSharingDifferentViews()) {
            objstr += "<param name='site_root' value='" + esc(site_root) + "' />";
            objstr += "<param name='name' value='" + esc(controller_id) + "' />";
            ignoreParams.add('site_root');
            ignoreParams.add('name');
            objstr += "<param name='tabs' value='" + ((tabBootstrap.ViewerBootstrap.get_instance().shouldShowTabs()) ? 'yes' : 'no') + "' />";
            ignoreParams.add('tabs');
        }
        else {
            var noParamsLink = this.generateShareUrl().split('?')[0];
            objstr += "<param name='path' value='" + esc(noParamsLink.replaceAll(baseLocation.protocol + '//' + baseLocation.host + '/', '')) + "' /> ";
            ignoreParams.add('path');
        }
        objstr += "<param name='toolbar' value='" + ((tsConfig.toolbarvis) ? 'yes' : 'no') + "' />";
        ignoreParams.add('toolbar');
        if (tsConfig.isPublic) {
            if (!tab.MiscUtil.isNullOrEmpty(static_image)) {
                var noRssStaticImage = static_image.replaceAll('_rss.png', '.png');
                objstr += "<param name='static_image' value='" + esc(noRssStaticImage) + "' /> ";
            }
            objstr += "<param name='animate_transition' value='yes' />";
            objstr += "<param name='display_static_image' value='yes' />";
            objstr += "<param name='display_spinner' value='yes' />";
            objstr += "<param name='display_overlay' value='yes' />";
            objstr += "<param name='display_count' value='yes' />";
            ignoreParams.add('animate_transition');
            ignoreParams.add('display_static_image');
            ignoreParams.add('display_spinner');
            ignoreParams.add('display_overlay');
            ignoreParams.add('display_count');
        }
        if (search.length > 0) {
            var vizargs = search.substr(1).split('&');
            for (var i = 0; i < vizargs.length; i++) {
                var args = vizargs[i].match(new RegExp('^:([^=]+)=(.+)'));
                var name;
                var value;
                if (!!args && args.length === 3) {
                    name = args[1];
                    value = args[2];
                }
                else {
                    name = 'filter';
                    value = vizargs[i];
                }
                if (!tab.MiscUtil.isNullOrEmpty(name) && !ignoreParams.contains(name)) {
                    objstr += "<param name='" + esc(name) + "' value='" + esc(value) + "' />";
                }
            }
        }
        objstr += '</object>';
        var lnktar = blog_uri || '#';
        var imgstr = '';
        if (!tab.MiscUtil.isNullOrEmpty(static_image)) {
            imgstr = "<noscript><a href='" + esc(lnktar) + "'>" + "<img alt='" + esc(title) + " ' src='" + esc(static_image) + "' style='border: none' /></a></noscript>";
        }
        var placeholder_str = String.format("<div class='tableauPlaceholder' style='width: {0}px; height: {1}px;'>{2}{3}</div>", size.w, size.h, imgstr, objstr);
        var embedCode = scrstr + placeholder_str;
        return embedCode;
    },
    
    updateUberPopupViewModel: function tab_ShareViewModel$updateUberPopupViewModel(vm) {
    },
    
    doFacebookShareAction: function tab_ShareViewModel$doFacebookShareAction() {
        tab.Social.facebookPopup(tsConfig.facebookAppID, this.generateShareUrl(), this._getFacebookThumbnailUrl$1(), tsConfig.shareDescription, tsConfig.facebookDescription, tab.ShareViewModel._getFacebookRedirectUri$1());
    },
    
    doTwitterShareAction: function tab_ShareViewModel$doTwitterShareAction() {
        tab.Social.twitterPopup(this.generateShareUrl(), tsConfig.shareDescription);
    },
    
    _getStaticImageUrl$1: function tab_ShareViewModel$_getStaticImageUrl$1() {
        var xhrGuid = tab.XhrUtil.guid;
        var staticImageUrl = tsConfig.staticImage;
        if (!ss.isValue(staticImageUrl)) {
            return '';
        }
        if (!this.get_shouldShareOriginalView() && this.get_allowSharingDifferentViews() && ss.isValue(xhrGuid)) {
            var base_endIdx = staticImageUrl.indexOf('/images/') + 8;
            var static_image_base = staticImageUrl.substr(0, base_endIdx);
            staticImageUrl = static_image_base + xhrGuid.substr(0, 2) + '/' + xhrGuid + '/1_rss.png';
        }
        return staticImageUrl;
    },
    
    _getPrimaryContentUrl$1: function tab_ShareViewModel$_getPrimaryContentUrl$1() {
        if (!String.isNullOrEmpty(tsConfig.primaryContentUrl)) {
            return tsConfig.primaryContentUrl;
        }
        if (window.self === window.top) {
            return null;
        }
        var embeddingUri = tableau.util.parseUri(document.referrer);
        if (!ss.isValue(embeddingUri) || (ss.isValue(embeddingUri['hostname']) && embeddingUri['hostname'] === window.location.hostname)) {
            return null;
        }
        return document.referrer;
    },
    
    _calculateEmbedSize$1: function tab_ShareViewModel$_calculateEmbedSize$1() {
        var width = tab.ApplicationModel.get_instance().get_workbook().get_outerDashboardPortSize().w;
        var height = tab.ApplicationModel.get_instance().get_workbook().get_outerDashboardPortSize().h;
        width += 4;
        height += 4;
        if (tsConfig.isPublic) {
            height += 65;
        }
        else if (tsConfig.toolbarvis) {
            height += 32;
        }
        if (tabBootstrap.ViewerBootstrap.get_instance().shouldShowTabs()) {
            height += 26;
        }
        return tab.$create_Size(width, height);
    },
    
    _getFacebookThumbnailUrl$1: function tab_ShareViewModel$_getFacebookThumbnailUrl$1() {
        var xhrGuid = tab.XhrUtil.guid;
        if (!this.get_shouldShareOriginalView() && this.get_allowSharingDifferentViews() && ss.isValue(xhrGuid)) {
            var staticImageUrl = this._getStaticImageUrl$1();
            var arr = staticImageUrl.split('/');
            arr[arr.length - 1] = 'thumb.png';
            var thumbImageUrl = arr.join('/');
            thumbImageUrl += '?vizqlid=' + tab.CommandController.get().get_legacySession().get_id();
            return thumbImageUrl;
        }
        return tsConfig.baseViewThumbLink;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuantitativeColorLegendViewModel

tab.QuantitativeColorLegendViewModel = function tab_QuantitativeColorLegendViewModel(quantColorLegendModel, worksheetId, zoneVM) {
    tab.QuantitativeColorLegendViewModel.initializeBase(this, [ tab.ModelUtils.getVisualId(worksheetId), zoneVM ]);
    this._quantColorLegendModel$2 = quantColorLegendModel;
    this._quantColorLegendModel$2.add_legendChanged(ss.Delegate.create(this, this._handleModelChanged$2));
}
tab.QuantitativeColorLegendViewModel.prototype = {
    _quantColorLegendModel$2: null,
    
    get_quantColorLegendModel: function tab_QuantitativeColorLegendViewModel$get_quantColorLegendModel() {
        return this._quantColorLegendModel$2;
    },
    
    get_quantColorLegendPresModel: function tab_QuantitativeColorLegendViewModel$get_quantColorLegendPresModel() {
        return this._quantColorLegendModel$2.get_quantColorLegendPresModel();
    },
    
    get_titleHtml: function tab_QuantitativeColorLegendViewModel$get_titleHtml() {
        return this.get_quantColorLegendPresModel().titleHtml;
    },
    
    get_titleInline: function tab_QuantitativeColorLegendViewModel$get_titleInline() {
        var titleSize = this.get__parentZoneTitleSize();
        if (!this.get_quantColorLegendPresModel().quantitativeLegendLayout.titleInline && !titleSize.h && titleSize.w > 0) {
            return true;
        }
        else {
            return this.get_quantColorLegendPresModel().quantitativeLegendLayout.titleInline;
        }
    },
    
    get_regionType: function tab_QuantitativeColorLegendViewModel$get_regionType() {
        return 'color';
    },
    
    get_rampColorSamplesAsColorModels: function tab_QuantitativeColorLegendViewModel$get_rampColorSamplesAsColorModels() {
        var toRet = new Array(0);
        var rawColorSamples = this.get_quantColorLegendPresModel().rampColorSamples;
        if (ss.isValue(rawColorSamples)) {
            var alpha = this.get_quantColorLegendPresModel().colorTransparencyValue / 255;
            toRet = new Array(rawColorSamples.length);
            for (var ii = 0; ii < rawColorSamples.length; ++ii) {
                toRet[ii] = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(rawColorSamples[ii]), alpha).toString();
            }
        }
        return toRet;
    },
    
    get_borderWidth: function tab_QuantitativeColorLegendViewModel$get_borderWidth() {
        var toRet = this.get_quantColorLegendPresModel().styledBox.uw;
        if (this.get_quantColorLegendPresModel().styledBox.borderStyle === 'bs-none') {
            toRet = 0;
        }
        return toRet;
    },
    
    get_titleHeight: function tab_QuantitativeColorLegendViewModel$get_titleHeight() {
        return this.get_quantColorLegendPresModel().quantitativeLegendLayout.rectTitle.h;
    },
    
    get_titleWidth: function tab_QuantitativeColorLegendViewModel$get_titleWidth() {
        return this.get_quantColorLegendPresModel().quantitativeLegendLayout.rectTitle.w;
    },
    
    dispose: function tab_QuantitativeColorLegendViewModel$dispose() {
        this._quantColorLegendModel$2.remove_legendChanged(ss.Delegate.create(this, this._handleModelChanged$2));
        tab.QuantitativeColorLegendViewModel.callBaseMethod(this, 'dispose');
    },
    
    _handleModelChanged$2: function tab_QuantitativeColorLegendViewModel$_handleModelChanged$2() {
        this.notifyPropertyChanged('ModelChanged');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ImageZoneViewModel

tab.ImageZoneViewModel = function tab_ImageZoneViewModel(imageZoneModel) {
    tab.ImageZoneViewModel.initializeBase(this);
    this._imageZoneModel$1 = imageZoneModel;
    this._imageZoneModel$1.add_newImageZone(ss.Delegate.create(this, this.handleNewImageZone));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._imageZoneModel$1.remove_newImageZone(ss.Delegate.create(this, this.handleNewImageZone));
    })));
}
tab.ImageZoneViewModel.prototype = {
    _imageZoneModel$1: null,
    
    add_newImageZone: function tab_ImageZoneViewModel$add_newImageZone(value) {
        this.__newImageZone$1 = ss.Delegate.combine(this.__newImageZone$1, value);
    },
    remove_newImageZone: function tab_ImageZoneViewModel$remove_newImageZone(value) {
        this.__newImageZone$1 = ss.Delegate.remove(this.__newImageZone$1, value);
    },
    
    __newImageZone$1: null,
    
    get_imageZoneModel: function tab_ImageZoneViewModel$get_imageZoneModel() {
        return this._imageZoneModel$1;
    },
    
    get_zonePresModel: function tab_ImageZoneViewModel$get_zonePresModel() {
        return this._imageZoneModel$1.get_zone();
    },
    
    get_imageZonePresModel: function tab_ImageZoneViewModel$get_imageZonePresModel() {
        return this._imageZoneModel$1.get_presModel();
    },
    
    get_imageUrl: function tab_ImageZoneViewModel$get_imageUrl() {
        var session = tab.CommandController.get().get_legacySession();
        var imageUrl = session.formatDashboardTempfileReference(this.get_imageZonePresModel().imageKey, true, false);
        return imageUrl;
    },
    
    handleNewImageZone: function tab_ImageZoneViewModel$handleNewImageZone() {
        if (ss.isValue(this.__newImageZone$1)) {
            this.__newImageZone$1();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LegendBaseViewModel

tab.LegendBaseViewModel = function tab_LegendBaseViewModel(visualId, zoneVM) {
    tab.LegendBaseViewModel.initializeBase(this);
    this._visualId$1 = visualId;
    this._parentZoneVM$1 = zoneVM;
    this._parentZoneVM$1.add_propertyChanged(ss.Delegate.create(this, this._handleParentZoneChanged$1));
    this._parentZoneVM$1.add_resizeZone(ss.Delegate.create(this, this._handleParentZoneResized$1));
    this._handleParentZoneChanged$1(this._parentZoneVM$1, new spiff.PropertyChangedEventArgs('newZoneParent'));
}
tab.LegendBaseViewModel.prototype = {
    _visualId$1: null,
    _parentZoneVM$1: null,
    _visualModel$1: null,
    
    get__parentZoneSize: function tab_LegendBaseViewModel$get__parentZoneSize() {
        var toRet = null;
        if (ss.isValue(this._parentZoneVM$1)) {
            toRet = tab.$create_Size(this._parentZoneVM$1.get_width(), this._parentZoneVM$1.get_height());
        }
        return toRet;
    },
    
    get__parentZoneTitleSize: function tab_LegendBaseViewModel$get__parentZoneTitleSize() {
        var toRet = null;
        if (ss.isValue(this._parentZoneVM$1)) {
            toRet = this._parentZoneVM$1.get_titleSize();
            toRet.h = Math.max(0, toRet.h - (2 * this.get_borderWidth()));
            toRet.w = Math.max(0, toRet.w - (2 * this.get_borderWidth()));
        }
        else {
            toRet = tab.$create_Size(0, 0);
        }
        return toRet;
    },
    
    get__zoneId: function tab_LegendBaseViewModel$get__zoneId() {
        return this._parentZoneVM$1.get_zoneId();
    },
    
    get_visualModel: function tab_LegendBaseViewModel$get_visualModel() {
        if (ss.isNullOrUndefined(this._visualModel$1)) {
            this._visualModel$1 = tab.ModelUtils.getVisualModelFromVisualId(this.get_visualId());
        }
        return this._visualModel$1;
    },
    
    get_parentZoneVM: function tab_LegendBaseViewModel$get_parentZoneVM() {
        return this._parentZoneVM$1;
    },
    
    get_visualId: function tab_LegendBaseViewModel$get_visualId() {
        return this._visualId$1;
    },
    
    get_hasTitle: function tab_LegendBaseViewModel$get_hasTitle() {
        return !!this.get_titleWidth() || !!this.get_titleHeight();
    },
    
    dispose: function tab_LegendBaseViewModel$dispose() {
        if (ss.isValue(this._parentZoneVM$1)) {
            this._parentZoneVM$1.remove_propertyChanged(ss.Delegate.create(this, this._handleParentZoneChanged$1));
            this._parentZoneVM$1.remove_resizeZone(ss.Delegate.create(this, this._handleParentZoneResized$1));
        }
        tab.LegendBaseViewModel.callBaseMethod(this, 'dispose');
    },
    
    _handleParentZoneChanged$1: function tab_LegendBaseViewModel$_handleParentZoneChanged$1(sender, args) {
        this.notifyPropertyChanged(args.get_propertyName());
    },
    
    _handleParentZoneResized$1: function tab_LegendBaseViewModel$_handleParentZoneResized$1() {
        this.notifyPropertyChanged('ParentZoneSizeChanged');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarButtonViewModel

tab.ToolbarButtonViewModel = function tab_ToolbarButtonViewModel(text, iconClass, command) {
    tab.ToolbarButtonViewModel.initializeBase(this);
    this._text$1 = text;
    this._iconClass$1 = iconClass;
    this.command = command;
    this._enabled$1 = ss.isValue(command);
    if (!tsConfig.is_mobile) {
        this.disposables.add(spiff.EventUtil.bindWithDispose($(window), 'resize', ss.Delegate.create(this, this._onResize$1)));
    }
}
tab.ToolbarButtonViewModel.shouldShowButton = function tab_ToolbarButtonViewModel$shouldShowButton(itemWrapper) {
    switch (itemWrapper.get_iconRes()) {
        case 'share':
            return tsConfig.showShareOptions;
        default:
            return true;
    }
}
tab.ToolbarButtonViewModel.createSeparator = function tab_ToolbarButtonViewModel$createSeparator() {
    var separator = new tab.ToolbarButtonViewModel('-', null, null);
    separator._isSeparator$1 = true;
    return separator;
}
tab.ToolbarButtonViewModel.createFromCommandItem = function tab_ToolbarButtonViewModel$createFromCommandItem(commandItem, iconClassPrefix, toolbarViewModel) {
    var itemWrapper = tab.CommandItemWrapper.create(commandItem);
    tab.Param.verifyValue(commandItem, 'commandItem');
    var item = new tab.ToolbarButtonViewModel(itemWrapper.get_name(), iconClassPrefix + itemWrapper.get_iconRes(), null);
    item.command = tab.CommandSerializer.deserialize(itemWrapper.get_command());
    item._enabled$1 = ss.isNullOrUndefined(itemWrapper.get_enabled()) || itemWrapper.get_enabled();
    item.flyoverVM = tab.ToolbarButtonViewModel._createPopupContentFromCommandItem$1(commandItem, toolbarViewModel);
    return item;
}
tab.ToolbarButtonViewModel._generateUberPopupShowOptionsForFlyover$1 = function tab_ToolbarButtonViewModel$_generateUberPopupShowOptionsForFlyover$1(relativeElement) {
    return new spiff.UberPopupShowOptions(relativeElement, spiff.UberPopupHorizontalAlign.right, spiff.UberPopupRelativeViewportEdge.right, spiff.UberPopupTheme.minimalist);
}
tab.ToolbarButtonViewModel._createPopupContentFromCommandItem$1 = function tab_ToolbarButtonViewModel$_createPopupContentFromCommandItem$1(commandItem, toolbarViewModel) {
    var itemWrapper = tab.CommandItemWrapper.create(commandItem);
    tab.Param.verifyValue(commandItem, 'commandItem');
    switch (itemWrapper.get_iconRes()) {
        case 'download':
            return new tab.DownloadViewModel(toolbarViewModel);
        case 'share':
            return new tab.ShareViewModel(toolbarViewModel);
        default:
            return null;
    }
}
tab.ToolbarButtonViewModel.prototype = {
    command: null,
    flyoverVM: null,
    _text$1: null,
    _iconClass$1: null,
    _iconText$1: null,
    _enabled$1: false,
    _isSeparator$1: false,
    _isActive$1: false,
    _popupViewModel$1: null,
    _flyoverRelativeElement$1: null,
    
    add_flyoverShown: function tab_ToolbarButtonViewModel$add_flyoverShown(value) {
        this.__flyoverShown$1 = ss.Delegate.combine(this.__flyoverShown$1, value);
    },
    remove_flyoverShown: function tab_ToolbarButtonViewModel$remove_flyoverShown(value) {
        this.__flyoverShown$1 = ss.Delegate.remove(this.__flyoverShown$1, value);
    },
    
    __flyoverShown$1: null,
    
    add_flyoverHidden: function tab_ToolbarButtonViewModel$add_flyoverHidden(value) {
        this.__flyoverHidden$1 = ss.Delegate.combine(this.__flyoverHidden$1, value);
    },
    remove_flyoverHidden: function tab_ToolbarButtonViewModel$remove_flyoverHidden(value) {
        this.__flyoverHidden$1 = ss.Delegate.remove(this.__flyoverHidden$1, value);
    },
    
    __flyoverHidden$1: null,
    
    get_buttonCommand: function tab_ToolbarButtonViewModel$get_buttonCommand() {
        return this.command;
    },
    
    get_flyoverViewModel: function tab_ToolbarButtonViewModel$get_flyoverViewModel() {
        return this.flyoverVM;
    },
    
    get_enabled: function tab_ToolbarButtonViewModel$get_enabled() {
        return this._enabled$1;
    },
    set_enabled: function tab_ToolbarButtonViewModel$set_enabled(value) {
        if (!this._isSeparator$1 && this._enabled$1 !== value) {
            this._enabled$1 = value;
            this.notifyPropertyChanged('enabled');
        }
        return value;
    },
    
    get_iconText: function tab_ToolbarButtonViewModel$get_iconText() {
        return this._iconText$1;
    },
    set_iconText: function tab_ToolbarButtonViewModel$set_iconText(value) {
        if (!this._isSeparator$1 && !String.equals(this._iconText$1, value, false)) {
            this._iconText$1 = value;
            this.notifyPropertyChanged('iconText');
        }
        return value;
    },
    
    get_iconClass: function tab_ToolbarButtonViewModel$get_iconClass() {
        return this._iconClass$1;
    },
    set_iconClass: function tab_ToolbarButtonViewModel$set_iconClass(value) {
        if (!this._isSeparator$1 && !String.equals(this._iconClass$1, value, false)) {
            this._iconClass$1 = value;
            this.notifyPropertyChanged('iconClass');
        }
        return value;
    },
    
    get_isActive: function tab_ToolbarButtonViewModel$get_isActive() {
        return this._isActive$1;
    },
    set_isActive: function tab_ToolbarButtonViewModel$set_isActive(value) {
        if (!this._isSeparator$1 && this._isActive$1 !== value) {
            this._isActive$1 = value;
            this.notifyPropertyChanged('isActive');
        }
        return value;
    },
    
    get_text: function tab_ToolbarButtonViewModel$get_text() {
        return this._text$1;
    },
    set_text: function tab_ToolbarButtonViewModel$set_text(value) {
        if (!this._isSeparator$1 && !String.equals(this._text$1, value, false)) {
            this._text$1 = value;
            this.notifyPropertyChanged('text');
        }
        return value;
    },
    
    get_isSeparator: function tab_ToolbarButtonViewModel$get_isSeparator() {
        return this._isSeparator$1;
    },
    
    dispose: function tab_ToolbarButtonViewModel$dispose() {
        this._disposeExistingFlyoverPopup$1();
        tab.ToolbarButtonViewModel.callBaseMethod(this, 'dispose');
    },
    
    execute: function tab_ToolbarButtonViewModel$execute() {
        if (ss.isValue(this.command)) {
            this.set_isActive(true);
            tab.ServerCommands.executeServerCommand(this.command, 'immediately', ss.Delegate.create(this, function() {
                this.set_isActive(false);
            }), ss.Delegate.create(this, function() {
                this.set_isActive(false);
            }));
        }
    },
    
    showUberPopup: function tab_ToolbarButtonViewModel$showUberPopup(relativeElement) {
        if (ss.isValue(this.flyoverVM)) {
            this._disposeExistingFlyoverPopup$1();
            this._popupViewModel$1 = spiff.UberPopupViewModel.createForContent(this.flyoverVM);
            if (ss.isValue(this.__flyoverShown$1)) {
                this._popupViewModel$1.add_shown(this.__flyoverShown$1);
            }
            if (ss.isValue(this.__flyoverHidden$1)) {
                this._popupViewModel$1.add_hidden(ss.Delegate.create(this, this._onFlyoverHidden$1));
            }
            this._flyoverRelativeElement$1 = relativeElement;
            this._popupViewModel$1.show(tab.ToolbarButtonViewModel._generateUberPopupShowOptionsForFlyover$1(relativeElement));
        }
    },
    
    _onResize$1: function tab_ToolbarButtonViewModel$_onResize$1(e) {
        if (ss.isValue(this._popupViewModel$1) && ss.isValue(this._flyoverRelativeElement$1)) {
            this._popupViewModel$1.show(tab.ToolbarButtonViewModel._generateUberPopupShowOptionsForFlyover$1(this._flyoverRelativeElement$1));
        }
    },
    
    _onFlyoverHidden$1: function tab_ToolbarButtonViewModel$_onFlyoverHidden$1() {
        this.__flyoverHidden$1();
        this._disposeExistingFlyoverPopup$1();
        this._flyoverRelativeElement$1 = null;
    },
    
    _disposeExistingFlyoverPopup$1: function tab_ToolbarButtonViewModel$_disposeExistingFlyoverPopup$1() {
        if (ss.isValue(this._popupViewModel$1)) {
            this._popupViewModel$1.remove_shown(this.__flyoverShown$1);
            this._popupViewModel$1.remove_hidden(ss.Delegate.create(this, this._onFlyoverHidden$1));
            this._popupViewModel$1.dispose();
            this._popupViewModel$1 = null;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarViewModel

tab.ToolbarViewModel = function tab_ToolbarViewModel(model) {
    this._vizItems$1 = [];
    this._nonVizItems$1 = [];
    tab.ToolbarViewModel.initializeBase(this);
    this._toolbarModel$1 = model;
    if (ss.isValue(this._toolbarModel$1.get_vizCommandItems())) {
        this._handleNewToolbar$1();
    }
    this._toolbarModel$1.add_newToolbar(ss.Delegate.create(this, this._handleNewToolbar$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._toolbarModel$1.remove_newToolbar(ss.Delegate.create(this, this._handleNewToolbar$1));
    })));
    tab.StartupUtils.callAfterBootstrap(ss.Delegate.create(this, function() {
        tab.CommandController.get().get_legacySession().performPostLoadOperations(tsConfig.current_sheet_name, ss.Delegate.create(this, this._processViewCountData$1));
    }));
}
tab.ToolbarViewModel.prototype = {
    _toolbarModel$1: null,
    _viewCount$1: 0,
    _renderModelLabel$1: null,
    
    add_newToolbar: function tab_ToolbarViewModel$add_newToolbar(value) {
        this.__newToolbar$1 = ss.Delegate.combine(this.__newToolbar$1, value);
    },
    remove_newToolbar: function tab_ToolbarViewModel$remove_newToolbar(value) {
        this.__newToolbar$1 = ss.Delegate.remove(this.__newToolbar$1, value);
    },
    
    __newToolbar$1: null,
    
    add_viewCountLoaded: function tab_ToolbarViewModel$add_viewCountLoaded(value) {
        this.__viewCountLoaded$1 = ss.Delegate.combine(this.__viewCountLoaded$1, value);
    },
    remove_viewCountLoaded: function tab_ToolbarViewModel$remove_viewCountLoaded(value) {
        this.__viewCountLoaded$1 = ss.Delegate.remove(this.__viewCountLoaded$1, value);
    },
    
    __viewCountLoaded$1: null,
    
    get_toolbarIsBottom: function tab_ToolbarViewModel$get_toolbarIsBottom() {
        return ((tsConfig.isPublic || tsConfig.embedded) && !tsConfig.forceToolbarTop);
    },
    
    get_shouldShowPublicWatermarkItems: function tab_ToolbarViewModel$get_shouldShowPublicWatermarkItems() {
        return tsConfig.isPublic && tsConfig.watermarkdisplay;
    },
    
    get_shouldShowAuthorByLine: function tab_ToolbarViewModel$get_shouldShowAuthorByLine() {
        return tsConfig.isPublic && tsConfig.show_byline;
    },
    
    get_shouldShowViewCount: function tab_ToolbarViewModel$get_shouldShowViewCount() {
        return tsConfig.isPublic && tsConfig.showViewCount && this._viewCount$1 > tsConfig.viewCountThreshold;
    },
    
    get_publicLogoLink: function tab_ToolbarViewModel$get_publicLogoLink() {
        var parentLocation = (ss.isValue(tabBootstrap.ViewerBootstrap.get_instance().location)) ? tabBootstrap.ViewerBootstrap.get_instance().location.toString() : '';
        return tsConfig.watermarklink + '?ref=' + parentLocation.split('?')[0];
    },
    
    get_authorProfileLink: function tab_ToolbarViewModel$get_authorProfileLink() {
        var location = window.location;
        var link = String.format('{0}//{1}/profile/app/rdr/repo?workbook={2}', location.protocol, location.hostname, tsConfig.workbook_repo_url);
        return String.format('<a class="tab-toolbarAuthorByText" target="_blank" href="{0}">{1}</a>', tableau.format.escapeHTML(link), tableau.format.escapeHTML(tab.Strings.ToolbarMoreByAuthor));
    },
    
    get_viewCountText: function tab_ToolbarViewModel$get_viewCountText() {
        var count = tableau.format.formatIntAuto(this._viewCount$1, 't', ',', '3:0');
        return tab.Strings.ToolbarViewCount(count);
    },
    
    get_downloadableItems: function tab_ToolbarViewModel$get_downloadableItems() {
        return this._toolbarModel$1.get_downloadableItems();
    },
    
    get_vizItems: function tab_ToolbarViewModel$get_vizItems() {
        return this._vizItems$1;
    },
    
    get_nonVizItems: function tab_ToolbarViewModel$get_nonVizItems() {
        return this._nonVizItems$1;
    },
    
    dispose: function tab_ToolbarViewModel$dispose() {
        tab.ToolbarViewModel.callBaseMethod(this, 'dispose');
        this._disposeItems$1();
    },
    
    _buildToolbarItems$1: function tab_ToolbarViewModel$_buildToolbarItems$1(commands, itemList) {
        var $enum1 = ss.IEnumerator.getEnumerator(commands);
        while ($enum1.moveNext()) {
            var commandItem = $enum1.current;
            var itemWrapper = tab.CommandItemWrapper.create(commandItem);
            tab.Param.verifyValue(commandItem, 'commandItem');
            switch (itemWrapper.get_commandsType()) {
                case 'separator':
                    itemList.add(tab.ToolbarButtonViewModel.createSeparator());
                    break;
                case 'item':
                    if (tab.ToolbarButtonViewModel.shouldShowButton(itemWrapper)) {
                        this._addToolbarButton$1(commandItem, itemList);
                    }
                    break;
            }
        }
    },
    
    _disposeItems$1: function tab_ToolbarViewModel$_disposeItems$1() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._vizItems$1);
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            item.dispose();
        }
        this._vizItems$1.clear();
        var $enum2 = ss.IEnumerator.getEnumerator(this._nonVizItems$1);
        while ($enum2.moveNext()) {
            var item = $enum2.current;
            item.dispose();
        }
        this._nonVizItems$1.clear();
    },
    
    _processViewCountData$1: function tab_ToolbarViewModel$_processViewCountData$1(dataObject) {
        var data = dataObject;
        if (ss.isValue(data['viewCount'])) {
            this._viewCount$1 = parseInt(data['viewCount'], 10);
            if (this.get_shouldShowViewCount()) {
                this.raiseActionEvent(this.__viewCountLoaded$1);
            }
        }
    },
    
    _addToolbarButton$1: function tab_ToolbarViewModel$_addToolbarButton$1(commandItem, itemList) {
        var item = tab.ToolbarButtonViewModel.createFromCommandItem(commandItem, 'tab-icon-', this);
        itemList.add(item);
    },
    
    _handleNewToolbar$1: function tab_ToolbarViewModel$_handleNewToolbar$1() {
        this._disposeItems$1();
        if (tsConfig.toolbarvis) {
            this._buildToolbarItems$1(this._toolbarModel$1.get_vizCommandItems(), this._vizItems$1);
        }
        this._buildToolbarItems$1(this._toolbarModel$1.get_nonVizCommandItems(), this._nonVizItems$1);
        this.raiseActionEvent(this.__newToolbar$1);
    },
    
    generateDebugRenderModeFlag: function tab_ToolbarViewModel$generateDebugRenderModeFlag() {
        this._renderModelLabel$1 = $('<span>').addClass('tab-debugRenderMode');
        this._renderModelLabel$1.get(0).title = 'Debug mode: The text of this button indicates if we are rendering locally on the web browser (B), or if rendering is occuring server side (S)';
        this.updateRenderModeText(false);
        return this._renderModelLabel$1;
    },
    
    updateRenderModeText: function tab_ToolbarViewModel$updateRenderModeText(localRenderMode) {
        if (ss.isValue(this._renderModelLabel$1)) {
            this._renderModelLabel$1.html((localRenderMode) ? 'B' : 'S');
        }
    },
    
    revertWorksheet: function tab_ToolbarViewModel$revertWorksheet() {
        tab.ToolbarClientCommands.revert();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WebZoneViewModel

tab.WebZoneViewModel = function tab_WebZoneViewModel(webZoneModel) {
    tab.WebZoneViewModel.initializeBase(this);
    this._webZoneModel$1 = webZoneModel;
    this._webZoneModel$1.add_newWebZone(ss.Delegate.create(this, this.handleNewWebZone));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._webZoneModel$1.remove_newWebZone(ss.Delegate.create(this, this.handleNewWebZone));
    })));
}
tab.WebZoneViewModel.prototype = {
    _webZoneModel$1: null,
    
    add_newWebZone: function tab_WebZoneViewModel$add_newWebZone(value) {
        this.__newWebZone$1 = ss.Delegate.combine(this.__newWebZone$1, value);
    },
    remove_newWebZone: function tab_WebZoneViewModel$remove_newWebZone(value) {
        this.__newWebZone$1 = ss.Delegate.remove(this.__newWebZone$1, value);
    },
    
    __newWebZone$1: null,
    
    get_webZoneModel: function tab_WebZoneViewModel$get_webZoneModel() {
        return this._webZoneModel$1;
    },
    
    handleNewWebZone: function tab_WebZoneViewModel$handleNewWebZone() {
        this._raiseNewWebZone$1();
    },
    
    _raiseNewWebZone$1: function tab_WebZoneViewModel$_raiseNewWebZone$1() {
        if (ss.isValue(this.__newWebZone$1)) {
            this.__newWebZone$1();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalLegendViewModel

tab.CategoricalLegendViewModel = function tab_CategoricalLegendViewModel(catLegendModel, type, worksheetId, zoneVM) {
    tab.CategoricalLegendViewModel.initializeBase(this, [ tab.ModelUtils.getVisualId(worksheetId), zoneVM ]);
    this.legendType = type;
    this._catLegendModel$2 = catLegendModel;
    this._catLegendModel$2.add_legendChanged(ss.Delegate.create(this, this._handleModelChanged$2));
    this._catLegendModel$2.add_legendNameChanged(ss.Delegate.create(this, this._handleLegendNameChanged$2));
    var vm = this.get_visualModel();
    vm.add_customShapesLoaded(ss.Delegate.create(this, this._handleCustomShapesLoaded$2));
    this._selectionModel$2 = vm.get_selectionsModel().getLegendSelection(this.get_legendTypeEnum(), this.get__legendColumns());
    this._selectionModel$2.add_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
    this._brushingModel$2 = vm.get_brushingsModel().getLegendSelection(this.get_legendTypeEnum(), this.get__legendColumns());
    this._brushingModel$2.add_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
    vm.get_selectionsModel().add_newSelections(ss.Delegate.create(this, this._handleNewSelection$2));
    this._swatchBackgroundColor$2 = (this.legendType === 'color') ? tab.ColorModel.fromColorCode(this.get__colorLegendPM().swatchBgColor) : this.get__backgroundColor();
}
tab.CategoricalLegendViewModel.prototype = {
    legendType: null,
    _catLegendModel$2: null,
    _swatchBackgroundColor$2: null,
    _selectionModel$2: null,
    _brushingModel$2: null,
    
    get_catLegendModel: function tab_CategoricalLegendViewModel$get_catLegendModel() {
        return this._catLegendModel$2;
    },
    
    get_legendTypeEnum: function tab_CategoricalLegendViewModel$get_legendTypeEnum() {
        switch (this.legendType) {
            case 'color':
                return 'color';
            case 'shape':
                return 'shape';
            case 'size':
                return 'size';
            case 'map':
                return 'map';
        }
        tab.Log.get(this).warn('Unsupported legend type: %s', this.legendType);
        return 'color';
    },
    
    get_categoricalLegendPM: function tab_CategoricalLegendViewModel$get_categoricalLegendPM() {
        return this._catLegendModel$2.get_catLegendPresModel();
    },
    
    get_numLegendItems: function tab_CategoricalLegendViewModel$get_numLegendItems() {
        var items = this.get_catLegendModel().get_items();
        return (ss.isNullOrUndefined(items)) ? 0 : items.length;
    },
    
    get_titleInline: function tab_CategoricalLegendViewModel$get_titleInline() {
        var titleSize = this.get__parentZoneTitleSize();
        if (!this.get_categoricalLegendPM().catLegendLayout.titleInline && !titleSize.h && titleSize.w > 0) {
            return true;
        }
        else {
            return this.get_categoricalLegendPM().catLegendLayout.titleInline;
        }
    },
    
    get_titleHtml: function tab_CategoricalLegendViewModel$get_titleHtml() {
        return this.get_categoricalLegendPM().titleHtml;
    },
    
    get__legendColumns: function tab_CategoricalLegendViewModel$get__legendColumns() {
        return this.get_catLegendModel().get_legendNames();
    },
    
    get__swatchBackgroundColor: function tab_CategoricalLegendViewModel$get__swatchBackgroundColor() {
        return (this._swatchBackgroundColor$2 || new tab.ColorModel(255, 255, 255, 1));
    },
    
    get__backgroundColor: function tab_CategoricalLegendViewModel$get__backgroundColor() {
        var styledBox = this.get_categoricalLegendPM().styledBox;
        return (ss.isValue(styledBox.fillColor)) ? tab.ColorModel.fromColorCode(styledBox.fillColor) : tab.CategoricalLegendViewModel._defaultBackgroundColor$2;
    },
    
    get__colorLegendPM: function tab_CategoricalLegendViewModel$get__colorLegendPM() {
        ss.Debug.assert(this.legendType === 'color' || this.legendType === 'map', 'Should only ask for a legend of the right type');
        return this._catLegendModel$2.get_catLegendPresModel();
    },
    
    get__shapeLegendPM: function tab_CategoricalLegendViewModel$get__shapeLegendPM() {
        ss.Debug.assert(this.legendType === 'shape', 'Should only ask for a legend of the right type');
        return this._catLegendModel$2.get_catLegendPresModel();
    },
    
    get__sizeLegendPM: function tab_CategoricalLegendViewModel$get__sizeLegendPM() {
        ss.Debug.assert(this.legendType === 'size', 'Should only ask for a legend of the right type');
        return this._catLegendModel$2.get_catLegendPresModel();
    },
    
    get_regionType: function tab_CategoricalLegendViewModel$get_regionType() {
        var toRet = 'color';
        switch (this.legendType) {
            case 'color':
                toRet = 'color';
                break;
            case 'size':
                toRet = 'size';
                break;
            case 'shape':
                toRet = 'shape';
                break;
            case 'map':
                toRet = 'map';
                break;
            default:
                ss.Debug.fail('unsupported legend type: ' + this.legendType);
                break;
        }
        return toRet;
    },
    
    get_borderWidth: function tab_CategoricalLegendViewModel$get_borderWidth() {
        var toRet = this.get_categoricalLegendPM().styledBox.uw;
        if (this.get_categoricalLegendPM().styledBox.borderStyle === 'bs-none') {
            toRet = 0;
        }
        return toRet;
    },
    
    get_titleHeight: function tab_CategoricalLegendViewModel$get_titleHeight() {
        return this.get_categoricalLegendPM().catLegendLayout.titleHeight;
    },
    
    get_titleWidth: function tab_CategoricalLegendViewModel$get_titleWidth() {
        return this.get_categoricalLegendPM().catLegendLayout.titleWidth;
    },
    
    get__isHighlightingEnabled: function tab_CategoricalLegendViewModel$get__isHighlightingEnabled() {
        return this.get_catLegendModel().get_isHighlightEnabled();
    },
    
    get__shouldShowHighlighter: function tab_CategoricalLegendViewModel$get__shouldShowHighlighter() {
        return this.get_catLegendModel().get_isHighlightAllowed();
    },
    
    dispose: function tab_CategoricalLegendViewModel$dispose() {
        tab.CategoricalLegendViewModel.callBaseMethod(this, 'dispose');
        this.get_visualModel().remove_customShapesLoaded(ss.Delegate.create(this, this._handleCustomShapesLoaded$2));
        this._catLegendModel$2.remove_legendChanged(ss.Delegate.create(this, this._handleModelChanged$2));
        this._catLegendModel$2.remove_legendNameChanged(ss.Delegate.create(this, this._handleLegendNameChanged$2));
        this._selectionModel$2.remove_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
        this._brushingModel$2.remove_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
        this.get_visualModel().get_selectionsModel().remove_newSelections(ss.Delegate.create(this, this._handleNewSelection$2));
    },
    
    isGrayed: function tab_CategoricalLegendViewModel$isGrayed(item) {
        if (this.get__isHighlightingEnabled()) {
            if (this.isSelected(item)) {
                return false;
            }
            var vm = this.get_visualModel();
            if (ss.isNullOrUndefined(vm)) {
                return false;
            }
            if (this.get_catLegendModel().get_isOneWay() && !this.hasSelection()) {
                return false;
            }
            var hasSelection = (ss.isValue(this._selectionModel$2) && !this._selectionModel$2.get_isEmpty()) || !this.get_visualModel().get_selectionsModel().get_nodeSelection().get_isEmpty() || !this.get_visualModel().get_selectionsModel().get_tupleSelection().get_isEmpty();
            var hasBrushing = ss.isValue(this._brushingModel$2) && !this._brushingModel$2.get_isEmpty();
            return (hasSelection || hasBrushing) && !this.isBrushed(item);
        }
        return false;
    },
    
    hasSelection: function tab_CategoricalLegendViewModel$hasSelection() {
        return !this._selectionModel$2.get_isEmpty();
    },
    
    isSelected: function tab_CategoricalLegendViewModel$isSelected(item) {
        return this._selectionModel$2.isLegendItemSelected(item);
    },
    
    isBrushed: function tab_CategoricalLegendViewModel$isBrushed(item) {
        return this._brushingModel$2.isLegendItemSelected(item);
    },
    
    toggleHighlighting: function tab_CategoricalLegendViewModel$toggleHighlighting() {
        tab.SelectionClientCommands.toggleLegendHighlight(this.get__zoneId(), this.get_visualId(), this.get_regionType(), this.get__legendColumns(), null);
    },
    
    selectItem: function tab_CategoricalLegendViewModel$selectItem(item, action) {
        var items = [];
        items.add(item);
        tab.SelectionClientCommands.selectLegendItemsLocal(this.get__zoneId(), action, items, this.get_visualId(), this.get_catLegendModel(), this.get_legendTypeEnum());
    },
    
    selectNone: function tab_CategoricalLegendViewModel$selectNone(action) {
        var items = [];
        tab.SelectionClientCommands.selectLegendItemsLocal(this.get__zoneId(), action, items, this.get_visualId(), this.get_catLegendModel(), this.get_legendTypeEnum());
    },
    
    getLegendItem: function tab_CategoricalLegendViewModel$getLegendItem(itemIdx) {
        var items = this.get_catLegendModel().get_items();
        if (ss.isNullOrUndefined(items) || itemIdx < 0 || itemIdx >= items.length) {
            return null;
        }
        return items[itemIdx];
    },
    
    _handleLegendNameChanged$2: function tab_CategoricalLegendViewModel$_handleLegendNameChanged$2() {
        this._selectionModel$2.remove_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
        this._selectionModel$2 = this.get_visualModel().get_selectionsModel().getLegendSelection(this.get_legendTypeEnum(), this.get__legendColumns());
        this._selectionModel$2.add_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
        this._brushingModel$2.remove_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
        this._brushingModel$2 = this.get_visualModel().get_brushingsModel().getLegendSelection(this.get_legendTypeEnum(), this.get__legendColumns());
        this._brushingModel$2.add_newSelection(ss.Delegate.create(this, this._handleNewSelection$2));
    },
    
    _handleCustomShapesLoaded$2: function tab_CategoricalLegendViewModel$_handleCustomShapesLoaded$2() {
        this.notifyPropertyChanged('CustomShapesLoaded');
    },
    
    _handleModelChanged$2: function tab_CategoricalLegendViewModel$_handleModelChanged$2() {
        this.notifyPropertyChanged(null);
    },
    
    _handleNewSelection$2: function tab_CategoricalLegendViewModel$_handleNewSelection$2() {
        this.notifyPropertyChanged('Items');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TextRegionViewModel

tab.TextRegionViewModel = function tab_TextRegionViewModel(textRegionModel) {
    tab.TextRegionViewModel.initializeBase(this);
    this._textRegionModel$1 = textRegionModel;
    this._textRegionModel$1.add_newText(ss.Delegate.create(this, this.handleNewTextRegion));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._textRegionModel$1.remove_newText(ss.Delegate.create(this, this.handleNewTextRegion));
    })));
}
tab.TextRegionViewModel.prototype = {
    _textRegionModel$1: null,
    
    add_newTextRegion: function tab_TextRegionViewModel$add_newTextRegion(value) {
        this.__newTextRegion$1 = ss.Delegate.combine(this.__newTextRegion$1, value);
    },
    remove_newTextRegion: function tab_TextRegionViewModel$remove_newTextRegion(value) {
        this.__newTextRegion$1 = ss.Delegate.remove(this.__newTextRegion$1, value);
    },
    
    __newTextRegion$1: null,
    
    get_hAlign: function tab_TextRegionViewModel$get_hAlign() {
        return this._textRegionModel$1.get_hAlign();
    },
    
    get_html: function tab_TextRegionViewModel$get_html() {
        return this._textRegionModel$1.get_html();
    },
    
    get_orientation: function tab_TextRegionViewModel$get_orientation() {
        return this._textRegionModel$1.get_orientation();
    },
    
    get_vAlign: function tab_TextRegionViewModel$get_vAlign() {
        return this._textRegionModel$1.get_vAlign();
    },
    
    get_styledBox: function tab_TextRegionViewModel$get_styledBox() {
        return this._textRegionModel$1.get_styledBox();
    },
    
    handleNewTextRegion: function tab_TextRegionViewModel$handleNewTextRegion() {
        this._raiseNewTextRegion$1();
    },
    
    hasPresModel: function tab_TextRegionViewModel$hasPresModel() {
        return !ss.isNullOrUndefined(this._textRegionModel$1.get_presModel());
    },
    
    _raiseNewTextRegion$1: function tab_TextRegionViewModel$_raiseNewTextRegion$1() {
        if (ss.isValue(this.__newTextRegion$1)) {
            this.__newTextRegion$1();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PageViewModel

tab.PageViewModel = function tab_PageViewModel(pageModel) {
    tab.PageViewModel.initializeBase(this);
    this._pageModel$1 = pageModel;
    this._pageModel$1.add_newPage(ss.Delegate.create(this, this.handleNewPage));
    this._pageModel$1.get_zoneModel().add_resizeZone(ss.Delegate.create(this, this.handleParentZoneResized));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._pageModel$1.remove_newPage(ss.Delegate.create(this, this.handleNewPage));
    })));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._pageModel$1.get_zoneModel().remove_resizeZone(ss.Delegate.create(this, this.handleParentZoneResized));
    })));
}
tab.PageViewModel.prototype = {
    _pageModel$1: null,
    
    add_newPage: function tab_PageViewModel$add_newPage(value) {
        this.__newPage$1 = ss.Delegate.combine(this.__newPage$1, value);
    },
    remove_newPage: function tab_PageViewModel$remove_newPage(value) {
        this.__newPage$1 = ss.Delegate.remove(this.__newPage$1, value);
    },
    
    __newPage$1: null,
    
    add_resized: function tab_PageViewModel$add_resized(value) {
        this.__resized$1 = ss.Delegate.combine(this.__resized$1, value);
    },
    remove_resized: function tab_PageViewModel$remove_resized(value) {
        this.__resized$1 = ss.Delegate.remove(this.__resized$1, value);
    },
    
    __resized$1: null,
    
    get_pageModel: function tab_PageViewModel$get_pageModel() {
        return this._pageModel$1;
    },
    
    get_frame: function tab_PageViewModel$get_frame() {
        return this._pageModel$1.get_frame();
    },
    
    get_viewSession: function tab_PageViewModel$get_viewSession() {
        return tab.ModelUtils.getViewSession(this.get_pageModel().get_zone().sheet);
    },
    
    get_layoutSession: function tab_PageViewModel$get_layoutSession() {
        return tab.CommandController.get().get_legacySession();
    },
    
    get_visualId: function tab_PageViewModel$get_visualId() {
        return tab.ModelUtils.getVisualId(this.get_pageModel().get_zone().sheet);
    },
    
    get_historyTrailsEnabled: function tab_PageViewModel$get_historyTrailsEnabled() {
        return this._pageModel$1.get_pagePresModel().pageTrailOptions.state;
    },
    
    get_isHistoryToggleInteractionDisabled: function tab_PageViewModel$get_isHistoryToggleInteractionDisabled() {
        return tab.ApplicationModel.get_instance().get_workbook().get_isCurrentSheetStoryboard();
    },
    
    get_showHistoryToggle: function tab_PageViewModel$get_showHistoryToggle() {
        var showHistory = this._pageModel$1.get_pagePresModel().showHistoryControls;
        if (tsConfig.is_mobile && this.get_isHistoryToggleInteractionDisabled() && !this.get_historyTrailsEnabled()) {
            showHistory = false;
        }
        return showHistory;
    },
    
    get_showHistoryToggleForPopup: function tab_PageViewModel$get_showHistoryToggleForPopup() {
        var showHistory = this.get_showHistoryToggle();
        if (this.get_isHistoryToggleInteractionDisabled()) {
            showHistory = false;
        }
        return showHistory;
    },
    
    handleNewPage: function tab_PageViewModel$handleNewPage(presModel) {
        this.raiseActionEvent(this.__newPage$1);
    },
    
    handleParentZoneResized: function tab_PageViewModel$handleParentZoneResized() {
        this.raiseActionEvent(this.__resized$1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LegacyLegendViewModel

tab.LegacyLegendViewModel = function tab_LegacyLegendViewModel(legacyLegendModel, worksheetId, zoneVM) {
    tab.LegacyLegendViewModel.initializeBase(this, [ tab.ModelUtils.getVisualId(worksheetId), zoneVM ]);
    this._legacyLegendModel$2 = legacyLegendModel;
    this._legacyLegendModel$2.add_newLegacyLegend(ss.Delegate.create(this, this.handleNewLegacyLegend));
    this.get_visualModel().add_urlInfoCacheChange(ss.Delegate.create(this, this._handleUrlInfoCacheChanged$2));
    this._zoneVM$2 = zoneVM;
    this._zoneVM$2.add_validStateChanged(ss.Delegate.create(this, this.handleZoneValidStateChanged));
}
tab.LegacyLegendViewModel.prototype = {
    _legacyLegendModel$2: null,
    _zoneVM$2: null,
    
    add_newLegacyLegend: function tab_LegacyLegendViewModel$add_newLegacyLegend(value) {
        this.__newLegacyLegend$2 = ss.Delegate.combine(this.__newLegacyLegend$2, value);
    },
    remove_newLegacyLegend: function tab_LegacyLegendViewModel$remove_newLegacyLegend(value) {
        this.__newLegacyLegend$2 = ss.Delegate.remove(this.__newLegacyLegend$2, value);
    },
    
    __newLegacyLegend$2: null,
    
    add_validStateChanged: function tab_LegacyLegendViewModel$add_validStateChanged(value) {
        this.__validStateChanged$2 = ss.Delegate.combine(this.__validStateChanged$2, value);
    },
    remove_validStateChanged: function tab_LegacyLegendViewModel$remove_validStateChanged(value) {
        this.__validStateChanged$2 = ss.Delegate.remove(this.__validStateChanged$2, value);
    },
    
    __validStateChanged$2: null,
    
    get_presModel: function tab_LegacyLegendViewModel$get_presModel() {
        return this._legacyLegendModel$2.get_presModel();
    },
    
    get_viewId: function tab_LegacyLegendViewModel$get_viewId() {
        return tab.ModelUtils.findContentDashboard().getViewId(this.get_sheetName());
    },
    
    get_sessionId: function tab_LegacyLegendViewModel$get_sessionId() {
        return tab.CommandController.get().get_legacySession().get_id();
    },
    
    get_sheetName: function tab_LegacyLegendViewModel$get_sheetName() {
        return this.get_parentZoneVM().get_associatedSheet();
    },
    
    get_viewSession: function tab_LegacyLegendViewModel$get_viewSession() {
        return tab.ModelUtils.getViewSession(this.get_sheetName());
    },
    
    get__urlCacheInfo: function tab_LegacyLegendViewModel$get__urlCacheInfo() {
        return this.get_visualModel().get_cacheUrlInfo();
    },
    
    get__valid: function tab_LegacyLegendViewModel$get__valid() {
        return this.get_parentZoneVM().get_valid();
    },
    
    get_titleHtml: function tab_LegacyLegendViewModel$get_titleHtml() {
        return this.get_presModel().titleHtml;
    },
    
    get_titleInline: function tab_LegacyLegendViewModel$get_titleInline() {
        var titleSize = this.get__parentZoneTitleSize();
        if (!this.get_presModel().titleInline && !titleSize.h && titleSize.w > 0) {
            return true;
        }
        else {
            return this.get_presModel().titleInline;
        }
    },
    
    get_regionType: function tab_LegacyLegendViewModel$get_regionType() {
        var toRet = 'color';
        switch (this.get_presModel().legendType) {
            case 'color':
                toRet = 'color';
                break;
            case 'size':
                toRet = 'size';
                break;
            case 'shape':
                toRet = 'shape';
                break;
            case 'map':
                toRet = 'map';
                break;
            default:
                ss.Debug.fail('unsupported legend type: ' + this.get_presModel().legendType);
                break;
        }
        return toRet;
    },
    
    get_borderWidth: function tab_LegacyLegendViewModel$get_borderWidth() {
        if (ss.isValue(this.get_parentZoneVM())) {
            return this.get_parentZoneVM().get_model().borderWidth();
        }
        else {
            return 0;
        }
    },
    
    get_titleHeight: function tab_LegacyLegendViewModel$get_titleHeight() {
        return this.get_presModel().titleHeight;
    },
    
    get_titleWidth: function tab_LegacyLegendViewModel$get_titleWidth() {
        return (this.get_presModel().isVisuallyCat) ? this.get_presModel().titleWidth : this.get__parentZoneTitleSize().w;
    },
    
    handleZoneValidStateChanged: function tab_LegacyLegendViewModel$handleZoneValidStateChanged() {
        this._raiseValidStateChanged$2();
    },
    
    dispose: function tab_LegacyLegendViewModel$dispose() {
        this._legacyLegendModel$2.remove_newLegacyLegend(ss.Delegate.create(this, this.handleNewLegacyLegend));
        this.get_visualModel().remove_urlInfoCacheChange(ss.Delegate.create(this, this._handleUrlInfoCacheChanged$2));
        this._zoneVM$2.remove_validStateChanged(ss.Delegate.create(this, this.handleZoneValidStateChanged));
        tab.LegacyLegendViewModel.callBaseMethod(this, 'dispose');
    },
    
    handleNewLegacyLegend: function tab_LegacyLegendViewModel$handleNewLegacyLegend() {
        this._raiseNewLegacyLegend$2();
    },
    
    _raiseNewLegacyLegend$2: function tab_LegacyLegendViewModel$_raiseNewLegacyLegend$2() {
        if (ss.isValue(this.__newLegacyLegend$2)) {
            this.__newLegacyLegend$2();
        }
    },
    
    _raiseValidStateChanged$2: function tab_LegacyLegendViewModel$_raiseValidStateChanged$2() {
        if (ss.isValue(this.__validStateChanged$2)) {
            this.__validStateChanged$2();
        }
    },
    
    _handleUrlInfoCacheChanged$2: function tab_LegacyLegendViewModel$_handleUrlInfoCacheChanged$2() {
        this.notifyPropertyChanged('urlCacheInfo');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DashboardViewModel

tab.DashboardViewModel = function tab_DashboardViewModel(dashboardModel) {
    this._zoneViewModels$1 = {};
    this.viewControllersBySheet = {};
    this.viewControllersList = [];
    tab.DashboardViewModel.initializeBase(this);
    this._dashboardModel$1 = dashboardModel;
    this._dashboardModel$1.get_zonesModel().add_newZone(ss.Delegate.create(this, this._handleNewZone$1));
    this._dashboardModel$1.add_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$1));
    this._dashboardModel$1.add_activeZoneChanged(ss.Delegate.create(this, this._handleActiveZoneChanged$1));
    this.get_layoutSession().add_stateChanged(ss.Delegate.create(this, this._onStateChanged$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_layoutSession().remove_stateChanged(ss.Delegate.create(this, this._onStateChanged$1));
    })));
    this.disposables.add(new tab.CallOnDispose(function() {
        tab.StyleUtil.clearDefaultStyleSheet();
    }));
    this._dashboardModel$1.add_renderModeChanged(ss.Delegate.create(this, this._handleRenderModeChanged$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._dashboardModel$1.remove_renderModeChanged(ss.Delegate.create(this, this._handleRenderModeChanged$1));
    })));
    this._addNewZones$1();
}
tab.DashboardViewModel.prototype = {
    _dashboardModel$1: null,
    _portSizeOverride$1: null,
    _handlingRenderModeChange$1: false,
    
    add_newDashboard: function tab_DashboardViewModel$add_newDashboard(value) {
        this.__newDashboard$1 = ss.Delegate.combine(this.__newDashboard$1, value);
    },
    remove_newDashboard: function tab_DashboardViewModel$remove_newDashboard(value) {
        this.__newDashboard$1 = ss.Delegate.remove(this.__newDashboard$1, value);
    },
    
    __newDashboard$1: null,
    
    add_newZone: function tab_DashboardViewModel$add_newZone(value) {
        this.__newZone$1 = ss.Delegate.combine(this.__newZone$1, value);
    },
    remove_newZone: function tab_DashboardViewModel$remove_newZone(value) {
        this.__newZone$1 = ss.Delegate.remove(this.__newZone$1, value);
    },
    
    __newZone$1: null,
    
    add_vizRebuildStart: function tab_DashboardViewModel$add_vizRebuildStart(value) {
        this.__vizRebuildStart$1 = ss.Delegate.combine(this.__vizRebuildStart$1, value);
    },
    remove_vizRebuildStart: function tab_DashboardViewModel$remove_vizRebuildStart(value) {
        this.__vizRebuildStart$1 = ss.Delegate.remove(this.__vizRebuildStart$1, value);
    },
    
    __vizRebuildStart$1: null,
    
    get_dashboardModel: function tab_DashboardViewModel$get_dashboardModel() {
        return this._dashboardModel$1;
    },
    
    get_legacyMenus: function tab_DashboardViewModel$get_legacyMenus() {
        return this._dashboardModel$1.get_legacyMenus();
    },
    
    get_zoneViewModels: function tab_DashboardViewModel$get_zoneViewModels() {
        return this._zoneViewModels$1;
    },
    
    get_layoutSession: function tab_DashboardViewModel$get_layoutSession() {
        return tab.CommandController.get().get_legacySession();
    },
    
    get_formats: function tab_DashboardViewModel$get_formats() {
        return this._dashboardModel$1.get_formats();
    },
    
    get_backgroundColor: function tab_DashboardViewModel$get_backgroundColor() {
        var background = '#FFFFFF';
        if (Object.keyExists(this.get_formats(), 'backgroundColor')) {
            background = this.get_formats()['backgroundColor'];
        }
        return background;
    },
    
    get_renderMode: function tab_DashboardViewModel$get_renderMode() {
        return this._dashboardModel$1.get_renderMode();
    },
    
    get_portSize: function tab_DashboardViewModel$get_portSize() {
        return this._portSizeOverride$1 || this._dashboardModel$1.get_portSize();
    },
    set_portSize: function tab_DashboardViewModel$set_portSize(value) {
        this._portSizeOverride$1 = value;
        this.raiseActionEvent(this.__newDashboard$1);
        return value;
    },
    
    get_isDashboard: function tab_DashboardViewModel$get_isDashboard() {
        return this._dashboardModel$1.get_isDashboard();
    },
    
    get_flipboardNavigatorViewModel: function tab_DashboardViewModel$get_flipboardNavigatorViewModel() {
        return this._findContentZoneByZoneType$1('flipboard-nav');
    },
    
    get_flipboardViewModel: function tab_DashboardViewModel$get_flipboardViewModel() {
        return this._findContentZoneByZoneType$1('flipboard');
    },
    
    get_handlingRenderModeChange: function tab_DashboardViewModel$get_handlingRenderModeChange() {
        return this._handlingRenderModeChange$1;
    },
    
    dispose: function tab_DashboardViewModel$dispose() {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._zoneViewModels$1));
        while ($enum1.moveNext()) {
            var zoneId = $enum1.current;
            this._zoneViewModels$1[zoneId].dispose();
        }
        Object.clearKeys(this._zoneViewModels$1);
        var $enum2 = ss.IEnumerator.getEnumerator(this.viewControllersList);
        while ($enum2.moveNext()) {
            var vc = $enum2.current;
            vc.get_viewSession().remove_sheetDataChanged(ss.Delegate.create(this, this._refreshView$1));
            vc.dispose();
        }
        this.viewControllersList.clear();
        Object.clearKeys(this.viewControllersBySheet);
        this._dashboardModel$1.get_zonesModel().remove_newZone(ss.Delegate.create(this, this._handleNewZone$1));
        this._dashboardModel$1.remove_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$1));
        this._dashboardModel$1.remove_activeZoneChanged(ss.Delegate.create(this, this._handleActiveZoneChanged$1));
        tab.DashboardViewModel.callBaseMethod(this, 'dispose');
    },
    
    _handleNewZone$1: function tab_DashboardViewModel$_handleNewZone$1(zoneModel) {
        if (Object.keyExists(this._zoneViewModels$1, zoneModel.get_zoneId())) {
            this._killZone$1(zoneModel.get_zoneId());
        }
        tab.Log.get(this).debug('Handling new zone: %s %o', zoneModel.get_zoneId(), zoneModel);
        var zoneViewModel;
        if (zoneModel.get_zoneType() === 'viz') {
            zoneViewModel = this._createPaneTableVM$1(zoneModel);
        }
        else {
            zoneViewModel = this._createZoneVM$1(zoneModel);
        }
        this._raiseNewZone$1(zoneViewModel);
    },
    
    _createPaneTableVM$1: function tab_DashboardViewModel$_createPaneTableVM$1(zoneModel) {
        var zoneViewModel;
        var vc = this._createViewController$1(zoneModel.get_associatedSheet());
        vc.get_viewSession().add_sheetDataChanged(ss.Delegate.create(this, this._refreshView$1));
        zoneViewModel = this._createZoneVM$1(zoneModel);
        var paneTable = zoneViewModel.get_zoneContentViewModel();
        paneTable.set_viewController(vc);
        return zoneViewModel;
    },
    
    _createZoneVM$1: function tab_DashboardViewModel$_createZoneVM$1(zoneModel) {
        var zoneViewModel = new tab.ZoneViewModel(zoneModel, zoneModel.get_dashboardModel());
        this._zoneViewModels$1[zoneModel.get_zoneId()] = zoneViewModel;
        return zoneViewModel;
    },
    
    _findContentZoneByZoneType$1: function tab_DashboardViewModel$_findContentZoneByZoneType$1(zoneType) {
        var $dict1 = this._zoneViewModels$1;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            if (entry.value.get_zoneType() === zoneType) {
                return entry.value.get_zoneContentViewModel();
            }
        }
        return null;
    },
    
    _raiseNewZone$1: function tab_DashboardViewModel$_raiseNewZone$1(zoneViewModel) {
        if (ss.isValue(this.__newZone$1)) {
            this.__newZone$1(zoneViewModel);
        }
    },
    
    _handleNewDashboard$1: function tab_DashboardViewModel$_handleNewDashboard$1() {
        tab.Log.get(this).debug('HandleNewDashboard');
        this._recreateZonesIf$1(ss.Delegate.create(this, function(viewModel) {
            return !this._dashboardModel$1.hasZone(viewModel.get_zoneId()) || !this._dashboardModel$1.isValidSheet(viewModel.get_model());
        }));
        this.raiseActionEvent(this.__newDashboard$1);
    },
    
    _handleRenderModeChanged$1: function tab_DashboardViewModel$_handleRenderModeChanged$1() {
        if (this.get_dashboardModel() !== tab.ModelUtils.findContentDashboard()) {
            return;
        }
        tab.Log.get(this).debug('HandleRenderModeChanged');
        this._handlingRenderModeChange$1 = true;
        try {
            this.raiseActionEvent(this.__vizRebuildStart$1);
            this._recreateZonesIf$1(function(viewModel) {
                return viewModel.get_zoneType() === 'viz';
            });
        }
        finally {
            this._handlingRenderModeChange$1 = false;
        }
    },
    
    _recreateZonesIf$1: function tab_DashboardViewModel$_recreateZonesIf$1(ShouldRemove) {
        var toRemove = [];
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._zoneViewModels$1));
        while ($enum1.moveNext()) {
            var zoneId = $enum1.current;
            var viewModel = this._zoneViewModels$1[zoneId];
            if (ShouldRemove(viewModel)) {
                toRemove.add(zoneId);
            }
        }
        this._killZones$1(toRemove);
        this._addNewZones$1();
    },
    
    _killZones$1: function tab_DashboardViewModel$_killZones$1(toRemove) {
        var $enum1 = ss.IEnumerator.getEnumerator(toRemove);
        while ($enum1.moveNext()) {
            var zoneId = $enum1.current;
            this._killZone$1(zoneId);
        }
    },
    
    _killZone$1: function tab_DashboardViewModel$_killZone$1(zoneId) {
        var zoneViewModel = this._zoneViewModels$1[zoneId];
        if (ss.isValue(zoneViewModel)) {
            tab.Log.get(this).debug('Removing zone: %s %o', zoneId, zoneViewModel);
            if (zoneViewModel.get_zoneType() === 'viz') {
                var vc = this.viewControllersBySheet['v_' + zoneViewModel.get_associatedSheet()];
                if (ss.isValue(vc)) {
                    delete this.viewControllersBySheet['v_' + zoneViewModel.get_associatedSheet()];
                    this.viewControllersList.remove(vc);
                    vc.dispose();
                }
            }
            zoneViewModel.dispose();
            delete this._zoneViewModels$1[zoneId];
        }
    },
    
    _addNewZones$1: function tab_DashboardViewModel$_addNewZones$1() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._dashboardModel$1.get_zoneModels());
        while ($enum1.moveNext()) {
            var zoneModel = $enum1.current;
            if (!Object.keyExists(this._zoneViewModels$1, zoneModel.get_zoneId()) && this._dashboardModel$1.isValidSheet(zoneModel)) {
                this._handleNewZone$1(zoneModel);
            }
        }
    },
    
    _onStateChanged$1: function tab_DashboardViewModel$_onStateChanged$1(data) {
        tab.Log.get(this).debug('OnStateChanged');
        dojo.publish(tab.EventMap.closeMenus);
        if (this.get_dashboardModel().get_autoUpdate()) {
            tab.CommandController.get().refreshLayout();
        }
        else {
            this.get_dashboardModel().set_invalid(true);
        }
    },
    
    _refreshView$1: function tab_DashboardViewModel$_refreshView$1() {
        dojo.publish(tab.EventMap.closeMenus);
        if (this.get_dashboardModel().get_autoUpdate()) {
            tab.CommandController.get().refreshLayout();
        }
        else {
            this.get_dashboardModel().set_invalid(true);
        }
    },
    
    _handleActiveZoneChanged$1: function tab_DashboardViewModel$_handleActiveZoneChanged$1() {
        if (tsConfig.isPublic) {
            return;
        }
        if (!tab.ModelUtils.getSheetInfoPresModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name).isDashboard) {
            return;
        }
        var activeZoneID = this._dashboardModel$1.get_activeZoneID();
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._zoneViewModels$1));
        while ($enum1.moveNext()) {
            var zoneId = $enum1.current;
            var zoneVM = this._zoneViewModels$1[zoneId];
            zoneVM.set__isActiveZone(zoneVM.get_zoneId() === activeZoneID);
        }
    },
    
    _createViewController$1: function tab_DashboardViewModel$_createViewController$1(sheetName) {
        var vc = new tab.ViewController(sheetName, this.get_dashboardModel().getViewSession(sheetName), Object.getKeyCount(this.viewControllersBySheet));
        this.viewControllersBySheet['v_' + sheetName] = vc;
        this.viewControllersList.add(vc);
        return vc;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LogOnViewModel

tab.LogOnViewModel = function tab_LogOnViewModel() {
    tab.LogOnViewModel.initializeBase(this);
}
tab.LogOnViewModel.logOnAndTransitionSession = function tab_LogOnViewModel$logOnAndTransitionSession(uriModel) {
    var vm = new tab.LogOnViewModel();
    vm.showLogOn();
    var whenLogOnCompleted = function() {
        vm.dispose();
        tab.SaveServerCommands.transitionSessionAfterLogon(function() {
            tabBootstrap.ViewerBootstrap.get_instance().disableClearSessionOnBrowserUnload();
            uriModel.removeHash();
            tab.WindowHelper.setLocationHref(window.self, uriModel.get_absoluteUri());
        });
    };
    vm.add_logOnCompleted(whenLogOnCompleted);
    var whenLogOnCanceled = function() {
        vm.dispose();
    };
    vm.add_logOnCanceled(whenLogOnCanceled);
    vm.disposables.add(new tab.CallOnDispose(function() {
        vm.remove_logOnCompleted(whenLogOnCompleted);
        vm.remove_logOnCanceled(whenLogOnCanceled);
    }));
}
tab.LogOnViewModel.prototype = {
    
    add_shown: function tab_LogOnViewModel$add_shown(value) {
        this.__shown$1 = ss.Delegate.combine(this.__shown$1, value);
    },
    remove_shown: function tab_LogOnViewModel$remove_shown(value) {
        this.__shown$1 = ss.Delegate.remove(this.__shown$1, value);
    },
    
    __shown$1: null,
    
    add_hidden: function tab_LogOnViewModel$add_hidden(value) {
        this.__hidden$1 = ss.Delegate.combine(this.__hidden$1, value);
    },
    remove_hidden: function tab_LogOnViewModel$remove_hidden(value) {
        this.__hidden$1 = ss.Delegate.remove(this.__hidden$1, value);
    },
    
    __hidden$1: null,
    
    add_logOnCanceled: function tab_LogOnViewModel$add_logOnCanceled(value) {
        this.__logOnCanceled$1 = ss.Delegate.combine(this.__logOnCanceled$1, value);
    },
    remove_logOnCanceled: function tab_LogOnViewModel$remove_logOnCanceled(value) {
        this.__logOnCanceled$1 = ss.Delegate.remove(this.__logOnCanceled$1, value);
    },
    
    __logOnCanceled$1: null,
    
    add_logOnCompleted: function tab_LogOnViewModel$add_logOnCompleted(value) {
        this.__logOnCompleted$1 = ss.Delegate.combine(this.__logOnCompleted$1, value);
    },
    remove_logOnCompleted: function tab_LogOnViewModel$remove_logOnCompleted(value) {
        this.__logOnCompleted$1 = ss.Delegate.remove(this.__logOnCompleted$1, value);
    },
    
    __logOnCompleted$1: null,
    
    get_logOnUrl: function tab_LogOnViewModel$get_logOnUrl() {
        return '/';
    },
    
    dispose: function tab_LogOnViewModel$dispose() {
        this.__shown$1 = null;
        this.__hidden$1 = null;
        this.__logOnCanceled$1 = null;
        this.__logOnCompleted$1 = null;
        tab.LogOnViewModel.callBaseMethod(this, 'dispose');
    },
    
    showLogOn: function tab_LogOnViewModel$showLogOn() {
        spiff.ObjectRegistry.newView(tab.LogOnView, this);
        if (ss.isValue(this.__shown$1)) {
            this.__shown$1();
        }
    },
    
    cancel: function tab_LogOnViewModel$cancel() {
        if (ss.isValue(this.__hidden$1)) {
            this.__hidden$1();
        }
        if (ss.isValue(this.__logOnCanceled$1)) {
            this.__logOnCanceled$1();
        }
    },
    
    logOnComplete: function tab_LogOnViewModel$logOnComplete() {
        if (ss.isValue(this.__hidden$1)) {
            this.__hidden$1();
        }
        if (ss.isValue(this.__logOnCompleted$1)) {
            this.__logOnCompleted$1();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.NotificationViewModel

tab.NotificationViewModel = function tab_NotificationViewModel() {
    tab.NotificationViewModel.initializeBase(this);
}
tab.NotificationViewModel.showNotification = function tab_NotificationViewModel$showNotification(message, timeout) {
    var vm = new tab.NotificationViewModel();
    vm.set_message(message);
    if (ss.isValue(timeout)) {
        vm.set_autoHideTimeout(timeout);
    }
    spiff.ObjectRegistry.newView(tab.NotificationView, vm);
    vm.disposeOnHide();
    vm.show();
}
tab.NotificationViewModel.prototype = {
    _message$1: null,
    _visible$1: false,
    _autoHideTimeout$1: 5000,
    _autoHideHandle$1: 0,
    
    add_shown: function tab_NotificationViewModel$add_shown(value) {
        this.__shown$1 = ss.Delegate.combine(this.__shown$1, value);
    },
    remove_shown: function tab_NotificationViewModel$remove_shown(value) {
        this.__shown$1 = ss.Delegate.remove(this.__shown$1, value);
    },
    
    __shown$1: null,
    
    add_hidden: function tab_NotificationViewModel$add_hidden(value) {
        this.__hidden$1 = ss.Delegate.combine(this.__hidden$1, value);
    },
    remove_hidden: function tab_NotificationViewModel$remove_hidden(value) {
        this.__hidden$1 = ss.Delegate.remove(this.__hidden$1, value);
    },
    
    __hidden$1: null,
    
    get_message: function tab_NotificationViewModel$get_message() {
        return this._message$1;
    },
    set_message: function tab_NotificationViewModel$set_message(value) {
        this._message$1 = value;
        return value;
    },
    
    get_visible: function tab_NotificationViewModel$get_visible() {
        return this._visible$1;
    },
    
    get_autoHideTimeout: function tab_NotificationViewModel$get_autoHideTimeout() {
        return this._autoHideTimeout$1;
    },
    set_autoHideTimeout: function tab_NotificationViewModel$set_autoHideTimeout(value) {
        this._autoHideTimeout$1 = value;
        return value;
    },
    
    show: function tab_NotificationViewModel$show() {
        if (this._visible$1) {
            return;
        }
        this._visible$1 = true;
        if (this._autoHideTimeout$1 > 0) {
            this._autoHideHandle$1 = window.setTimeout(ss.Delegate.create(this, this.hide), this._autoHideTimeout$1);
        }
        this.raiseActionEvent(this.__shown$1);
    },
    
    disposeOnHide: function tab_NotificationViewModel$disposeOnHide() {
        this.add_hidden(ss.Delegate.create(this, this.dispose));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.remove_hidden(ss.Delegate.create(this, this.dispose));
        })));
    },
    
    hide: function tab_NotificationViewModel$hide() {
        if (!this._visible$1) {
            return;
        }
        this._visible$1 = false;
        window.clearTimeout(this._autoHideHandle$1);
        this.raiseActionEvent(this.__hidden$1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneTableViewModel

tab.PaneTableViewModel = function tab_PaneTableViewModel(model, sheetId) {
    this._vizRegionViewModels$1 = {};
    tab.PaneTableViewModel.initializeBase(this);
    this._visModel$1 = model;
    this._sheetId$1 = sheetId;
    this._invalidationRects$1 = [];
    this._sceneInfo$1 = new tab.SceneInfo();
    if (ss.isValue(this._visModel$1)) {
        if (ss.isValue(this._visModel$1.get_selectionsModel().get_tupleSelection())) {
            this._visModel$1.get_selectionsModel().add_newSelections(ss.Delegate.create(this, this._handleSelectionChange$1));
        }
        this._visModel$1.get_impliedSelectionModel().add_newSelection(ss.Delegate.create(this, this._handleSelectionChange$1));
        if (ss.isValue(this._visModel$1.get_brushingsModel().get_tupleSelection())) {
            this._visModel$1.get_brushingsModel().add_newSelections(ss.Delegate.create(this, this._handleBrushingChange$1));
        }
        if (ss.isValue(this._visModel$1.get_sceneModel())) {
            this._visModel$1.get_sceneModel().add_newSceneModel(ss.Delegate.create(this, this._handleSceneChange$1));
            this._handleSceneChange$1();
        }
        if (ss.isValue(this._visModel$1.get_labelsModel())) {
            this._visModel$1.get_labelsModel().add_newSceneModel(ss.Delegate.create(this, this._handleSceneChange$1));
        }
        this._visModel$1.add_newHiddenTuples(ss.Delegate.create(this, this._handleHiddenTuplesChange$1));
        this._visModel$1.add_newFilteredTuples(ss.Delegate.create(this, this._handleFilteredTuplesChange$1));
        this._visModel$1.add_brushingFromActionChanged(ss.Delegate.create(this, this._handleBrushingFromActionChanged$1));
        this._visModel$1.add_colorDictionaryChanged(ss.Delegate.create(this, this._handleColorDictionaryChange$1));
        this._visModel$1.add_newVisual(ss.Delegate.create(this, this._handleVisualChanged$1));
        this._visModel$1.add_newVisual(ss.Delegate.create(this, this._handleNewPaneTable$1));
        this._visModel$1.add_customShapesLoaded(ss.Delegate.create(this, this._handleImageLoaded$1));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            model.remove_newVisual(ss.Delegate.create(this, this._handleNewPaneTable$1));
        })));
    }
    this._updateSceneInfo$1();
}
tab.PaneTableViewModel.prototype = {
    _visModel$1: null,
    _sheetId$1: null,
    _sceneInfo$1: null,
    _mapsSearchViewModel$1: null,
    _viewController$1: null,
    _invalidationRects$1: null,
    _sceneDirty$1: false,
    _selectionsToken$1: null,
    _impliedSelectionsToken$1: null,
    _brushingsToken$1: null,
    
    add_vizRegionMapChange: function tab_PaneTableViewModel$add_vizRegionMapChange(value) {
        this.__vizRegionMapChange$1 = ss.Delegate.combine(this.__vizRegionMapChange$1, value);
    },
    remove_vizRegionMapChange: function tab_PaneTableViewModel$remove_vizRegionMapChange(value) {
        this.__vizRegionMapChange$1 = ss.Delegate.remove(this.__vizRegionMapChange$1, value);
    },
    
    __vizRegionMapChange$1: null,
    
    add_newPaneTable: function tab_PaneTableViewModel$add_newPaneTable(value) {
        this.__newPaneTable$1 = ss.Delegate.combine(this.__newPaneTable$1, value);
    },
    remove_newPaneTable: function tab_PaneTableViewModel$remove_newPaneTable(value) {
        this.__newPaneTable$1 = ss.Delegate.remove(this.__newPaneTable$1, value);
    },
    
    __newPaneTable$1: null,
    
    get_scene: function tab_PaneTableViewModel$get_scene() {
        return this._sceneInfo$1;
    },
    
    get_vizRegionMap: function tab_PaneTableViewModel$get_vizRegionMap() {
        return this._vizRegionViewModels$1;
    },
    
    get_refLineVisualLists: function tab_PaneTableViewModel$get_refLineVisualLists() {
        return this.get__sceneModel$1().get_refLineVisualLists();
    },
    
    get_trendLineVisualLists: function tab_PaneTableViewModel$get_trendLineVisualLists() {
        return this.get__sceneModel$1().get_trendLineVisualLists();
    },
    
    get_drawFirstParts: function tab_PaneTableViewModel$get_drawFirstParts() {
        return this.get__sceneModel$1().get_drawFirstParts();
    },
    
    get_drawLastParts: function tab_PaneTableViewModel$get_drawLastParts() {
        return this.get__sceneModel$1().get_drawLastParts();
    },
    
    get_zone: function tab_PaneTableViewModel$get_zone() {
        return this._visModel$1.get_zone();
    },
    
    get_zonePresModel: function tab_PaneTableViewModel$get_zonePresModel() {
        return this._visModel$1.get_zone().get_zonePresModel();
    },
    
    get_viewController: function tab_PaneTableViewModel$get_viewController() {
        return this._viewController$1;
    },
    set_viewController: function tab_PaneTableViewModel$set_viewController(value) {
        this._viewController$1 = value;
        return value;
    },
    
    get_sheetId: function tab_PaneTableViewModel$get_sheetId() {
        return this._sheetId$1;
    },
    
    get_sortIndicators: function tab_PaneTableViewModel$get_sortIndicators() {
        return this._visModel$1.get_sortIndicatorsModel().get_sortIndicatorsPresModel();
    },
    
    get_selectionsModel: function tab_PaneTableViewModel$get_selectionsModel() {
        return this._visModel$1.get_selectionsModel();
    },
    
    get_cacheUrlInfo: function tab_PaneTableViewModel$get_cacheUrlInfo() {
        return this._visModel$1.get_cacheUrlInfo();
    },
    
    get_hasTitle: function tab_PaneTableViewModel$get_hasTitle() {
        return this.get_zonePresModel().hasTitle;
    },
    
    get_hasCaption: function tab_PaneTableViewModel$get_hasCaption() {
        return this.get_zonePresModel().hasCaption;
    },
    
    get_visualModel: function tab_PaneTableViewModel$get_visualModel() {
        return this._visModel$1;
    },
    
    get__sceneModel$1: function tab_PaneTableViewModel$get__sceneModel$1() {
        return this._visModel$1.get_sceneModel();
    },
    
    get_visualId: function tab_PaneTableViewModel$get_visualId() {
        return this._visModel$1.get_visualId();
    },
    
    get_mapServerModel: function tab_PaneTableViewModel$get_mapServerModel() {
        return this.get_visualModel().get_mapServerModel();
    },
    
    get_mapsSearchViewModel: function tab_PaneTableViewModel$get_mapsSearchViewModel() {
        return this._mapsSearchViewModel$1;
    },
    set_mapsSearchViewModel: function tab_PaneTableViewModel$set_mapsSearchViewModel(value) {
        this._mapsSearchViewModel$1 = value;
        return value;
    },
    
    dispose: function tab_PaneTableViewModel$dispose() {
        if (ss.isValue(this._mapsSearchViewModel$1)) {
            this._mapsSearchViewModel$1.dispose();
        }
        if (ss.isValue(this._visModel$1)) {
            if (ss.isValue(this._visModel$1.get_selectionsModel().get_tupleSelection())) {
                this._visModel$1.get_selectionsModel().remove_newSelections(ss.Delegate.create(this, this._handleSelectionChange$1));
            }
            this._visModel$1.get_impliedSelectionModel().remove_newSelection(ss.Delegate.create(this, this._handleSelectionChange$1));
            if (ss.isValue(this._visModel$1.get_brushingsModel().get_tupleSelection())) {
                this._visModel$1.get_brushingsModel().remove_newSelections(ss.Delegate.create(this, this._handleBrushingChange$1));
            }
            if (ss.isValue(this._visModel$1.get_sceneModel())) {
                this._visModel$1.get_sceneModel().remove_newSceneModel(ss.Delegate.create(this, this._handleSceneChange$1));
            }
            if (ss.isValue(this._visModel$1.get_labelsModel())) {
                this._visModel$1.get_labelsModel().remove_newSceneModel(ss.Delegate.create(this, this._handleSceneChange$1));
            }
            this._visModel$1.remove_newHiddenTuples(ss.Delegate.create(this, this._handleHiddenTuplesChange$1));
            this._visModel$1.remove_newFilteredTuples(ss.Delegate.create(this, this._handleFilteredTuplesChange$1));
            this._visModel$1.remove_brushingFromActionChanged(ss.Delegate.create(this, this._handleBrushingFromActionChanged$1));
            this._visModel$1.remove_colorDictionaryChanged(ss.Delegate.create(this, this._handleColorDictionaryChange$1));
            this._visModel$1.remove_newVisual(ss.Delegate.create(this, this._handleVisualChanged$1));
            this._visModel$1.remove_customShapesLoaded(ss.Delegate.create(this, this._handleImageLoaded$1));
        }
        var $dict1 = this._vizRegionViewModels$1;
        for (var $key2 in $dict1) {
            var pair = { key: $key2, value: $dict1[$key2] };
            pair.value.dispose();
        }
        tab.PaneTableViewModel.callBaseMethod(this, 'dispose');
    },
    
    getAndClearInvalidationRects: function tab_PaneTableViewModel$getAndClearInvalidationRects() {
        var rects = this._invalidationRects$1;
        this._invalidationRects$1 = [];
        return rects;
    },
    
    _handleImageLoaded$1: function tab_PaneTableViewModel$_handleImageLoaded$1() {
        this.notifyPropertyChanged('images');
    },
    
    _handleSelectionChange$1: function tab_PaneTableViewModel$_handleSelectionChange$1() {
        var selectionsDiff = this._visModel$1.get_selectionsModel().computeSelectionsDiff(this._selectionsToken$1, this._impliedSelectionsToken$1, this._visModel$1.get_impliedSelectionModel());
        this._selectionsToken$1 = this._visModel$1.get_selectionsModel().createSelectionsToken();
        this._impliedSelectionsToken$1 = this._visModel$1.get_impliedSelectionModel().createSelectionToken();
        this._selectionBrushingChangeHelper$1(selectionsDiff, 'selection');
    },
    
    _handleBrushingChange$1: function tab_PaneTableViewModel$_handleBrushingChange$1() {
        var brushingDiff = this._visModel$1.get_brushingsModel().computeSelectionsDiff(this._brushingsToken$1, null, null);
        this._brushingsToken$1 = this._visModel$1.get_brushingsModel().createSelectionsToken();
        this._selectionBrushingChangeHelper$1(brushingDiff, 'brushing');
    },
    
    _selectionBrushingChangeHelper$1: function tab_PaneTableViewModel$_selectionBrushingChangeHelper$1(changeDiff, propertyThatChanged) {
        if (!changeDiff.first) {
            if (!changeDiff.second.length) {
                return;
            }
            var invalRects = this._sceneInfo$1._getMarksInvalidationRects(changeDiff.second);
            this._addInvalidationRects$1(invalRects);
        }
        this.notifyPropertyChanged(propertyThatChanged);
    },
    
    _handleBrushingFromActionChanged$1: function tab_PaneTableViewModel$_handleBrushingFromActionChanged$1() {
        this._sceneInfo$1._setIsTargetOfBrushingAction(this._visModel$1.get_isBrushedFromAction());
        this.notifyPropertyChanged('brushing');
    },
    
    _handleHiddenTuplesChange$1: function tab_PaneTableViewModel$_handleHiddenTuplesChange$1() {
        var delta = tab.SelectionsModel.computeTupleDictionaryDifference(this._visModel$1.get_hiddenTuples(), this._sceneInfo$1.get__hiddenTuples());
        if (!delta.length) {
            return;
        }
        var invalRects = this._sceneInfo$1._getMarksInvalidationRects(delta);
        this._addInvalidationRects$1(invalRects);
        this._sceneInfo$1.set__hiddenTuples(this._visModel$1.get_hiddenTuples());
        this.notifyPropertyChanged('scene');
    },
    
    _handleFilteredTuplesChange$1: function tab_PaneTableViewModel$_handleFilteredTuplesChange$1() {
        var delta = tab.SelectionsModel.computeTupleDictionaryDifference(this._visModel$1.get_filteredTuples(), this._sceneInfo$1.get__filteredTuples());
        if (!delta.length) {
            return;
        }
        var invalRects = this._sceneInfo$1._getMarksInvalidationRects(delta);
        this._addInvalidationRects$1(invalRects);
        this._sceneInfo$1.set__filteredTuples(this._visModel$1.get_filteredTuples());
        this.notifyPropertyChanged('scene');
    },
    
    _handleColorDictionaryChange$1: function tab_PaneTableViewModel$_handleColorDictionaryChange$1() {
        this._sceneDirty$1 = true;
    },
    
    _addInvalidationRects$1: function tab_PaneTableViewModel$_addInvalidationRects$1(rects) {
        this._invalidationRects$1.addRange(rects);
    },
    
    _handleSceneChange$1: function tab_PaneTableViewModel$_handleSceneChange$1() {
        if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            return;
        }
        var regionChange = false;
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this.get__sceneModel$1().get_visualListModels()));
        while ($enum1.moveNext()) {
            var vizPart = $enum1.current;
            if (Object.keyExists(this._vizRegionViewModels$1, vizPart)) {
            }
            else {
                tab.MiscUtil.dispose(this._vizRegionViewModels$1[vizPart]);
                var vlm = this.get__sceneModel$1().get_visualListModels()[vizPart];
                if (tab.PaneTableViewModel.blackListVisualParts.contains(vizPart)) {
                    this._vizRegionViewModels$1[vizPart] = new tab.VisualListViewModel(vlm, this.get_visualId(), tab.ModelUtils.visualPartToRegionMap[vizPart], this._visModel$1.get_selectionsModel(), this._visModel$1.get_brushingsModel());
                }
                else {
                    this._vizRegionViewModels$1[vizPart] = new tab.VisualListViewModel(vlm, this.get_visualId(), tab.ModelUtils.visualPartToRegionMap[vizPart], null, null);
                }
                regionChange = true;
            }
        }
        var keys = Object.keys(this._vizRegionViewModels$1);
        var $enum2 = ss.IEnumerator.getEnumerator(keys);
        while ($enum2.moveNext()) {
            var vizPart = $enum2.current;
            if (!Object.keyExists(this.get__sceneModel$1().get_visualListModels(), vizPart)) {
                tab.MiscUtil.dispose(this._vizRegionViewModels$1[vizPart]);
                delete this._vizRegionViewModels$1[vizPart];
                regionChange = true;
            }
        }
        var defaultBackgroundColor = this.get__sceneModel$1().get_backgroundColor().toString();
        var $enum3 = ss.IEnumerator.getEnumerator(Object.keys(this._vizRegionViewModels$1));
        while ($enum3.moveNext()) {
            var part = $enum3.current;
            this._vizRegionViewModels$1[part].set_defaultBackgroundColor(defaultBackgroundColor);
        }
        if (regionChange) {
            this._raiseVizRegionMapChange$1();
        }
        this._sceneDirty$1 = true;
    },
    
    _handleVisualChanged$1: function tab_PaneTableViewModel$_handleVisualChanged$1() {
        if (this._sceneDirty$1) {
            this._updateSceneInfo$1();
            this.notifyPropertyChanged('scene');
        }
        this._sceneDirty$1 = false;
    },
    
    _raiseVizRegionMapChange$1: function tab_PaneTableViewModel$_raiseVizRegionMapChange$1() {
        if (ss.isValue(this.__vizRegionMapChange$1)) {
            this.__vizRegionMapChange$1();
        }
    },
    
    _updateSceneInfo$1: function tab_PaneTableViewModel$_updateSceneInfo$1() {
        var colorDictionary = (ss.isValue(this._visModel$1) && ss.isValue(this._visModel$1.get_visualPresModel())) ? this._visModel$1.get_visualPresModel().colorDictionary : null;
        var scenePresModel = (ss.isValue(this.get__sceneModel$1())) ? this.get__sceneModel$1().get_presModel() : null;
        var selectionsModel = (ss.isValue(this._visModel$1) && ss.isValue(this._visModel$1.get_selectionsModel().get_tupleSelection())) ? this._visModel$1.get_selectionsModel() : null;
        var impliedSelectionModel = (ss.isValue(this._visModel$1) && ss.isValue(this._visModel$1.get_impliedSelectionModel())) ? this._visModel$1.get_impliedSelectionModel() : null;
        var brushingsModel = (ss.isValue(this._visModel$1) && ss.isValue(this._visModel$1.get_brushingsModel().get_tupleSelection())) ? this._visModel$1.get_brushingsModel() : null;
        var labelsPM = (ss.isValue(this._visModel$1) && ss.isValue(this._visModel$1.get_labelsModel())) ? this._visModel$1.get_labelsModel().get_presModel() : null;
        var hiddenTuples = (ss.isValue(this._visModel$1)) ? this._visModel$1.get_hiddenTuples() : {};
        var filteredTuples = (ss.isValue(this._visModel$1)) ? this._visModel$1.get_filteredTuples() : {};
        this._sceneInfo$1._setSceneData(scenePresModel, selectionsModel, impliedSelectionModel, brushingsModel, colorDictionary, hiddenTuples, filteredTuples);
        this._sceneInfo$1._setLabelInfo(labelsPM);
        this._sceneInfo$1._setIsTargetOfBrushingAction(this._visModel$1.get_isBrushedFromAction());
        if (ss.isValue(this._visModel$1) && ss.isValue(this._visModel$1.get_visualPresModel()) && ss.isValue(this._visModel$1.get_visualPresModel().imageDictionary)) {
            this._sceneInfo$1._updateImageMap(this._visModel$1.get_visualPresModel().imageDictionary, ss.Delegate.create(this, function() {
                this._handleImageLoaded$1();
            }));
        }
    },
    
    isInvalidSheet: function tab_PaneTableViewModel$isInvalidSheet() {
        return _.any(this._visModel$1.get_invalidSheets(), ss.Delegate.create(this, function(model) {
            return _.isEqual(this.get_visualId(), model);
        }));
    },
    
    _handleNewPaneTable$1: function tab_PaneTableViewModel$_handleNewPaneTable$1() {
        this.raiseActionEvent(this.__newPaneTable$1);
    },
    
    shouldEnableZoomHomeToolbar: function tab_PaneTableViewModel$shouldEnableZoomHomeToolbar() {
        return this.get_visualModel().get_hasModifiedAxes();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SubscribeViewModel

tab.SubscribeViewModel = function tab_SubscribeViewModel(top) {
    tab.SubscribeViewModel.initializeBase(this);
    this.top = top;
    tab.WorkgroupServerCommands.getSchedules(ss.Delegate.create(this, function(scheds) {
        this.set_schedules(scheds.filter(function(sched) {
            return sched.get_action() === tab.Schedule.subscription;
        }));
    }));
    this._userEmail$1 = tsConfig.current_user_email;
}
tab.SubscribeViewModel.prototype = {
    top: false,
    _sheetSelectionIsWorkbook$1: false,
    _mode$1: 0,
    _schedules$1: null,
    _userEmail$1: null,
    _intermediateEmail$1: null,
    _intermediateSubject$1: null,
    
    add_shown: function tab_SubscribeViewModel$add_shown(value) {
        this.__shown$1 = ss.Delegate.combine(this.__shown$1, value);
    },
    remove_shown: function tab_SubscribeViewModel$remove_shown(value) {
        this.__shown$1 = ss.Delegate.remove(this.__shown$1, value);
    },
    
    __shown$1: null,
    
    add_hidden: function tab_SubscribeViewModel$add_hidden(value) {
        this.__hidden$1 = ss.Delegate.combine(this.__hidden$1, value);
    },
    remove_hidden: function tab_SubscribeViewModel$remove_hidden(value) {
        this.__hidden$1 = ss.Delegate.remove(this.__hidden$1, value);
    },
    
    __hidden$1: null,
    
    add_modeChange: function tab_SubscribeViewModel$add_modeChange(value) {
        this.__modeChange$1 = ss.Delegate.combine(this.__modeChange$1, value);
    },
    remove_modeChange: function tab_SubscribeViewModel$remove_modeChange(value) {
        this.__modeChange$1 = ss.Delegate.remove(this.__modeChange$1, value);
    },
    
    __modeChange$1: null,
    
    add_schedulesChanged: function tab_SubscribeViewModel$add_schedulesChanged(value) {
        this.__schedulesChanged$1 = ss.Delegate.combine(this.__schedulesChanged$1, value);
    },
    remove_schedulesChanged: function tab_SubscribeViewModel$remove_schedulesChanged(value) {
        this.__schedulesChanged$1 = ss.Delegate.remove(this.__schedulesChanged$1, value);
    },
    
    __schedulesChanged$1: null,
    
    add_emailChanged: function tab_SubscribeViewModel$add_emailChanged(value) {
        this.__emailChanged$1 = ss.Delegate.combine(this.__emailChanged$1, value);
    },
    remove_emailChanged: function tab_SubscribeViewModel$remove_emailChanged(value) {
        this.__emailChanged$1 = ss.Delegate.remove(this.__emailChanged$1, value);
    },
    
    __emailChanged$1: null,
    
    add_emailValidationChanged: function tab_SubscribeViewModel$add_emailValidationChanged(value) {
        this.__emailValidationChanged$1 = ss.Delegate.combine(this.__emailValidationChanged$1, value);
    },
    remove_emailValidationChanged: function tab_SubscribeViewModel$remove_emailValidationChanged(value) {
        this.__emailValidationChanged$1 = ss.Delegate.remove(this.__emailValidationChanged$1, value);
    },
    
    __emailValidationChanged$1: null,
    
    add_sheetSelectionChanged: function tab_SubscribeViewModel$add_sheetSelectionChanged(value) {
        this.__sheetSelectionChanged$1 = ss.Delegate.combine(this.__sheetSelectionChanged$1, value);
    },
    remove_sheetSelectionChanged: function tab_SubscribeViewModel$remove_sheetSelectionChanged(value) {
        this.__sheetSelectionChanged$1 = ss.Delegate.remove(this.__sheetSelectionChanged$1, value);
    },
    
    __sheetSelectionChanged$1: null,
    
    add_subjectValidationChanged: function tab_SubscribeViewModel$add_subjectValidationChanged(value) {
        this.__subjectValidationChanged$1 = ss.Delegate.combine(this.__subjectValidationChanged$1, value);
    },
    remove_subjectValidationChanged: function tab_SubscribeViewModel$remove_subjectValidationChanged(value) {
        this.__subjectValidationChanged$1 = ss.Delegate.remove(this.__subjectValidationChanged$1, value);
    },
    
    __subjectValidationChanged$1: null,
    
    get_isTop: function tab_SubscribeViewModel$get_isTop() {
        return this.top;
    },
    
    get_mode: function tab_SubscribeViewModel$get_mode() {
        return this._mode$1;
    },
    
    get_schedules: function tab_SubscribeViewModel$get_schedules() {
        return this._schedules$1;
    },
    set_schedules: function tab_SubscribeViewModel$set_schedules(value) {
        if (this._schedules$1 === value) {
            return;
        }
        this._schedules$1 = value;
        if (ss.isValue(this.__schedulesChanged$1)) {
            this.__schedulesChanged$1();
        }
        return value;
    },
    
    get_sheetSelectionIsWorkbook: function tab_SubscribeViewModel$get_sheetSelectionIsWorkbook() {
        return this._sheetSelectionIsWorkbook$1;
    },
    set_sheetSelectionIsWorkbook: function tab_SubscribeViewModel$set_sheetSelectionIsWorkbook(value) {
        if (this._sheetSelectionIsWorkbook$1 === value) {
            return;
        }
        this._sheetSelectionIsWorkbook$1 = value;
        if (ss.isValue(this.__sheetSelectionChanged$1)) {
            this.__sheetSelectionChanged$1();
        }
        return value;
    },
    
    get_validSheets: function tab_SubscribeViewModel$get_validSheets() {
        if (tsConfig.tabs_allowed) {
            return ['SubscribeSheet', 'SubscribeWorkbook'];
        }
        else {
            return ['SubscribeSheet'];
        }
    },
    
    get_defaultSubject: function tab_SubscribeViewModel$get_defaultSubject() {
        return tsConfig.current_sheet_name;
    },
    
    get_email: function tab_SubscribeViewModel$get_email() {
        return this._userEmail$1;
    },
    set_email: function tab_SubscribeViewModel$set_email(value) {
        if (this._userEmail$1 === value) {
            return;
        }
        this._userEmail$1 = value;
        if (ss.isValue(this.__emailChanged$1)) {
            this.__emailChanged$1();
        }
        return value;
    },
    
    get_intermediateEmail: function tab_SubscribeViewModel$get_intermediateEmail() {
        return this._intermediateEmail$1;
    },
    set_intermediateEmail: function tab_SubscribeViewModel$set_intermediateEmail(value) {
        if (this._intermediateEmail$1 === value) {
            return;
        }
        var previous = this._intermediateEmail$1;
        this._intermediateEmail$1 = value;
        if (ss.isValue(this.__emailValidationChanged$1)) {
            if (this._emailIsValid$1(previous) !== this._emailIsValid$1(this._intermediateEmail$1)) {
                this.__emailValidationChanged$1();
            }
        }
        return value;
    },
    
    get_intermediateEmailValid: function tab_SubscribeViewModel$get_intermediateEmailValid() {
        return this._emailIsValid$1(this.get_intermediateEmail());
    },
    
    get_intermediateSubject: function tab_SubscribeViewModel$get_intermediateSubject() {
        return this._intermediateSubject$1;
    },
    set_intermediateSubject: function tab_SubscribeViewModel$set_intermediateSubject(value) {
        if (this._intermediateSubject$1 === value) {
            return;
        }
        var previous = this._intermediateSubject$1;
        this._intermediateSubject$1 = value;
        if (ss.isValue(this.__subjectValidationChanged$1)) {
            if (this._subjectIsValid$1(previous) !== this._subjectIsValid$1(this._intermediateSubject$1)) {
                this.__subjectValidationChanged$1();
            }
        }
        return value;
    },
    
    get_intermediateSubjectValid: function tab_SubscribeViewModel$get_intermediateSubjectValid() {
        return this._subjectIsValid$1(this.get_intermediateSubject());
    },
    
    show: function tab_SubscribeViewModel$show() {
        if (!this._subjectIsValid$1(this.get_intermediateSubject())) {
            this._intermediateSubject$1 = this.get_defaultSubject();
        }
        this._mode$1 = (this._emailIsValid$1(this._userEmail$1)) ? tab.SubscribeViewModel.modeSubscribe : tab.SubscribeViewModel.modeEmail;
        if (ss.isValue(this.__shown$1)) {
            this.__shown$1();
        }
    },
    
    hide: function tab_SubscribeViewModel$hide() {
        if (ss.isValue(this.__hidden$1)) {
            this.__hidden$1();
        }
    },
    
    startSubscribe: function tab_SubscribeViewModel$startSubscribe() {
        this._switchMode$1(tab.SubscribeViewModel.modeSubscribe);
    },
    
    submitEmail: function tab_SubscribeViewModel$submitEmail(email, success, failure) {
        var successAndRemember = ss.Delegate.create(this, function() {
            this.set_email(email);
            success();
        });
        tab.WorkgroupServerCommands.setUserEmail(email, successAndRemember, failure);
    },
    
    createSubscription: function tab_SubscribeViewModel$createSubscription(subject, schedule, successMessage, failureMessage) {
        var success = function() {
            tab.NotificationViewModel.showNotification(successMessage);
        };
        var failure = function() {
            tab.NotificationViewModel.showNotification(failureMessage);
        };
        tab.WorkgroupServerCommands.createSubscription(subject, this.get_sheetSelectionIsWorkbook(), schedule, success, failure);
    },
    
    _emailIsValid$1: function tab_SubscribeViewModel$_emailIsValid$1(input) {
        var validator = new RegExp('^[^\\s"(),:;<>@[\\]]+@([-a-z0-9]+\\.)+[a-z0-9]{2,}$', 'i');
        return validator.test(input);
    },
    
    _subjectIsValid$1: function tab_SubscribeViewModel$_subjectIsValid$1(input) {
        return !String.isNullOrEmpty($.trim(input));
    },
    
    _switchMode$1: function tab_SubscribeViewModel$_switchMode$1(newMode) {
        if (this._mode$1 !== newMode) {
            this._mode$1 = newMode;
            this.__modeChange$1();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ViewingToolbarCommands

tab.ViewingToolbarCommands = function tab_ViewingToolbarCommands(app) {
    this._app = app;
}
tab.ViewingToolbarCommands.prototype = {
    _app: null,
    _exportPdfDialog: null,
    
    dispose: function tab_ViewingToolbarCommands$dispose() {
        if (ss.isValue(this._exportPdfDialog)) {
            this._exportPdfDialog.dispose();
            this._exportPdfDialog = null;
        }
    },
    
    exportImage: function tab_ViewingToolbarCommands$exportImage() {
        var dialogData = tableau.types.ExportDialogType['ExportImage'];
        var sheetNameList = [];
        var scrollPoints = [];
        if (this._app.get_isDashboard()) {
            var scrollData = {};
            var viewControllers = this._app.get_viewControllers();
            if (ss.isValue(viewControllers)) {
                $.each(viewControllers, function(index, viewController) {
                    var scrollPos = viewController.get_viewWidget().get_scrollPosition();
                    var x = scrollPos.x;
                    var y = scrollPos.y;
                    if (!!x || !!y) {
                        scrollData[viewController.get_sheetName() + '-x'] = x;
                        scrollData[viewController.get_sheetName() + '-y'] = y;
                        scrollPoints.add(tab.$create_Point(x, y));
                        sheetNameList.add(viewController.get_sheetName());
                    }
                });
            }
        }
        tab.ExportServerCommands.exportImage(tsConfig.current_sheet_name, dialogData, sheetNameList, scrollPoints);
    },
    
    exportData: function tab_ViewingToolbarCommands$exportData(sheetName) {
        if (ss.isNullOrUndefined(sheetName)) {
            sheetName = tab.ModelUtils.findActiveOrDefaultVisual().get_worksheetName();
        }
        var session = tab.ModelUtils.findContentDashboard().getViewSession(sheetName);
        if (ss.isValue(session)) {
            window.open(session.formatUnderlyingDataURL(null), session.getWindow('vud'), 'scrollbars,resizable');
        }
    },
    
    exportCrosstab: function tab_ViewingToolbarCommands$exportCrosstab(sheetName) {
        if (ss.isNullOrUndefined(sheetName)) {
            sheetName = tab.ModelUtils.findActiveOrDefaultVisual().get_worksheetName();
        }
        var session = tab.ModelUtils.findContentDashboard().getViewSession(sheetName);
        if (ss.isValue(session)) {
            var dialogData = tableau.types.ExportDialogType['ExportCrosstab'];
            session.openDownload(session.formatExportCrossTabURL('utf16'), dialogData);
        }
    },
    
    exportPdf: function tab_ViewingToolbarCommands$exportPdf() {
        if (ss.isValue(this._exportPdfDialog)) {
            this._exportPdfDialog.dispose();
        }
        this._exportPdfDialog = this._app._getExportPdfDialog();
        this._exportPdfDialog.add_closed(ss.Delegate.create(this, function() {
            this._exportPdfDialog.dispose();
            this._exportPdfDialog = null;
        }));
        this._exportPdfDialog.show();
    },
    
    _edit: function tab_ViewingToolbarCommands$_edit(activeSheet) {
        this._app.get_session().launchEditing(activeSheet);
    },
    
    _revert: function tab_ViewingToolbarCommands$_revert() {
        tab.WorksheetServerCommands.revert();
    },
    
    _pauseAutoUpdate: function tab_ViewingToolbarCommands$_pauseAutoUpdate() {
        if (this._app.get_autoUpdate()) {
            this._toggleAutoUpdate();
        }
    },
    
    _resumeAutoUpdate: function tab_ViewingToolbarCommands$_resumeAutoUpdate() {
        if (!this._app.get_autoUpdate()) {
            this._toggleAutoUpdate();
        }
    },
    
    _isAutoUpdate: function tab_ViewingToolbarCommands$_isAutoUpdate() {
        return this._app.get_autoUpdate();
    },
    
    _toggleAutoUpdate: function tab_ViewingToolbarCommands$_toggleAutoUpdate() {
        this._app.set_autoUpdate(!this._app.get_autoUpdate());
        if (ss.isValue(this._app.get_toolbar()) && tsConfig.toolbarvis) {
            this._app.get_toolbar().setAutoUpdate(this._app.get_autoUpdate());
        }
        tab.ToolbarServerCommands.setAutoUpdate(this._app.get_autoUpdate());
        tab.BaseSession.autoUpdate = this._app.get_autoUpdate();
        if (this._app.get_autoUpdate() && this._app.get_invalid()) {
            tab.CommandController.get().refreshLayout();
        }
    },
    
    _isDownloadAllowed: function tab_ViewingToolbarCommands$_isDownloadAllowed() {
        return (!tsConfig.previewMode && !String.isNullOrEmpty(tsConfig.downloadURI)) || tsConfig.is_metrics_view;
    },
    
    _downloadWorkbook: function tab_ViewingToolbarCommands$_downloadWorkbook() {
        var downloadUrl;
        if (tsConfig.is_metrics_view) {
            downloadUrl = this._app.get_session().metricsViewDownloadUrl();
        }
        else {
            downloadUrl = this._rewriteDownloadUri(tsConfig.downloadURI);
        }
        window.open(downloadUrl);
    },
    
    _downloadWorkbookForApi: function tab_ViewingToolbarCommands$_downloadWorkbookForApi(url) {
        var downloadUrl;
        if (tsConfig.is_metrics_view) {
            downloadUrl = this._app.get_session().metricsViewDownloadUrl();
        }
        else {
            downloadUrl = this._rewriteDownloadUri(url);
        }
        window.open(downloadUrl);
    },
    
    _refreshData: function tab_ViewingToolbarCommands$_refreshData() {
        tab.ToolbarServerCommands.refreshData();
    },
    
    _saveAndOpenMetricsView: function tab_ViewingToolbarCommands$_saveAndOpenMetricsView() {
        this._app.get_session().saveAndOpenMetricsView();
    },
    
    _showShareDialog: function tab_ViewingToolbarCommands$_showShareDialog() {
        this._app.showShareDialog();
        this._app.saveSharedView('link');
    },
    
    _selectMarksKeepOnly: function tab_ViewingToolbarCommands$_selectMarksKeepOnly() {
    },
    
    _selectMarksExclude: function tab_ViewingToolbarCommands$_selectMarksExclude() {
    },
    
    _rewriteDownloadUri: function tab_ViewingToolbarCommands$_rewriteDownloadUri(uri) {
        if (ss.isValue(uri)) {
            var matches = uri.match(tab.ViewingToolbarCommands._uriPattern);
            if (ss.isValue(matches) && matches.length >= 2) {
                return tabBootstrap.ViewerBootstrap.get_instance().location.protocol + '//' + tabBootstrap.ViewerBootstrap.get_instance().location.host + matches[1];
            }
        }
        return uri;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.VisualListViewModel

tab.VisualListViewModel = function tab_VisualListViewModel(visualListModel, visualId, regionPart, selModel, brushModel) {
    tab.VisualListViewModel.initializeBase(this);
    this._model$1 = visualListModel;
    this._visualId$1 = visualId;
    this._regionPart$1 = regionPart;
    this._model$1.add_newVisualList(ss.Delegate.create(this, this.handleModelChange));
    if (ss.isValue(selModel)) {
        this._selectionModel$1 = selModel.get_nodeSelection();
        this._selectionModel$1.add_newSelection(ss.Delegate.create(this, this._handleNewSelectionOrNewBrushing$1));
    }
    if (ss.isValue(brushModel)) {
        this._brushingModel$1 = brushModel.get_nodeSelection();
        this._brushingModel$1.add_newSelection(ss.Delegate.create(this, this._handleNewSelectionOrNewBrushing$1));
    }
    if (ss.isValue(selModel) || ss.isValue(brushModel)) {
        this._handleNewSelectionOrNewBrushing$1();
    }
}
tab.VisualListViewModel.prototype = {
    _model$1: null,
    _visualId$1: null,
    _regionPart$1: null,
    _selectionModel$1: null,
    _brushingModel$1: null,
    _defaultBackgroundColor$1: null,
    _currHoverNode$1: null,
    _prevHoverNode$1: null,
    
    get_groupItemNodes: function tab_VisualListViewModel$get_groupItemNodes() {
        return this._model$1.get_groupItemNodes();
    },
    
    get_visualListPM: function tab_VisualListViewModel$get_visualListPM() {
        return this._model$1.get_visualListPresModel();
    },
    
    get_defaultBackgroundColor: function tab_VisualListViewModel$get_defaultBackgroundColor() {
        return this._defaultBackgroundColor$1;
    },
    set_defaultBackgroundColor: function tab_VisualListViewModel$set_defaultBackgroundColor(value) {
        this._defaultBackgroundColor$1 = value;
        return value;
    },
    
    get_hoverNode: function tab_VisualListViewModel$get_hoverNode() {
        return this._currHoverNode$1;
    },
    set_hoverNode: function tab_VisualListViewModel$set_hoverNode(value) {
        if (this._currHoverNode$1 !== value) {
            this._prevHoverNode$1 = this._currHoverNode$1;
            this._currHoverNode$1 = value;
            this.notifyPropertyChanged('HoverNode');
        }
        return value;
    },
    
    dirtyRect: function tab_VisualListViewModel$dirtyRect(offset) {
        var unionRect = tab.$create_RectXY(0, 0, 0, 0);
        var nodes = [ this._prevHoverNode$1, this._currHoverNode$1 ];
        var $enum1 = ss.IEnumerator.getEnumerator(nodes);
        while ($enum1.moveNext()) {
            var node = $enum1.current;
            if (node != null) {
                var rect = tab.$create_RectXY(node.extentsX, node.extentsY, node.extentsWidth, node.extentsHeight);
                unionRect = tab.RectXYUtil.union(unionRect, rect);
            }
        }
        return tab.RectXYUtil.offsetRect(unionRect, offset);
    },
    
    isHovered: function tab_VisualListViewModel$isHovered(node) {
        return node === this._currHoverNode$1;
    },
    
    isSelected: function tab_VisualListViewModel$isSelected(node) {
        return ss.isValue(this._selectionModel$1) && this._selectionModel$1.isNodeSelected(node);
    },
    
    isBrushed: function tab_VisualListViewModel$isBrushed(node) {
        return ss.isValue(this._brushingModel$1) && this._brushingModel$1.isNodeSelected(node);
    },
    
    selectNode: function tab_VisualListViewModel$selectNode(coords, selectedNode, action, tooltipCallback) {
        tab.SelectionClientCommands.selectNode(this._regionPart$1, coords, action, this._model$1, selectedNode, this._visualId$1, tooltipCallback);
    },
    
    handleModelChange: function tab_VisualListViewModel$handleModelChange() {
        this.notifyPropertyChanged('visualList');
    },
    
    _handleNewSelectionOrNewBrushing$1: function tab_VisualListViewModel$_handleNewSelectionOrNewBrushing$1() {
        this.notifyPropertyChanged('selection');
    },
    
    dispose: function tab_VisualListViewModel$dispose() {
        this._model$1.remove_newVisualList(ss.Delegate.create(this, this.handleModelChange));
        if (ss.isValue(this._selectionModel$1)) {
            this._selectionModel$1.remove_newSelection(ss.Delegate.create(this, this._handleNewSelectionOrNewBrushing$1));
        }
        if (ss.isValue(this._brushingModel$1)) {
            this._brushingModel$1.remove_newSelection(ss.Delegate.create(this, this._handleNewSelectionOrNewBrushing$1));
        }
        tab.VisualListViewModel.callBaseMethod(this, 'dispose');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WorkbookViewModel

tab.WorkbookViewModel = function tab_WorkbookViewModel(workbookModel) {
    tab.WorkbookViewModel.initializeBase(this);
    this._workbookModel$1 = workbookModel;
    this._workbookModel$1.addNewDashboardHandler(ss.Delegate.create(this, this._handleNewDashboard$1));
    this._workbookModel$1.add_newWorkbook(ss.Delegate.create(this, this._handleNewWorkbook$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._workbookModel$1.remove_newWorkbook(ss.Delegate.create(this, this._handleNewWorkbook$1));
    })));
}
tab.WorkbookViewModel.prototype = {
    _workbookModel$1: null,
    _dashboardViewModel$1: null,
    
    add_newDashboard: function tab_WorkbookViewModel$add_newDashboard(value) {
        this.__newDashboard$1 = ss.Delegate.combine(this.__newDashboard$1, value);
    },
    remove_newDashboard: function tab_WorkbookViewModel$remove_newDashboard(value) {
        this.__newDashboard$1 = ss.Delegate.remove(this.__newDashboard$1, value);
    },
    
    __newDashboard$1: null,
    
    add_newWorkbook: function tab_WorkbookViewModel$add_newWorkbook(value) {
        this.__newWorkbook$1 = ss.Delegate.combine(this.__newWorkbook$1, value);
    },
    remove_newWorkbook: function tab_WorkbookViewModel$remove_newWorkbook(value) {
        this.__newWorkbook$1 = ss.Delegate.remove(this.__newWorkbook$1, value);
    },
    
    __newWorkbook$1: null,
    
    get_dashboardViewModel: function tab_WorkbookViewModel$get_dashboardViewModel() {
        return this._dashboardViewModel$1;
    },
    
    get_contentDashboardViewModel: function tab_WorkbookViewModel$get_contentDashboardViewModel() {
        if (!this._workbookModel$1.get_isCurrentSheetStoryboard()) {
            return this._dashboardViewModel$1;
        }
        var $dict1 = this._dashboardViewModel$1.get_zoneViewModels();
        for (var $key2 in $dict1) {
            var z = { key: $key2, value: $dict1[$key2] };
            if (z.value.get_zoneType() === 'flipboard') {
                return (z.value.get_zoneContentViewModel()).get_dashboardViewModel();
            }
        }
        return null;
    },
    
    get_dashboardContainerPosition: function tab_WorkbookViewModel$get_dashboardContainerPosition() {
        var contentBounds = tabBootstrap.ViewerBootstrap.get_instance().getWebClientContentSize();
        var tabsHeight = tabBootstrap.ViewerBootstrap.get_instance().get_tabsHeight();
        var bounds = tab.$create_Rect(0, tabsHeight, contentBounds.w, contentBounds.h);
        if (!this.get_toolbarIsBottom() && !tsConfig.is_authoring) {
            bounds.t += tabBootstrap.ViewerBootstrap.get_instance().toolbarHeight;
        }
        return bounds;
    },
    
    get_dashboardBackgroundColor: function tab_WorkbookViewModel$get_dashboardBackgroundColor() {
        return this.get_dashboardViewModel().get_backgroundColor();
    },
    
    get_toolbarIsBottom: function tab_WorkbookViewModel$get_toolbarIsBottom() {
        return ((tsConfig.isPublic || tsConfig.embedded) && !tsConfig.forceToolbarTop);
    },
    
    dispose: function tab_WorkbookViewModel$dispose() {
        if (ss.isValue(this._dashboardViewModel$1)) {
            this._dashboardViewModel$1.dispose();
        }
        this._workbookModel$1.remove_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$1));
        tab.WorkbookViewModel.callBaseMethod(this, 'dispose');
    },
    
    _handleNewDashboard$1: function tab_WorkbookViewModel$_handleNewDashboard$1(dashboardModel) {
        tab.Log.get(this).debug('New dashboard: %o', dashboardModel);
        if (ss.isValue(this._dashboardViewModel$1)) {
            this._dashboardViewModel$1.dispose();
        }
        this._dashboardViewModel$1 = new tab.DashboardViewModel(dashboardModel);
        this.raiseActionEvent(this.__newDashboard$1);
    },
    
    _handleNewWorkbook$1: function tab_WorkbookViewModel$_handleNewWorkbook$1() {
        this.raiseActionEvent(this.__newWorkbook$1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ZoneViewModel

tab.ZoneViewModel = function tab_ZoneViewModel(zoneModel, dashboardModel) {
    tab.ZoneViewModel.initializeBase(this);
    this._isValid$1 = true;
    this._zoneModel$1 = zoneModel;
    this._dashboardModel$1 = dashboardModel;
    this._zoneModel$1.add_updateZone(ss.Delegate.create(this, this._handleUpdateZone$1));
    this._zoneModel$1.add_resizeZone(ss.Delegate.create(this, this._handleResizeZone$1));
    this._zoneModel$1.add_newZoneContent(ss.Delegate.create(this, this._handleNewZoneContent$1));
    this._zoneModel$1.add_removeZoneContent(ss.Delegate.create(this, this._handleRemovedZoneContent$1));
    this._refreshVisualModelReference$1();
    this._refreshZoneValidState$1();
    if (ss.isValue(zoneModel) && ss.isValue(zoneModel.get_model())) {
        this._handleNewZoneContent$1(zoneModel.get_model());
    }
}
tab.ZoneViewModel.calculateZoneZIndex = function tab_ZoneViewModel$calculateZoneZIndex(zone) {
    return 10 + zone.get_relativeZoneZIndex();
}
tab.ZoneViewModel.prototype = {
    _zoneModel$1: null,
    _dashboardModel$1: null,
    _zoneContentViewModel$1: null,
    _vizModel$1: null,
    _isValid$1: false,
    _isActiveZone$1: false,
    
    add_updateZone: function tab_ZoneViewModel$add_updateZone(value) {
        this.__updateZone$1 = ss.Delegate.combine(this.__updateZone$1, value);
    },
    remove_updateZone: function tab_ZoneViewModel$remove_updateZone(value) {
        this.__updateZone$1 = ss.Delegate.remove(this.__updateZone$1, value);
    },
    
    __updateZone$1: null,
    
    add_resizeZone: function tab_ZoneViewModel$add_resizeZone(value) {
        this.__resizeZone$1 = ss.Delegate.combine(this.__resizeZone$1, value);
    },
    remove_resizeZone: function tab_ZoneViewModel$remove_resizeZone(value) {
        this.__resizeZone$1 = ss.Delegate.remove(this.__resizeZone$1, value);
    },
    
    __resizeZone$1: null,
    
    add_newZoneContent: function tab_ZoneViewModel$add_newZoneContent(value) {
        this.__newZoneContent$1 = ss.Delegate.combine(this.__newZoneContent$1, value);
    },
    remove_newZoneContent: function tab_ZoneViewModel$remove_newZoneContent(value) {
        this.__newZoneContent$1 = ss.Delegate.remove(this.__newZoneContent$1, value);
    },
    
    __newZoneContent$1: null,
    
    add_validStateChanged: function tab_ZoneViewModel$add_validStateChanged(value) {
        this.__validStateChanged$1 = ss.Delegate.combine(this.__validStateChanged$1, value);
    },
    remove_validStateChanged: function tab_ZoneViewModel$remove_validStateChanged(value) {
        this.__validStateChanged$1 = ss.Delegate.remove(this.__validStateChanged$1, value);
    },
    
    __validStateChanged$1: null,
    
    get_zoneContentViewModel: function tab_ZoneViewModel$get_zoneContentViewModel() {
        return this._zoneContentViewModel$1;
    },
    
    get_zoneType: function tab_ZoneViewModel$get_zoneType() {
        return this._zoneModel$1.get_zoneType();
    },
    
    get_height: function tab_ZoneViewModel$get_height() {
        return (this._zoneModel$1.get_height() - (2 * this._zoneModel$1.borderWidth()));
    },
    
    get_width: function tab_ZoneViewModel$get_width() {
        return (this._zoneModel$1.get_width() - (2 * this._zoneModel$1.borderWidth()));
    },
    
    get_x: function tab_ZoneViewModel$get_x() {
        return this._zoneModel$1.get_x();
    },
    
    get_y: function tab_ZoneViewModel$get_y() {
        return this._zoneModel$1.get_y();
    },
    
    get_model: function tab_ZoneViewModel$get_model() {
        return this._zoneModel$1;
    },
    
    get_titleSize: function tab_ZoneViewModel$get_titleSize() {
        return tab.$create_Size(this._zoneModel$1.get_zonePresModel().titleWidth, this._zoneModel$1.get_zonePresModel().titleHeight);
    },
    
    get_valid: function tab_ZoneViewModel$get_valid() {
        return this._isValid$1;
    },
    
    get_zoneZIndex: function tab_ZoneViewModel$get_zoneZIndex() {
        return tab.ZoneViewModel.calculateZoneZIndex(this._zoneModel$1);
    },
    
    get_zoneId: function tab_ZoneViewModel$get_zoneId() {
        return this._zoneModel$1.get_zoneId();
    },
    
    get_associatedSheet: function tab_ZoneViewModel$get_associatedSheet() {
        return this._zoneModel$1.get_associatedSheet();
    },
    
    get_backgroundColor: function tab_ZoneViewModel$get_backgroundColor() {
        var zoneBGColor;
        var transparentBackground = tab.FeatureParamsLookup.getBoolDefaultTrue(tab.FeatureParam.transparentBackground);
        if (ss.isValue(transparentBackground) && transparentBackground) {
            zoneBGColor = (this._zoneModel$1.get_backgroundColor() || 'rgba(0,0,0,0)');
        }
        else {
            if (ss.isValue(this._zoneModel$1.get_backgroundColor())) {
                zoneBGColor = tab.ColorModel.alphaCompositeSolidDest(tab.ColorModel.fromColorCode(this._zoneModel$1.get_backgroundColor()), tab.ColorModel.fromColorCode(this._dashboardModel$1.get_backgroundColor())).toRgb();
            }
            else {
                zoneBGColor = this._dashboardModel$1.get_backgroundColor();
            }
        }
        if ((this.get_zoneType() === 'shape') || (this.get_zoneType() === 'color') || (this.get_zoneType() === 'size') || (this.get_zoneType() === 'map')) {
            if ((!tab.ApplicationModel.get_instance().get_isLocalRenderMode()) || (Type.canCast(this._zoneContentViewModel$1, tab.LegacyLegendViewModel))) {
                return (this._zoneModel$1.get_backgroundColor() || zoneBGColor);
            }
        }
        return zoneBGColor;
    },
    
    get__isActiveZone: function tab_ZoneViewModel$get__isActiveZone() {
        return this._isActiveZone$1;
    },
    set__isActiveZone: function tab_ZoneViewModel$set__isActiveZone(value) {
        if (this._isActiveZone$1 !== value) {
            this._isActiveZone$1 = value;
            this.notifyPropertyChanged('isActiveZone');
        }
        return value;
    },
    
    dispose: function tab_ZoneViewModel$dispose() {
        if (ss.isValue(this._zoneContentViewModel$1)) {
            this._zoneContentViewModel$1.dispose();
            this._zoneContentViewModel$1 = null;
        }
        if (ss.isValue(this._vizModel$1)) {
            this._vizModel$1.remove_visualValidStateChanged(ss.Delegate.create(this, this._refreshZoneValidState$1));
        }
        this._zoneModel$1.remove_updateZone(ss.Delegate.create(this, this._handleUpdateZone$1));
        this._zoneModel$1.remove_resizeZone(ss.Delegate.create(this, this._handleResizeZone$1));
        this._zoneModel$1.remove_newZoneContent(ss.Delegate.create(this, this._handleNewZoneContent$1));
        this._zoneModel$1.remove_removeZoneContent(ss.Delegate.create(this, this._handleRemovedZoneContent$1));
        tab.ZoneViewModel.callBaseMethod(this, 'dispose');
    },
    
    _refreshVisualModelReference$1: function tab_ZoneViewModel$_refreshVisualModelReference$1() {
        var newVizModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), this._zoneModel$1.get_associatedSheet());
        if (this._vizModel$1 !== newVizModel) {
            if (ss.isValue(this._vizModel$1)) {
                this._vizModel$1.remove_visualValidStateChanged(ss.Delegate.create(this, this._refreshZoneValidState$1));
            }
            this._vizModel$1 = newVizModel;
            if (ss.isValue(this._vizModel$1)) {
                this._vizModel$1.add_visualValidStateChanged(ss.Delegate.create(this, this._refreshZoneValidState$1));
            }
        }
    },
    
    _handleUpdateZone$1: function tab_ZoneViewModel$_handleUpdateZone$1() {
        this._refreshVisualModelReference$1();
        this._refreshZoneValidState$1();
        this.raiseActionEvent(this.__updateZone$1);
    },
    
    _handleResizeZone$1: function tab_ZoneViewModel$_handleResizeZone$1() {
        this.raiseActionEvent(this.__resizeZone$1);
    },
    
    _refreshZoneValidState$1: function tab_ZoneViewModel$_refreshZoneValidState$1() {
        var newValid = true;
        if (this._zoneModel$1.get_isDependentOnViz() && ss.isValue(this._vizModel$1)) {
            newValid = this._vizModel$1.get_isVisualValid();
        }
        if (newValid !== this._isValid$1) {
            this._isValid$1 = newValid;
            this.raiseActionEvent(this.__validStateChanged$1);
        }
    },
    
    forceZoneValidState: function tab_ZoneViewModel$forceZoneValidState(forcedState) {
        if (forcedState !== this._isValid$1) {
            this._isValid$1 = forcedState;
            this.raiseActionEvent(this.__validStateChanged$1);
        }
    },
    
    _handleNewZoneContent$1: function tab_ZoneViewModel$_handleNewZoneContent$1(zoneContentModel) {
        var zoneType = this._zoneModel$1.get_zoneType();
        ss.Debug.assert(this._zoneContentViewModel$1 == null, "There shouldn't be a view model before here");
        var worksheetName = this._zoneModel$1.get_worksheetName();
        switch (zoneType) {
            case 'title':
            case 'text':
                this._zoneContentViewModel$1 = new tab.TextRegionViewModel(zoneContentModel);
                break;
            case 'color':
            case 'size':
            case 'shape':
            case 'map':
                if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
                    if (Type.canCast(zoneContentModel, tab.CategoricalLegendModel)) {
                        this._zoneContentViewModel$1 = new tab.CategoricalLegendViewModel(zoneContentModel, zoneType, worksheetName, this);
                    }
                    else if (Type.canCast(zoneContentModel, tab.QuantitativeColorLegendModel)) {
                        this._zoneContentViewModel$1 = new tab.QuantitativeColorLegendViewModel(zoneContentModel, worksheetName, this);
                    }
                }
                else {
                    this._zoneContentViewModel$1 = new tab.LegacyLegendViewModel(zoneContentModel, worksheetName, this);
                }
                break;
            case 'current-page':
                this._zoneContentViewModel$1 = new tab.PageViewModel(zoneContentModel);
                break;
            case 'web':
                this._zoneContentViewModel$1 = new tab.WebZoneViewModel(zoneContentModel);
                break;
            case 'bitmap':
                this._zoneContentViewModel$1 = new tab.ImageZoneViewModel(zoneContentModel);
                break;
            case 'flipboard-nav':
                this._zoneContentViewModel$1 = new tab.FlipboardNavigatorViewModel(zoneContentModel);
                break;
            case 'flipboard':
                this._zoneContentViewModel$1 = new tab.FlipboardViewModel(zoneContentModel, this);
                break;
            case 'filter':
                var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), worksheetName);
                var quickFilterDisplayModel = zoneContentModel;
                var filterModel = tab.ModelUtils.findMatchingFilterModel(visualModel, quickFilterDisplayModel);
                if (ss.isValue(filterModel)) {
                    this._zoneContentViewModel$1 = new tab.QuickFilterDisplayViewModel(quickFilterDisplayModel, filterModel);
                }
                else {
                    try {
                        tab.Log.get(this).debug(String.format('Invalid filter on dashboard. Worksheet: {0} param: {1}', worksheetName, quickFilterDisplayModel.get_frame().param.toString()));
                    }
                    catch ($e1) {
                    }
                    return;
                }
                break;
            case 'paramctrl':
                this._zoneContentViewModel$1 = new tab.ParameterControlViewModel(zoneContentModel);
                break;
            case 'viz':
                var sheetId = this._zoneModel$1.get_associatedSheet();
                this._zoneContentViewModel$1 = new tab.PaneTableViewModel(zoneContentModel, sheetId);
                break;
            case 'layout-basic':
                return;
            default:
                tab.Log.get(this).warn('Unknown zone type: %s', zoneType);
                return;
        }
        ss.Debug.assert(this._zoneContentViewModel$1 != null, 'The view model should now be set.');
        this._raiseNewZoneContent$1(this._zoneContentViewModel$1);
    },
    
    _handleRemovedZoneContent$1: function tab_ZoneViewModel$_handleRemovedZoneContent$1() {
        this.dispose();
    },
    
    _raiseNewZoneContent$1: function tab_ZoneViewModel$_raiseNewZoneContent$1(newZoneContentViewModel) {
        if (ss.isValue(this.__newZoneContent$1)) {
            this.__newZoneContent$1(newZoneContentViewModel);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ContinuousSliderViewModel

tab.ContinuousSliderViewModel = function tab_ContinuousSliderViewModel(rangeModel) {
    tab.ContinuousSliderViewModel.initializeBase(this);
    this._rangeModel$1 = rangeModel;
    this._currentFraction$1 = rangeModel.getCurrentFraction();
    this._rangeModel$1.add_sliderFractionUpdated(ss.Delegate.create(this, this._currentFractionUpdated$1));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._rangeModel$1.remove_sliderFractionUpdated(ss.Delegate.create(this, this._currentFractionUpdated$1));
    })));
    this._pixelWidth$1 = 200;
}
tab.ContinuousSliderViewModel.prototype = {
    _rangeModel$1: null,
    _currentFraction$1: 0,
    _intermediateFraction$1: 0,
    _pixelWidth$1: 0,
    _ruleTickCount$1: 0,
    _sliderClassName$1: '',
    
    add_intermediateChange: function tab_ContinuousSliderViewModel$add_intermediateChange(value) {
        this.__intermediateChange$1 = ss.Delegate.combine(this.__intermediateChange$1, value);
    },
    remove_intermediateChange: function tab_ContinuousSliderViewModel$remove_intermediateChange(value) {
        this.__intermediateChange$1 = ss.Delegate.remove(this.__intermediateChange$1, value);
    },
    
    __intermediateChange$1: null,
    
    add_sliderValueChange: function tab_ContinuousSliderViewModel$add_sliderValueChange(value) {
        this.__sliderValueChange$1 = ss.Delegate.combine(this.__sliderValueChange$1, value);
    },
    remove_sliderValueChange: function tab_ContinuousSliderViewModel$remove_sliderValueChange(value) {
        this.__sliderValueChange$1 = ss.Delegate.remove(this.__sliderValueChange$1, value);
    },
    
    __sliderValueChange$1: null,
    
    get_sliderClassName: function tab_ContinuousSliderViewModel$get_sliderClassName() {
        return this._sliderClassName$1;
    },
    set_sliderClassName: function tab_ContinuousSliderViewModel$set_sliderClassName(value) {
        this._sliderClassName$1 = value;
        return value;
    },
    
    get_pixelWidth: function tab_ContinuousSliderViewModel$get_pixelWidth() {
        return this._pixelWidth$1;
    },
    set_pixelWidth: function tab_ContinuousSliderViewModel$set_pixelWidth(value) {
        this._pixelWidth$1 = value;
        return value;
    },
    
    get_ruleTickCount: function tab_ContinuousSliderViewModel$get_ruleTickCount() {
        return this._ruleTickCount$1;
    },
    set_ruleTickCount: function tab_ContinuousSliderViewModel$set_ruleTickCount(value) {
        this._ruleTickCount$1 = value;
        return value;
    },
    
    get_currentFraction: function tab_ContinuousSliderViewModel$get_currentFraction() {
        return this._currentFraction$1;
    },
    set_currentFraction: function tab_ContinuousSliderViewModel$set_currentFraction(value) {
        var precision = Math.ceil(Math.log(1000) / Math.LN10);
        var roundedCurrentFraction = this._currentFraction$1.toFixed(precision);
        var roundedNewFraction = value.toFixed(precision);
        if (roundedCurrentFraction !== roundedNewFraction) {
            this._currentFraction$1 = value;
            this.__sliderValueChange$1(this._currentFraction$1);
        }
        return value;
    },
    
    get_sliderIntermediateValue: function tab_ContinuousSliderViewModel$get_sliderIntermediateValue() {
        return this._intermediateFraction$1 * 1000;
    },
    
    get_sliderCurrentValue: function tab_ContinuousSliderViewModel$get_sliderCurrentValue() {
        return this.get_currentFraction() * 1000;
    },
    set_sliderCurrentValue: function tab_ContinuousSliderViewModel$set_sliderCurrentValue(value) {
        this.set_currentFraction(value / 1000);
        return value;
    },
    
    get_sliderMinimumValue: function tab_ContinuousSliderViewModel$get_sliderMinimumValue() {
        return 0;
    },
    
    get_sliderMaximumValue: function tab_ContinuousSliderViewModel$get_sliderMaximumValue() {
        return 1000;
    },
    
    get_rangeModel: function tab_ContinuousSliderViewModel$get_rangeModel() {
        return this._rangeModel$1;
    },
    
    applyIntermediateChange: function tab_ContinuousSliderViewModel$applyIntermediateChange(value) {
        this._intermediateFraction$1 = value / 1000;
        if (ss.isValue(this.__intermediateChange$1)) {
            this.__intermediateChange$1(this._intermediateFraction$1);
        }
    },
    
    _currentFractionUpdated$1: function tab_ContinuousSliderViewModel$_currentFractionUpdated$1(newValue) {
        this.set_currentFraction(newValue);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.AccordionView

tab.AccordionView = function tab_AccordionView(viewModel, t) {
    this._contentViews$2 = [];
    this._clickHandlers$2 = [];
    tab.AccordionView.initializeBase(this, [ viewModel, t ]);
    this._viewModel$2 = viewModel;
    this._t$2 = t;
    this.update();
}
tab.AccordionView.prototype = {
    _viewModel$2: null,
    _t$2: null,
    
    dispose: function tab_AccordionView$dispose() {
        this.removeViews();
        tab.AccordionView.callBaseMethod(this, 'dispose');
    },
    
    onViewModelPropertyChanged: function tab_AccordionView$onViewModelPropertyChanged(sender, e) {
        tab.AccordionView.callBaseMethod(this, 'onViewModelPropertyChanged', [ sender, e ]);
        switch (e.get_propertyName()) {
            case 'AllItems':
                this.update();
                break;
            case 'ActiveItem':
                this._activeItemChanged$2(this._viewModel$2.get_activeItem());
                break;
        }
    },
    
    onAddedToDom: function tab_AccordionView$onAddedToDom() {
        tab.AccordionView.callBaseMethod(this, 'onAddedToDom');
        this._notifyChildrenAddedToDom$2();
    },
    
    _notifyChildrenAddedToDom$2: function tab_AccordionView$_notifyChildrenAddedToDom$2() {
        if (!this.get_addedToDom()) {
            return;
        }
        this._contentViews$2.forEach(function(view) {
            var w = Type.safeCast(view, spiff.Widget);
            if (ss.isValue(w)) {
                w.onAddedToDom();
            }
        });
    },
    
    removeViews: function tab_AccordionView$removeViews() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._contentViews$2);
        while ($enum1.moveNext()) {
            var w = $enum1.current;
            w.dispose();
        }
        this._contentViews$2.clear();
        this._t$2.itemsContainer.children().remove();
        this._disposeClickHandlers$2();
    },
    
    _disposeClickHandlers$2: function tab_AccordionView$_disposeClickHandlers$2() {
        this._clickHandlers$2.forEach(function(handler) {
            handler.dispose();
        });
        this._clickHandlers$2.clear();
    },
    
    update: function tab_AccordionView$update() {
        this.removeViews();
        var $enum1 = ss.IEnumerator.getEnumerator(this._viewModel$2.get_items());
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            var itemTemplate = tab.AccordionItemTemplate.createDefault();
            this._clickHandlers$2.add(spiff.TableauClickHandler.targetAndClick(itemTemplate.header[0], this._createItemClickHandler$2(item)));
            itemTemplate.get_domRoot().data('tabAccordionItem', item);
            itemTemplate.title.text(item.get_title());
            itemTemplate.title.attr('title', item.get_title());
            if (ss.isValue(item.get_iconClass())) {
                itemTemplate.icon.addClass(item.get_iconClass());
            }
            if (ss.isValue(item.get_iconClassTwo())) {
                itemTemplate.iconTwo.addClass(item.get_iconClassTwo());
            }
            itemTemplate.content.hide();
            var contentView = spiff.ObjectRegistry.newView(item.get_content().get_viewType(), item.get_content().get_viewModel());
            this._contentViews$2.add(contentView);
            itemTemplate.content.append(contentView.get_element());
            this._t$2.itemsContainer.append(itemTemplate.get_domRoot());
            spiff.DragDropManager.attachDropTarget(itemTemplate.header, this._viewModel$2.createItemDropTarget(item));
        }
        if (ss.isValue(this._viewModel$2.get_activeItem())) {
            this._activeItemChanged$2(this._viewModel$2.get_activeItem());
        }
        this._notifyChildrenAddedToDom$2();
    },
    
    _createItemClickHandler$2: function tab_AccordionView$_createItemClickHandler$2(item) {
        return ss.Delegate.create(this, function() {
            this._viewModel$2.set_activeItem(item);
        });
    },
    
    _activeItemChanged$2: function tab_AccordionView$_activeItemChanged$2(selected) {
        var animate = this._t$2.get_domRoot().find('.tabAccordionActive').length > 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._t$2.get_allItems().get());
        while ($enum1.moveNext()) {
            var e = $enum1.current;
            var obj = $(e);
            var itemTemplate = new tab.AccordionItemTemplate(obj);
            var active = obj.data('tabAccordionItem') === selected;
            itemTemplate.get_domRoot().toggleClass('tabAccordionActive', active);
            itemTemplate.get_domRoot().toggleClass('tabAccordionNotActive', !active);
            if (active) {
                if (animate) {
                    itemTemplate.content.slideDown('fast');
                }
                else {
                    itemTemplate.content.show();
                }
            }
            else if (itemTemplate.content.is(':visible')) {
                if (animate) {
                    itemTemplate.content.slideUp('fast');
                }
                else {
                    itemTemplate.content.hide();
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.AccordionTemplate

tab.AccordionTemplate = function tab_AccordionTemplate() {
    tab.AccordionTemplate.initializeBase(this, [ $("<div class='tabAccordion'><div class='tabAccordionItems'/></div>") ]);
    this.itemsContainer = this.getElementBySelector('.tabAccordionItems');
}
tab.AccordionTemplate.prototype = {
    itemsContainer: null,
    
    get_allItems: function tab_AccordionTemplate$get_allItems() {
        return this.getElementsBySelector('.tabAccordionItem');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.AccordionItemTemplate

tab.AccordionItemTemplate = function tab_AccordionItemTemplate(root) {
    tab.AccordionItemTemplate.initializeBase(this, [ root ]);
    this.title = this.getElementBySelector('.tabAccordionItemTitle');
    this.content = this.getElementBySelector('.tabAccordionItemContent');
    this.icon = this.getElementBySelector('.tabAccordionItemIcon');
    this.iconTwo = this.getElementBySelector('.tabAccordionItemIconTwo');
    this.header = this.getElementBySelector('.tabAccordionItemHeader');
}
tab.AccordionItemTemplate.createDefault = function tab_AccordionItemTemplate$createDefault() {
    return new tab.AccordionItemTemplate($("<div class='tabAccordionItem'>\n        <div class='tabAccordionItemHeader'><span class='tabAccordionItemTitle'/><span class='tabAccordionItemIconTwo'/><div class='tabAccordionItemIcon'/></div>\n        <div class='tabAccordionItemContent'/>\n        </div>"));
}
tab.AccordionItemTemplate.prototype = {
    title: null,
    content: null,
    icon: null,
    iconTwo: null,
    header: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.AccordionViewModel

tab.AccordionViewModel = function tab_AccordionViewModel() {
    this._items$1 = [];
    tab.AccordionViewModel.initializeBase(this);
}
tab.AccordionViewModel.prototype = {
    _activeItem$1: null,
    _allowDragOverExpand$1: false,
    
    get_allowDragOverExpand: function tab_AccordionViewModel$get_allowDragOverExpand() {
        return this._allowDragOverExpand$1;
    },
    set_allowDragOverExpand: function tab_AccordionViewModel$set_allowDragOverExpand(value) {
        this._allowDragOverExpand$1 = value;
        return value;
    },
    
    get_items: function tab_AccordionViewModel$get_items() {
        return this._items$1;
    },
    
    get_activeItem: function tab_AccordionViewModel$get_activeItem() {
        return this._activeItem$1;
    },
    set_activeItem: function tab_AccordionViewModel$set_activeItem(value) {
        if (this._activeItem$1 === value) {
            return;
        }
        if (ss.isValue(this._activeItem$1) && ss.isValue(this._activeItem$1.get_content())) {
            this._activeItem$1.get_content().set_active(false);
        }
        this._activeItem$1 = value;
        if (ss.isValue(this._activeItem$1) && ss.isValue(this._activeItem$1.get_content())) {
            this._activeItem$1.get_content().set_active(true);
        }
        this.notifyPropertyChanged('ActiveItem');
        return value;
    },
    
    updateItems: function tab_AccordionViewModel$updateItems(newItems) {
        this._items$1.clear();
        this._items$1.addRange(newItems);
        if (!this._items$1.contains(this._activeItem$1)) {
            this.set_activeItem(null);
        }
        this.notifyPropertyChanged('AllItems');
    },
    
    createItemDropTarget: function tab_AccordionViewModel$createItemDropTarget(item) {
        if (this.get_allowDragOverExpand()) {
            return new tab._accordionItemDropTarget(item, this);
        }
        return null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.AccordionItem

tab.AccordionItem = function tab_AccordionItem(title, iconClass, content) {
    this._title = title;
    this._iconClass = iconClass;
    this._iconClassTwo = null;
    this._content = content;
}
tab.AccordionItem.prototype = {
    _title: null,
    _iconClass: null,
    _iconClassTwo: null,
    _content: null,
    
    get_title: function tab_AccordionItem$get_title() {
        return this._title;
    },
    set_title: function tab_AccordionItem$set_title(value) {
        this._title = value;
        return value;
    },
    
    get_iconClass: function tab_AccordionItem$get_iconClass() {
        return this._iconClass;
    },
    set_iconClass: function tab_AccordionItem$set_iconClass(value) {
        this._iconClass = value;
        return value;
    },
    
    get_iconClassTwo: function tab_AccordionItem$get_iconClassTwo() {
        return this._iconClassTwo;
    },
    set_iconClassTwo: function tab_AccordionItem$set_iconClassTwo(value) {
        this._iconClassTwo = value;
        return value;
    },
    
    get_content: function tab_AccordionItem$get_content() {
        return this._content;
    },
    set_content: function tab_AccordionItem$set_content(value) {
        this._content = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._accordionItemDropTarget

tab._accordionItemDropTarget = function tab__accordionItemDropTarget(item, viewModel) {
    this._item = item;
    this._viewModel = viewModel;
}
tab._accordionItemDropTarget.prototype = {
    _item: null,
    _viewModel: null,
    _timerId: 0,
    
    get_feedbackType: function tab__accordionItemDropTarget$get_feedbackType() {
        return 'dropfeedbackuponentry';
    },
    
    dragOver: function tab__accordionItemDropTarget$dragOver(d) {
        this._timerId = window.setTimeout(ss.Delegate.create(this, this._expandItem), 800);
        return this;
    },
    
    acceptDrop: function tab__accordionItemDropTarget$acceptDrop(d) {
        var result = $.DeferredData();
        result.resolve(false);
        return result;
    },
    
    getDropTarget: function tab__accordionItemDropTarget$getDropTarget(hit) {
        return this;
    },
    
    dragExit: function tab__accordionItemDropTarget$dragExit(d) {
        window.clearTimeout(this._timerId);
    },
    
    _expandItem: function tab__accordionItemDropTarget$_expandItem() {
        this._viewModel.set_activeItem(this._item);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DownloadView

tab.DownloadView = function tab_DownloadView(viewModel) {
    tab.DownloadView.initializeBase(this, [ viewModel, new tab.DownloadTemplate() ]);
    this._downloadViewModel$2 = viewModel;
    this._isNarrow$2 = window.innerWidth < 715;
    if (this._isNarrow$2) {
        this.get_dom().downloadArea.addClass('tab-narrowDownloadView');
    }
    this._buildDownloadContent$2();
}
tab.DownloadView.prototype = {
    _downloadViewModel$2: null,
    _isNarrow$2: false,
    
    get_dom: function tab_DownloadView$get_dom() {
        return this.get_template();
    },
    
    get__toolbarPublicDownloadLabel$2: function tab_DownloadView$get__toolbarPublicDownloadLabel$2() {
        return (tsConfig.is_mobile) ? tab.Strings.ToolbarPublicDownloadLabelMobile : tab.Strings.ToolbarPublicDownloadLabelWeb;
    },
    
    onAddedToDom: function tab_DownloadView$onAddedToDom() {
        tab.DownloadView.callBaseMethod(this, 'onAddedToDom');
        this.get_dom().downloadArea.find('.tabMenuItem.tabDisabled').prop('title', tab.Strings.ToolbarDisabledDownloadExplanation);
    },
    
    _buildMenuItems$2: function tab_DownloadView$_buildMenuItems$2() {
        var downloadItemsList = [];
        var exportData = (this._downloadViewModel$2.get_exportDataEnabled()) ? ss.Delegate.create(this._downloadViewModel$2, this._downloadViewModel$2.exportData) : null;
        downloadItemsList.add(spiff.MenuItem.newActionItemWithItemClass(tab.Strings.ToolbarExportData, exportData, 'tabDownloadData'));
        var exportCrosstab = (this._downloadViewModel$2.get_exportCrosstabEnabled()) ? ss.Delegate.create(this._downloadViewModel$2, this._downloadViewModel$2.exportCrosstab) : null;
        downloadItemsList.add(spiff.MenuItem.newActionItemWithItemClass(tab.Strings.ToolbarExportCrosstab, exportCrosstab, 'tabDownloadCrosstab'));
        if (this._downloadViewModel$2.get_shouldShowImage()) {
            downloadItemsList.add(spiff.MenuItem.newActionItemWithItemClass(tab.Strings.ToolbarExportImage, ss.Delegate.create(this._downloadViewModel$2, this._downloadViewModel$2.exportImage), 'tabDownloadImage'));
        }
        if (this._downloadViewModel$2.get_shouldShowPdf()) {
            downloadItemsList.add(spiff.MenuItem.newActionItemWithItemClass(tab.Strings.ToolbarPrintToPdf, ss.Delegate.create(this._downloadViewModel$2, this._downloadViewModel$2.exportPdf), 'tabDownloadPdf'));
        }
        if (this._downloadViewModel$2.get_shouldShowDownloadWorkbook()) {
            var downloadWorkbook = (this._downloadViewModel$2.get_downloadWorkbookEnabled()) ? ss.Delegate.create(this._downloadViewModel$2, this._downloadViewModel$2.downloadWorkbook) : null;
            downloadItemsList.add(spiff.MenuItem.newActionItemWithItemClass(tab.Strings.ToolbarWorkbook, downloadWorkbook, 'tabDownloadWorkbook'));
        }
        if (this._isNarrow$2 && tsConfig.isPublic) {
            downloadItemsList.add(spiff.MenuItem.newActionItemWithItemClass(this.get__toolbarPublicDownloadLabel$2(), ss.Delegate.create(this, this._openDownloadAppUrl$2), 'tabPublicApp'));
        }
        if (this._downloadViewModel$2.get_toolbarIsBottom()) {
            downloadItemsList.reverse();
        }
        return downloadItemsList;
    },
    
    _getMenuTheme$2: function tab_DownloadView$_getMenuTheme$2() {
        if (tsConfig.isPublic) {
            return new spiff.UnificationDarkMenuTheme();
        }
        else {
            return new spiff.UnificationLightMenuTheme();
        }
    },
    
    _openDownloadAppUrl$2: function tab_DownloadView$_openDownloadAppUrl$2() {
        window.open(this._downloadViewModel$2.get_downloadAppUrl());
    },
    
    _buildPublicExplanationArea$2: function tab_DownloadView$_buildPublicExplanationArea$2() {
        this.get_dom().explanationTitle.append(tab.Strings.ToolbarPublicExplanationTitle);
        this.get_dom().explanationBody.append(tab.Strings.ToolbarPublicExplanationText);
        var windows = '<span class=tabWindowsLogo />';
        var mac = '<span class=tabAppleLogo />';
        this.get_dom().availablePlatforms.append(tab.Strings.ToolbarPublicAvailablePlatforms(windows, mac));
        var downloadApp = spiff.LabelButton.newTextButton();
        downloadApp.set_label(this.get__toolbarPublicDownloadLabel$2());
        downloadApp.add_click(ss.Delegate.create(this, this._openDownloadAppUrl$2));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            downloadApp.remove_click(ss.Delegate.create(this, this._openDownloadAppUrl$2));
        })));
        this.get_dom().downloadAppButton.append(downloadApp.get_element());
    },
    
    _buildDownloadContent$2: function tab_DownloadView$_buildDownloadContent$2() {
        var downloadItems = new spiff.Menu(this._buildMenuItems$2());
        var downloadItemsViewModel = spiff.MenuViewModel.createForMenu(downloadItems, null, this._getMenuTheme$2());
        downloadItemsViewModel.add_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
        this.disposables.add(new tab.CallOnDispose(function() {
            downloadItemsViewModel.remove_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
        }));
        var downloadItemsView = spiff.ObjectRegistry.newView(spiff.MenuView, downloadItemsViewModel);
        this.get_dom().menuArea.append(downloadItemsView.get_element());
        if (!this._isNarrow$2 && tsConfig.isPublic) {
            this._buildPublicExplanationArea$2();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DownloadTemplate

tab.DownloadTemplate = function tab_DownloadTemplate() {
    tab.DownloadTemplate.initializeBase(this, [ $(tab.DownloadTemplate._htmlTemplate$1) ]);
    this.downloadArea = this.get_domRoot();
    this.menuArea = this.getElementBySelector('.tab-downloadButtons');
    this.applicationArea = this.getElementBySelector('.tab-downloadApplication');
    this.explanationTitle = this.getElementBySelector('.tab-explanationTitle');
    this.explanationBody = this.getElementBySelector('.tab-explanationBody');
    this.actionArea = this.getElementBySelector('.tab-downloadAction');
    this.availablePlatforms = this.getElementBySelector('.tab-availablePlatforms');
    this.downloadAppButton = this.getElementBySelector('.tab-downloadAppButton');
    if (tsConfig.is_mobile) {
        this.downloadArea.addClass('tab-mobileDownloadView');
    }
}
tab.DownloadTemplate.prototype = {
    downloadArea: null,
    menuArea: null,
    applicationArea: null,
    explanationTitle: null,
    explanationBody: null,
    actionArea: null,
    availablePlatforms: null,
    downloadAppButton: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ReferenceLineConstantValueEditorView

tab.ReferenceLineConstantValueEditorView = function tab_ReferenceLineConstantValueEditorView(viewModel, offsetPoint) {
    tab.ReferenceLineConstantValueEditorView.initializeBase(this, [ viewModel, new tab._referenceLineConstantValueEditorTemplate() ]);
    this._initDom$2(offsetPoint);
    tab.CommandController.get().add_postRemoteCommand(ss.Delegate.create(this, this.dispose));
}
tab.ReferenceLineConstantValueEditorView.prototype = {
    _buttonOk$2: null,
    _glass$2: null,
    
    get__editorViewModel$2: function tab_ReferenceLineConstantValueEditorView$get__editorViewModel$2() {
        return this.get_viewModel();
    },
    
    get__dom$2: function tab_ReferenceLineConstantValueEditorView$get__dom$2() {
        return this.get_template();
    },
    
    _applyRefLineValueAndClose$2: function tab_ReferenceLineConstantValueEditorView$_applyRefLineValueAndClose$2() {
        var currentValue = this.get__dom$2().textInput.val();
        if (currentValue !== this.get__editorViewModel$2().get_constantValue()) {
            tab.PaneClientCommands.setReferenceLineConstantValue(currentValue, this.get__editorViewModel$2().get_refLineId());
        }
        this._close$2();
    },
    
    _handleGlassClick$2: function tab_ReferenceLineConstantValueEditorView$_handleGlassClick$2() {
        this._applyRefLineValueAndClose$2();
    },
    
    _initDom$2: function tab_ReferenceLineConstantValueEditorView$_initDom$2(offsetPoint) {
        this.get__dom$2().textInput.attr('tabindex', '1');
        this.get__dom$2().textInput.attr('value', this.get__editorViewModel$2().get_constantValue());
        this._buttonOk$2 = spiff.StyledTextButton.createPrimaryButton(ss.Delegate.create(this, this._applyRefLineValueAndClose$2), tab.Strings.DialogButtonOK, 'refLineConstantValueEditorButton', spiff.ButtonSize.medium, 2);
        this._buttonOk$2.addToDom(this.get_element());
        this.disposables.add(this._buttonOk$2);
        this.get_element().css({ position: 'absolute', top: (offsetPoint.y + 13) + 'px', left: (offsetPoint.x + 11) + 'px', 'text-align': 'left' });
        this.disposables.add(spiff.EventUtil.bindWithDispose(this.get_element(), 'keydown', ss.Delegate.create(this, this._onKeyDown$2)));
    },
    
    _close$2: function tab_ReferenceLineConstantValueEditorView$_close$2() {
        this.get__editorViewModel$2().dispose();
    },
    
    _onKeyDown$2: function tab_ReferenceLineConstantValueEditorView$_onKeyDown$2(e) {
        switch (e.which) {
            case 27:
                this._close$2();
                break;
            case 108:
            case 13:
                this._applyRefLineValueAndClose$2();
                break;
        }
    },
    
    onAddedToDom: function tab_ReferenceLineConstantValueEditorView$onAddedToDom() {
        this.get__dom$2().textInput.focus();
        tab.DomUtil.selectAllInputText(this.get__dom$2().textInput);
        this._showGlass$2();
        tab.ReferenceLineConstantValueEditorView.callBaseMethod(this, 'onAddedToDom');
    },
    
    _showGlass$2: function tab_ReferenceLineConstantValueEditorView$_showGlass$2() {
        if (ss.isNullOrUndefined(this._glass$2)) {
            this._glass$2 = new spiff.Glass();
            this._glass$2.set_zIndex(988);
            this._glass$2.add_click(ss.Delegate.create(this, this._handleGlassClick$2));
        }
        this._glass$2.show();
    },
    
    _removeGlass$2: function tab_ReferenceLineConstantValueEditorView$_removeGlass$2() {
        if (ss.isValue(this._glass$2)) {
            this._glass$2.remove_click(ss.Delegate.create(this, this._handleGlassClick$2));
            this._glass$2.dispose();
            this._glass$2 = null;
        }
    },
    
    dispose: function tab_ReferenceLineConstantValueEditorView$dispose() {
        this.get_element().remove();
        this._removeGlass$2();
        tab.CommandController.get().remove_postRemoteCommand(ss.Delegate.create(this, this.dispose));
        tab.ReferenceLineConstantValueEditorView.callBaseMethod(this, 'dispose');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._referenceLineConstantValueEditorTemplate

tab._referenceLineConstantValueEditorTemplate = function tab__referenceLineConstantValueEditorTemplate() {
    tab._referenceLineConstantValueEditorTemplate.initializeBase(this, [ $(tab._referenceLineConstantValueEditorTemplate._htmlTemplate$1) ]);
    this.textInput = this.getElementBySelector('.refLineConstantValueEditorInput');
    this.getElementBySelector('.refLineConstantValueEditorTitle').text(tab.Strings.RefLineEditorInputTitle);
}
tab._referenceLineConstantValueEditorTemplate.prototype = {
    textInput: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarButtonView

tab.ToolbarButtonView = function tab_ToolbarButtonView(viewModel) {
    tab.ToolbarButtonView.initializeBase(this, [ viewModel, new tab.ToolbarButtonTemplate() ]);
    this._viewModel$2 = viewModel;
    this._viewModel$2.add_flyoverShown(ss.Delegate.create(this, this._onFlyoverShown$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_flyoverShown(ss.Delegate.create(this, this._onFlyoverShown$2));
    })));
    this._viewModel$2.add_flyoverHidden(ss.Delegate.create(this, this._onFlyoverHidden$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_flyoverHidden(ss.Delegate.create(this, this._onFlyoverHidden$2));
    })));
    this._setupButton$2();
    this._syncToModel$2();
}
tab.ToolbarButtonView.create = function tab_ToolbarButtonView$create(viewModel) {
    return new tab.ToolbarButtonView(viewModel);
}
tab.ToolbarButtonView.prototype = {
    _viewModel$2: null,
    _button$2: null,
    
    get_dom: function tab_ToolbarButtonView$get_dom() {
        return this.get_template();
    },
    
    get_toolbarButton: function tab_ToolbarButtonView$get_toolbarButton() {
        return this._button$2;
    },
    
    _setupButton$2: function tab_ToolbarButtonView$_setupButton$2() {
        this._button$2 = new spiff.LabelButton(this.get_dom().get_domRoot(), '.tabToolbarButton');
        this._button$2.add_click(ss.Delegate.create(this._viewModel$2, this._viewModel$2.execute));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._button$2.remove_click(ss.Delegate.create(this._viewModel$2, this._viewModel$2.execute));
        })));
        this._button$2.add_click(ss.Delegate.create(this, this._showPopup$2));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._button$2.remove_enter(ss.Delegate.create(this, this._showPopup$2));
        })));
        this.setStateCss();
        this.get_dom().get_text().text(this._viewModel$2.get_text());
        if (ss.isValue(this._viewModel$2.get_iconText())) {
            this.get_dom().get_image().text(this._viewModel$2.get_iconText());
        }
    },
    
    onViewModelPropertyChanged: function tab_ToolbarButtonView$onViewModelPropertyChanged(sender, e) {
        this._syncToModel$2();
    },
    
    setStateCss: function tab_ToolbarButtonView$setStateCss() {
        this._button$2.get_element().toggleClass('tabActive', this._viewModel$2.get_isActive());
        return this.get_dom().setImageClass((this._viewModel$2.get_isActive()) ? this._viewModel$2.get_iconClass() + '-active' : this._viewModel$2.get_iconClass());
    },
    
    _syncToModel$2: function tab_ToolbarButtonView$_syncToModel$2() {
        this._button$2.set_disabled(!this._viewModel$2.get_enabled());
        this.setStateCss();
        if (!tab.BrowserSupport.get_displayInlineBlock()) {
            this._explicitlySizeButton$2();
        }
    },
    
    _explicitlySizeButton$2: function tab_ToolbarButtonView$_explicitlySizeButton$2() {
        _.defer(ss.Delegate.create(this, function() {
            var buttonWidth = this.get_dom().get_text().outerWidth(true);
            if (buttonWidth > this.get_toolbarButton().get_element().innerWidth()) {
                this.get_toolbarButton().get_element().width(buttonWidth + 6);
            }
        }));
    },
    
    _showPopup$2: function tab_ToolbarButtonView$_showPopup$2() {
        this._viewModel$2.showUberPopup(this._button$2.get_element());
    },
    
    _onFlyoverShown$2: function tab_ToolbarButtonView$_onFlyoverShown$2(showOptions) {
        this._button$2.get_element().addClass('tabToolbarButtonFlyoverShown');
    },
    
    _onFlyoverHidden$2: function tab_ToolbarButtonView$_onFlyoverHidden$2() {
        this._button$2.get_element().removeClass('tabToolbarButtonFlyoverShown');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarButtonTemplate

tab.ToolbarButtonTemplate = function tab_ToolbarButtonTemplate() {
    tab.ToolbarButtonTemplate.initializeBase(this, [ $(tab.ToolbarButtonTemplate._htmlTemplate$1) ]);
    this._image$1 = this.getElementBySelector('.' + 'tabToolbarButtonImg');
    this._text$1 = this.getElementBySelector('.tabToolbarButtonText');
}
tab.ToolbarButtonTemplate.prototype = {
    _image$1: null,
    _text$1: null,
    
    get_image: function tab_ToolbarButtonTemplate$get_image() {
        return this._image$1;
    },
    
    get_text: function tab_ToolbarButtonTemplate$get_text() {
        return this._text$1;
    },
    
    setImageClass: function tab_ToolbarButtonTemplate$setImageClass(className) {
        this.get_image()[0].className = 'tabToolbarButtonImg' + ' ' + className;
        return 'tabToolbarButtonImg' + ' ' + className;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WorkbookView

tab.WorkbookView = function tab_WorkbookView(viewModel) {
    tab.WorkbookView.initializeBase(this, [ viewModel, new tab.WorkbookTemplate() ]);
    this._workbookViewModel$2 = viewModel;
    this._workbookViewModel$2.add_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._workbookViewModel$2.remove_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$2));
    })));
    this._workbookViewModel$2.add_newWorkbook(ss.Delegate.create(this, this._handleNewWorkbook$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._workbookViewModel$2.remove_newWorkbook(ss.Delegate.create(this, this._handleNewWorkbook$2));
    })));
}
tab.WorkbookView.prototype = {
    _workbookViewModel$2: null,
    _dashboardView$2: null,
    
    get_dom: function tab_WorkbookView$get_dom() {
        return this.get_template();
    },
    
    get_containerNode: function tab_WorkbookView$get_containerNode() {
        return this._dashboardView$2.get_dashboardNode();
    },
    
    get_dashboardView: function tab_WorkbookView$get_dashboardView() {
        return this._dashboardView$2;
    },
    
    onAddedToDom: function tab_WorkbookView$onAddedToDom() {
        tab.WorkbookView.callBaseMethod(this, 'onAddedToDom');
        this._handleNewWorkbook$2();
        this._handleNewDashboard$2();
    },
    
    _handleNewDashboard$2: function tab_WorkbookView$_handleNewDashboard$2() {
        if (ss.isValue(this._workbookViewModel$2.get_dashboardViewModel())) {
            this._dashboardView$2 = spiff.ObjectRegistry.newView(tab.DashboardView, this._workbookViewModel$2.get_dashboardViewModel());
            this._dashboardView$2.addToDom(this.get_dom().dashboardContainer);
            this._colorDashboardContainer();
            this.get_dom().dashboardContainer.css('visibility', 'visible');
        }
    },
    
    _handleNewWorkbook$2: function tab_WorkbookView$_handleNewWorkbook$2() {
        this._positionDashboardContainer();
    },
    
    _positionDashboardContainer: function tab_WorkbookView$_positionDashboardContainer() {
        var bounds = this._workbookViewModel$2.get_dashboardContainerPosition();
        this.get_dom().dashboardContainer.css('top', bounds.t + 'px');
        tab.DomUtil.setContentBox(this.get_dom().dashboardContainer.get(0), bounds);
    },
    
    _colorDashboardContainer: function tab_WorkbookView$_colorDashboardContainer() {
        this.get_dom().dashboardContainer.css('background-color', this._workbookViewModel$2.get_dashboardBackgroundColor());
        return;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WorkbookTemplate

tab.WorkbookTemplate = function tab_WorkbookTemplate() {
    tab.WorkbookTemplate.initializeBase(this, [ $("<div class='tab-workbook'><div class='dashboardSpacer'/></div>") ]);
    this.dashboardContainer = this.getElementBySelector('.dashboardSpacer');
}
tab.WorkbookTemplate.prototype = {
    dashboardContainer: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.BaseLegendView

tab.BaseLegendView = function tab_BaseLegendView(viewModel, template) {
    tab.BaseLegendView.initializeBase(this, [ viewModel, template ]);
}
tab.BaseLegendView.prototype = {
    _legendTooltip$2: null,
    
    get_legendViewModel: function tab_BaseLegendView$get_legendViewModel() {
        return this.get_viewModel();
    },
    
    get_baseLegendTemplate: function tab_BaseLegendView$get_baseLegendTemplate() {
        return this.get_template();
    },
    
    get_legendTooltip: function tab_BaseLegendView$get_legendTooltip() {
        this._ensureTooltip$2();
        return this._legendTooltip$2;
    },
    
    onAddedToDom: function tab_BaseLegendView$onAddedToDom() {
        tab.BaseLegendView.callBaseMethod(this, 'onAddedToDom');
    },
    
    dispose: function tab_BaseLegendView$dispose() {
        if (ss.isValue(this._legendTooltip$2)) {
            this._legendTooltip$2.remove_ubertipCommandExecuted(ss.Delegate.create(this, this._onUbertipCommandExecuted$2));
            this._legendTooltip$2.dispose();
        }
        tab.BaseLegendView.callBaseMethod(this, 'dispose');
    },
    
    drawTitle: function tab_BaseLegendView$drawTitle() {
        if (this.get_legendViewModel().get_hasTitle()) {
            this.get_baseLegendTemplate().titleArea.html(this.get_legendViewModel().get_titleHtml());
            tab.FormattingConverters.cleanUpFontFamilyStyles(this.get_baseLegendTemplate().titleArea);
            this._updateTitleAreaStyle$2(this.get_legendViewModel().get_titleInline());
            tableau.util.setupTitleEllipsis(this.get_baseLegendTemplate().titleArea);
        }
    },
    
    _updateTitleAreaStyle$2: function tab_BaseLegendView$_updateTitleAreaStyle$2(isTitleInline) {
        var displayValue = '';
        var vertAlignValue = '';
        if (isTitleInline) {
            this.get_baseLegendTemplate().titleArea.width(this.get_legendViewModel().get_titleWidth());
            displayValue = 'inline-block';
            vertAlignValue = 'top';
        }
        else {
            this.get_baseLegendTemplate().titleArea.width('');
            this.get_baseLegendTemplate().titleArea.height(this.get_legendViewModel().get_titleHeight());
        }
        this.get_baseLegendTemplate().titleArea.css('display', displayValue);
        this.get_baseLegendTemplate().titleArea.css('vertical-align', vertAlignValue);
        if (ss.isValue(this.get_baseLegendTemplate().get_contentArea())) {
            this.get_baseLegendTemplate().get_contentArea().css('display', displayValue);
        }
    },
    
    highlighterFitsUpperRight: function tab_BaseLegendView$highlighterFitsUpperRight() {
        var titleNotInline = !this.get_legendViewModel().get_titleInline();
        if (this.get_legendViewModel().get_hasTitle() && titleNotInline) {
            return true;
        }
        return false;
    },
    
    _onUbertipCommandExecuted$2: function tab_BaseLegendView$_onUbertipCommandExecuted$2(senderUbertip, args) {
        ss.Debug.assert(args.command.commandType !== 7, 'Ubertips on legends should not try to view data. The view data command is on ViewSession');
        tab.UberTipClientCommands.executeUbertipCommand(args.command);
    },
    
    makeTooltip: function tab_BaseLegendView$makeTooltip() {
        return spiff.ObjectRegistry.newLegacyTooltip(tab.TooltipBaseLegacyMode, null, this.get_legendViewModel().get_visualId());
    },
    
    _ensureTooltip$2: function tab_BaseLegendView$_ensureTooltip$2() {
        if (ss.isNullOrUndefined(this._legendTooltip$2)) {
            this._legendTooltip$2 = this.makeTooltip();
            this._legendTooltip$2.add_ubertipCommandExecuted(ss.Delegate.create(this, this._onUbertipCommandExecuted$2));
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LegendTemplate

tab.LegendTemplate = function tab_LegendTemplate(template) {
    tab.LegendTemplate.initializeBase(this, [ template ]);
    this.titleArea = this.getElementBySelector('.tabLegendTitle');
}
tab.LegendTemplate.prototype = {
    legendContentArea: null,
    titleArea: null,
    
    get_contentArea: function tab_LegendTemplate$get_contentArea() {
        return this.legendContentArea;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CanvasView

tab.CanvasView = function tab_CanvasView(viewModel) {
    tab.CanvasView.initializeBase(this, [ viewModel, new tab.CanvasTemplate() ]);
    this.canvasElt = (this.get_template()).canvasElt.get(0);
    this.scrollOffset = tab.$create_Point(0, 0);
    this._logicalPixelScrollOffset$2 = tab.$create_Point(0, 0);
    this._pendingRedraw$2 = false;
    this.context = tab.CanvasRenderer.getRenderContext(this.canvasElt);
    this._pixelRatio$2 = tab.RenderUtil.calculatePixelRatio();
    tab.CommandController.get().add_postBootstrap(ss.Delegate.create(this, this._redrawIfDirty$2));
    tab.CommandController.get().add_postLocalCommand(ss.Delegate.create(this, this._redrawIfDirty$2));
    tab.CommandController.get().add_postRemoteCommand(ss.Delegate.create(this, this._redrawIfDirty$2));
}
tab.CanvasView.prototype = {
    canvasElt: null,
    context: null,
    scrollOffset: null,
    _logicalPixelScrollOffset$2: null,
    _pixelRatio$2: 0,
    _pendingRedraw$2: false,
    _redrawTimer$2: null,
    _effectiveViewSize$2: null,
    
    get_canScrollX: function tab_CanvasView$get_canScrollX() {
        return (this.get_docSize().w - this.get_effectiveViewSize().w) > 0;
    },
    
    get_canScrollY: function tab_CanvasView$get_canScrollY() {
        return (this.get_docSize().h - this.get_effectiveViewSize().h) > 0;
    },
    
    get_actualViewSize: function tab_CanvasView$get_actualViewSize() {
        if (!ss.isValue(this.canvasElt)) {
            return tab.$create_Size(0, 0);
        }
        return tab.$create_Size(this.canvasElt.width, this.canvasElt.height);
    },
    set_actualViewSize: function tab_CanvasView$set_actualViewSize(value) {
        if (!ss.isValue(this.canvasElt)) {
            return;
        }
        if (tab.CanvasUtil.isOverCanvasSizeLimit(value.w, value.h, this.get_pixelRatio())) {
            this._pixelRatio$2 = 1;
        }
        if (this.get_effectiveViewSize().w !== value.w || this.get_effectiveViewSize().h !== value.h) {
            this._effectiveViewSize$2 = tab.$create_Size(value.w, value.h);
            tab.CanvasUtil.setCanvasSizeAndDensify(this.canvasElt, this.get_pixelRatio(), this._effectiveViewSize$2);
            this.invalidate(false);
        }
        return value;
    },
    
    get_effectiveViewSize: function tab_CanvasView$get_effectiveViewSize() {
        if (ss.isValue(this._effectiveViewSize$2)) {
            return this._effectiveViewSize$2;
        }
        else {
            return this.get_actualViewSize();
        }
    },
    
    get_pixelRatio: function tab_CanvasView$get_pixelRatio() {
        return this._pixelRatio$2;
    },
    
    get_isContentOpaque: function tab_CanvasView$get_isContentOpaque() {
        return true;
    },
    
    get_needsRedraw: function tab_CanvasView$get_needsRedraw() {
        return !tab.RectXYUtil.isEmpty(this.get_dirtyRect());
    },
    
    get_scrollPos: function tab_CanvasView$get_scrollPos() {
        return this.scrollOffset;
    },
    set_scrollPos: function tab_CanvasView$set_scrollPos(value) {
        if (!tab.PointUtil.equals(this.scrollOffset, value)) {
            var logicalDesiredScrollPoint = tab.PointFUtil.timesScalar(value, this._pixelRatio$2);
            var logicalScrollToPoint = tab.PointFUtil.round(logicalDesiredScrollPoint);
            var logicalPixelDelta = tab.PointUtil.subtract(logicalScrollToPoint, this._logicalPixelScrollOffset$2);
            var delta = tab.PointUtil.subtract(value, this.scrollOffset);
            this._logicalPixelScrollOffset$2 = logicalScrollToPoint;
            this.scrollOffset = value;
            if (!tab.RectXYUtil.isEmpty(this.get_dirtyRect())) {
                var offset = tab.$create_Point(-delta.x, -delta.y);
                var dirtyRect = tab.RectXYUtil.offsetRect(this.get_dirtyRect(), offset);
                this.set_dirtyRect(dirtyRect);
            }
            if ((!!delta.x && !!delta.y) || !this.get_isContentOpaque()) {
                this.invalidate(true);
            }
            else {
                var pixelDeltaX = logicalPixelDelta.x;
                var pixelDeltaY = logicalPixelDelta.y;
                var width = this.get_actualViewSize().w - Math.abs(pixelDeltaX);
                var xSrc = (pixelDeltaX > 0) ? pixelDeltaX : 0;
                var xDst = (pixelDeltaX > 0) ? 0 : -pixelDeltaX;
                var height = this.get_actualViewSize().h - Math.abs(pixelDeltaY);
                var ySrc = (pixelDeltaY > 0) ? pixelDeltaY : 0;
                var yDst = (pixelDeltaY > 0) ? 0 : -pixelDeltaY;
                if (width <= 0 || height <= 0) {
                    this.invalidate(true);
                }
                else {
                    this.context.reset();
                    this.context.drawImage5(this.canvasElt, xSrc, ySrc, width, height, xDst, yDst, width, height);
                    var invalRect = tab.$create_RectXY(0, 0, this.get_effectiveViewSize().w, this.get_effectiveViewSize().h);
                    if (delta.x > 0) {
                        invalRect.x = invalRect.w - delta.x;
                    }
                    else if (delta.x < 0) {
                        invalRect.w = -delta.x;
                    }
                    if (delta.y > 0) {
                        invalRect.y = invalRect.h - delta.y;
                    }
                    else if (delta.y < 0) {
                        invalRect.h = -delta.y;
                    }
                    if (!delta.x) {
                        invalRect.h = Math.abs(delta.y);
                    }
                    if (!delta.y) {
                        invalRect.w = Math.abs(delta.x);
                    }
                    invalRect = tab.RectXYUtil.dialate(invalRect, 3);
                    this.invalidateRect(invalRect, true);
                }
            }
        }
        return value;
    },
    
    get_dirtyRect: function tab_CanvasView$get_dirtyRect() {
        return (ss.isValue(this.context)) ? this.context.get_dirtyRect() : tab.$create_RectXY(0, 0, 0, 0);
    },
    set_dirtyRect: function tab_CanvasView$set_dirtyRect(value) {
        if (ss.isValue(this.context)) {
            this.context.set_dirtyRect(value);
        }
        return value;
    },
    
    dispose: function tab_CanvasView$dispose() {
        if (ss.isValue(this._redrawTimer$2)) {
            tab.WindowHelper.cancelAnimationFrame(this._redrawTimer$2);
            var wh = tab.CommandController.get().get_legacySession().get_waitHandler();
            wh.release();
            this._redrawTimer$2 = null;
        }
        tab.CommandController.get().remove_postBootstrap(ss.Delegate.create(this, this._redrawIfDirty$2));
        tab.CommandController.get().remove_postLocalCommand(ss.Delegate.create(this, this._redrawIfDirty$2));
        tab.CommandController.get().remove_postRemoteCommand(ss.Delegate.create(this, this._redrawIfDirty$2));
        tab.CanvasView.callBaseMethod(this, 'dispose');
    },
    
    clearDirty: function tab_CanvasView$clearDirty() {
        this.set_dirtyRect(tab.$create_RectXY(0, 0, 0, 0));
    },
    
    invalidate: function tab_CanvasView$invalidate(immediateRedraw) {
        this.set_dirtyRect(tab.$create_RectXY(0, 0, this.get_effectiveViewSize().w, this.get_effectiveViewSize().h));
        this.triggerRedraw(immediateRedraw);
    },
    
    invalidateRect: function tab_CanvasView$invalidateRect(rect, immediateRedraw) {
        var invalRect;
        if (tab.RectXYUtil.isEmpty(this.get_dirtyRect())) {
            invalRect = $.extend(true, {}, rect);
        }
        else {
            invalRect = tab.RectXYUtil.union(this.get_dirtyRect(), rect);
        }
        if (invalRect.x < 0) {
            invalRect.x = 0;
        }
        if ((invalRect.x + invalRect.w) > this.get_effectiveViewSize().w) {
            invalRect.w = this.get_effectiveViewSize().w - invalRect.x;
        }
        if (invalRect.y < 0) {
            invalRect.y = 0;
        }
        if ((invalRect.y + invalRect.h) > this.get_effectiveViewSize().h) {
            invalRect.h = this.get_effectiveViewSize().h - invalRect.y;
        }
        this.set_dirtyRect(invalRect);
        this.triggerRedraw(immediateRedraw);
    },
    
    setXPos: function tab_CanvasView$setXPos(xPos) {
        this.set_scrollPos(tab.$create_Point(xPos, this.get_scrollPos().y));
    },
    
    setYPos: function tab_CanvasView$setYPos(yPos) {
        this.set_scrollPos(tab.$create_Point(this.get_scrollPos().x, yPos));
    },
    
    triggerRedraw: function tab_CanvasView$triggerRedraw(immediate) {
        if (ss.isNullOrUndefined(immediate)) {
            immediate = false;
        }
        var wh = tab.CommandController.get().get_legacySession().get_waitHandler();
        if (immediate) {
            wh.addref(false);
            this.redraw();
            wh.release();
            if (ss.isValue(this._redrawTimer$2)) {
                tab.WindowHelper.cancelAnimationFrame(this._redrawTimer$2);
                this._redrawTimer$2 = null;
                wh.release();
            }
            this._pendingRedraw$2 = false;
            this.redrawFinished();
        }
        else if (!this._pendingRedraw$2) {
            wh.addref(false);
            tab.Log.get(this).debug('Deferring render');
            this._pendingRedraw$2 = true;
            this._redrawTimer$2 = tab.WindowHelper.requestAnimationFrame(ss.Delegate.create(this, function() {
                this._redrawIfDirty$2();
            }));
        }
    },
    
    _redrawIfDirty$2: function tab_CanvasView$_redrawIfDirty$2() {
        if (this._pendingRedraw$2) {
            this.triggerRedraw(true);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CanvasTemplate

tab.CanvasTemplate = function tab_CanvasTemplate() {
    tab.CanvasTemplate.initializeBase(this, [ $("<canvas class='tabCanvas'></canvas>") ]);
    this.canvasElt = this.get_domRoot();
}
tab.CanvasTemplate.prototype = {
    canvasElt: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ConfirmationView

tab.ConfirmationView = function tab_ConfirmationView(viewModel) {
    tab.ConfirmationView.initializeBase(this, [ viewModel, spiff.Template.fromHtml("<div class='tabConfirmation'>") ]);
    this.confirmViewModel = viewModel;
    this.confirmViewModel.add_shown(ss.Delegate.create(this, this._shown$2));
    this.confirmViewModel.add_hidden(ss.Delegate.create(this, this._hidden$2));
    this.buildDom();
}
tab.ConfirmationView.prototype = {
    confirmViewModel: null,
    _modalDialog$2: null,
    _denyButton$2: null,
    _confirmButton$2: null,
    
    dispose: function tab_ConfirmationView$dispose() {
        this.confirmViewModel.remove_shown(ss.Delegate.create(this, this._shown$2));
        this.confirmViewModel.remove_hidden(ss.Delegate.create(this, this._hidden$2));
        this._modalDialog$2.remove_closed(ss.Delegate.create(this, this._dialogClosed$2));
        this._modalDialog$2.dispose();
        this._modalDialog$2 = null;
        tab.ConfirmationView.callBaseMethod(this, 'dispose');
    },
    
    buildDom: function tab_ConfirmationView$buildDom() {
        this.get_element().append($('<div>').addClass('tabConfirmationMessage').html(this.confirmViewModel.get_messageHtml()));
        var btnsDiv = $('<div>').addClass('tabConfirmationButtons');
        this.get_element().append(btnsDiv);
        if (this.confirmViewModel.get_showConfirmButton()) {
            this._confirmButton$2 = spiff.StyledButton.createStyledButton(ss.Delegate.create(this, this._confirmClicked$2), this.confirmViewModel.get_confirmText(), 'tabConfirmationConfirmButton', 2);
            this.disposables.add(this._confirmButton$2);
            btnsDiv.append(this._confirmButton$2.get_element());
        }
        if (this.confirmViewModel.get_showDenyButton()) {
            this._denyButton$2 = spiff.StyledButton.createStyledButton(ss.Delegate.create(this, this._denyClicked$2), this.confirmViewModel.get_denyText(), 'tabConfirmationDenyButton', 1);
            this.disposables.add(this._denyButton$2);
            btnsDiv.append(this._denyButton$2.get_element());
        }
        this._modalDialog$2 = new spiff.ModalDialog(this.confirmViewModel.get_titleText(), this.get_element());
        this._modalDialog$2.add_closed(ss.Delegate.create(this, this._dialogClosed$2));
    },
    
    _dialogClosed$2: function tab_ConfirmationView$_dialogClosed$2(sender, args) {
        this.confirmViewModel.cancel();
    },
    
    _confirmClicked$2: function tab_ConfirmationView$_confirmClicked$2() {
        this.confirmViewModel.confirm();
    },
    
    _denyClicked$2: function tab_ConfirmationView$_denyClicked$2() {
        this.confirmViewModel.deny();
    },
    
    _hidden$2: function tab_ConfirmationView$_hidden$2(confirmed) {
        if (ss.isNullOrUndefined(this._modalDialog$2)) {
            return;
        }
        this._modalDialog$2.close();
    },
    
    _shown$2: function tab_ConfirmationView$_shown$2() {
        if (ss.isNullOrUndefined(this._modalDialog$2)) {
            return;
        }
        this._modalDialog$2.show();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ApplicationView

tab.ApplicationView = function tab_ApplicationView(viewModel) {
    tab.ApplicationView.initializeBase(this, [ viewModel, new tab.ApplicationTemplate() ]);
}
tab.ApplicationView.prototype = {
    _workbookView$2: null,
    _toolbarView$2: null,
    
    get_dom: function tab_ApplicationView$get_dom() {
        return this.get_template();
    },
    
    get_containerNode: function tab_ApplicationView$get_containerNode() {
        return this._workbookView$2.get_dashboardView().get_dashboardNode();
    },
    
    get_toolbarView: function tab_ApplicationView$get_toolbarView() {
        return this._toolbarView$2;
    },
    
    get_toolbarIsBottom: function tab_ApplicationView$get_toolbarIsBottom() {
        return this.get__applicationViewModel$2().get_toolbarViewModel().get_toolbarIsBottom();
    },
    
    get_toolbarContainer: function tab_ApplicationView$get_toolbarContainer() {
        if (this.get_toolbarIsBottom()) {
            return this.get_dom().bottomToolbar;
        }
        else {
            return this.get_dom().topToolbar;
        }
    },
    
    get_unusedToolbarContainer: function tab_ApplicationView$get_unusedToolbarContainer() {
        if (this.get_toolbarIsBottom()) {
            return this.get_dom().topToolbar;
        }
        else {
            return this.get_dom().bottomToolbar;
        }
    },
    
    get__applicationViewModel$2: function tab_ApplicationView$get__applicationViewModel$2() {
        return this.get_viewModel();
    },
    
    onAddedToDom: function tab_ApplicationView$onAddedToDom() {
        if (!this.get_addedToDom()) {
            this._addWorkbook$2();
            if ((tab.FeatureParamsLookup.getBoolDefaultFalse(tab.FeatureParam.newBrowserToolbar) || false)) {
                this._addToolbar$2();
            }
        }
        tab.ApplicationView.callBaseMethod(this, 'onAddedToDom');
    },
    
    _addWorkbook$2: function tab_ApplicationView$_addWorkbook$2() {
        this._workbookView$2 = spiff.ObjectRegistry.newView(tab.WorkbookView, this.get__applicationViewModel$2().get_workbookViewModel());
        this._workbookView$2.addToDom(this.get_dom().domNode);
    },
    
    _addToolbar$2: function tab_ApplicationView$_addToolbar$2() {
        this._toolbarView$2 = spiff.ObjectRegistry.newView(tab.ToolbarView, this.get__applicationViewModel$2().get_toolbarViewModel());
        this._toolbarView$2.addToDom(this.get_toolbarContainer());
        this.get_toolbarContainer().addClass('tab-toolbar-container');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ApplicationTemplate

tab.ApplicationTemplate = function tab_ApplicationTemplate() {
    tab.ApplicationTemplate.initializeBase(this, [ $("\n<div id='tabViewer' class='wcBody' style='visibility:hidden;'\n  ><div class='wcVizPlaceholder'></div\n  ><div id=\"share_dialog\"></div\n  ><div class='bottom_toolbar'></div\n    ><div class='wcWatermark'\n      ><div class='wcPublicNote'>\n          <span id='domViewCount'></span>\n          <span id='interpunct' style='display:none'>&nbsp;&#183;&nbsp;</span>\n          <span id='domSharePerspective'></span></div\n      ><div\n        ><a id='domWatermarkLink' target='_blank'\n          ><img alt='Tableau Public' border='0'\n          /></a\n      ></div\n    ></div\n></div>") ]);
    this.domNode = this.get_domRoot();
    this.publicNote = this.getElementBySelector('.wcPublicNote');
    this.viewCount = this.getElementBySelector('#domViewCount');
    this.sharePerspective = this.getElementBySelector('#domSharePerspective');
    this.interpunct = this.getElementBySelector('#interpunct');
    this.watermarkParent = this.getElementBySelector('.wcWatermark');
    this.watermarkLink = this.getElementBySelector('#domWatermarkLink');
    this.watermarkImage = this.getElementBySelector('img');
    this.topToolbar = $('#top_toolbar');
    this.bottomToolbar = this.getElementBySelector('.bottom_toolbar');
    this.placeholder = this.getElementBySelector('.wcVizPlaceholder');
}
tab.ApplicationTemplate.prototype = {
    domNode: null,
    publicNote: null,
    viewCount: null,
    sharePerspective: null,
    interpunct: null,
    watermarkParent: null,
    watermarkLink: null,
    watermarkImage: null,
    topToolbar: null,
    bottomToolbar: null,
    placeholder: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneTableOverlayView

tab.PaneTableOverlayView = function tab_PaneTableOverlayView(viewModel, domNode, vizRegion) {
    this._invalidRects$4 = [];
    this._dragTuples$4 = new tab.UintSet();
    this._dirtyDragRects$4 = [];
    this._hoverTarget$4 = new tab._targetObject('hover');
    this._pressTarget$4 = new tab._targetObject('press');
    this._lastTargetState$4 = 'normal';
    tab.PaneTableOverlayView.initializeBase(this, [ viewModel, domNode ]);
    this.renderer = new tab.PaneTable2DRenderer(this.canvasElt, this.context);
    this._vizRegion$4 = vizRegion;
    var canvasObject = $(this.canvasElt);
    canvasObject.css('position', 'absolute');
    canvasObject.css('left', '0px');
    canvasObject.css('top', '0px');
}
tab.PaneTableOverlayView.prototype = {
    _vizRegion$4: null,
    _hasInvalidAreas$4: false,
    _selectorShapeState$4: null,
    _hasTargetBeenPressed$4: false,
    
    get_paneTableVM: function tab_PaneTableOverlayView$get_paneTableVM() {
        return this.get_viewModel();
    },
    
    get_dirtyRect: function tab_PaneTableOverlayView$get_dirtyRect() {
        return (this._dirtyDragRects$4.length > 0) ? this._dirtyDragRects$4.peek() : tab.PaneTableOverlayView.callBaseMethod(this, 'get_dirtyRect');
    },
    
    get_lastTargetState: function tab_PaneTableOverlayView$get_lastTargetState() {
        return this._lastTargetState$4;
    },
    
    clearDirty: function tab_PaneTableOverlayView$clearDirty() {
        this._dirtyDragRects$4.pop();
    },
    
    clearOverlays: function tab_PaneTableOverlayView$clearOverlays() {
        this._emptyHoverOverlays$4();
        this._emptyPressedOverlays$4();
        this._emptyDragOverlays$4();
        this._checkInvalidArea$4();
    },
    
    hoverOverWhitespace: function tab_PaneTableOverlayView$hoverOverWhitespace() {
        this._hasTargetBeenPressed$4 = false;
    },
    
    setScrollPosition: function tab_PaneTableOverlayView$setScrollPosition(scrollPoint) {
        this.set_scrollPos(scrollPoint);
        this.invalidate(true);
    },
    
    setDragOverlayTuples: function tab_PaneTableOverlayView$setDragOverlayTuples(tuples) {
        this._emptyHoverOverlays$4();
        this._emptyPressedOverlays$4();
        this._checkInvalidArea$4();
        var shapeSelector = this._vizRegion$4.get_shapeSelector();
        this._selectorShapeState$4 = shapeSelector.retrieveStateObject(this._selectorShapeState$4);
        this._dirtyDragRects$4.clear();
        this._dragTuples$4.clear();
        this._dragTuples$4.addAll(tuples);
        var changedRects = shapeSelector.getStateDiff(this._selectorShapeState$4);
        var offset = tab.$create_Point(-this.get_scrollPos().x, -this.get_scrollPos().y);
        var $enum1 = ss.IEnumerator.getEnumerator(changedRects);
        while ($enum1.moveNext()) {
            var changedRect = $enum1.current;
            var dirtyRect = changedRect;
            var hitTestedInts = tab.HitTestResult.getIdsFromHitTestResults(this._vizRegion$4.hitTestMarks(dirtyRect, false));
            if (tab.MiscUtil.isNullOrEmpty(hitTestedInts)) {
                continue;
            }
            var addedArea = this.get_paneTableVM().get_scene()._getMarksInvalidationRects(hitTestedInts);
            var $enum2 = ss.IEnumerator.getEnumerator(addedArea);
            while ($enum2.moveNext()) {
                var rect = $enum2.current;
                dirtyRect = tab.RectXYUtil.union(dirtyRect, rect);
            }
            dirtyRect = tab.RectXYUtil.offsetRect(dirtyRect, offset);
            dirtyRect = tab.RectXYUtil.outsetRect(dirtyRect, 2, 2);
            if (!this._dirtyDragRects$4.length || !tab.RectXYUtil.completelyContains(this._dirtyDragRects$4.peek(), dirtyRect)) {
                this._dirtyDragRects$4.push(dirtyRect);
            }
        }
        if (this._dirtyDragRects$4.length > 0) {
            this.triggerRedraw(false);
        }
        else {
            shapeSelector.updateLastState(this._selectorShapeState$4);
        }
    },
    
    setHoverOverlayTarget: function tab_PaneTableOverlayView$setHoverOverlayTarget(target, visualPart) {
        this._lastTargetState$4 = 'hover';
        if (!this._hoverTarget$4._isSameTarget(target, visualPart)) {
            this._hasTargetBeenPressed$4 = false;
        }
        if (this._hoverTarget$4._isSameValidTarget(target, visualPart) || this._dragTuples$4.get_count() > 0) {
            return false;
        }
        this._updateRectsForNewTarget$4(target, visualPart);
        this._hoverTarget$4._update(target, visualPart);
        this._redrawInvalidArea$4();
        return true;
    },
    
    setPressedOverlayTarget: function tab_PaneTableOverlayView$setPressedOverlayTarget(target, visualPart) {
        this._hasTargetBeenPressed$4 = true;
        this._lastTargetState$4 = 'press';
        if (this._pressTarget$4._isSameValidTarget(target, visualPart)) {
            return false;
        }
        this._updateRectsForNewTarget$4(target, visualPart);
        this._pressTarget$4._update(target, visualPart);
        this._redrawInvalidArea$4();
        return true;
    },
    
    _onSceneChanged: function tab_PaneTableOverlayView$_onSceneChanged(sender, e) {
        if (e.get_propertyName() === 'scene' || e.get_propertyName() === 'vizdata') {
            this._validateTupleStates$4();
        }
    },
    
    performRender: function tab_PaneTableOverlayView$performRender() {
        var timingContext = tabBootstrap.MetricsController.get_instance().createContext('Render Overlay Panetable', tabBootstrap.MetricsSuites.debug);
        this.renderer.clear();
        var dirtyAreaRect = tab.RectXYUtil.offsetRect(this.get_dirtyRect(), tab.$create_Point(this.get_scrollPos().x, this.get_scrollPos().y));
        if (this._dragTuples$4.get_count() > 0) {
            this._renderDragOverlays$4(dirtyAreaRect);
        }
        else if (this._hoverTarget$4.get__hasValidTupleId()) {
            if (this._hoverTarget$4._visPart === 'marks') {
                var pdInfo = this.get_paneTableVM().get_scene()._getPaneDrawInfoFromTupleId(this._hoverTarget$4.get__id());
                if (!ss.isNullOrUndefined(pdInfo)) {
                    this.context.setClip(tab.RectXYUtil.intersect(dirtyAreaRect, pdInfo.get_mapExtentOrPaneRect()));
                    tab.PaneTable2DRenderer.renderHoverOverlay(this._hoverTarget$4.get__id(), pdInfo, this.context);
                }
            }
            else {
                this._renderVisualPart$4(this._hoverTarget$4);
            }
        }
        else if (this._pressTarget$4.get__hasValidTupleId()) {
            if (this._pressTarget$4._visPart === 'marks') {
                var pdInfo = this.get_paneTableVM().get_scene()._getPaneDrawInfoFromTupleId(this._pressTarget$4.get__id());
                if (!ss.isNullOrUndefined(pdInfo)) {
                    this.context.setClip(tab.RectXYUtil.intersect(dirtyAreaRect, pdInfo.get_mapExtentOrPaneRect()));
                    tab.PaneTable2DRenderer.renderPressedOverlay(this._pressTarget$4.get__id(), pdInfo, this.context);
                }
            }
            else {
                this._renderVisualPart$4(this._pressTarget$4);
            }
        }
        timingContext.close();
    },
    
    _renderDragOverlays$4: function tab_PaneTableOverlayView$_renderDragOverlays$4(dirtyAreaRect) {
        var tupleIds = tab.HitTestResult.getIdsFromHitTestResults(this._vizRegion$4.hitTestMarks(tab.RectXYUtil.outsetRect(dirtyAreaRect, 2, 2), false));
        var previousPdInfo = null;
        var paneRect = null;
        var clipRect = dirtyAreaRect;
        var $enum1 = ss.IEnumerator.getEnumerator(tupleIds);
        while ($enum1.moveNext()) {
            var tuple = $enum1.current;
            if (this._dragTuples$4.contains(tuple)) {
                var pdInfo = this.get_paneTableVM().get_scene()._getPaneDrawInfoFromTupleId(tuple);
                if (ss.isNullOrUndefined(pdInfo)) {
                    continue;
                }
                if (pdInfo !== previousPdInfo) {
                    var newPaneRect = pdInfo.get_mapExtentOrPaneRect();
                    if (paneRect !== newPaneRect) {
                        clipRect = tab.RectXYUtil.intersect(dirtyAreaRect, newPaneRect);
                        paneRect = newPaneRect;
                    }
                    if (ss.isValue(previousPdInfo)) {
                        this.context.restore();
                    }
                    this.context.save();
                    this.context.setClip(clipRect);
                }
                tab.PaneTable2DRenderer.renderHoverOverlay(tuple, pdInfo, this.context);
                previousPdInfo = pdInfo;
            }
        }
        if (ss.isValue(previousPdInfo)) {
            this.context.restore();
        }
    },
    
    _renderVisualPart$4: function tab_PaneTableOverlayView$_renderVisualPart$4(targetObject) {
        var analyticLines = [];
        if (targetObject.get__targetState() === 'hover' && tsConfig.is_authoring) {
            switch (targetObject._visPart) {
                case 'ref-lines':
                    analyticLines = this.get_paneTableVM().get_refLineVisualLists();
                    break;
                case 'trend-lines':
                    analyticLines = this.get_paneTableVM().get_trendLineVisualLists();
                    break;
            }
        }
        var $enum1 = ss.IEnumerator.getEnumerator(analyticLines);
        while ($enum1.moveNext()) {
            var analyticLine = $enum1.current;
            var lineItems = [];
            lineItems.addRange(analyticLine.drawItems);
            this._renderDrawItems$4(lineItems, targetObject);
        }
    },
    
    _renderDrawItems$4: function tab_PaneTableOverlayView$_renderDrawItems$4(items, targetObject) {
        var targetState = targetObject.get__targetState();
        var objectId = targetObject.get__id();
        this.context.save();
        var rend = this.renderer;
        var $enum1 = ss.IEnumerator.getEnumerator(items);
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            if (item.type === 'draw-group') {
                var drawGroup = item;
                var shouldDrawItem = true;
                if (this._hasTargetBeenPressed$4) {
                    switch (targetObject._visPart) {
                        case 'ref-lines':
                            shouldDrawItem = !this.get_paneTableVM().get_scene().get__selections().get_refLineSelection().isMarkSelected(drawGroup.objectId);
                            break;
                        case 'trend-lines':
                            shouldDrawItem = !this.get_paneTableVM().get_scene().get__selections().get_trendLineSelection().isMarkSelected(drawGroup.objectId);
                            break;
                    }
                }
                if (shouldDrawItem) {
                    rend.drawReferenceLineAndTrendLineGroup(drawGroup.drawItems, targetState, this.context, objectId === drawGroup.objectId, null);
                }
            }
            else {
                rend.renderVisualParts(this.context, item);
            }
        }
        this.context.restore();
    },
    
    postRenderFinalPass: function tab_PaneTableOverlayView$postRenderFinalPass() {
    },
    
    redrawFinished: function tab_PaneTableOverlayView$redrawFinished() {
        if (this._dirtyDragRects$4.length > 0) {
            this.triggerRedraw(true);
        }
        else {
            this._vizRegion$4.get_shapeSelector().updateLastState(this._selectorShapeState$4);
        }
    },
    
    _redrawInvalidArea$4: function tab_PaneTableOverlayView$_redrawInvalidArea$4() {
        if (tab.MiscUtil.isNullOrEmpty(this._invalidRects$4)) {
            this.invalidate(true);
        }
        else {
            var unionRect = tab.$create_RectXY(0, 0, 0, 0);
            var $enum1 = ss.IEnumerator.getEnumerator(this._invalidRects$4);
            while ($enum1.moveNext()) {
                var rect = $enum1.current;
                unionRect = tab.RectXYUtil.union(unionRect, rect);
            }
            this._invalidRects$4.clear();
            var offset = tab.$create_Point(-this.get_scrollPos().x, -this.get_scrollPos().y);
            unionRect = tab.RectXYUtil.offsetRect(unionRect, offset);
            unionRect = tab.RectXYUtil.outsetRect(unionRect, 2, 2);
            this.invalidateRect(unionRect, true);
        }
    },
    
    _checkInvalidArea$4: function tab_PaneTableOverlayView$_checkInvalidArea$4() {
        if (!tab.MiscUtil.isNullOrEmpty(this._invalidRects$4) || this._hasInvalidAreas$4) {
            this._hasInvalidAreas$4 = false;
            this._redrawInvalidArea$4();
        }
    },
    
    _validateTupleStates$4: function tab_PaneTableOverlayView$_validateTupleStates$4() {
        if (!this._isTargetObjectValidForOverlay$4(this._hoverTarget$4)) {
            this._hoverTarget$4._invalidateId();
        }
        if (!this._isTargetObjectValidForOverlay$4(this._pressTarget$4)) {
            this._pressTarget$4._invalidateId();
        }
        var $enum1 = ss.IEnumerator.getEnumerator(this._dragTuples$4.get_values());
        while ($enum1.moveNext()) {
            var tupleId = $enum1.current;
            if (!this._isTupleValidForOverlay$4(tupleId)) {
                this._dragTuples$4.remove(tupleId);
            }
        }
    },
    
    _isTargetObjectValidForOverlay$4: function tab_PaneTableOverlayView$_isTargetObjectValidForOverlay$4(targetObject) {
        if (!targetObject.get__hasValidTupleId()) {
            return false;
        }
        return targetObject._visPart === 'marks' && this._isTupleValidForOverlay$4(targetObject.get__id());
    },
    
    _isTupleValidForOverlay$4: function tab_PaneTableOverlayView$_isTupleValidForOverlay$4(tupleId) {
        var vizData = this.get_paneTableVM().get_visualModel().get_vizDataModel();
        var sceneInfo = this.get_paneTableVM().get_scene();
        return ss.isValue(vizData) && vizData.hasTupleId(tupleId) && !sceneInfo._isMarkFiltered(tupleId);
    },
    
    _updateRectsForNewTarget$4: function tab_PaneTableOverlayView$_updateRectsForNewTarget$4(target, visualPart) {
        this._emptyHoverOverlays$4();
        this._emptyPressedOverlays$4();
        this._emptyDragOverlays$4();
        if (visualPart === 'marks') {
            this._invalidRects$4.addRange(this.get_paneTableVM().get_scene()._getMarkInvalidationRects(target));
        }
        else {
            this._hasInvalidAreas$4 = true;
        }
    },
    
    _emptyHoverOverlays$4: function tab_PaneTableOverlayView$_emptyHoverOverlays$4() {
        if (this._hoverTarget$4.get__hasValidTupleId()) {
            if (this._hoverTarget$4._visPart === 'marks') {
                this._invalidRects$4.addRange(this.get_paneTableVM().get_scene()._getMarkInvalidationRects(this._hoverTarget$4.get__id()));
            }
            else {
                this._hasInvalidAreas$4 = true;
            }
            this._hoverTarget$4._invalidateId();
        }
    },
    
    _emptyPressedOverlays$4: function tab_PaneTableOverlayView$_emptyPressedOverlays$4() {
        if (this._pressTarget$4.get__hasValidTupleId()) {
            if (this._pressTarget$4._visPart === 'marks') {
                this._invalidRects$4.addRange(this.get_paneTableVM().get_scene()._getMarkInvalidationRects(this._pressTarget$4.get__id()));
            }
            else {
                this._hasInvalidAreas$4 = true;
            }
            this._pressTarget$4._invalidateId();
        }
    },
    
    _emptyDragOverlays$4: function tab_PaneTableOverlayView$_emptyDragOverlays$4() {
        if (this._dragTuples$4.get_count() > 0) {
            this._invalidRects$4.addRange(this.get_paneTableVM().get_scene()._getMarksInvalidationRects(this._dragTuples$4.get_values()));
            this._dragTuples$4.clear();
            this._dirtyDragRects$4.clear();
        }
        this._selectorShapeState$4 = null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._targetObject

tab._targetObject = function tab__targetObject(state) {
    this._targetState = state;
    this._hasValidId = false;
    this._id = 0;
}
tab._targetObject.prototype = {
    _visPart: null,
    _targetState: null,
    _hasValidId: false,
    _id: 0,
    
    get__targetState: function tab__targetObject$get__targetState() {
        return this._targetState;
    },
    
    get__hasValidTupleId: function tab__targetObject$get__hasValidTupleId() {
        return this._hasValidId;
    },
    
    get__id: function tab__targetObject$get__id() {
        if (!this.get__hasValidTupleId()) {
            tab.Log.get(this).warn('This target ID is no longer valid: %s', this._id);
        }
        return this._id;
    },
    
    _update: function tab__targetObject$_update(newId, visPart) {
        this._id = newId;
        this._visPart = visPart;
        this._hasValidId = true;
    },
    
    _invalidateId: function tab__targetObject$_invalidateId() {
        this._hasValidId = false;
    },
    
    _isSameValidTarget: function tab__targetObject$_isSameValidTarget(otherTargetId, visPart) {
        return this._isSameTarget(otherTargetId, visPart) && this._hasValidId;
    },
    
    _isSameTarget: function tab__targetObject$_isSameTarget(otherTargetId, visPart) {
        return this._id === otherTargetId && this._visPart === visPart;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PresModelBrowserView

tab.PresModelBrowserView = function tab_PresModelBrowserView(id, viewModel) {
    tab.PresModelBrowserView.initializeBase(this, [ viewModel, spiff.Template.fromHtml("<div id='" + id + tab.PresModelBrowserView._viewTemplate2$2) ]);
    $(document.body).append(this.get_element());
    (this.get_element().find('.pres_model_search_text')).on('keyup click mousedown', ss.Delegate.create(this, function() {
        this._updateSearchButton$2();
    })).keydown(ss.Delegate.create(this, function(e) {
        if (e.which === 13) {
            e.preventDefault();
            this._search$2();
        }
    }));
    this.get_element().find('.pres_model_search').click(ss.Delegate.create(this, function() {
        this._search$2();
    }));
    this.get_element().find('.pres_model_expand').click(ss.Delegate.create(this, function() {
        this._doExpandCollapse$2();
    }));
    this.get_element().find('.pres_model_hide').click(ss.Delegate.create(this, function() {
        this.get_element().hide();
    }));
    this.update(viewModel);
}
tab.PresModelBrowserView.prototype = {
    _viewModel$2: null,
    _openAll$2: false,
    _searchedText$2: '',
    
    update: function tab_PresModelBrowserView$update(newViewModel) {
        this._viewModel$2 = newViewModel;
        jQuery.jstree._themes = tableau.util.assetUrl('/css/jstree/');
        (this.get_element().children('.tree')).jstree({ core: { animation: 90, html_titles: true }, json_data: newViewModel, themes: { theme: 'default', icons: false }, search: { show_only_matches: true }, plugins: ['json_data', 'themes', 'search'] });
        this.get_element().find('.pres_model_search_text').val('');
        this._updateSearchButton$2();
    },
    
    _jsTree$2: function tab_PresModelBrowserView$_jsTree$2(arg1, arg2) {
        return (this.get_element().children('.tree')).jstree(arg1, arg2);
    },
    
    _updateSearchButton$2: function tab_PresModelBrowserView$_updateSearchButton$2() {
        var newSearchText = (this.get_element().find('.pres_model_search_text').val()).trim();
        var validSearchText = !String.isNullOrEmpty(newSearchText);
        var searchButton = this.get_element().find('.pres_model_search');
        if (!this._searchedText$2 || (validSearchText && this._searchedText$2 !== newSearchText)) {
            searchButton.text('Search');
        }
        else {
            searchButton.text('Clear search');
        }
        if (validSearchText) {
            searchButton.removeAttr('disabled');
        }
        else {
            searchButton.attr('disabled', 'disabled');
        }
    },
    
    _search$2: function tab_PresModelBrowserView$_search$2() {
        var newSearchText = (this.get_element().find('.pres_model_search_text').val()).trim();
        if (ss.isValue(newSearchText) && this._searchedText$2 !== newSearchText && newSearchText.length > 0) {
            this._searchedText$2 = newSearchText;
        }
        else {
            this._searchedText$2 = '';
        }
        this.get_element().find('.pres_model_search_text').val(this._searchedText$2);
        this._updateSearchButton$2();
        this._jsTree$2('search', this._searchedText$2);
    },
    
    _doExpandCollapse$2: function tab_PresModelBrowserView$_doExpandCollapse$2() {
        if (this._openAll$2) {
            this._jsTree$2('close_all');
            this.get_element().find('.pres_model_expand').text('Expand all');
            this._openAll$2 = false;
        }
        else {
            this._jsTree$2('open_all');
            this.get_element().find('.pres_model_expand').text('Collapse all');
            this._openAll$2 = true;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.StoryPointCaptionView

tab.StoryPointCaptionView = function tab_StoryPointCaptionView(viewModel) {
    tab.StoryPointCaptionView.initializeBase(this, [ viewModel, new tab.StoryPointCaptionTemplate() ]);
    this.get_storyPointCaptionViewModel().add_updatePoint(ss.Delegate.create(this, this._updatePoint$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_storyPointCaptionViewModel().remove_updatePoint(ss.Delegate.create(this, this._updatePoint$2));
    })));
    this._setupFirstOrLast$2();
    this._setupContent$2();
    this._setupClickHandlers$2();
}
tab.StoryPointCaptionView.prototype = {
    _contentTemplate$2: null,
    _scrollableViewModel$2: null,
    _revertIconButton$2: null,
    
    get_domRoot: function tab_StoryPointCaptionView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    get_contentTemplate: function tab_StoryPointCaptionView$get_contentTemplate() {
        return this._contentTemplate$2;
    },
    
    get_storyPointCaptionViewModel: function tab_StoryPointCaptionView$get_storyPointCaptionViewModel() {
        return this.get_viewModel();
    },
    
    get__captionTemplate$2: function tab_StoryPointCaptionView$get__captionTemplate$2() {
        return this.get_template();
    },
    
    onAddedToDom: function tab_StoryPointCaptionView$onAddedToDom() {
        tab.StoryPointCaptionView.callBaseMethod(this, 'onAddedToDom');
        if (this._scrollableViewModel$2.get_hasCustomIndicator()) {
            this.get_domRoot().addClass('tabFormatted');
            this.get__captionTemplate$2().captionBottom.remove();
            this.get__captionTemplate$2().captionTop.remove();
        }
        var scrollableView = spiff.ScrollableView.createScrollableView(this._scrollableViewModel$2);
        scrollableView.addToDom(this.get__captionTemplate$2().caption);
        var right = { right: scrollableView.get_scrollbarBuffer() + 'px' };
        this.get__captionTemplate$2().captionTop.css(right);
        this.get__captionTemplate$2().captionBottom.css(right);
        this._updatePoint$2();
    },
    
    _setupFirstOrLast$2: function tab_StoryPointCaptionView$_setupFirstOrLast$2() {
        if (this.get_storyPointCaptionViewModel().get_isFirstPoint()) {
            this.get_domRoot().addClass('tabFirstPoint');
        }
        if (this.get_storyPointCaptionViewModel().get_isLastPoint()) {
            this.get_domRoot().addClass('tabLastPoint');
        }
    },
    
    _updatePoint$2: function tab_StoryPointCaptionView$_updatePoint$2() {
        this.get__captionTemplate$2().revert.toggle(!this.get_storyPointCaptionViewModel().get_isCaptured());
        this.get__captionTemplate$2().caption.toggleClass('tabCurrent', this.get_storyPointCaptionViewModel().get_isCurrentPoint());
        if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.formattedFlipboardNavigator)) {
            this._scrollableViewModel$2.triggerRefresh();
        }
    },
    
    _setupClickHandlers$2: function tab_StoryPointCaptionView$_setupClickHandlers$2() {
        this._setupCaptionHandlers$2();
        this._setupRevert$2();
    },
    
    _setupRevert$2: function tab_StoryPointCaptionView$_setupRevert$2() {
        this.get__captionTemplate$2().revert.attr('title', tab.Strings.StoryPointRevertTooltip);
        this._revertIconButton$2 = new spiff.IconButton();
        this._revertIconButton$2.setIcon('tabStoryRevertIcon');
        this.get__captionTemplate$2().revert.append(this._revertIconButton$2.get_element());
        this.disposables.add(this._revertIconButton$2.onClick(ss.Delegate.create(this, function(b) {
            this.get_storyPointCaptionViewModel().revertStoryPoint();
        })));
        if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.newCaptionToolbar)) {
            this.get__captionTemplate$2().revert.addClass('tabLayoutNew');
        }
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._revertIconButton$2.dispose();
        })));
    },
    
    _setupCaptionHandlers$2: function tab_StoryPointCaptionView$_setupCaptionHandlers$2() {
        this.disposables.add(new spiff.ClickHandler().setTarget(this.get__captionTemplate$2().caption).onPress(ss.Delegate.create(this, function() {
            this.get__captionTemplate$2().caption.addClass('tabActive');
        })).onClick(ss.Delegate.create(this, function(e) {
            e.stopPropagation();
            this.get__captionTemplate$2().caption.removeClass('tabActive');
            this.get_storyPointCaptionViewModel().clickStoryPoint();
        })));
        this.get__captionTemplate$2().caption.bind('touchend touchcancel mouseleave', ss.Delegate.create(this, function() {
            this.get__captionTemplate$2().caption.removeClass('tabActive');
        }));
    },
    
    _setupContent$2: function tab_StoryPointCaptionView$_setupContent$2() {
        var formattedFlipboardNavigatorFlag = tab.FeatureParamsLookup.getBool(tab.FeatureParam.formattedFlipboardNavigator);
        this._contentTemplate$2 = new tab.StoryPointCaptionContentTemplate();
        this._contentTemplate$2.get_domRoot().text(this.get_storyPointCaptionViewModel().get_caption());
        if (!!formattedFlipboardNavigatorFlag) {
            this.get__captionTemplate$2().caption.removeClass('tabUnformattedStoryPoint');
            this.get__captionTemplate$2().caption.addClass('tabFormattedStoryPoint');
        }
        var useCustomScroller = (!tab.BrowserSupport.get_isIE() || tab.BrowserSupport.get_browserVersion() > 8) && !!formattedFlipboardNavigatorFlag;
        this._scrollableViewModel$2 = new spiff.ScrollableViewModel(useCustomScroller);
        this._scrollableViewModel$2.set_content(this._contentTemplate$2.get_domRoot()[0]);
        this._scrollableViewModel$2.set_scrollY(true);
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._scrollableViewModel$2.dispose();
        })));
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.StoryPointCaptionTemplate

tab.StoryPointCaptionTemplate = function tab_StoryPointCaptionTemplate() {
    tab.StoryPointCaptionTemplate.initializeBase(this, [ $(tab.StoryPointCaptionTemplate._htmlTemplate$1) ]);
    this.caption = this.getElementBySelector('.tabStoryPointCaption');
    this.revert = this.getElementBySelector('.tabStoryRevert');
    this.toolbar = this.getElementBySelector('.tabStoryPointToolbar');
    this.captionTop = this.getElementBySelector('.tabStoryPointCaptionTop');
    this.captionBottom = this.getElementBySelector('.tabStoryPointCaptionBottom');
}
tab.StoryPointCaptionTemplate.prototype = {
    caption: null,
    revert: null,
    captionTop: null,
    captionBottom: null,
    toolbar: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.StoryPointCaptionContentTemplate

tab.StoryPointCaptionContentTemplate = function tab_StoryPointCaptionContentTemplate() {
    tab.StoryPointCaptionContentTemplate.initializeBase(this, [ $("<div class='tabStoryPointContent'/>") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.DashboardView

tab.DashboardView = function tab_DashboardView(viewModel) {
    tab.DashboardView.initializeBase(this, [ viewModel, new tab.DashboardTemplate() ]);
    this._viewModel$2 = viewModel;
    this._viewModel$2.add_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_newDashboard(ss.Delegate.create(this, this._handleNewDashboard$2));
    })));
    this._viewModel$2.add_newZone(ss.Delegate.create(this, this._handleNewZone$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_newZone(ss.Delegate.create(this, this._handleNewZone$2));
    })));
    this._viewModel$2.add_vizRebuildStart(ss.Delegate.create(this, this._putUpFakeDom$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_vizRebuildStart(ss.Delegate.create(this, this._putUpFakeDom$2));
    })));
}
tab.DashboardView.uniquefyClonedFilterRadioElements = function tab_DashboardView$uniquefyClonedFilterRadioElements(cloneRoot) {
    var clonedFilterRadioElements = cloneRoot.find('input:radio');
    for (var ii = 0; ii < clonedFilterRadioElements.length; ++ii) {
        var clonedFilterRadioElement = clonedFilterRadioElements[ii];
        var radioElementName = clonedFilterRadioElement.getAttribute('name') || '';
        radioElementName += '_%%%CLONE%%%';
        clonedFilterRadioElement.setAttribute('name', radioElementName);
    }
}
tab.DashboardView.prototype = {
    _viewModel$2: null,
    
    get__dom$2: function tab_DashboardView$get__dom$2() {
        return this.get_template();
    },
    
    get_dashboardNode: function tab_DashboardView$get_dashboardNode() {
        return this.get__dom$2().dashboardNode;
    },
    
    _handleNewDashboard$2: function tab_DashboardView$_handleNewDashboard$2() {
        this.get__dom$2().dashboardNode.height(this._viewModel$2.get_portSize().h).width(this._viewModel$2.get_portSize().w);
        if (ss.isValue(this._viewModel$2.get_formats())) {
            this.get__dom$2().dashboardNode.css(this._viewModel$2.get_formats());
            var color = this._viewModel$2.get_formats()['color'];
            if (ss.isNullOrUndefined(color) || color === '#000000') {
                this.get__dom$2().dashboardNode.addClass('lightBackground');
            }
            else {
                this.get__dom$2().dashboardNode.addClass('darkBackground');
            }
        }
    },
    
    _handleNewZone$2: function tab_DashboardView$_handleNewZone$2(zoneViewModel) {
        var view = spiff.ObjectRegistry.newView(tab.ZoneView, zoneViewModel);
        view.addToDom(this.get__dom$2().dashboardNode);
    },
    
    onAddedToDom: function tab_DashboardView$onAddedToDom() {
        if (!this.get_addedToDom()) {
            this._handleNewDashboard$2();
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this._viewModel$2.get_zoneViewModels()));
            while ($enum1.moveNext()) {
                var zoneId = $enum1.current;
                this._handleNewZone$2(this._viewModel$2.get_zoneViewModels()[zoneId]);
            }
        }
        tab.DashboardView.callBaseMethod(this, 'onAddedToDom');
    },
    
    _putUpFakeDom$2: function tab_DashboardView$_putUpFakeDom$2() {
        tab.Logger.getLoggerWithName('facadedom').debug(Date.get_now().getTime().toString() + ' Creating fake');
        if (this._viewModel$2.get_renderMode() === 'render-mode-client') {
            var oldImages = this.get__dom$2().dashboardNode.find('img');
            var len = oldImages.length;
            for (var i = 0; i < len; i++) {
                var oldImage = oldImages[i];
                if (ss.isNullOrUndefined(oldImage) || !oldImage.naturalHeight || !oldImage.naturalWidth) {
                    continue;
                }
                var canvas = document.createElement('canvas');
                canvas.width = oldImage.naturalWidth;
                canvas.height = oldImage.naturalHeight;
                var ctx = canvas.getContext('2d');
                ctx.drawImage(oldImage, 0, 0);
                try {
                    var dataURL = canvas.toDataURL('image/png');
                    oldImage.src = dataURL;
                }
                catch ($e1) {
                }
            }
        }
        var myclone = this.get__dom$2().dashboardNode.clone(false, false);
        myclone.addClass('facadedom');
        tab.DashboardView.uniquefyClonedFilterRadioElements(myclone);
        if (this._viewModel$2.get_renderMode() === 'render-mode-server') {
            tab.Logger.getLoggerWithName('facadedom').debug(Date.get_now().getTime().toString() + ' Copying canvases');
            var oldCanvases = this.get__dom$2().dashboardNode.find('canvas');
            var newCanvases = myclone.find('canvas');
            var len = oldCanvases.length;
            for (var i = 0; i < len; i++) {
                var oldCanvas = oldCanvases[i];
                var newCanvas = newCanvases[i];
                if (!ss.isValue(newCanvas)) {
                    continue;
                }
                var context = newCanvas.getContext('2d');
                if (ss.isValue(oldCanvas) && oldCanvas.width > 0 && oldCanvas.height > 0 && ss.isValue(context)) {
                    context.drawImage(oldCanvas, 0, 0);
                }
            }
        }
        tab.Logger.getLoggerWithName('facadedom').debug(Date.get_now().getTime().toString() + ' Appending fake');
        this.get__dom$2().dashboardNode.parent().append(myclone);
        tab.Logger.getLoggerWithName('facadedom').debug(Date.get_now().getTime().toString() + ' Fake appended');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DashboardTemplate

tab.DashboardTemplate = function tab_DashboardTemplate() {
    tab.DashboardTemplate.initializeBase(this, [ $("<div class='tab-dashboard'/>") ]);
    this.dashboardNode = this.get_domRoot();
}
tab.DashboardTemplate.prototype = {
    dashboardNode: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardNavigatorView

tab.FlipboardNavigatorView = function tab_FlipboardNavigatorView(viewModel) {
    tab.FlipboardNavigatorView.initializeBase(this, [ viewModel, new tab.FlipboardNavigatorTemplate() ]);
    if (this.get_flipboardNavViewModel().get_showArrows()) {
        this._setUpArrows$2();
    }
    else {
        this.get_dom().previous.hide();
        this.get_dom().next.hide();
    }
    this.get_flipboardNavViewModel().add_resizeZone(ss.Delegate.create(this, this.handleResize));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_flipboardNavViewModel().remove_resizeZone(ss.Delegate.create(this, this.handleResize));
    })));
    this.get_flipboardNavViewModel().add_updateActivePoint(ss.Delegate.create(this, this.handleUpdateActivePoint));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_flipboardNavViewModel().remove_updateActivePoint(ss.Delegate.create(this, this.handleUpdateActivePoint));
    })));
    this.get_domRoot().bind(this.createNamespacedEventName('mousedown'), function(e) {
        e.stopPropagation();
    });
    this._createContent$2();
    if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.formattedFlipboardNavigator)) {
        this.disposables.add(new tab.CallOnDispose(function() {
            tab.StyleUtil.clearStyleSheet('appendedStoryStyle');
        }));
    }
}
tab.FlipboardNavigatorView.prototype = {
    _pointsTemplate$2: null,
    _scrollableViewModel$2: null,
    _scrollableView$2: null,
    
    get_domRoot: function tab_FlipboardNavigatorView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    get_flipboardNavViewModel: function tab_FlipboardNavigatorView$get_flipboardNavViewModel() {
        return this.get_viewModel();
    },
    
    get_storyPointCaptionViewModel: function tab_FlipboardNavigatorView$get_storyPointCaptionViewModel() {
        return this.get_flipboardNavViewModel().get_captions()[0];
    },
    
    get_dom: function tab_FlipboardNavigatorView$get_dom() {
        return this.get_template();
    },
    
    _createContent$2: function tab_FlipboardNavigatorView$_createContent$2() {
        var formattedFlipboardNavigatorFlag = tab.FeatureParamsLookup.getBool(tab.FeatureParam.formattedFlipboardNavigator);
        if (!!formattedFlipboardNavigatorFlag) {
            this.get_domRoot().removeClass('tabUnformattedFlipboardNav');
            this.get_domRoot().addClass('tabFormattedFlipboardNav');
        }
        this._pointsTemplate$2 = new tab.FlipboardNavigatorPointsTemplate();
        this._scrollableViewModel$2 = new spiff.ScrollableViewModel(false);
        this._scrollableViewModel$2.set_content(this._pointsTemplate$2.get_domRoot()[0]);
        this._scrollableViewModel$2.set_scrollX(true);
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._scrollableViewModel$2.dispose();
        })));
    },
    
    _setUpArrows$2: function tab_FlipboardNavigatorView$_setUpArrows$2() {
        var prev = new spiff.Button(this.get_dom().previous);
        var clickPrevHandler = ss.Delegate.create(this, function() {
            this.get_flipboardNavViewModel().clickPrevious();
        });
        prev.add_click(clickPrevHandler);
        this.disposables.add(prev);
        this.disposables.add(new tab.CallOnDispose(function() {
            prev.remove_click(clickPrevHandler);
        }));
        var next = new spiff.Button(this.get_dom().next);
        var clickNextHandler = ss.Delegate.create(this, function() {
            this.get_flipboardNavViewModel().clickNext();
        });
        next.add_click(clickNextHandler);
        this.disposables.add(next);
        this.disposables.add(new tab.CallOnDispose(function() {
            next.remove_click(clickNextHandler);
        }));
    },
    
    onAddedToDom: function tab_FlipboardNavigatorView$onAddedToDom() {
        var formattedFlipboardNavigatorFlag = tab.FeatureParamsLookup.getBool(tab.FeatureParam.formattedFlipboardNavigator);
        tab.FlipboardNavigatorView.callBaseMethod(this, 'onAddedToDom');
        this._scrollableView$2 = spiff.ScrollableView.createScrollableView(this._scrollableViewModel$2);
        this._scrollableView$2.addToDom(this.get_dom().scroller);
        var currentHeight;
        if (!!formattedFlipboardNavigatorFlag) {
            var storyPointHeight = this.get_flipboardNavViewModel().get_storyPointHeight();
            currentHeight = storyPointHeight + 20;
            var previousArrowVerticalPadding = (storyPointHeight - 26) / 2;
            var nextArrowVerticalPadding = (storyPointHeight - 26) / 2;
            this.get_dom().previous.css({ 'padding-top': previousArrowVerticalPadding + 'px', 'padding-bottom': previousArrowVerticalPadding + 'px' });
            this.get_dom().next.css({ 'padding-top': nextArrowVerticalPadding + 'px', 'padding-bottom': nextArrowVerticalPadding + 'px' });
            this._setupStoryPointStyles$2();
        }
        else {
            currentHeight = parseInt(this.get_dom().scroller.css('height'), 10);
        }
        if (ss.isValue(currentHeight)) {
            this.get_dom().scroller.css('height', (currentHeight + this._scrollableView$2.get_scrollbarBuffer()) + 'px');
        }
        this._addPoints$2();
        this.centerNav();
        this.handleUpdateActivePoint(this.get_flipboardNavViewModel().get_currentPointIndex());
    },
    
    _setupStoryPointStyles$2: function tab_FlipboardNavigatorView$_setupStoryPointStyles$2() {
        if (this.get_storyPointCaptionViewModel() == null) {
            return;
        }
        var selectedStoryPointBoxRules = {};
        var unselectedStoryPointBoxRules = {};
        var selectedStoryPointTextRules = {};
        var unselectedStoryPointTextRules = {};
        var storyPointSizeRules = {};
        if (this.get_storyPointCaptionViewModel().get_selectedStoryPointStyle() != null) {
            selectedStoryPointBoxRules = this._setupBoxRulesForPresModel$2(this.get_storyPointCaptionViewModel().get_selectedStoryPointStyle());
            selectedStoryPointTextRules = this._setupTextRulesForPresModel$2(this.get_storyPointCaptionViewModel().get_selectedStoryPointStyle());
            storyPointSizeRules = this._setupSizeRulesForPresModel$2(this.get_storyPointCaptionViewModel().get_selectedStoryPointStyle());
        }
        if (this.get_storyPointCaptionViewModel().get_unselectedStoryPointStyle() != null) {
            unselectedStoryPointBoxRules = this._setupBoxRulesForPresModel$2(this.get_storyPointCaptionViewModel().get_unselectedStoryPointStyle());
            unselectedStoryPointTextRules = this._setupTextRulesForPresModel$2(this.get_storyPointCaptionViewModel().get_unselectedStoryPointStyle());
            if (Object.keys(storyPointSizeRules).length <= 0) {
                storyPointSizeRules = this._setupSizeRulesForPresModel$2(this.get_storyPointCaptionViewModel().get_selectedStoryPointStyle());
            }
        }
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.formattedStoryPointSelector, storyPointSizeRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', '.tabStoryPointCaption.tabFormattedStoryPoint.tabCurrent', selectedStoryPointBoxRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', '.tabStoryPointCaption.tabFormattedStoryPoint', unselectedStoryPointBoxRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.selectedStoryPointTextSelector, selectedStoryPointTextRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.unselectedStoryPointTextSelector, unselectedStoryPointTextRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.selectedStoryPointNativeScrollerTopBottomSelector, selectedStoryPointBoxRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.unselectedStoryPointNativeScrollerTopBottomSelector, unselectedStoryPointBoxRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.selectedStoryPointNativeScrollerTextSelector, selectedStoryPointTextRules);
        tab.StyleUtil.appendCSSRuleToStyleSheet('appendedStoryStyle', tab.FlipboardNavigatorView.unselectedStoryPointNativeScrollerTextSelector, unselectedStoryPointTextRules);
    },
    
    _setupBoxRulesForPresModel$2: function tab_FlipboardNavigatorView$_setupBoxRulesForPresModel$2(storyPointStyle) {
        var AllowTransparency = false;
        if (ss.isValue(storyPointStyle.styledBox)) {
            return tab.FormattingConverters._makeStyledBoxCssDict(storyPointStyle.styledBox, AllowTransparency);
        }
        else {
            return {};
        }
    },
    
    _setupTextRulesForPresModel$2: function tab_FlipboardNavigatorView$_setupTextRulesForPresModel$2(storyPointStyle) {
        if (ss.isValue(storyPointStyle.textStyle)) {
            return tab.FormattingConverters._makeFormatStyleDict(storyPointStyle.textStyle, null);
        }
        else {
            return {};
        }
    },
    
    _setupSizeRulesForPresModel$2: function tab_FlipboardNavigatorView$_setupSizeRulesForPresModel$2(storyPointStyle) {
        var DefaultStoryPointWidth = 150;
        var DefaultStoryPointHeight = 70;
        var storyPointSizeRules = {};
        var height = DefaultStoryPointHeight, width = DefaultStoryPointWidth;
        if (ss.isValue(storyPointStyle.h)) {
            height = storyPointStyle.h;
        }
        storyPointSizeRules['height'] = height + 20 + 'px';
        if (ss.isValue(storyPointStyle.w)) {
            width = storyPointStyle.w;
        }
        storyPointSizeRules['width'] = width + 'px';
        return storyPointSizeRules;
    },
    
    centerNav: function tab_FlipboardNavigatorView$centerNav() {
        var contentWidth = 0;
        this.get_dom().get_domRoot().children().each(function(i, e) {
            var elementObject = $(e);
            if (!(elementObject.css('display') === 'none')) {
                contentWidth += elementObject.outerWidth(true);
            }
        });
        var parentWidth = this.get_dom().get_domRoot().parent().width();
        var marginLeft = 0;
        if (parentWidth > contentWidth) {
            marginLeft = parseInt(((parentWidth - contentWidth) / 2));
        }
        this.get_dom().get_domRoot().css('margin-left', marginLeft + 'px');
        var contentHeight = this.get_domRoot().height();
        var marginTop = parseInt((contentHeight / 2));
        this.get_dom().get_domRoot().css('margin-top', '-' + marginTop + 'px');
    },
    
    handleResize: function tab_FlipboardNavigatorView$handleResize() {
        var maxWidth = this.get_dom().get_domRoot()[0].clientWidth - ((this.get_flipboardNavViewModel().get_showArrows()) ? this.get_dom().previous.outerWidth(true) + this.get_dom().next.outerWidth(true) : 0);
        var contentWidth = this._pointsTemplate$2.points[0].clientWidth;
        this.get_dom().scroller.css({ width: Math.min(maxWidth, contentWidth) + 'px' });
        this.centerNav();
        this._scrollableViewModel$2.triggerRefresh();
    },
    
    handleUpdateActivePoint: function tab_FlipboardNavigatorView$handleUpdateActivePoint(activePointIndex) {
        var activeElement = this._pointsTemplate$2.points.children().get(activePointIndex);
        var leftEdgeOfElement = activeElement.offsetLeft;
        var rightEdgeOfElement = leftEdgeOfElement + activeElement.offsetWidth;
        var leftmostVisiblePixel = this._scrollableView$2.get_scrollerX();
        var rightmostVisiblePixel = leftmostVisiblePixel + this.get_dom().scroller.width();
        var ExtraSpace = 50;
        if (rightEdgeOfElement > rightmostVisiblePixel) {
            var xOffset = this.get_dom().scroller.width() - activeElement.offsetWidth - ExtraSpace;
            this._scrollableView$2.scrollToElement(activeElement, 0, -xOffset, 0);
        }
        else if (leftEdgeOfElement < leftmostVisiblePixel) {
            this._scrollableView$2.scrollToElement(activeElement, 0, -ExtraSpace, 0);
        }
        this.get_dom().previous.toggleClass('tabDisabled', this.get_flipboardNavViewModel().get_previousDisabled());
        this.get_dom().next.toggleClass('tabDisabled', this.get_flipboardNavViewModel().get_nextDisabled());
    },
    
    _addPoints$2: function tab_FlipboardNavigatorView$_addPoints$2() {
        var $enum1 = ss.IEnumerator.getEnumerator(this.get_flipboardNavViewModel().get_captions());
        while ($enum1.moveNext()) {
            var captionViewModel = $enum1.current;
            var captionView = spiff.ObjectRegistry.newView(tab.StoryPointCaptionView, captionViewModel);
            captionView.addToDom(this._pointsTemplate$2.points);
        }
        this.handleResize();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardNavigatorTemplate

tab.FlipboardNavigatorTemplate = function tab_FlipboardNavigatorTemplate() {
    tab.FlipboardNavigatorTemplate.initializeBase(this, [ $(tab.FlipboardNavigatorTemplate._htmlTemplate$1) ]);
    this.previous = this.getElementBySelector('.tabFlipboardNavPrevious');
    this.scroller = this.getElementBySelector('.tabFlipboardNavScroller');
    this.next = this.getElementBySelector('.tabFlipboardNavNext');
}
tab.FlipboardNavigatorTemplate.prototype = {
    previous: null,
    scroller: null,
    next: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardNavigatorPointsTemplate

tab.FlipboardNavigatorPointsTemplate = function tab_FlipboardNavigatorPointsTemplate() {
    tab.FlipboardNavigatorPointsTemplate.initializeBase(this, [ $("<span class='tabFlipboardNavPoints'/>") ]);
    this.points = this.get_domRoot();
}
tab.FlipboardNavigatorPointsTemplate.prototype = {
    points: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardView

tab.FlipboardView = function tab_FlipboardView(viewModel) {
    tab.FlipboardView.initializeBase(this, [ viewModel, new tab.FlipboardTemplate() ]);
    this._viewModel$2 = viewModel;
    this._viewModel$2.add_newStoryPoint(ss.Delegate.create(this, this.handleNewStoryPoint));
    this._viewModel$2.get_parentZone().add_resizeZone(ss.Delegate.create(this, this.handleResizeZone));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_newStoryPoint(ss.Delegate.create(this, this.handleNewStoryPoint));
        this._viewModel$2.get_parentZone().remove_resizeZone(ss.Delegate.create(this, this.handleResizeZone));
    })));
}
tab.FlipboardView.prototype = {
    _viewModel$2: null,
    
    onAddedToDom: function tab_FlipboardView$onAddedToDom() {
        tab.FlipboardView.callBaseMethod(this, 'onAddedToDom');
        if (ss.isValue(this._viewModel$2.get_dashboardViewModel())) {
            this.handleNewStoryPoint();
        }
    },
    
    handleNewStoryPoint: function tab_FlipboardView$handleNewStoryPoint() {
        var flipboardSize = tab.$create_Size(this.get_element().width(), this.get_element().height());
        this._viewModel$2.get_dashboardViewModel().set_portSize(this._appropriateDashboardSize$2(tab.RecordCast.sizeAsSizePresModel(flipboardSize), this._viewModel$2.get_dashboardViewModel().get_portSize()));
        var view = spiff.ObjectRegistry.newView(tab.DashboardView, this._viewModel$2.get_dashboardViewModel());
        view.addToDom(this.get_template().get_domRoot());
    },
    
    handleResizeZone: function tab_FlipboardView$handleResizeZone() {
        var zoneSize = tab.$create_Size(this._viewModel$2.get_parentZone().get_width(), this._viewModel$2.get_parentZone().get_height());
        this._viewModel$2.get_dashboardViewModel().set_portSize(this._appropriateDashboardSize$2(tab.RecordCast.sizeAsSizePresModel(zoneSize), this._viewModel$2.get_dashboardViewModel().get_dashboardModel().get_portSize()));
    },
    
    _appropriateDashboardSize$2: function tab_FlipboardView$_appropriateDashboardSize$2(surroundingSizePresModel, dashboardSizePresModel) {
        var newSizePresModel = tab.SizeUtil.unionPresModels(surroundingSizePresModel, dashboardSizePresModel);
        if (dashboardSizePresModel.h >= surroundingSizePresModel.h && surroundingSizePresModel.w - dashboardSizePresModel.w > 24) {
            newSizePresModel.w -= 24;
        }
        if (dashboardSizePresModel.w >= surroundingSizePresModel.w && surroundingSizePresModel.h - dashboardSizePresModel.h > 24) {
            newSizePresModel.h -= 24;
        }
        return newSizePresModel;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FlipboardTemplate

tab.FlipboardTemplate = function tab_FlipboardTemplate() {
    tab.FlipboardTemplate.initializeBase(this, [ $("<div class='tabFlipboard'></div>") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneTableView

tab.PaneTableView = function tab_PaneTableView(paneTableVM, template) {
    this.regions = {};
    this._overlayImages$2 = [];
    this._portWidth$2 = -1;
    this._portHeight$2 = -1;
    this._scrollPos$2 = tab.$create_Point(0, 0);
    this._regionImages$2 = [];
    this._sizeOfRegions$2 = tab.$create_Size(0, 0);
    tab.PaneTableView.initializeBase(this, [ paneTableVM, template ]);
    this.dom = template;
    this._attachStaticEventHandlers$2();
    this.get_paneTableVM().get_viewController().setTiledViewer(this);
    this._timestamp$2 = new Date().getTime();
    this.get_dom().view.attr('id', 'view' + tab.ModelUtils.findContentDashboard().getViewId(this.get_sheetid()));
    this.get_dom().title.css('display', (this.get_paneTableVM().get_hasTitle()) ? '' : 'none');
    this.get_dom().caption.css('display', (this.get_paneTableVM().get_hasCaption()) ? '' : 'none');
    tab.ModelUtils.withVisualModel(this.get_sheetid(), ss.Delegate.create(this, function(visualModel) {
        if (this.get_paneTableVM().get_hasTitle()) {
            var titleViewModel = new tab.TextRegionViewModel(visualModel.get_titleModel());
            this._titleView$2 = new tab.TextRegionView(titleViewModel);
            this._titleView$2.addToDom(this.dom.title);
        }
        if (this.get_paneTableVM().get_hasCaption()) {
            var captionViewModel = new tab.TextRegionViewModel(visualModel.get_captionModel());
            this._captionView$2 = new tab.TextRegionView(captionViewModel);
            this._captionView$2.addToDom(this.dom.caption);
        }
        this.isMap = visualModel.get_isMap();
    }));
    this.get_paneTableVM().add_newPaneTable(ss.Delegate.create(this, this.handleNewVisual));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_paneTableVM().remove_newPaneTable(ss.Delegate.create(this, this.handleNewVisual));
    })));
}
tab.PaneTableView.guessTooltipTargetTypeFromRegion = function tab_PaneTableView$guessTooltipTargetTypeFromRegion(regionPart) {
    switch (regionPart) {
        case 'bottomaxis':
        case 'topaxis':
        case 'leftaxis':
        case 'rightaxis':
        case 'xheader':
        case 'yheader':
            return 'header';
        case 'color':
            return 'legenditem';
        default:
            return 'unspecified';
    }
}
tab.PaneTableView.prototype = {
    dom: null,
    zoomToolbar: null,
    ftv: null,
    isPointerToolLocked: false,
    isMap: false,
    geometry: null,
    visibleGeometry: null,
    mapsSearchView: null,
    _timestamp$2: null,
    _titleHeight$2: 0,
    _tlspacerAreaX$2: null,
    _tlspacerAreaY$2: null,
    _requestId$2: 0,
    _vizTooltip$2: null,
    _blspacerArea$2: null,
    _titleView$2: null,
    _captionView$2: null,
    _hasBeenDisposed$2: false,
    _overlayTableView$2: null,
    _lastDragTime$2: 0,
    _pendingOverlayDrag$2: null,
    _mapAttribution$2: null,
    _cachedGeometry$2: null,
    _cachedColors$2: null,
    _isMapsSearchViewInDom$2: false,
    
    get_geometry: function tab_PaneTableView$get_geometry() {
        return this.geometry;
    },
    
    get_visibleGeometry: function tab_PaneTableView$get_visibleGeometry() {
        return this.visibleGeometry;
    },
    
    get_sortIndicators: function tab_PaneTableView$get_sortIndicators() {
        return this.get_paneTableVM().get_sortIndicators();
    },
    
    get_posTV: function tab_PaneTableView$get_posTV() {
        return tab.PointUtil.fromPosition(this.dom.get_domRoot().offset());
    },
    
    get_dom: function tab_PaneTableView$get_dom() {
        return this.dom;
    },
    
    get_sheetid: function tab_PaneTableView$get_sheetid() {
        return this.get_paneTableVM().get_sheetId();
    },
    
    get_session: function tab_PaneTableView$get_session() {
        return this.get_controller().get_viewSession();
    },
    
    get_tlspacerAreaX: function tab_PaneTableView$get_tlspacerAreaX() {
        return this._tlspacerAreaX$2;
    },
    
    get_tlspacerAreaY: function tab_PaneTableView$get_tlspacerAreaY() {
        return this._tlspacerAreaY$2;
    },
    
    get_blspacerArea: function tab_PaneTableView$get_blspacerArea() {
        return this._blspacerArea$2;
    },
    
    get_titleHeight: function tab_PaneTableView$get_titleHeight() {
        return this._titleHeight$2;
    },
    
    get_scrollPosition: function tab_PaneTableView$get_scrollPosition() {
        return this._scrollPos$2;
    },
    set_scrollPosition: function tab_PaneTableView$set_scrollPosition(value) {
        this._scrollPos$2 = value;
        this._setOverlayScrollPosition$2(this._scrollPos$2);
        this._updateMapAttributionPlacement$2();
        return value;
    },
    
    get_controller: function tab_PaneTableView$get_controller() {
        return this.get_paneTableVM().get_viewController();
    },
    
    get_visualId: function tab_PaneTableView$get_visualId() {
        return this.get_paneTableVM().get_visualId();
    },
    
    get_isMap: function tab_PaneTableView$get_isMap() {
        return this.isMap;
    },
    set_isMap: function tab_PaneTableView$set_isMap(value) {
        this.isMap = value;
        return value;
    },
    
    get_paneTableVM: function tab_PaneTableView$get_paneTableVM() {
        return this.get_viewModel();
    },
    
    get_sizeOfRegions: function tab_PaneTableView$get_sizeOfRegions() {
        return this._sizeOfRegions$2;
    },
    
    get_mapsSearchEnabled: function tab_PaneTableView$get_mapsSearchEnabled() {
        return tab.FeatureFlags.isEnabled('GeoSearch') && tsConfig.allow_filter && this.isMap && this.get_paneTableVM().get_visualModel().get_geoSearchVisibility() === 'on';
    },
    
    get_vizToolTip: function tab_PaneTableView$get_vizToolTip() {
        this._ensureTooltip$2();
        return this._vizTooltip$2;
    },
    
    init: function tab_PaneTableView$init() {
        this._makeSubscriptions$2();
        this.makeConnections();
        this.makeRegions();
        this.makeInputHandlers();
        _.defer(ss.Delegate.create(this, function() {
            this.setupDrilling();
            this.setupSortIndicators();
            this.refreshScrollingAndDrilling();
        }));
        this.makeRegionContentProviders();
    },
    
    dispose: function tab_PaneTableView$dispose() {
        tab.Log.get(this).debug('Dispose');
        this._hasBeenDisposed$2 = true;
        this.destroyInputHandlers();
        this.destroyRegions();
        this.disposables.dispose();
        this.visibleGeometry = null;
        this.disposeOfOverlayImages();
        if (ss.isValue(this.get_paneTableVM())) {
            this.get_paneTableVM().remove_vizRegionMapChange(ss.Delegate.create(this, this._updateRegionContentProviders$2));
            if (ss.isValue(this.regions['viz'])) {
                this.get_paneTableVM().remove_propertyChanged(ss.Delegate.create(this.regions['viz'], this.regions['viz']._onSceneChanged));
            }
        }
        if (ss.isValue(this.zoomToolbar)) {
            this.zoomToolbar.dispose();
        }
        if (ss.isValue(this._titleView$2)) {
            this._titleView$2.dispose();
        }
        if (ss.isValue(this._captionView$2)) {
            this._captionView$2.dispose();
        }
        if (ss.isValue(this._mapAttribution$2)) {
            this._mapAttribution$2.dispose();
        }
        if (ss.isValue(this._vizTooltip$2)) {
            this._vizTooltip$2.remove_tooltipClosed(ss.Delegate.create(this, this.onTooltipClosed));
            this._vizTooltip$2.remove_ubertipUpdated(ss.Delegate.create(this, this.maybeShowOverlayImages));
            this._vizTooltip$2.remove_ubertipCommandExecuted(ss.Delegate.create(this, this.onCommandExecuted));
            this._vizTooltip$2.remove_ubertipActionExecuted(ss.Delegate.create(this, this.onActionExecuted));
            this._vizTooltip$2.dispose();
        }
        if (ss.isValue(this._overlayTableView$2)) {
            this.get_paneTableVM().remove_propertyChanged(ss.Delegate.create(this._overlayTableView$2, this._overlayTableView$2._onSceneChanged));
            this._overlayTableView$2.dispose();
        }
        if (ss.isValue(this.mapsSearchView)) {
            this.mapsSearchView.dispose();
        }
        tab.PaneTableView.callBaseMethod(this, 'dispose');
    },
    
    addDisposable: function tab_PaneTableView$addDisposable(d) {
        this.disposables.add(d);
    },
    
    resize: function tab_PaneTableView$resize(marginBox) {
        tab.DomUtil.setMarginBoxJQ(this.get_element(), marginBox);
        this.layout();
    },
    
    zoomHome: function tab_PaneTableView$zoomHome() {
        this.get_session().restoreSheetAxes();
        if (ss.isValue(this.mapsSearchView)) {
            this.mapsSearchView.set_isCollapsed(true);
            this.mapsSearchView.showInitialSearchText(true);
        }
    },
    
    doTiledViewerRefreshImages: function tab_PaneTableView$doTiledViewerRefreshImages(cacheInfo) {
        this.refreshImages(cacheInfo);
    },
    
    setPointerToolMode: function tab_PaneTableView$setPointerToolMode(pointerToolMode, isLocked) {
        this.isPointerToolLocked = isLocked;
        this.regions['viz'].setPointerToolMode(pointerToolMode);
    },
    
    defaultPointerToolMode: function tab_PaneTableView$defaultPointerToolMode() {
        if (Object.keyExists(this.regions, 'viz')) {
            return this.regions['viz'].get_defaultPointerToolMode();
        }
        return 'rectSelect';
    },
    
    isExistingSelection: function tab_PaneTableView$isExistingSelection() {
        if (Object.keyExists(this.regions, 'viz')) {
            return this.regions['viz'].isExistingSelection();
        }
        return false;
    },
    
    resetPointerToolMode: function tab_PaneTableView$resetPointerToolMode() {
        if (ss.isNullOrUndefined(this.zoomToolbar)) {
            this.createZoomToolbar();
        }
        if (ss.isValue(this.zoomToolbar)) {
            this.zoomToolbar.resetPointerToolMode();
        }
        else if (Object.keyExists(this.regions, 'viz')) {
            this.regions['viz']._resetPointerToolMode();
        }
    },
    
    connectTooltipEventHandlers: function tab_PaneTableView$connectTooltipEventHandlers() {
        var tooltip = this.get_vizToolTip();
        tooltip.add_tooltipClosed(ss.Delegate.create(this, this.onTooltipClosed));
        tooltip.add_ubertipUpdated(ss.Delegate.create(this, this.maybeShowOverlayImages));
        tooltip.add_ubertipCommandExecuted(ss.Delegate.create(this, this.onCommandExecuted));
        tooltip.add_ubertipActionExecuted(ss.Delegate.create(this, this.onActionExecuted));
    },
    
    updateTextSelectability: function tab_PaneTableView$updateTextSelectability(isSelectable) {
        if (ss.isValue(this._titleView$2)) {
            this._titleView$2.updateContentTextSelectability(isSelectable);
        }
        if (ss.isValue(this._captionView$2)) {
            this._captionView$2.updateContentTextSelectability(isSelectable);
        }
    },
    
    updateRegionBGColor: function tab_PaneTableView$updateRegionBGColor() {
        var colors = [this.get_paneTableVM().get_visualModel().get_backgroundColor(), this.get_paneTableVM().get_visualModel().get_paneBGColor(), this.get_paneTableVM().get_visualModel().get_headerBGColor()];
        if (ss.isValue(this._cachedColors$2) && _.isEqual(this._cachedColors$2, colors)) {
            return;
        }
        this._cachedColors$2 = colors;
        var domNodePartMap = this.listAllRegions();
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(domNodePartMap));
        while ($enum1.moveNext()) {
            var regionPart = $enum1.current;
            var domNode = domNodePartMap[regionPart];
            if (ss.isNullOrUndefined(domNode)) {
                continue;
            }
            var bgcolor = this.get_paneTableVM().get_visualModel().get_backgroundColor();
            if (regionPart === 'viz') {
                bgcolor = this.get_paneTableVM().get_visualModel().get_paneBGColor();
            }
            else if (tab.PaneTableView.headerRegions.contains(regionPart)) {
                bgcolor = this.get_paneTableVM().get_visualModel().get_headerBGColor();
            }
            domNode.css('background-color', bgcolor);
            if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
                var imageContainer = $('.tvimagesContainer', domNode);
                imageContainer.css('background-color', bgcolor);
            }
        }
        this.dom.tlSpacer.css('background-color', this.get_paneTableVM().get_visualModel().get_headerBGColor());
        this.dom.trSpacer.css('background-color', this.get_paneTableVM().get_visualModel().get_headerBGColor());
        this.dom.blSpacer.css('background-color', this.get_paneTableVM().get_visualModel().get_headerBGColor());
        this.dom.brSpacer.css('background-color', this.get_paneTableVM().get_visualModel().get_headerBGColor());
    },
    
    makeRegionContentProvidersHelper: function tab_PaneTableView$makeRegionContentProvidersHelper(vizRegionDomNode, onQueueComplete) {
        var domNodePartMap = this.listNonVizRegions();
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            this.get_paneTableVM().add_vizRegionMapChange(ss.Delegate.create(this, this._updateRegionContentProviders$2));
            var paneTableView = new tab.PaneTableCanvasView(this.get_paneTableVM(), this.getDomNodeForContentRegion(vizRegionDomNode));
            var containers = $('.tvimagesContainer', vizRegionDomNode);
            containers.get(0).appendChild(paneTableView.get_element().get(0));
            this.regions['viz'].set_contentProvider(paneTableView);
            this.get_paneTableVM().add_propertyChanged(ss.Delegate.create(this.regions['viz'], this.regions['viz']._onSceneChanged));
            this._updateRegionContentProviders$2();
            this._overlayTableView$2 = new tab.PaneTableOverlayView(this.get_paneTableVM(), this.getDomNodeForContentRegion(vizRegionDomNode), this.regions['viz']);
            this.get_paneTableVM().add_propertyChanged(ss.Delegate.create(this._overlayTableView$2, this._overlayTableView$2._onSceneChanged));
            containers.get(0).appendChild(this._overlayTableView$2.get_element().get(0));
        }
        else {
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(domNodePartMap));
            while ($enum1.moveNext()) {
                var domNodeKey = $enum1.current;
                var domNode = domNodePartMap[domNodeKey];
                var regionTW = this.makeTiledWindow(domNode, this.get_session(), this.get_controller(), ss.Delegate.create(this, this._getRID$2), null);
                this.regions[domNodeKey].set_contentProvider(regionTW);
            }
            this.regions['viz'].set_contentProvider(this.makeTiledWindow(vizRegionDomNode, this.get_session(), this.get_controller(), ss.Delegate.create(this, this._getRID$2), onQueueComplete));
        }
        this.updateRegionBGColor();
    },
    
    makeTiledWindowHelper: function tab_PaneTableView$makeTiledWindowHelper(domNode, sessionRef, controllerRef, getRID, optionalCallback, scrollDomNode) {
        var tw = new tab.TiledWindow(this.getDomNodeForContentRegion(domNode), sessionRef, controllerRef, getRID, scrollDomNode);
        if (ss.isValue(optionalCallback)) {
            tw.add_loadComplete(optionalCallback);
            this.disposables.add(new tab.CallOnDispose(function() {
                tw.remove_loadComplete(optionalCallback);
            }));
        }
        return tw;
    },
    
    listNonVizRegions: function tab_PaneTableView$listNonVizRegions() {
        var domNodePartMap = {};
        domNodePartMap['yheader'] = this.dom.yLabel;
        domNodePartMap['leftaxis'] = this.dom.leftAxis;
        domNodePartMap['rightaxis'] = this.dom.rightAxis;
        domNodePartMap['xheader'] = this.dom.xLabel;
        domNodePartMap['bottomaxis'] = this.dom.bottomAxis;
        domNodePartMap['topaxis'] = this.dom.topAxis;
        return domNodePartMap;
    },
    
    listAllRegions: function tab_PaneTableView$listAllRegions() {
        var ret = this.listNonVizRegions();
        ret['viz'] = this.dom.view;
        return ret;
    },
    
    destroyRegions: function tab_PaneTableView$destroyRegions() {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this.regions));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            if (ss.isValue(this.regions[key])) {
                this.regions[key].destroy();
            }
        }
    },
    
    onTooltipClosed: function tab_PaneTableView$onTooltipClosed() {
        if (!tab.FeatureParamsLookup.getBool(tab.FeatureParam.responsiveUi)) {
            this.disposeOfOverlayImages();
        }
    },
    
    onCommandExecuted: function tab_PaneTableView$onCommandExecuted(senderUbertip, args) {
        if (args.command.commandType === 7) {
            this.get_session().executeCommand(args.command);
        }
        else {
            tab.UberTipClientCommands.executeUbertipCommand(args.command);
        }
    },
    
    onActionExecuted: function tab_PaneTableView$onActionExecuted(senderUbertip, args) {
        var onFailure = function() {
            (senderUbertip).hideSpinner();
        };
        var successCallback = function(pm) {
            (senderUbertip).hideSpinner();
        };
        this.get_session().executeAction(args.action, successCallback, onFailure);
    },
    
    shouldUseFullFloatingZoomToolbar: function tab_PaneTableView$shouldUseFullFloatingZoomToolbar() {
        return (this.ftv === 'show' || (this.ftv === 'auto' && this.isMap));
    },
    
    doDoubleTap: function tab_PaneTableView$doDoubleTap(region, pseudoEvent, scale) {
        if (!tsConfig.allow_filter) {
            return;
        }
        if (region.get_regionPart() === 'viz' && this.allowPanZoom()) {
            this.get_controller().incrementCacheVersion();
            var defer = tab.DeferLayoutImpl.get_instance();
            defer.setDeferLayoutUpdates(true);
            tab.Log.get(this).debug('double click - increment rid');
            var pane = this.resolvePane(region.toLocalCoordsEvent(pseudoEvent));
            region.zoomPoint(pane, region.toLocalCoordsEvent(pseudoEvent), scale, true, defer);
            this.disposeOfOverlayImages();
        }
    },
    
    _onSelectionChanged$2: function tab_PaneTableView$_onSelectionChanged$2() {
        this.checkForHoverOverlay();
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            this.regions['viz'].reset();
        }
    },
    
    clearSelection: function tab_PaneTableView$clearSelection() {
        tab.SelectionClientCommands.clearAllSelections(this.get_visualId());
    },
    
    refreshImages: function tab_PaneTableView$refreshImages(cacheInfo) {
        tab.Log.get(this).debug('RefreshImages: %s', this.get_instanceId());
        this._requestId$2 += 1;
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this.regions));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            this.regions[key].refreshImages(cacheInfo);
        }
        if (this._regionImages$2.length > 0) {
            var len = this._regionImages$2.length;
            for (var i = 0; i < len; i++) {
                var div = this._regionImages$2[i]['element'];
                if (ss.isValue(div)) {
                    var url = this.get_session().formatRegionTileURL(cacheInfo, this._regionImages$2[i]['name'], this._getRID$2());
                    var img = div.children().first();
                    var devicePixelRatio = tab.RenderUtil.calculatePixelRatio(false);
                    if (tab.FloatUtil.isGreaterThan(devicePixelRatio, 1)) {
                        img.css('width', div.width().toString() + 'px');
                    }
                    img.attr('src', url);
                }
            }
        }
    },
    
    layout: function tab_PaneTableView$layout() {
        var w = this.get_element().outerWidth();
        var h = this.get_element().outerHeight();
        if (this._portHeight$2 === h && this._portWidth$2 === w) {
            return;
        }
        this._portHeight$2 = h;
        this._portWidth$2 = w;
    },
    
    _updateNeededWidth$2: function tab_PaneTableView$_updateNeededWidth$2(currentNeededWidth, regionToConsider) {
        var rightSideOfRegion = regionToConsider.x + regionToConsider.w;
        return Math.max(currentNeededWidth, rightSideOfRegion);
    },
    
    _updateNeededHeight$2: function tab_PaneTableView$_updateNeededHeight$2(currentNeededHeight, regionToConsider) {
        var bottomOfRegion = regionToConsider.y + regionToConsider.h;
        return Math.max(currentNeededHeight, bottomOfRegion);
    },
    
    setGeometry: function tab_PaneTableView$setGeometry(g, containerBox) {
        var geometryTuple = new ss.Tuple(containerBox, g);
        if (ss.isValue(this._cachedGeometry$2) && _.isEqual(geometryTuple, this._cachedGeometry$2)) {
            this.refreshScrollingAndDrilling();
            return;
        }
        this._cachedGeometry$2 = geometryTuple;
        var widthScrollOffset = 0, heightScrollOffset = 0;
        var neededWidth = 0, neededHeight = 0;
        var scrollableWidth = 0, scrollableHeight = 0;
        var scrollXLeft = 0, scrollXTop = 0, scrollYTop = 0;
        var scrollWidth = 0, scrollHeight = 0;
        var viewWidth = 0, viewHeight = 0;
        var viewBox, yHeaderBox, leftAxisBox, rightAxisBox, xHeaderBox, bottomAxisBox, topAxisBox;
        var tlspacerBox, urspacerBox, blspacerBox, brspacerBox;
        this._regionImages$2 = [];
        this._requestId$2 += 1;
        this.visibleGeometry = tab.$create_VisibleGeometry();
        var visGeo = this.visibleGeometry;
        var geo = tab.$create_GeometryWithRegions();
        $.extend(true, geo, g);
        this.geometry = geo;
        var len = geo.ri.length;
        for (var i = 0; i < len; i++) {
            (geo)[geo.ri[i].r] = geo.ri[i];
        }
        var containerWidth = containerBox.w;
        var containerHeight = containerBox.h;
        if (this._portWidth$2 !== -1) {
            containerWidth = this._portWidth$2;
        }
        if (this._portHeight$2 !== -1) {
            containerHeight = this._portHeight$2;
        }
        if (ss.isValue(geo.title)) {
            neededHeight = this._updateNeededHeight$2(neededHeight, geo.title);
        }
        if (ss.isValue(geo.xheader)) {
            scrollXLeft = geo.xheader.x;
            scrollableWidth = geo.xheader.w;
            neededHeight = this._updateNeededHeight$2(neededHeight, geo.xheader);
        }
        if (ss.isValue(geo.bottomaxis)) {
            scrollXLeft = geo.bottomaxis.x;
            scrollableWidth = geo.bottomaxis.w;
            neededHeight = this._updateNeededHeight$2(neededHeight, geo.bottomaxis);
        }
        if (ss.isValue(geo.topaxis)) {
            neededHeight = this._updateNeededHeight$2(neededHeight, geo.topaxis);
        }
        if (ss.isValue(geo.viz)) {
            scrollXLeft = geo.viz.x;
            scrollableWidth = geo.viz.w;
            neededHeight = this._updateNeededHeight$2(neededHeight, geo.viz);
        }
        if (ss.isValue(geo.caption)) {
            neededHeight = this._updateNeededHeight$2(neededHeight, geo.caption);
        }
        if (ss.isValue(geo.yheader)) {
            scrollYTop = geo.yheader.y;
            scrollableHeight = geo.yheader.h;
            neededWidth = this._updateNeededWidth$2(neededWidth, geo.yheader);
        }
        if (ss.isValue(geo.leftaxis)) {
            scrollYTop = geo.leftaxis.y;
            scrollableHeight = geo.leftaxis.h;
            neededWidth = this._updateNeededWidth$2(neededWidth, geo.leftaxis);
        }
        if (ss.isValue(geo.rightaxis)) {
            neededWidth = this._updateNeededWidth$2(neededWidth, geo.rightaxis);
        }
        if (ss.isValue(geo.viz)) {
            scrollYTop = geo.viz.y;
            scrollableHeight = geo.viz.h;
            neededWidth = this._updateNeededWidth$2(neededWidth, geo.viz);
        }
        if (scrollableHeight > 0) {
            var neededHeightPlusScrollbar = neededHeight;
            if (neededWidth > containerWidth) {
                neededHeightPlusScrollbar += tab.Metrics.get_scrollH();
            }
            if (neededHeightPlusScrollbar > containerHeight) {
                scrollWidth = tab.Metrics.get_scrollW();
            }
        }
        if (scrollableWidth > 0 && neededWidth > containerWidth) {
            scrollHeight = tab.Metrics.get_scrollH();
        }
        if (tab.BrowserSupport.get_isIE() && scrollWidth > 0) {
            scrollWidth += 1;
        }
        if (tab.BrowserSupport.get_isIE() && scrollHeight > 0) {
            scrollHeight += 1;
        }
        if (scrollableHeight > 0) {
            var fixedHeight = neededHeight - scrollableHeight;
            viewHeight = containerHeight - fixedHeight - scrollHeight;
            viewHeight = Math.min(scrollableHeight, viewHeight);
            heightScrollOffset = scrollableHeight - viewHeight;
        }
        if (scrollableWidth > 0) {
            var fixedWidth = neededWidth - scrollableWidth;
            viewWidth = containerWidth - fixedWidth - scrollWidth;
            viewWidth = Math.min(scrollableWidth, viewWidth);
            widthScrollOffset = scrollableWidth - viewWidth;
        }
        this._sizeOfRegions$2.h = Math.min(neededHeight - heightScrollOffset, containerHeight);
        this._sizeOfRegions$2.w = Math.min(neededWidth - widthScrollOffset, containerWidth);
        scrollXTop = this._sizeOfRegions$2.h;
        var isLocalRendering = tab.ApplicationModel.get_instance().get_isLocalRenderMode();
        var extraVizHeight = (isLocalRendering && ss.isValue(geo.bottomaxis)) ? 1 : 0;
        var extraVizWidth = (isLocalRendering && ss.isValue(geo.rightaxis)) ? 1 : 0;
        if (isLocalRendering) {
            var extraHeightRegions = [ geo.yheader, geo.rightaxis, geo.leftaxis, geo.viz ];
            var $enum1 = ss.IEnumerator.getEnumerator(extraHeightRegions);
            while ($enum1.moveNext()) {
                var rect = $enum1.current;
                if (ss.isValue(rect)) {
                    rect.h += extraVizHeight;
                }
            }
            var extraWidthRegions = [ geo.xheader, geo.bottomaxis, geo.topaxis, geo.viz ];
            var $enum2 = ss.IEnumerator.getEnumerator(extraWidthRegions);
            while ($enum2.moveNext()) {
                var rect = $enum2.current;
                if (ss.isValue(rect)) {
                    rect.w += extraVizWidth;
                }
            }
        }
        if (viewHeight < 0) {
            viewHeight = 0;
        }
        if (viewWidth < 0) {
            viewWidth = 0;
        }
        this._titleHeight$2 = 0;
        if (ss.isValue(geo.title) && this.dom.title.css('display') !== 'none') {
            this._titleHeight$2 = geo.title.h;
            var newRect = tab.$create_Rect(0, geo.title.y, geo.title.w + scrollWidth, geo.title.h);
            var oldRect = tab.DomUtil.getMarginBoxJQ(this.dom.title);
            if (!_.isEqual(newRect, oldRect)) {
                tab.DomUtil.setMarginBoxJQ(this.dom.title, newRect);
                this._titleView$2.handleNewTextRegion();
                scrollXTop = Math.max(scrollXTop, geo.title.h + geo.title.y);
            }
        }
        yHeaderBox = function() {
            return tab.$create_Rect(geo.yheader.x, geo.yheader.y, Math.min(geo.yheader.w, containerWidth - scrollWidth), viewHeight + extraVizHeight);
        };
        visGeo.yheaderArea = this.setRegionAndContentGeometry(geo.yheader, this.dom.yLabel, yHeaderBox, 'yheader', geo.ts);
        leftAxisBox = function() {
            return tab.$create_Rect(geo.leftaxis.x, geo.leftaxis.y, geo.leftaxis.w, viewHeight + extraVizHeight);
        };
        visGeo.leftaxisArea = this.setRegionAndContentGeometry(geo.leftaxis, this.dom.leftAxis, leftAxisBox, 'leftaxis', geo.ts);
        rightAxisBox = function() {
            return tab.$create_Rect(geo.rightaxis.x - widthScrollOffset, geo.rightaxis.y, geo.rightaxis.w, viewHeight + extraVizHeight);
        };
        visGeo.rightaxisArea = this.setRegionAndContentGeometry(geo.rightaxis, this.dom.rightAxis, rightAxisBox, 'rightaxis', geo.ts);
        xHeaderBox = function() {
            return tab.$create_Rect(geo.xheader.x, geo.xheader.y, viewWidth + extraVizWidth, geo.xheader.h);
        };
        visGeo.xheaderArea = this.setRegionAndContentGeometry(geo.xheader, this.dom.xLabel, xHeaderBox, 'xheader', geo.ts);
        bottomAxisBox = function() {
            return tab.$create_Rect(geo.bottomaxis.x, geo.bottomaxis.y - heightScrollOffset, viewWidth + extraVizWidth, geo.bottomaxis.h);
        };
        visGeo.bottomaxisArea = this.setRegionAndContentGeometry(geo.bottomaxis, this.dom.bottomAxis, bottomAxisBox, 'bottomaxis', geo.ts);
        topAxisBox = function() {
            return tab.$create_Rect(geo.topaxis.x, geo.topaxis.y, viewWidth + extraVizWidth, geo.topaxis.h);
        };
        visGeo.topaxisArea = this.setRegionAndContentGeometry(geo.topaxis, this.dom.topAxis, topAxisBox, 'topaxis', geo.ts);
        if (this.dom.caption.css('display') !== 'none') {
            var newRect;
            if (ss.isValue(geo.caption)) {
                scrollXTop -= (geo.caption.h + 8 + scrollHeight);
                newRect = tab.$create_Rect(geo.caption.x, geo.caption.y - heightScrollOffset, geo.caption.w, geo.caption.h);
            }
            else {
                newRect = tab.$create_Rect(0, 0, 0, 0);
            }
            var XoldRect = tab.DomUtil.getMarginBoxJQ(this.dom.caption);
            if (!_.isEqual(newRect, XoldRect)) {
                tab.DomUtil.setMarginBoxJQ(this.dom.caption, newRect);
                this._captionView$2.handleNewTextRegion();
            }
        }
        var backgroundDisplayList = null;
        if (isLocalRendering) {
            var backgroundVlvm = this.get_paneTableVM().get_vizRegionMap()['background'];
            if (ss.isValue(backgroundVlvm)) {
                backgroundDisplayList = backgroundVlvm.get_visualListPM().drawItems;
            }
        }
        tlspacerBox = function() {
            return tab.$create_Rect(geo.uleft.x, geo.uleft.y, Math.min(geo.uleft.w, containerWidth - scrollWidth), geo.uleft.h);
        };
        visGeo.uleftArea = this._setRegionGeometry$2(geo.uleft, this.dom.tlSpacer, tlspacerBox);
        if (ss.isValue(geo.uleft)) {
            this._setupCornerRenderer$2(this.dom.tlSpacer, 'uleft', backgroundDisplayList, geo.uleft);
            this._tlspacerAreaY$2 = $.extend({}, visGeo.uleftArea);
            if (ss.isValue(geo.di) && geo.uleft.h >= 40) {
                this._tlspacerAreaY$2.t = geo.uleft.y + geo.uleft.h - 40;
                this._tlspacerAreaY$2.h = 40;
            }
            this._tlspacerAreaX$2 = null;
            if (ss.isValue(geo.di) && ss.isValue(geo.di.xy) && ss.isValue(geo.di.xy[0])) {
                var XspacerW = 18;
                var xh = geo.xheader;
                if (ss.isValue(xh) && xh.h > geo.di.xs) {
                    len = geo.di.xy.length;
                    for (var i = 0; i < len; i++) {
                        if (geo.di.xy[i][1] > 0) {
                            this._tlspacerAreaX$2 = tab.$create_Rect(this._tlspacerAreaY$2.l + this._tlspacerAreaY$2.w - XspacerW, geo.uleft.y, XspacerW, geo.uleft.h);
                            this._tlspacerAreaY$2.w = this._tlspacerAreaX$2.l;
                            break;
                        }
                    }
                }
            }
        }
        else {
            this._tlspacerAreaY$2 = null;
            this._tlspacerAreaX$2 = null;
        }
        urspacerBox = function() {
            return tab.$create_Rect(geo.uright.x - widthScrollOffset, geo.uright.y, Math.min(geo.uright.w, containerWidth - scrollWidth), geo.uright.h);
        };
        this._setRegionGeometry$2(geo.uright, this.dom.trSpacer, urspacerBox);
        if (ss.isValue(geo.uright)) {
            this._setupCornerRenderer$2(this.dom.trSpacer, 'uright', backgroundDisplayList, geo.uright);
        }
        blspacerBox = function() {
            return tab.$create_Rect(geo.lleft.x, geo.lleft.y - heightScrollOffset, geo.lleft.w, geo.lleft.h);
        };
        this._blspacerArea$2 = this._setRegionGeometry$2(geo.lleft, this.dom.blSpacer, blspacerBox);
        if (ss.isValue(geo.lleft)) {
            this._setupCornerRenderer$2(this.dom.blSpacer, 'lleft', backgroundDisplayList, geo.lleft);
        }
        brspacerBox = function() {
            return tab.$create_Rect(geo.lright.x - widthScrollOffset, geo.lright.y - heightScrollOffset, geo.lright.w, geo.lright.h);
        };
        this._setRegionGeometry$2(geo.lright, this.dom.brSpacer, brspacerBox);
        if (ss.isValue(geo.lright)) {
            this._setupCornerRenderer$2(this.dom.brSpacer, 'lright', backgroundDisplayList, geo.lright);
        }
        viewBox = function() {
            return tab.$create_Rect(geo.viz.x, geo.viz.y, viewWidth + extraVizWidth, viewHeight + extraVizHeight);
        };
        this.setRegionAndContentGeometry(geo.viz, this.dom.view, viewBox, 'viz', geo.ts);
        this.setGeometryForWebScrollbars(viewHeight, viewWidth, scrollWidth, scrollHeight, scrollYTop, this._sizeOfRegions$2.w, scrollXTop, scrollXLeft, scrollableHeight, scrollableWidth);
        this.refreshScrollingAndDrilling();
    },
    
    _setRegionGeometry$2: function tab_PaneTableView$_setRegionGeometry$2(rect, domNode, boxFunc) {
        if (ss.isValue(rect)) {
            var marginBoxSpec = boxFunc();
            tab.DomUtil.setMarginBoxJQ(domNode, marginBoxSpec);
            this.setRegionGeometryHelper(domNode, marginBoxSpec);
            domNode.show();
            return tab.DomUtil.getMarginBoxJQ(domNode);
        }
        else {
            domNode.hide();
            return null;
        }
    },
    
    _setupCornerRenderer$2: function tab_PaneTableView$_setupCornerRenderer$2(cornerNode, cornerName, backgroundDisplayList, geomRect) {
        if (ss.isValue(backgroundDisplayList)) {
            var canvasElt = this._ensureFirstChildIsGivenTag$2(cornerNode, 'canvas');
            var context = tab.CanvasRenderer.getRenderContext(canvasElt);
            var width = cornerNode.width();
            var height = cornerNode.height();
            var effectiveCanvasSize = tab.$create_Size(width, height);
            var cornerRenderer = new tab.DisplayList2DRenderer(canvasElt, context);
            tab.CanvasUtil.sizeCanvasWithHighDPISupport(canvasElt, context, effectiveCanvasSize);
            context.setDefaultPropertyValues();
            cornerRenderer.set_renderOffset(tab.$create_Point(geomRect.x, geomRect.y));
            var imageDict = null;
            if (ss.isValue(this.get_paneTableVM()) && ss.isValue(this.get_paneTableVM().get_scene())) {
                imageDict = this.get_paneTableVM().get_scene().get_imageDictionary();
            }
            cornerRenderer.renderDrawItems(backgroundDisplayList, null, imageDict, null);
        }
        else if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            this._ensureFirstChildIsGivenTag$2(cornerNode, 'div');
        }
        else {
            this._ensureFirstChildIsGivenTag$2(cornerNode, 'img');
            this._regionImages$2.add({ name: cornerName, element: cornerNode });
        }
    },
    
    _ensureFirstChildIsGivenTag$2: function tab_PaneTableView$_ensureFirstChildIsGivenTag$2(cornerNode, tagName) {
        var childNode = cornerNode.get(0).firstChild;
        if (!String.equals(childNode.tagName, tagName, true)) {
            childNode = document.createElement(tagName);
            cornerNode.children().first().replaceWith(childNode);
        }
        return childNode;
    },
    
    setRegionAndContentGeometry: function tab_PaneTableView$setRegionAndContentGeometry(rect, domNode, boxFunc, regionKey, tileSize) {
        var toRet = this._setRegionGeometry$2(rect, domNode, boxFunc);
        if (ss.isValue(rect)) {
            var newGeom = boxFunc();
            this.regions[regionKey].setGeometry(rect, newGeom, tileSize);
            if (regionKey === 'viz' && ss.isValue(this._overlayTableView$2)) {
                this._overlayTableView$2.set_actualViewSize(tab.$create_Size(newGeom.w, newGeom.h));
                this._overlayTableView$2.reset(rect, tileSize);
            }
        }
        return toRet;
    },
    
    resolvePane: function tab_PaneTableView$resolvePane(point) {
        var i, len;
        var pi = this.geometry.pi;
        var p = tab.$create_Point(point.x, point.y);
        var pane = tab.$create_PaneInfo(pi.hasXQAxis, pi.hasYQAxis, 0, 0, 0, 0);
        len = pi.xWidths.length;
        for (i = 0; i < len; i++) {
            if (p.x < pane.x + pi.xWidths[i]) {
                pane.tx = i;
                pane.w = pi.xWidths[i];
                break;
            }
            pane.x = pane.x + pi.xWidths[i];
        }
        len = pi.yHeights.length;
        for (i = 0; i < len; i++) {
            if (p.y < pane.y + pi.yHeights[i]) {
                pane.ty = i;
                pane.h = pi.yHeights[i];
                break;
            }
            pane.y = pane.y + pi.yHeights[i];
        }
        return pane;
    },
    
    allowPanZoom: function tab_PaneTableView$allowPanZoom() {
        if (ss.isNullOrUndefined(this.geometry)) {
            return false;
        }
        var hasXQ = this.geometry.pi.hasXQAxis;
        var hasYQ = this.geometry.pi.hasYQAxis;
        return (hasXQ || hasYQ) && tsConfig.allow_filter;
    },
    
    isOneVisiblePane: function tab_PaneTableView$isOneVisiblePane() {
        if (ss.isValue(this.geometry) && ss.isValue(this.geometry.viz)) {
            var i, len;
            var width = this.geometry.viz.w;
            var height = this.geometry.viz.h;
            var xWidths = this.geometry.pi.xWidths;
            var yHeights = this.geometry.pi.yHeights;
            len = xWidths.length;
            for (i = 0; i < len; i++) {
                if (Math.abs(width - xWidths[i]) > 1) {
                    return false;
                }
            }
            len = yHeights.length;
            for (i = 0; i < len; i++) {
                if (Math.abs(height - yHeights[i]) > 1) {
                    return false;
                }
            }
        }
        return true;
    },
    
    createOverlayImageFromDataUri: function tab_PaneTableView$createOverlayImageFromDataUri(imageDataUri) {
        var overlayImage = new tab.OverlayImage(this.dom.view.find('.tvimagesContainer').get(0), 'data:image/png;base64,' + imageDataUri);
        return overlayImage;
    },
    
    createOverlayImageFromFile: function tab_PaneTableView$createOverlayImageFromFile(uri) {
        var overlayImage = new tab.OverlayImage(this.dom.view.find('.tvimagesContainer').get(0), this.get_session().formatSessionTempfileReference(uri, false, false));
        return overlayImage;
    },
    
    updateOverlayTarget: function tab_PaneTableView$updateOverlayTarget(target, targetState, visualPart) {
        if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            return;
        }
        if (!tab.FeatureParamsLookup.getBool(tab.FeatureParam.responsiveUi)) {
            return;
        }
        if (!tab.FeatureFlags.isEnabled('AnalyticsObjectsHoverlays')) {
            return;
        }
        switch (targetState) {
            case 'press':
                this._overlayTableView$2.setPressedOverlayTarget(target, visualPart);
                break;
            case 'hover':
                this._overlayTableView$2.setHoverOverlayTarget(target, visualPart);
                break;
            default:
                break;
        }
    },
    
    updateOverlayForLastTargetState: function tab_PaneTableView$updateOverlayForLastTargetState(target, visualPart) {
        this.updateOverlayTarget(target, this._overlayTableView$2.get_lastTargetState(), visualPart);
    },
    
    hoverOverWhitespace: function tab_PaneTableView$hoverOverWhitespace() {
        this._overlayTableView$2.hoverOverWhitespace();
    },
    
    updateCategoricalHeaders: function tab_PaneTableView$updateCategoricalHeaders(drawGroup, targetState, visualPart) {
        var vlvm = this.get_paneTableVM().get_vizRegionMap()[visualPart];
        if (ss.isNullOrUndefined(vlvm)) {
            return;
        }
        switch (targetState) {
            case 'press':
                vlvm.set_hoverNode(null);
                break;
            case 'hover':
                vlvm.set_hoverNode((this._showVisualFeedbackOnHeader$2(drawGroup)) ? drawGroup : null);
                break;
            default:
                break;
        }
    },
    
    _showVisualFeedbackOnHeader$2: function tab_PaneTableView$_showVisualFeedbackOnHeader$2(drawGroup) {
        var visualModel = this.get_paneTableVM().get_visualModel();
        if (ss.isValue(visualModel) && ss.isValue(drawGroup)) {
            return visualModel.get_vizDataModel().isHeaderFullyNotQuantitative(drawGroup.columnIndices);
        }
        return false;
    },
    
    showOverlayImages: function tab_PaneTableView$showOverlayImages(overlayImage, overlayAnchors) {
        if (ss.isValue(overlayAnchors) && ss.isValue(overlayImage) && overlayAnchors.length > 0) {
            this.disposeOfOverlayImages();
            for (var i = 1; i < overlayAnchors.length; ++i) {
                var clone = overlayImage.clone();
                this._overlayImages$2.add(clone);
                clone.show(overlayAnchors[i]);
            }
            this._overlayImages$2.add(overlayImage);
            overlayImage.show(overlayAnchors[0]);
        }
    },
    
    clickTitle: function tab_PaneTableView$clickTitle(e) {
    },
    
    clickCaption: function tab_PaneTableView$clickCaption(e) {
    },
    
    makeConnections: function tab_PaneTableView$makeConnections() {
    },
    
    setupDrilling: function tab_PaneTableView$setupDrilling() {
    },
    
    setupSortIndicators: function tab_PaneTableView$setupSortIndicators() {
    },
    
    setGeometryForWebScrollbars: function tab_PaneTableView$setGeometryForWebScrollbars(viewHeight, viewWidth, scrollWidth, scrollHeight, scrollYTop, overallWidth, scrollXTop, scrollXLeft, scrollableHeight, scrollableWidth) {
    },
    
    disposeOfOverlayImages: function tab_PaneTableView$disposeOfOverlayImages() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._overlayImages$2);
        while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            if (ss.isValue(overlay)) {
                overlay.dispose();
            }
        }
        this._overlayImages$2.clear();
        if (ss.isValue(this._overlayTableView$2)) {
            this._overlayTableView$2.clearOverlays();
        }
        if (ss.isValue(this._pendingOverlayDrag$2)) {
            window.clearTimeout(this._pendingOverlayDrag$2);
            this._pendingOverlayDrag$2 = null;
        }
    },
    
    _setOverlayScrollPosition$2: function tab_PaneTableView$_setOverlayScrollPosition$2(scrollPosition) {
        if (ss.isValue(this._overlayTableView$2)) {
            this._overlayTableView$2.setScrollPosition(scrollPosition);
        }
    },
    
    checkForDragOverlays: function tab_PaneTableView$checkForDragOverlays() {
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode() && !!tab.FeatureParamsLookup.getBool(tab.FeatureParam.responsiveUi)) {
            if (ss.isValue(this._pendingOverlayDrag$2)) {
                return;
            }
            var deltaTime = this._lastDragTime$2 + 100 - Date.get_now().getTime();
            if (deltaTime <= 0) {
                this._createDragOverlays$2();
            }
            else {
                this._pendingOverlayDrag$2 = window.setTimeout(ss.Delegate.create(this, function() {
                    this._createDragOverlays$2();
                }), Math.min(deltaTime, 100));
            }
        }
    },
    
    _createDragOverlays$2: function tab_PaneTableView$_createDragOverlays$2() {
        this._pendingOverlayDrag$2 = null;
        this._lastDragTime$2 = Date.get_now().getTime();
        var tupleIds = tab.HitTestResult.getIdsFromHitTestResults(this.regions['viz'].hitTestMarksAgainstSelectionShape());
        this._overlayTableView$2.setDragOverlayTuples(tupleIds);
    },
    
    updateRegionContentProvider: function tab_PaneTableView$updateRegionContentProvider(regionKey, canvasView) {
        this.regions[regionKey].set_contentProvider(canvasView);
    },
    
    isSelectActionOnVizAllowed: function tab_PaneTableView$isSelectActionOnVizAllowed(action) {
        return true;
    },
    
    handleLocalTap: function tab_PaneTableView$handleLocalTap(region, action, pageCoords, regionCoords) {
        var hitSomething = false;
        if (this.isSelectActionOnVizAllowed(action)) {
            if (region.get_regionPart() === 'viz') {
                var interactedIds = region.doSelectFromPoint(regionCoords, action);
                var paneDescriptorKey = null;
                if (interactedIds.first.length === 1) {
                    if (ss.isValue(this.get_paneTableVM()) && ss.isValue(this.get_paneTableVM().get_scene()) && interactedIds.second === 'mark') {
                        paneDescriptorKey = tab.SceneUtils.getPaneDescriptorKeyFromTupleId(interactedIds.first[0], this.get_paneTableVM().get_scene().get_scene());
                    }
                    this.get_vizToolTip().singleSelectComplete(pageCoords, regionCoords, interactedIds.first[0], paneDescriptorKey, interactedIds.second, region.get_regionPart());
                    hitSomething = true;
                }
            }
            else if (ss.isValue(region.get_contentProvider())) {
                var selected = region.hitTestNodes(regionCoords);
                var hitNode = ss.isValue(selected);
                if (hitNode) {
                    var tooltipCallback = ss.Delegate.create(this, function() {
                        this.get_vizToolTip().singleSelectCoordinates(pageCoords, regionCoords, region.get_regionPart(), 'header');
                    });
                    region.selectNode(regionCoords, selected, action, tooltipCallback);
                    hitSomething = true;
                }
                else {
                    tab.SelectionClientCommands.clearAllSelections(this.get_visualId());
                }
            }
            if (!hitSomething) {
                this.get_vizToolTip().hoverOverWhitespace(pageCoords, region.get_regionPart());
            }
        }
    },
    
    handleNewVisual: function tab_PaneTableView$handleNewVisual() {
        var css = { top: '0px', left: '0px', right: '0px', bottom: '0px' };
        this.get_template().get_domRoot().css(css);
        if (this.get_paneTableVM().isInvalidSheet()) {
            $('<div/>').text(tab.Strings.BaseClientInvalidSheet(this.get_paneTableVM().get_sheetId())).addClass('wcInvalidSheet').appendTo(this.get_template().get_domRoot()).get(0);
            return;
        }
        if (this._hasBeenDisposed$2) {
            return;
        }
        var visualModel = this.get_paneTableVM().get_visualModel();
        if (ss.isNullOrUndefined(visualModel)) {
            return;
        }
        this.regions['viz']._updateBackgroundMapVisibility();
        var geom = visualModel.get_geometryModel().get_presModel();
        this.setGeometry(geom, visualModel.get_containerGeometry());
        this.isMap = visualModel.get_isMap();
        var updateFloatingZoomToolbarOffset = false;
        if (this.get_mapsSearchEnabled()) {
            if (ss.isNullOrUndefined(this.get_paneTableVM().get_mapsSearchViewModel()) || ss.isNullOrUndefined(this.mapsSearchView)) {
                this.get_paneTableVM().set_mapsSearchViewModel(new tab.MapsSearchViewModel(this.get_paneTableVM().get_visualId()));
                this.get_paneTableVM().get_mapsSearchViewModel().add_onMoveMapToBounds(ss.Delegate.create(this, this.handleMoveMapToBounds));
                this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
                    this.get_paneTableVM().get_mapsSearchViewModel().remove_onMoveMapToBounds(ss.Delegate.create(this, this.handleMoveMapToBounds));
                })));
                this.mapsSearchView = spiff.ObjectRegistry.newView(tab.MapsSearchView, this.get_paneTableVM().get_mapsSearchViewModel());
                this.makeMapsSearchViewConnections();
                this.mapsSearchView.set_isCollapsed(true);
                this.mapsSearchView.addClass('tabSuppressVizTooltipsAndOverlays');
            }
            if (!this._isMapsSearchViewInDom$2) {
                this.mapsSearchView.addToDom(this.dom.view);
                this._isMapsSearchViewInDom$2 = true;
                updateFloatingZoomToolbarOffset = true;
            }
        }
        else {
            if (ss.isValue(this.mapsSearchView)) {
                if (this._isMapsSearchViewInDom$2) {
                    var mapsSearchViewParent = this.mapsSearchView.get_element()[0].parentNode;
                    if (ss.isValue(mapsSearchViewParent)) {
                        mapsSearchViewParent.removeChild(this.mapsSearchView.get_element()[0]);
                        this._isMapsSearchViewInDom$2 = false;
                        updateFloatingZoomToolbarOffset = true;
                    }
                }
                this.mapsSearchView.set_isCollapsed(true);
                this.mapsSearchView.set_isVisible(false);
            }
        }
        var newFtv = visualModel.get_floatingToolbarVisibility();
        if (ss.isValue(this.zoomToolbar) && (this.ftv !== newFtv || !!updateFloatingZoomToolbarOffset)) {
            this.zoomToolbar.dispose();
            this.zoomToolbar = null;
        }
        this.ftv = newFtv;
        if (this.get_paneTableVM().shouldEnableZoomHomeToolbar() && ss.isNullOrUndefined(this.zoomToolbar)) {
            this.createZoomToolbar();
        }
        if (ss.isValue(this.zoomToolbar)) {
            this.zoomToolbar.setZoomHomePossibility(this.get_paneTableVM().shouldEnableZoomHomeToolbar());
        }
        this.updateRegionBGColor();
        this._updateMapAttribution$2();
    },
    
    _updateMapAttribution$2: function tab_PaneTableView$_updateMapAttribution$2() {
        var ms = this.get_paneTableVM().get_mapServerModel();
        if (ss.isValue(ms) && ms.get_hasPresModel() && ms.get_isAttributionVisible()) {
            if (ss.isNullOrUndefined(this._mapAttribution$2)) {
                this._mapAttribution$2 = new tab.MapAttributionTemplate();
                this._mapAttribution$2.attributionBackground.css('background-color', ms.get_attributionBGColor());
                this._mapAttribution$2.attributionLink.text(ms.get_attributionText());
                this._mapAttribution$2.attributionLink.css('color', ms.get_attributionTextColor());
                this._mapAttribution$2.attributionLink.css('font-size', ms.get_attributionTextSize());
                this._mapAttribution$2.attributionLink.attr('href', ms.get_attributionUrl());
                this._mapAttribution$2.attributionLink.attr('target', '_blank');
                this.dom.view.append(this._mapAttribution$2.get_domRoot());
                this._updateMapAttributionPlacement$2();
            }
        }
        else {
            if (ss.isValue(this._mapAttribution$2)) {
                this._mapAttribution$2.dispose();
                this._mapAttribution$2 = null;
            }
        }
    },
    
    _updateMapAttributionPlacement$2: function tab_PaneTableView$_updateMapAttributionPlacement$2() {
        if (ss.isValue(this._mapAttribution$2)) {
            var BottomPadding = 1;
            var LeftPadding = 1;
            var viewSize = this.regions['viz'].get_contentProvider().get_effectiveViewSize();
            var documentSize = this.regions['viz'].get_contentProvider().get_docSize();
            var bottomPosition = Math.min(0, viewSize.h + this._scrollPos$2.y - documentSize.h);
            bottomPosition += BottomPadding;
            var leftPosition = Math.min(0, -this._scrollPos$2.x);
            leftPosition += LeftPadding;
            this._mapAttribution$2.get_domRoot().css('bottom', bottomPosition + 'px');
            this._mapAttribution$2.get_domRoot().css('left', leftPosition + 'px');
        }
    },
    
    _initialImageRefresh$2: function tab_PaneTableView$_initialImageRefresh$2() {
        var cache = this.get_paneTableVM().get_cacheUrlInfo();
        this.refreshImages(cache);
    },
    
    _updateRegionContentProviders$2: function tab_PaneTableView$_updateRegionContentProviders$2() {
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            var domNodePartMap = this.listNonVizRegions();
            this.regions['viz']._resetView();
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(this.get_paneTableVM().get_vizRegionMap()));
            while ($enum1.moveNext()) {
                var part = $enum1.current;
                var regionPart = tab.ModelUtils.visualPartToRegionMap[part];
                if (ss.isValue(regionPart) && ss.isValue(this.regions[regionPart])) {
                    if (ss.isNullOrUndefined(this.regions[regionPart].get_contentProvider())) {
                        var domNode = domNodePartMap[regionPart];
                        if (domNode != null) {
                            var vlvm = this.get_paneTableVM().get_vizRegionMap()[part];
                            var canvasView = new tab.SimpleRegionCanvasView(vlvm, this.getDomNodeForContentRegion(domNode), this.get_paneTableVM());
                            domNode.find('.tvimagesContainer').append(canvasView.get_element());
                            this.updateRegionContentProvider(regionPart, canvasView);
                            canvasView.invalidate(false);
                            this._cachedGeometry$2 = null;
                        }
                    }
                    else {
                        this.regions[regionPart]._resetView();
                    }
                }
            }
            var $enum2 = ss.IEnumerator.getEnumerator(Object.keys(tab.ModelUtils.visualPartToRegionMap));
            while ($enum2.moveNext()) {
                var part = $enum2.current;
                var regionPart = tab.ModelUtils.visualPartToRegionMap[part];
                if (!Object.keyExists(this.get_paneTableVM().get_vizRegionMap(), part) && ss.isValue(this.regions[regionPart]) && ss.isValue(this.regions[regionPart].get_contentProvider())) {
                    this.regions[regionPart].get_contentProvider().destroy();
                    this.regions[regionPart].set_contentProvider(null);
                }
            }
        }
    },
    
    _getRID$2: function tab_PaneTableView$_getRID$2() {
        return this._timestamp$2.toString() + 'Z' + this._requestId$2.toString();
    },
    
    showFloatingZoomToolbar: function tab_PaneTableView$showFloatingZoomToolbar(show) {
        if (show && ss.isNullOrUndefined(this.zoomToolbar)) {
            this.createZoomToolbar();
        }
        if (ss.isValue(this.zoomToolbar)) {
            this.zoomToolbar.setZoomHomePossibility(this.get_paneTableVM().shouldEnableZoomHomeToolbar());
            this.zoomToolbar.setActiveState(show);
        }
    },
    
    createZoomToolbar: function tab_PaneTableView$createZoomToolbar() {
        if (tsConfig.allow_filter) {
            this.zoomToolbar = this.makeFloatingZoomToolbar(this.dom.view);
        }
    },
    
    handleMoveMapToBounds: function tab_PaneTableView$handleMoveMapToBounds(bounds) {
        if (ss.isValue(this.regions['viz']) && !!tab.FeatureParamsLookup.getBool(tab.FeatureParam.mapsUseLeafletForGeoSearch)) {
            this.regions['viz'].moveMapToBounds(bounds);
        }
    },
    
    _attachStaticEventHandlers$2: function tab_PaneTableView$_attachStaticEventHandlers$2() {
        var attachActiveZoneHandler = ss.Delegate.create(this, function(o) {
            var spec = spiff.$create_EventHandleSpec();
            spec.tap = ss.Delegate.create(this, function(e) {
                e.stopPropagation();
                e.preventDefault();
                this.clearSelection();
            });
            this.disposables.add(new spiff.TableauEventHandler(o.get(0), spec));
        });
        attachActiveZoneHandler(this.dom.tlSpacer);
        attachActiveZoneHandler(this.dom.trSpacer);
        attachActiveZoneHandler(this.dom.blSpacer);
        attachActiveZoneHandler(this.dom.brSpacer);
        attachActiveZoneHandler(this.dom.title);
        attachActiveZoneHandler(this.dom.caption);
    },
    
    _makeSubscriptions$2: function tab_PaneTableView$_makeSubscriptions$2() {
        this.disposables.add(new tab.SubscriptionDisposable(this.get_session().registerEventListener('selectionChanged', ss.Delegate.create(this, this._onSelectionChanged$2))));
    },
    
    onAddedToDom: function tab_PaneTableView$onAddedToDom() {
        tab.PaneTableView.callBaseMethod(this, 'onAddedToDom');
        this.handleNewVisual();
        if (this.get_paneTableVM().get_visualModel().get_isVisualValid()) {
            this._initialImageRefresh$2();
        }
    },
    
    checkForSuppressTooltipsAndOverlays: function tab_PaneTableView$checkForSuppressTooltipsAndOverlays(element) {
        var queryObject = $(element);
        var hasSuppressClass = queryObject.hasClass('tabSuppressVizTooltipsAndOverlays') || queryObject.parents('.' + 'tabSuppressVizTooltipsAndOverlays').length > 0;
        this.get_vizToolTip().get_tooltip().setSuppressTooltip(hasSuppressClass);
        if (hasSuppressClass) {
            this.disposeOfOverlayImages();
        }
    },
    
    _ensureTooltip$2: function tab_PaneTableView$_ensureTooltip$2() {
        if (ss.isNullOrUndefined(this._vizTooltip$2)) {
            this._vizTooltip$2 = this.makeTooltip();
            this.connectTooltipEventHandlers();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneTableTemplate

tab.PaneTableTemplate = function tab_PaneTableTemplate(root) {
    tab.PaneTableTemplate.initializeBase(this, [ root ]);
    var g = ss.Delegate.create(this, this.getElementBySelector);
    this.enclosingDiv = g('.tab-clip');
    this.yLabel = g('.tab-tvYLabel');
    this.leftAxis = g('.tab-tvLeftAxis');
    this.rightAxis = g('.tab-tvRightAxis');
    this.xLabel = g('.tab-tvXLabel');
    this.bottomAxis = g('.tab-tvBottomAxis');
    this.topAxis = g('.tab-tvTopAxis');
    this.view = g('.tab-tvView');
    this.title = g('.tab-tvTitle');
    this.caption = g('.tab-tvCaption');
    this.tlSpacer = g('.tab-tvTLSpacer');
    this.trSpacer = g('.tab-tvTRSpacer');
    this.blSpacer = g('.tab-tvBLSpacer');
    this.brSpacer = g('.tab-tvBRSpacer');
    g('.tvViewportBorders').append($(tab.PaneTableTemplate._bordersHTML$1));
}
tab.PaneTableTemplate.prototype = {
    enclosingDiv: null,
    yLabel: null,
    leftAxis: null,
    rightAxis: null,
    xLabel: null,
    bottomAxis: null,
    topAxis: null,
    view: null,
    title: null,
    caption: null,
    tlSpacer: null,
    trSpacer: null,
    blSpacer: null,
    brSpacer: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.MapAttributionTemplate

tab.MapAttributionTemplate = function tab_MapAttributionTemplate() {
    tab.MapAttributionTemplate.initializeBase(this, [ $(tab.MapAttributionTemplate._htmlTemplate$1) ]);
    this.attributionBackground = this.getElementBySelector('.tabMapAttributionBackground');
    this.attributionLink = this.getElementBySelector('.tabMapAttributionLink');
}
tab.MapAttributionTemplate.prototype = {
    attributionBackground: null,
    attributionLink: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParameterControlView

tab.ParameterControlView = function tab_ParameterControlView(viewModel) {
    tab.ParameterControlView.initializeBase(this, [ viewModel, new tab.ParameterControlTemplate() ]);
    this._parameterViewModel$2 = viewModel;
    this._parameterViewModel$2.add_newParameterControl(ss.Delegate.create(this, this.handleNewParameterControl));
    this._parameterViewModel$2.add_resized(ss.Delegate.create(this, this.updateSize));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._parameterViewModel$2.remove_newParameterControl(ss.Delegate.create(this, this.handleNewParameterControl));
    })));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._parameterViewModel$2.remove_resized(ss.Delegate.create(this, this.updateSize));
    })));
    if (this._parameterViewModel$2.get_hasBorder()) {
        this.get_template().get_domRoot().addClass('tabBordered');
    }
}
tab.ParameterControlView.prototype = {
    _parameterViewModel$2: null,
    _node$2: null,
    
    get_zonePresModel: function tab_ParameterControlView$get_zonePresModel() {
        return this._parameterViewModel$2.get_zone();
    },
    
    get_domRoot: function tab_ParameterControlView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    get__frame$2: function tab_ParameterControlView$get__frame$2() {
        return this._parameterViewModel$2.get_frame();
    },
    
    dispose: function tab_ParameterControlView$dispose() {
        if (ss.isValue(this._node$2)) {
            this._node$2.destroyRecursive(false);
            this._node$2 = null;
        }
        tab.ParameterControlView.callBaseMethod(this, 'dispose');
    },
    
    onAddedToDom: function tab_ParameterControlView$onAddedToDom() {
        tab.ParameterControlView.callBaseMethod(this, 'onAddedToDom');
        if (ss.isValue(this._parameterViewModel$2.get_parameterCtrlModel())) {
            this.handleNewParameterControl();
        }
    },
    
    handleNewParameterControl: function tab_ParameterControlView$handleNewParameterControl() {
        if (ss.isNullOrUndefined(this._node$2)) {
            this._node$2 = this.createParameterControl();
            this.get_template().get_domRoot().append(this._node$2.domNode);
            this._node$2.startup();
            tab.DomUtil.resize(this._node$2, tab.ZoneView.viewRect(this.get_zonePresModel()));
        }
        else {
            var updatedProperties = this.createParameterControlProperties();
            this._node$2.updateProperties(updatedProperties);
        }
        this._node$2.layout();
    },
    
    updateSize: function tab_ParameterControlView$updateSize() {
        tab.DomUtil.resize(this._node$2, tab.ZoneView.viewRect(this.get_zonePresModel()));
        this._node$2.layout();
    },
    
    createParameterControlProperties: function tab_ParameterControlView$createParameterControlProperties() {
        var oProps = {};
        oProps.session = this._parameterViewModel$2.get_layoutSession();
        oProps.zid = this.get_zonePresModel().zoneId.toString();
        oProps.field = this.get__frame$2().param;
        if (ss.isValue(this.get_zonePresModel().styledBox.fillColor)) {
            oProps.backgroundColor = this.get_zonePresModel().styledBox.fillColor;
        }
        oProps.titleH = this.get__frame$2().titleH;
        oProps.titleW = this.get__frame$2().titleW;
        if (ss.isValue(this.get_zonePresModel().zoneTitle)) {
            oProps.titleHTML = this.get_zonePresModel().zoneTitle.html;
            var titleWidth = this.get_zonePresModel().zoneTitle.w;
            oProps.titleW = (!oProps.titleW) ? 0 : titleWidth;
        }
        if (ss.isValue(this.get__frame$2().format)) {
            oProps.format = this.get__frame$2().format;
        }
        if (ss.isValue(this.get__frame$2().attributes)) {
            oProps.attributes = this.get__frame$2().attributes;
        }
        oProps.viewModel = this._parameterViewModel$2;
        return oProps;
    },
    
    createParameterControl: function tab_ParameterControlView$createParameterControl() {
        var oProps = this.createParameterControlProperties();
        this._node$2 = this.makeParameterControl(oProps);
        return this._node$2;
    },
    
    makeParameterControl: function tab_ParameterControlView$makeParameterControl(oProps) {
        return new tableau.base.widget.ParameterControl(oProps);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParameterControlTemplate

tab.ParameterControlTemplate = function tab_ParameterControlTemplate() {
    tab.ParameterControlTemplate.initializeBase(this, [ $("<div class='tab-parameter'></div>") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuantitativeColorLegendView

tab.QuantitativeColorLegendView = function tab_QuantitativeColorLegendView(viewModel) {
    tab.QuantitativeColorLegendView.initializeBase(this, [ viewModel, new tab.QuantitativeColorLegendTemplate() ]);
}
tab.QuantitativeColorLegendView.setDomNodeStyleSize = function tab_QuantitativeColorLegendView$setDomNodeStyleSize(domNode, width, height) {
    domNode.css('width', width + 'px');
    domNode.css('height', height + 'px');
}
tab.QuantitativeColorLegendView.prototype = {
    
    get__quantColorLegendViewModel$3: function tab_QuantitativeColorLegendView$get__quantColorLegendViewModel$3() {
        return this.get_viewModel();
    },
    
    get__quantColorLegendTemplate$3: function tab_QuantitativeColorLegendView$get__quantColorLegendTemplate$3() {
        return this.get_template();
    },
    
    onAddedToDom: function tab_QuantitativeColorLegendView$onAddedToDom() {
        tab.QuantitativeColorLegendView.callBaseMethod(this, 'onAddedToDom');
        this._drawLegend$3();
    },
    
    onViewModelPropertyChanged: function tab_QuantitativeColorLegendView$onViewModelPropertyChanged(sender, e) {
        if (e.get_propertyName() === 'isActiveZone') {
        }
        else if (e.get_propertyName() === 'ParentZoneSizeChanged') {
            var parentZoneSize = this.get__quantColorLegendViewModel$3().get__parentZoneSize();
            if (parentZoneSize.w === this.get__quantColorLegendTemplate$3().panel.width() && parentZoneSize.h === this.get__quantColorLegendTemplate$3().panel.height()) {
            }
            else {
                this._resetLegend$3();
            }
        }
        else if (e.get_propertyName() === 'ModelChanged') {
            this._resetLegend$3();
        }
    },
    
    _resetLegend$3: function tab_QuantitativeColorLegendView$_resetLegend$3() {
        this._drawLegend$3();
    },
    
    _drawLegend$3: function tab_QuantitativeColorLegendView$_drawLegend$3() {
        this.drawTitle();
        var htmlId = 'tableau_qcolor_legend_' + encodeURIComponent((this.get__quantColorLegendViewModel$3().get_visualId().worksheet));
        this.get__quantColorLegendTemplate$3().panel.get(0).id = htmlId;
        var legendPM = this.get__quantColorLegendViewModel$3().get_quantColorLegendPresModel();
        var panelWidth = this.get__quantColorLegendViewModel$3().get__parentZoneSize().w;
        var panelHeight = this.get__quantColorLegendViewModel$3().get__parentZoneSize().h;
        if (!this.get_legendViewModel().get_titleInline()) {
            this.get__quantColorLegendTemplate$3().titleArea.width(panelWidth);
        }
        tab.QuantitativeColorLegendView.setDomNodeStyleSize(this.get__quantColorLegendTemplate$3().panel, panelWidth, panelHeight);
        var rectRamp = $.extend(true, {}, legendPM.quantitativeLegendLayout.rectRamp);
        var ramp = this.get__quantColorLegendTemplate$3().ramp;
        var canvas = ramp.get(0);
        var context = new tab.TabRenderContext2D(canvas.getContext('2d'));
        context.save();
        tab.DisplayList2DRenderer.setTextProperties(context, legendPM.labelTextStyle, 0);
        var labelsAreInline = legendPM.quantitativeLegendLayout.rectMinLabel.x + legendPM.quantitativeLegendLayout.rectMinLabel.w < rectRamp.x;
        var rectMinLabel = legendPM.quantitativeLegendLayout.rectMinLabel;
        var minLabel = this.get__quantColorLegendTemplate$3().minLabel;
        minLabel.css('left', rectMinLabel.x.toString() + 'px');
        minLabel.css('top', rectMinLabel.y.toString() + 'px');
        minLabel.css('width', rectMinLabel.w.toString() + 'px');
        minLabel.css('height', rectMinLabel.h.toString() + 'px');
        minLabel.css('line-height', rectMinLabel.h.toString() + 'px');
        minLabel.css('text-align', (legendPM.quantitativeLegendLayout.isSingleLabel) ? 'center' : 'left');
        var textStyle = legendPM.labelTextStyle;
        minLabel.css(tab.FormattingConverters._makeFormatStyleDict(textStyle, null));
        minLabel.text(legendPM.minLabel);
        if (labelsAreInline) {
            var labelOverflow = Math.round(context.measureText(legendPM.minLabel).width) - rectMinLabel.w;
            labelOverflow = this._calculateLabelAdjustment$3(labelOverflow, rectRamp.w);
            if (labelOverflow > 0) {
                rectRamp.x += labelOverflow;
                rectRamp.w -= labelOverflow;
            }
        }
        var maxLabel = this.get__quantColorLegendTemplate$3().maxLabel;
        if (legendPM.quantitativeLegendLayout.isSingleLabel) {
            maxLabel.css('visibility', 'hidden');
        }
        else {
            maxLabel.css('visibility', 'visible');
            var rectMaxLabel = legendPM.quantitativeLegendLayout.rectMaxLabel;
            maxLabel.css('left', rectMaxLabel.x.toString() + 'px');
            maxLabel.css('top', rectMaxLabel.y.toString() + 'px');
            maxLabel.css('width', rectMaxLabel.w.toString() + 'px');
            maxLabel.css('height', rectMaxLabel.h.toString() + 'px');
            maxLabel.css('line-height', rectMaxLabel.h.toString() + 'px');
            maxLabel.css('text-align', 'right');
            var textStyle = legendPM.labelTextStyle;
            maxLabel.css(tab.FormattingConverters._makeFormatStyleDict(textStyle, null));
            maxLabel.text(legendPM.maxLabel);
            if (labelsAreInline) {
                var labelOverflow = Math.max(0, Math.round(context.measureText(legendPM.maxLabel).width) - rectMaxLabel.w);
                labelOverflow += this.get__quantColorLegendViewModel$3().get_borderWidth() * 2;
                labelOverflow = this._calculateLabelAdjustment$3(labelOverflow, rectRamp.w);
                if (labelOverflow > 0) {
                    maxLabel.css('left', (rectMaxLabel.x - labelOverflow).toString() + 'px');
                    rectRamp.w -= labelOverflow;
                }
            }
        }
        context.restore();
        ramp.css('left', rectRamp.x.toString() + 'px');
        ramp.css('top', rectRamp.y.toString() + 'px');
        var borderSize = legendPM.rampBorderStyledBox.uw * 2;
        var effectiveWidth = rectRamp.w - borderSize + 1;
        var effectiveHeight = rectRamp.h - borderSize + 1;
        ramp.css('width', effectiveWidth + 'px');
        ramp.css('height', effectiveHeight + 'px');
        var effectiveSize = tab.$create_Size(effectiveWidth, effectiveHeight);
        tab.CanvasUtil.sizeCanvasWithHighDPISupport(canvas, context, effectiveSize);
        context.save();
        var colors = this.get__quantColorLegendViewModel$3().get_rampColorSamplesAsColorModels();
        var colorCount = colors.length;
        if (legendPM.isColorStepped) {
            var currentStartStep = 0;
            var widthIncrement = Math.round(effectiveWidth / colorCount);
            for (var ii = 0; ii < colorCount - 1; ++ii) {
                context.set_shapeFillStyle(colors[ii]);
                context.fillRect(currentStartStep, 0, widthIncrement + 1, effectiveHeight);
                currentStartStep += widthIncrement;
            }
            var remainingWidth = canvas.width - currentStartStep;
            context.set_shapeFillStyle(colors[colorCount - 1]);
            context.fillRect(currentStartStep, 0, remainingWidth, effectiveHeight);
        }
        else {
            var gradient = context.createLinearGradient(0, 0, effectiveWidth, 0);
            var colorStopIncrement = 1 / (colorCount - 1);
            for (var ii = 0; ii < colorCount; ++ii) {
                var colorStop = ii * colorStopIncrement;
                gradient.addColorStop(colorStop, colors[ii]);
            }
            context.set_shapeFillStyle(gradient);
            context.fillRect(0, 0, effectiveWidth, effectiveHeight);
        }
        context.restore();
        var rampBorderStyle = tab.FormattingConverters._makeBorderStyleDict(legendPM.rampBorderStyledBox);
        ramp.css(rampBorderStyle);
        if (legendPM.isColorDiverging) {
            this.get__quantColorLegendTemplate$3().centerMark.css('visibility', 'visible');
            var left = legendPM.quantitativeLegendLayout.centerMarkLineBegin.x;
            var top = legendPM.quantitativeLegendLayout.centerMarkLineBegin.y;
            var bottom = legendPM.quantitativeLegendLayout.centerMarkLineEnd.y;
            var height = bottom - top;
            if (labelsAreInline && rectRamp.w !== legendPM.quantitativeLegendLayout.rectRamp.w) {
                var origRampRect = legendPM.quantitativeLegendLayout.rectRamp;
                var leftAsRatio = (left - origRampRect.x) / origRampRect.w;
                left = rectRamp.x + Math.ceil(leftAsRatio * rectRamp.w);
            }
            this.get__quantColorLegendTemplate$3().centerMark.css('left', left.toString() + 'px');
            this.get__quantColorLegendTemplate$3().centerMark.css('top', top.toString() + 'px');
            this.get__quantColorLegendTemplate$3().centerMark.width(1);
            this.get__quantColorLegendTemplate$3().centerMark.height(height);
            this.get__quantColorLegendTemplate$3().centerMark.css('background-color', 'black');
        }
        else {
            this.get__quantColorLegendTemplate$3().centerMark.css('visibility', 'hidden');
        }
    },
    
    _calculateLabelAdjustment$3: function tab_QuantitativeColorLegendView$_calculateLabelAdjustment$3(labelOverflow, rampWidth) {
        var toRet = 0;
        if (labelOverflow > 0 && rampWidth > 1) {
            toRet = Math.min(labelOverflow, Math.floor(rampWidth * 0.15));
        }
        return toRet;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuantitativeColorLegendTemplate

tab.QuantitativeColorLegendTemplate = function tab_QuantitativeColorLegendTemplate() {
    tab.QuantitativeColorLegendTemplate.initializeBase(this, [ $("\n            <div class='tabLegendPanel' style='position: relative; overflow: hidden'>\n                <div class='tabLegendTitle' style='position: absolute'></div>\n                <canvas class='tabLegendRamp' style='position: absolute'></canvas>\n                <div class='tabLegendCenterMark' style='position: absolute'></div>\n                <div class='tabLegendMinLabel' style='position: absolute'></div>\n                <div class='tabLegendMaxLabel' style='position: absolute'></div>\n            </div>") ]);
    this.panel = this.get_domRoot();
    this.ramp = this.getElementBySelector('.tabLegendRamp');
    this.centerMark = this.getElementBySelector('.tabLegendCenterMark');
    this.minLabel = this.getElementBySelector('.tabLegendMinLabel');
    this.maxLabel = this.getElementBySelector('.tabLegendMaxLabel');
}
tab.QuantitativeColorLegendTemplate.prototype = {
    panel: null,
    ramp: null,
    centerMark: null,
    minLabel: null,
    maxLabel: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ImageZoneView

tab.ImageZoneView = function tab_ImageZoneView(viewModel, parentZoneViewModel) {
    tab.ImageZoneView.initializeBase(this, [ viewModel, new tab.ImageZoneTemplate() ]);
    this._parentZoneViewModel$2 = parentZoneViewModel;
    this.get__imageVM$2().add_newImageZone(ss.Delegate.create(this, this.handleNewImageZone));
    this._parentZoneViewModel$2.add_resizeZone(ss.Delegate.create(this, this._handleResizeZone$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get__imageVM$2().remove_newImageZone(ss.Delegate.create(this, this.handleNewImageZone));
        this._parentZoneViewModel$2.remove_resizeZone(ss.Delegate.create(this, this._handleResizeZone$2));
        this._parentZoneViewModel$2 = null;
    })));
}
tab.ImageZoneView.prototype = {
    _parentZoneViewModel$2: null,
    _internalImageNode$2: null,
    _cachedPrescaledImage$2: null,
    
    get_domRoot: function tab_ImageZoneView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    get_image: function tab_ImageZoneView$get_image() {
        return this._internalImageNode$2;
    },
    
    get__imageVM$2: function tab_ImageZoneView$get__imageVM$2() {
        return this.get_viewModel();
    },
    
    onAddedToDom: function tab_ImageZoneView$onAddedToDom() {
        tab.ImageZoneView.callBaseMethod(this, 'onAddedToDom');
        this.handleNewImageZone();
    },
    
    handleNewImageZone: function tab_ImageZoneView$handleNewImageZone() {
        this.createImageZoneView();
    },
    
    createImageZoneView: function tab_ImageZoneView$createImageZoneView() {
        var css = { position: 'absolute', overflow: 'hidden', top: '0px', left: '0px', right: '0px', bottom: '0px' };
        this.get_template().get_domRoot().css(css);
        if (!this._imageNodeIsValid$2()) {
            this._internalImageNode$2 = this._createImageNodeAndAddToDom$2();
        }
        else {
            this._styleImageNodeAndAddToDom$2();
        }
    },
    
    _imageNodeIsValid$2: function tab_ImageZoneView$_imageNodeIsValid$2() {
        var imageNode = this.get_image();
        if (ss.isNullOrUndefined(imageNode) || imageNode.attr('src') !== this.get__imageVM$2().get_imageUrl()) {
            return false;
        }
        else {
            var naturalImageWidth = imageNode.get(0).width;
            var naturalImageHeight = imageNode.get(0).height;
            if (!naturalImageWidth && !naturalImageHeight) {
                return false;
            }
        }
        return true;
    },
    
    _createImageNodeAndAddToDom$2: function tab_ImageZoneView$_createImageNodeAndAddToDom$2() {
        var imgNode = $('<img>');
        var onload = ss.Delegate.create(this, function() {
            if (this._internalImageNode$2 == null) {
                window.setTimeout(ss.Delegate.create(this, function() {
                    this._cachedPrescaledImage$2 = imgNode.get(0);
                    this._styleImageNodeAndAddToDom$2();
                }), 1);
            }
            else {
                this._cachedPrescaledImage$2 = imgNode.get(0);
                this._styleImageNodeAndAddToDom$2();
            }
            imgNode.unbind('load');
        });
        imgNode.bind('load', onload);
        var imageUrl = this.get__imageVM$2().get_imageUrl();
        imgNode.css('border', 'none').attr('src', imageUrl);
        if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 7) {
            imgNode.css('position', 'absolute');
        }
        return imgNode;
    },
    
    _addImageToDom$2: function tab_ImageZoneView$_addImageToDom$2(node) {
        this.get_template().get_domRoot().empty();
        this.get_template().get_domRoot().append(node);
    },
    
    _handleResizeZone$2: function tab_ImageZoneView$_handleResizeZone$2() {
        this._styleImageNodeAndAddToDom$2();
    },
    
    _styleImageNodeAndAddToDom$2: function tab_ImageZoneView$_styleImageNodeAndAddToDom$2() {
        var imagePresModel = this.get__imageVM$2().get_imageZonePresModel();
        if (imagePresModel.isScaled) {
            this._scaleImageNode$2();
        }
        var wrappedImageNode = this._wrapImageNode$2();
        this._addImageToDom$2(wrappedImageNode);
        if (imagePresModel.isCentered) {
            this._centerImageNode$2(wrappedImageNode);
        }
        return wrappedImageNode;
    },
    
    _createImageNodeWrapper$2: function tab_ImageZoneView$_createImageNodeWrapper$2() {
        var zonePresModel = this.get__imageVM$2().get_zonePresModel();
        var imagePresModel = this.get__imageVM$2().get_imageZonePresModel();
        var url = tab.URIUtil.absolutizeURI(imagePresModel.url);
        var placeImageInAnchor = (zonePresModel.zoneType === 'bitmap' && !tab.MiscUtil.isNullOrEmpty(imagePresModel.imageKey) && !tab.MiscUtil.isNullOrEmpty(url));
        if (placeImageInAnchor) {
            return $('<a/>').attr('href', url).attr('target', '_blank').css({ position: 'absolute', outline: 'none' });
        }
        else {
            return $('<div/>');
        }
    },
    
    _wrapImageNode$2: function tab_ImageZoneView$_wrapImageNode$2() {
        var imageNode = this.get_image();
        var wrapper = this._createImageNodeWrapper$2();
        wrapper.append(imageNode);
        return wrapper;
    },
    
    _scaleImageNode$2: function tab_ImageZoneView$_scaleImageNode$2() {
        var zone = this.get__imageVM$2().get_zonePresModel();
        var naturalImageWidth = this._cachedPrescaledImage$2.width;
        var naturalImageHeight = this._cachedPrescaledImage$2.height;
        if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() > 8) {
            naturalImageWidth = this._cachedPrescaledImage$2.naturalWidth;
            naturalImageHeight = this._cachedPrescaledImage$2.naturalHeight;
        }
        var newWidth = 0;
        var newHeight = 0;
        var imageNodeStyle;
        if (naturalImageWidth / zone.w >= naturalImageHeight / zone.h) {
            imageNodeStyle = { width: zone.w.toString() + 'px', height: 'auto' };
            newWidth = zone.w;
            newHeight = parseInt(((zone.w / naturalImageWidth) * naturalImageHeight));
        }
        else {
            imageNodeStyle = { height: zone.h.toString() + 'px', width: 'auto' };
            newHeight = zone.h;
            newWidth = parseInt(((zone.h / naturalImageHeight) * naturalImageWidth));
        }
        if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() > 8) {
            var deviceXdpi = window.screen.deviceXDPI;
            var systemXdpi = window.screen.systemXDPI;
            var browserZoomedIn = (deviceXdpi / systemXdpi) > 1;
            if (!browserZoomedIn && newWidth > 0 && newHeight > 0 && newWidth / naturalImageWidth < 0.75 && naturalImageWidth < 500 && naturalImageHeight < 500) {
                var oldSrc = this._internalImageNode$2.get(0).getAttribute('src');
                var scaledCanvas = tab.ImageUtil.scaleImage(this._cachedPrescaledImage$2, newWidth, newHeight, naturalImageWidth, naturalImageHeight);
                this._internalImageNode$2 = $(scaledCanvas);
                this._internalImageNode$2.get(0).setAttribute('src', oldSrc);
                imageNodeStyle = { width: newWidth + 'px', height: newHeight + 'px' };
            }
            else {
                this._internalImageNode$2 = $(this._cachedPrescaledImage$2);
            }
        }
        this._internalImageNode$2.css(imageNodeStyle);
    },
    
    _centerImageNode$2: function tab_ImageZoneView$_centerImageNode$2(wrappedImageNode) {
        var zone = this.get__imageVM$2().get_zonePresModel();
        var top = (zone.h - this.get_image().height()) / 2;
        var left = (zone.w - this.get_image().width()) / 2;
        wrappedImageNode.css({ position: 'absolute', top: top.toString() + 'px', left: left.toString() + 'px' });
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ImageZoneTemplate

tab.ImageZoneTemplate = function tab_ImageZoneTemplate() {
    tab.ImageZoneTemplate.initializeBase(this, [ $("<div class='tab-image'></div>") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuantitativeDateFilter

tab.QuantitativeDateFilter = function tab_QuantitativeDateFilter(props) {
    this._showFullDateTimes$3 = tab.DateTimeAutoFormatMode.showDateOnly;
    tab.QuantitativeDateFilter.initializeBase(this, [ props ]);
}
tab.QuantitativeDateFilter.getDateTimeFormatMode = function tab_QuantitativeDateFilter$getDateTimeFormatMode(values, aggType, format, previousShowMode) {
    if (ss.isNullOrUndefined(format) || ss.isNullOrUndefined((format).isAutoFormat) || !(format).isAutoFormat) {
        return tab.DateTimeAutoFormatMode.showDateOnly;
    }
    if (tab.QuantitativeDateFilter.isPureTime(values, aggType)) {
        return tab.DateTimeAutoFormatMode.showTimeOnly;
    }
    if (previousShowMode === tab.DateTimeAutoFormatMode.showFullDateTime) {
        return tab.DateTimeAutoFormatMode.showFullDateTime;
    }
    var $enum1 = ss.IEnumerator.getEnumerator(values);
    while ($enum1.moveNext()) {
        var val = $enum1.current;
        if (tableau.format.isDateTimeWithNonMidnightTime(val)) {
            return tab.DateTimeAutoFormatMode.showFullDateTime;
        }
    }
    return tab.DateTimeAutoFormatMode.showDateOnly;
}
tab.QuantitativeDateFilter.isPureTime = function tab_QuantitativeDateFilter$isPureTime(values, aggType) {
    var valuesHaveSameDate = tab.FilterModel.timestampsWithSameDateOrNull(values);
    var truncLevelRequiresDateSelection = (aggType === 'trunc-qtr' || aggType === 'trunc-week' || aggType === 'trunc-day');
    return valuesHaveSameDate && !truncLevelRequiresDateSelection;
}
tab.QuantitativeDateFilter.prototype = {
    _calendarControl$3: null,
    _focusedInput$3: null,
    _calendarClicked$3: false,
    
    get_editingFormat: function tab_QuantitativeDateFilter$get_editingFormat() {
        return this.oFilter.editing_format;
    },
    
    postCreate: function tab_QuantitativeDateFilter$postCreate() {
        this.inherited(arguments);
        var dateFormat = this.oFilter.date_format;
        var fmt = dateFormat.locale_formatting_strings;
        var editingFormat = this.get_editingFormat();
        var narrowDayNames = fmt.narrowDay;
        narrowDayNames.shift();
        var firstDayOfWeek = this.oFilter.first_day_of_week;
        if (ss.isValue(firstDayOfWeek)) {
            firstDayOfWeek = firstDayOfWeek - 1;
        }
        var now = new Date();
        var nowUTC = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
        this._calendarControl$3 = new tab.DatePicker(new tab.DatePickerSettings(nowUTC, nowUTC, null, null, firstDayOfWeek, narrowDayNames, fmt.todayFormatTemplate, function(dateUTC) {
            return tableau.format.formatCustomJSDateTime(dateUTC, tableau.format.mapIcuToOleFormat(dateFormat.yearMonthFormat), tab.DateTimeAutoFormatMode.showDateOnly, tableau.types.DataType.DT_DATE, dateFormat.locale, null, null, fmt);
        }, function(dateUTC) {
            return tableau.format.formatCustomJSDateTime(dateUTC, editingFormat.format, tab.DateTimeAutoFormatMode.showDateOnly, tableau.types.DataType.DT_DATE, editingFormat.locale, null, null, fmt);
        }));
        this._calendarControl$3.get_element().on('dateSelected', ss.Delegate.create(this, this._dateSelected$3)).bind('mousedown', ss.Delegate.create(this, this._calendarMouseDown$3)).appendTo(document.body);
        this._calendarClicked$3 = false;
    },
    
    destroy: function tab_QuantitativeDateFilter$destroy(preserveDom) {
        this._calendarControl$3.dispose();
        this._calendarControl$3 = null;
        this.inherited(arguments);
    },
    
    showFullDateTimes: function tab_QuantitativeDateFilter$showFullDateTimes(dateFormat, val) {
        this._showFullDateTimes$3 = tab.QuantitativeDateFilter.getDateTimeFormatMode([this.oCurrentMin, this.oCurrentMax, this.oRangeMin, this.oRangeMax, val], this.get_presModel().aggregation, dateFormat, this._showFullDateTimes$3);
        return this._showFullDateTimes$3;
    },
    
    speciallyFormatDataValueForQuantitativeQF: function tab_QuantitativeDateFilter$speciallyFormatDataValueForQuantitativeQF(val) {
        return tableau.format.formatDataValue(val, this.oFilter.role, this.oFilter.date_format, null, this.showFullDateTimes(this.oFilter.date_format, val));
    },
    
    _isPureTimeFilter$3: function tab_QuantitativeDateFilter$_isPureTimeFilter$3() {
        return tab.QuantitativeDateFilter.isPureTime([this.oCurrentMin, this.oCurrentMax, this.oRangeMin, this.oRangeMax], this.get_presModel().aggregation);
    },
    
    showInput: function tab_QuantitativeDateFilter$showInput(e, val, oInput) {
        this.inherited(arguments);
        if (this.get_presModel().aggregation !== 'trunc-month' && this.get_presModel().aggregation !== 'trunc-year' && !this._isPureTimeFilter$3() && (this._focusedInput$3 !== oInput || this._calendarControl$3.get_element().is(':hidden'))) {
            var selectedDate = (tab.FilterModel.isNormalValue(val) && !isNaN(val.v)) ? new Date(tableau.types.JsDateFromOleDate(val.v)) : null;
            this._calendarControl$3.show(selectedDate);
            this._focusedInput$3 = oInput;
            this._layoutCalendar$3();
        }
    },
    
    layout: function tab_QuantitativeDateFilter$layout() {
        this.inherited(arguments);
        this._layoutCalendar$3();
    },
    
    _layoutCalendar$3: function tab_QuantitativeDateFilter$_layoutCalendar$3() {
        if (ss.isNullOrUndefined(this._focusedInput$3)) {
            return;
        }
        var inputContainer = $((this._focusedInput$3 === this.domLowerInput) ? this.domLowerBound : this.domUpperBound);
        this._calendarControl$3.positionCalendarByElement(inputContainer);
    },
    
    _dateSelected$3: function tab_QuantitativeDateFilter$_dateSelected$3(evt, date) {
        this._calendarControl$3.hide();
        var selectedDateValue = tableau.types.OleDateFromJsDate(date.getTime());
        var isMin = (this._focusedInput$3 === this.domLowerInput);
        var oldValue = (isMin) ? this.oCurrentMin : this.oCurrentMax;
        var inputContainer = (isMin) ? this.domLowerBound : this.domUpperBound;
        this.applyInputValue(oldValue, this._focusedInput$3, inputContainer, selectedDateValue, ss.Delegate.create(this, function() {
            this._updateFromCalendar$3(isMin, selectedDateValue);
        }));
    },
    
    _updateFromCalendar$3: function tab_QuantitativeDateFilter$_updateFromCalendar$3(updateMin, selectedDateValue) {
        if (updateMin) {
            this.updateMinAndMax(selectedDateValue, this.oCurrentMax.v);
        }
        else {
            this.updateMinAndMax(this.oCurrentMin.v, selectedDateValue);
        }
    },
    
    _calendarMouseDown$3: function tab_QuantitativeDateFilter$_calendarMouseDown$3(ignored) {
        this._calendarClicked$3 = true;
    },
    
    hideLowerInput: function tab_QuantitativeDateFilter$hideLowerInput(e) {
        this._handleInputBlur$3(e, this.domLowerInput, ss.Delegate.create(this, function(de) {
            tab.QuantitativeDateFilter.callBaseMethod(this, 'hideLowerInput', [ de ]);
        }));
    },
    
    hideUpperInput: function tab_QuantitativeDateFilter$hideUpperInput(e) {
        this._handleInputBlur$3(e, this.domUpperInput, ss.Delegate.create(this, function(de) {
            tab.QuantitativeDateFilter.callBaseMethod(this, 'hideUpperInput', [ de ]);
        }));
    },
    
    _handleInputBlur$3: function tab_QuantitativeDateFilter$_handleInputBlur$3(e, input, hideInput) {
        if (this._calendarClicked$3) {
            e.preventDefault();
            e.stopPropagation();
            this._calendarClicked$3 = false;
            window.setTimeout(function() {
                if ($(input).is(':visible')) {
                    input.focus();
                }
            }, 0);
        }
        else {
            hideInput(e);
            this._calendarControl$3.hide();
            if (this._focusedInput$3 === input) {
                this._focusedInput$3 = null;
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuantitativeFilter

tab.QuantitativeFilter = function tab_QuantitativeFilter(props) {
    this.templateString = "<div class='QuantitativeFilter'>" + "<div class='QuantitativeFilterBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<div class='QFTitle' dojoAttachPoint='domTitleBar'></div>" + "<div dojoType='dijit.form.Button' class='QFButton QFResetButton' showlabel='false'" + "dojoAttachPoint='resetButton' dojoAttachEvent='onClick:toggleReset'" + "iconClass='wcIconNonfiltered'>Showing all values</div>" + "<div dojoType='dijit.form.Button' class='QFButton QFDomainButton' showlabel='false'" + "dojoAttachPoint='domainButton' dojoAttachEvent='onClick:toggleDomain'" + "iconClass='wcIconDomainAll'>Show Smaller Range</div>" + "<div dojoType='dijit.form.Button' class='QFButton QFMenuButton' name='type' dojoAttachPoint='menuButton'" + "dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'></div>" + '</div>' + "<div class='QFContent' dojoAttachPoint='domContent'>" + "<div class='QFReadout QFLowerBound tab-ctrl-formatted-border-hover' dojoAttachEvent='onclick:showLowerInput' dojoAttachPoint='domLowerBound'>" + "<span class='readoutText tab-ctrl-formatted-fixedsize' dojoAttachPoint='domLowerText'></span>" + "<input type='text' dojoAttachPoint='domLowerInput'></input>" + '</div>' + "<div class='QFReadout QFUpperBound tab-ctrl-formatted-border-hover' dojoAttachEvent='onclick:showUpperInput' dojoAttachPoint='domUpperBound'>" + "<span class='readoutText tab-ctrl-formatted-fixedsize' dojoAttachPoint='domUpperText'></span>" + "<input type='text' dojoAttachPoint='domUpperInput'></input>" + '</div>' + "<div dojoAttachPoint='domBar' class='QFSlider QFBar'>" + "<div dojoAttachPoint='domRange' class='QFRange' dojoAttachEvent='onmousedown:startRangeCapture'>" + "<div dojoAttachPoint='domHighlight' class='QFRangeHighlight'></div>" + '</div>' + '</div>' + "<span dojoAttachPoint='domLowerImg' class='QFSlider QFImg QFIconFilterLeft' dojoAttachEvent='onmousedown:startLowerCapture'></span>" + "<span dojoAttachPoint='domUpperImg' class='QFSlider QFImg QFIconFilterRight' dojoAttachEvent='onmousedown:startUpperCapture'></span>" + '</div>' + '</div>' + '</div>';
    this.attributes = {};
    tab.QuantitativeFilter.initializeBase(this);
}
tab.QuantitativeFilter.prototype = {
    getContextMenuCommands: null,
    requestSetAttributes: null,
    widgetsInTemplate: true,
    global: false,
    templateRoot: null,
    session: null,
    field: '',
    filterViewModel: null,
    presModel: null,
    _applyDelay$2: 200,
    _applyTimer$2: null,
    _iconWidth$2: 10,
    rid: 0,
    timestamp: 0,
    domNode: null,
    domContent: null,
    domControls: null,
    domLowerText: null,
    domUpperText: null,
    domLowerInput: null,
    domUpperInput: null,
    domBar: null,
    domRange: null,
    domHighlight: null,
    domLowerImg: null,
    domUpperImg: null,
    domLowerBound: null,
    domUpperBound: null,
    resetButton: null,
    menuButton: null,
    domainButton: null,
    lastLowerOffset: 0,
    lastUpperOffset: 0,
    classQF: 'QF',
    classQFButtonR: 'QFButtonR',
    classQFButtonHide: 'QFButtonHide',
    classQFDisabled: 'QFDisabled',
    classQFCenterText: 'QFCenterText',
    classQFHideButtons: 'QFHideButtons',
    classQFHideSlider: 'QFHideSlider',
    classQFHideReadout: 'QFHideReadout',
    classQFResetDisabled: 'QFResetDisabled',
    oCurrentMin: null,
    oCurrentMax: null,
    oRangeMin: null,
    oRangeMax: null,
    oDataMin: null,
    oDataMax: null,
    rangeMinOverride: null,
    rangeMaxOverride: null,
    previousMinVal: null,
    previousMaxVal: null,
    metricsOnly: false,
    oMetrics: null,
    titleH: 0,
    titleW: 0,
    _mouseEvtDisposables$2: null,
    precision: 0,
    captureInfo: null,
    showInputStartValue: null,
    mode: null,
    showContextMenu: null,
    _editingFormat$2: null,
    
    get_attributes: function tab_QuantitativeFilter$get_attributes() {
        return this.attributes;
    },
    
    get_presModel: function tab_QuantitativeFilter$get_presModel() {
        return this.presModel;
    },
    
    get_oCurrentMin: function tab_QuantitativeFilter$get_oCurrentMin() {
        return this.oCurrentMin;
    },
    
    get_oCurrentMax: function tab_QuantitativeFilter$get_oCurrentMax() {
        return this.oCurrentMax;
    },
    
    get_editingFormat: function tab_QuantitativeFilter$get_editingFormat() {
        if (this._editingFormat$2 == null) {
            this._editingFormat$2 = tableau.format.deriveNumberEditingFormat(this.oFilter.format);
        }
        return this._editingFormat$2;
    },
    
    get_filterViewModel: function tab_QuantitativeFilter$get_filterViewModel() {
        return this.filterViewModel;
    },
    
    postCreate: function tab_QuantitativeFilter$postCreate() {
        if (this.filterViewModel.get_filterType() !== 'Quantitative') {
            tab.Log.get(this).warn('Incompatible filter view model type for QuantitativeFilter: %s', this.filterViewModel.get_filterType());
        }
        var buttonCount = 0;
        dojo.style(this.domLowerInput, 'display', 'none');
        dojo.style(this.domUpperInput, 'display', 'none');
        $(this.domLowerInput).bind('blur', ss.Delegate.create(this, this.hideLowerInput)).bind('keydown', ss.Delegate.create(this, this.lowerInputKeyDown)).bind('keypress', ss.Delegate.create(this, this.checkLowerEnter));
        $(this.domUpperInput).bind('blur', ss.Delegate.create(this, this.hideUpperInput)).bind('keydown', ss.Delegate.create(this, this.upperInputKeyDown)).bind('keypress', ss.Delegate.create(this, this.checkUpperEnter));
        $(document.body).bind('mousedown.' + this.domNode.id, ss.Delegate.create(this, function(e) {
            if (e.target !== this.domLowerInput) {
                this.domLowerInput.blur();
            }
            if (e.target !== this.domUpperInput) {
                this.domUpperInput.blur();
            }
        }));
        this.timestamp = new Date().getTime();
        this.localize();
        var title = tableau.format.formatColumnDisplayName(this.oFilter, false);
        dojo.attr(this.domTitleBar, 'title', title);
        this.updateTitleBar();
        if (!this.metricsOnly) {
            var processButton = ss.Delegate.create(this, function(button, hide) {
                if (hide) {
                    dojo.addClass(button.domNode, this.classQFButtonHide);
                }
                else {
                    buttonCount += 1;
                    dojo.addClass(button.domNode, this.classQFButtonR + buttonCount);
                }
            });
            processButton(this.menuButton, this.shouldHideContextMenu());
            processButton(this.domainButton, this.shouldHideDomainButton());
            processButton(this.resetButton, this.shouldHideResetButton());
            dojo.addClass(this.domControls, this.classQF + buttonCount + 'Button');
            $(this.menuButton.domNode).css('background-color', this.backgroundColor);
            $(this.domainButton.domNode).css('background-color', this.backgroundColor);
            $(this.resetButton.domNode).css('background-color', this.backgroundColor);
        }
        var startRange = this.oFilter.table;
        this._handleResetButtonState$2(startRange.min.v, startRange.max.v);
    },
    
    _handleResetButtonState$2: function tab_QuantitativeFilter$_handleResetButtonState$2(curMin, curMax) {
        if (this.isMaxRange(curMin, curMax)) {
            tab.QfButtonUtil.disableResetButton(this.resetButton);
        }
        else {
            tab.QfButtonUtil.enableResetButton(this.resetButton);
        }
    },
    
    isMaxRange: function tab_QuantitativeFilter$isMaxRange(newMin, newMax) {
        var minHasValue = ss.isValue(newMin);
        var maxHasValue = ss.isValue(newMax);
        if (minHasValue && maxHasValue && this.oFilter.table.included !== 'include-all') {
            return false;
        }
        var curMin = this.oFilter.range.min.v;
        var curMax = this.oFilter.range.max.v;
        if (!minHasValue) {
            newMin = curMin;
        }
        if (!maxHasValue) {
            newMax = curMax;
        }
        return (ss.isValue(curMin) && (ss.isValue(newMin) && tab.FloatUtil.isLessThanOrEqual(newMin, curMin))) && (ss.isValue(curMax) && (ss.isValue(newMax) && tab.FloatUtil.isGreaterThanOrEqual(newMax, curMax)));
    },
    
    postMixInProperties: function tab_QuantitativeFilter$postMixInProperties() {
        this.inherited(arguments);
        this.templateRoot = dojo.moduleUrl('tableau.base.widget', 'templates').toString();
    },
    
    destroy: function tab_QuantitativeFilter$destroy(preserveDom) {
        if (ss.isValue(this._mouseEvtDisposables$2)) {
            this._mouseEvtDisposables$2.dispose();
        }
        $(this.domLowerInput).unbind('blur').unbind('keydown').unbind('keypress');
        $(this.domUpperInput).unbind('blur').unbind('keydown').unbind('keypress');
        $(document.body).unbind('mousedown.' + this.domNode.id);
        this.showContextMenu = null;
        this.requestSetAttributes = null;
        this.getContextMenuCommands = null;
        this.inherited(arguments);
    },
    
    _getMetrics: function tab_QuantitativeFilter$_getMetrics() {
        var sliderSize = dojo.marginBox(this.domLowerImg);
        var readoutSize = dojo.marginBox(this.domLowerBound);
        var toRet = tab.$create_QFMetrics();
        toRet._fixed = tab.$create_Size(0, 0);
        toRet._item = tab.$create_Size(0, 0);
        toRet._slider = tab.$create_Size(0, sliderSize.h + 4);
        toRet._readout = tab.$create_Size(0, readoutSize.h + 4);
        return toRet;
    },
    
    showFullDateTimes: function tab_QuantitativeFilter$showFullDateTimes(dateFormat, val) {
        return tab.DateTimeAutoFormatMode.showDateOnly;
    },
    
    getPrecision: function tab_QuantitativeFilter$getPrecision() {
        return this.precision;
    },
    
    hasCurrentMin: function tab_QuantitativeFilter$hasCurrentMin() {
        return tab.FilterModel.isNormalValue(this.oCurrentMin);
    },
    
    hasCurrentMax: function tab_QuantitativeFilter$hasCurrentMax() {
        return tab.FilterModel.isNormalValue(this.oCurrentMax);
    },
    
    getRangeMin: function tab_QuantitativeFilter$getRangeMin() {
        return (ss.isValue(this.rangeMinOverride)) ? this.rangeMinOverride : this.oRangeMin.v;
    },
    
    getRangeMax: function tab_QuantitativeFilter$getRangeMax() {
        return (ss.isValue(this.rangeMaxOverride)) ? this.rangeMaxOverride : this.oRangeMax.v;
    },
    
    getRange: function tab_QuantitativeFilter$getRange() {
        var rangeMin = this.getRangeMin();
        var rangeMax = this.getRangeMax();
        if (ss.isValue(rangeMin) && ss.isValue(rangeMax)) {
            return rangeMax - rangeMin;
        }
        return null;
    },
    
    hasDataMin: function tab_QuantitativeFilter$hasDataMin() {
        return tab.FilterModel.isNormalValue(this.oDataMin);
    },
    
    hasDataMax: function tab_QuantitativeFilter$hasDataMax() {
        return tab.FilterModel.isNormalValue(this.oDataMax);
    },
    
    getDataMin: function tab_QuantitativeFilter$getDataMin() {
        return this.oDataMin.v;
    },
    
    getDataMax: function tab_QuantitativeFilter$getDataMax() {
        return this.oDataMax.v;
    },
    
    getCurMin: function tab_QuantitativeFilter$getCurMin() {
        return this.oCurrentMin.v;
    },
    
    getCurMax: function tab_QuantitativeFilter$getCurMax() {
        return this.oCurrentMax.v;
    },
    
    getMinText: function tab_QuantitativeFilter$getMinText() {
        return this.speciallyFormatDataValueForQuantitativeQF(this.oCurrentMin);
    },
    
    getMaxText: function tab_QuantitativeFilter$getMaxText() {
        return this.speciallyFormatDataValueForQuantitativeQF(this.oCurrentMax);
    },
    
    getLowerPos: function tab_QuantitativeFilter$getLowerPos() {
        return this.domLowerImg.offsetLeft - this.oMetrics.absOffset + (this._iconWidth$2 - 1);
    },
    
    setLowerPos: function tab_QuantitativeFilter$setLowerPos(val) {
        dojo.style(this.domLowerImg, 'left', (val + this.oMetrics.absOffset - (this._iconWidth$2 - 1)) + 'px');
    },
    
    _hasLowerImgMoved$2: function tab_QuantitativeFilter$_hasLowerImgMoved$2() {
        return this.lastLowerOffset !== this.domLowerImg.offsetLeft;
    },
    
    _getUpperPos$2: function tab_QuantitativeFilter$_getUpperPos$2() {
        return this.domUpperImg.offsetLeft - this.oMetrics.absOffset;
    },
    
    setUpperPos: function tab_QuantitativeFilter$setUpperPos(val) {
        dojo.style(this.domUpperImg, 'left', (val + this.oMetrics.absOffset) + 'px');
    },
    
    _hasUpperImgMoved$2: function tab_QuantitativeFilter$_hasUpperImgMoved$2() {
        return this.lastUpperOffset !== this.domUpperImg.offsetLeft;
    },
    
    isRange: function tab_QuantitativeFilter$isRange() {
        switch (this.oFilter.table.included) {
            case 'include-all':
            case 'include-null':
            case 'include-non-null':
                return false;
            default:
                return true;
        }
    },
    
    shouldHideDomainButton: function tab_QuantitativeFilter$shouldHideDomainButton() {
        return this.hideEmptyTitlebar() || this.attributes['show-morefewerbutton'] !== 'true';
    },
    
    shouldHideContextMenu: function tab_QuantitativeFilter$shouldHideContextMenu() {
        var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
        return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || !commandsWrapper.get_commandItems().length;
    },
    
    shouldHideResetButton: function tab_QuantitativeFilter$shouldHideResetButton() {
        return this.hideEmptyTitlebar() || this.attributes['show-all'] === 'false' || this.attributes['show-filter-state'] === 'false';
    },
    
    computePrecision: function tab_QuantitativeFilter$computePrecision(pixelRange) {
        var range = this.getRange();
        var pixelValue = (ss.isValue(range) && !!pixelRange) ? (range / pixelRange) : 1;
        var valueDigits = Math.log(pixelValue) / Math.log(10);
        this.precision = (valueDigits > 0) ? Math.ceil(valueDigits) : Math.floor(valueDigits);
        if (this.precision === Number.NEGATIVE_INFINITY || isNaN(this.precision)) {
            this.precision = 5;
        }
    },
    
    _scalePixelsToRange$2: function tab_QuantitativeFilter$_scalePixelsToRange$2(delta, pixelRange, offset) {
        var factor;
        var pixelValue = delta * (this.getRange() || 0) / pixelRange;
        if (this.precision >= 0) {
            return Math.round(offset + pixelValue);
        }
        factor = Math.pow(10, -this.precision);
        return Math.round((offset + pixelValue) * factor) / factor;
    },
    
    clearDataRange: function tab_QuantitativeFilter$clearDataRange() {
        if (ss.isValue(this.oDataMin)) {
            this.oDataMin = null;
        }
        if (ss.isValue(this.oDataMax)) {
            this.oDataMax = null;
        }
        dojo.style(this.domHighlight, 'visibility', 'hidden');
    },
    
    setMinValue: function tab_QuantitativeFilter$setMinValue(v) {
        if (ss.isNullOrUndefined(v) || isNaN(v)) {
            return;
        }
        if (this.hasCurrentMax() && v > this.getCurMax()) {
            v = this.getCurMax();
        }
        if (this.oCurrentMin.t === tableau.types.DataType.DT_INTEGER) {
            this.oCurrentMin.v = Math.round(v);
        }
        else {
            this.oCurrentMin.v = v;
        }
        dojox.data.dom.textContent(this.domLowerText, this.getMinText());
        var rangeMin = this.getRangeMin();
        if (this.hasCurrentMin() && (!ss.isValue(rangeMin) || this.getCurMin() < rangeMin)) {
            this.rangeMinOverride = this.getCurMin();
        }
    },
    
    setMaxValue: function tab_QuantitativeFilter$setMaxValue(v) {
        if (ss.isNullOrUndefined(v) || isNaN(v)) {
            return;
        }
        if (this.hasCurrentMin() && v < this.getCurMin()) {
            v = this.getCurMin();
        }
        if (this.oCurrentMax.t === tableau.types.DataType.DT_INTEGER) {
            this.oCurrentMax.v = Math.round(v);
        }
        else {
            this.oCurrentMax.v = v;
        }
        dojox.data.dom.textContent(this.domUpperText, this.getMaxText());
        var rangeMax = this.getRangeMax();
        if (this.hasCurrentMax() && (!ss.isValue(rangeMax) || this.getCurMax() > rangeMax)) {
            this.rangeMaxOverride = this.getCurMax();
        }
    },
    
    removeRangeOverride: function tab_QuantitativeFilter$removeRangeOverride() {
        this.rangeMinOverride = null;
        this.rangeMaxOverride = null;
    },
    
    getValueFromInput: function tab_QuantitativeFilter$getValueFromInput(oNode, oldValue) {
        return tableau.format.parseQuantitativeDataValue(oNode.value, oldValue.t, this.get_editingFormat(), this.showFullDateTimes(this.get_editingFormat()), oldValue);
    },
    
    speciallyFormatDataValueForQuantitativeQF: function tab_QuantitativeFilter$speciallyFormatDataValueForQuantitativeQF(val) {
        return tableau.format.formatDataValue(val, this.oFilter.role, this.oFilter.format, null, tab.DateTimeAutoFormatMode.showDateOnly);
    },
    
    initValues: function tab_QuantitativeFilter$initValues() {
        this.oRangeMin = dojo.mixin({}, this.oFilter.range.min);
        this.oRangeMax = dojo.mixin({}, this.oFilter.range.max);
        this.oDataMin = dojo.mixin({}, this.oFilter.data.min);
        this.oDataMax = dojo.mixin({}, this.oFilter.data.max);
        if (this.isRange() && (ss.isValue(this.oFilter.table.min.v) || ss.isValue(this.oFilter.table.max.v))) {
            this.oCurrentMin = dojo.mixin({}, this.oFilter.table.min);
            this.oCurrentMax = dojo.mixin({}, this.oFilter.table.max);
        }
        else {
            this.oCurrentMin = dojo.mixin({}, this.oFilter.range.min);
            this.oCurrentMax = dojo.mixin({}, this.oFilter.range.max);
        }
        this.oMetrics = tab.$create_QFMetrics();
        this.domLowerInput.value = tableau.format.formatDataValue(this.oCurrentMin, this.oFilter.role, this.get_editingFormat(), null, this.showFullDateTimes(this.get_editingFormat()));
        this.domUpperInput.value = tableau.format.formatDataValue(this.oCurrentMax, this.oFilter.role, this.get_editingFormat(), null, this.showFullDateTimes(this.get_editingFormat()));
    },
    
    setTitleSize: function tab_QuantitativeFilter$setTitleSize(newH, newW) {
        this.titleH = newH;
        this.titleW = newW;
    },
    
    resize: function tab_QuantitativeFilter$resize(marginBox) {
        dojo.marginBox(this.domNode, marginBox);
        this.layout();
    },
    
    layout: function tab_QuantitativeFilter$layout() {
        var maxReadoutW = 200;
        this.initValues();
        this.updateTitleBar();
        if (this.hasCurrentMin()) {
            dojox.data.dom.textContent(this.domLowerText, this.getMinText());
            dojo.removeClass(this.domLowerText.parentNode, this.classQFDisabled);
            dojo.addClass(this.domLowerText.parentNode, 'tab-ctrl-formatted-border-hover');
        }
        else {
            dojox.data.dom.textContent(this.domLowerText, this.speciallyFormatDataValueForQuantitativeQF(this.oRangeMin));
            dojo.addClass(this.domLowerText.parentNode, this.classQFDisabled);
            dojo.removeClass(this.domLowerText.parentNode, 'tab-ctrl-formatted-border-hover');
        }
        if (this.hasCurrentMax()) {
            dojox.data.dom.textContent(this.domUpperText, this.getMaxText());
            dojo.removeClass(this.domUpperText.parentNode, this.classQFDisabled);
            dojo.addClass(this.domUpperText.parentNode, 'tab-ctrl-formatted-border-hover');
        }
        else {
            dojox.data.dom.textContent(this.domUpperText, this.speciallyFormatDataValueForQuantitativeQF(this.oRangeMax));
            dojo.addClass(this.domUpperText.parentNode, this.classQFDisabled);
            dojo.removeClass(this.domUpperText.parentNode, 'tab-ctrl-formatted-border-hover');
        }
        dojo.addClass(this.domNode, this.classQFHideButtons);
        dojo.removeClass(this.domNode, this.classQFCenterText);
        var oTitleBar = dojo.marginBox(this.domTitleBar);
        this.resetTitleSize();
        if (this.titleH > 0) {
            oTitleBar.h = this.titleH;
            dojo.marginBox(this.domTitleBar, { h: oTitleBar.h });
        }
        if (this.titleW > 0) {
            oTitleBar.w = this.titleW;
            dojo.marginBox(this.domTitleBar, { w: oTitleBar.w });
        }
        tableau.util.setupTitleEllipsis($(this.domTitleBar));
        var oZoneSize = dojo.contentBox(this.domNode);
        var notTitleSize = tab.$create_Size(oZoneSize.w, oZoneSize.h);
        if (!this.metricsOnly) {
            if (!this.hideEmptyTitlebar()) {
                if (this.titleW > 0) {
                    notTitleSize.w = oZoneSize.w - oTitleBar.w;
                    dojo.style(this.domContent, 'top', '');
                    dojo.style(this.domContent, 'left', oTitleBar.w + 'px');
                }
                else {
                    dojo.removeClass(this.domNode, this.classQFHideButtons);
                    notTitleSize.h = oZoneSize.h - oTitleBar.h;
                    dojo.style(this.domContent, 'top', oTitleBar.h + 'px');
                    dojo.style(this.domContent, 'left', '');
                }
            }
        }
        dojo.marginBox(this.domContent, { w: notTitleSize.w, h: notTitleSize.h });
        if (this.attributes['show-slider'] !== 'false' && this.attributes['show-readout'] !== 'false') {
            dojo.removeClass(this.domNode, this.classQFHideReadout);
            dojo.removeClass(this.domNode, this.classQFHideSlider);
            var twolineH = dojo.contentBox(this.domLowerBound).h + dojo.contentBox(this.domLowerImg).h + 8;
            if (notTitleSize.h < twolineH && notTitleSize.w > 200) {
                dojo.addClass(this.domNode, this.classQFCenterText);
                var lowerReadoutNaturalWidth = this.contentBox(this.domLowerText).w;
                var upperReadoutNaturalWidth = this.contentBox(this.domUpperText).w;
                dojo.style(this.domLowerBound, 'width', '');
                dojo.style(this.domUpperBound, 'width', '');
                dojo.style(this.domLowerBound, 'top', '2px');
                dojo.style(this.domUpperBound, 'top', '2px');
                var barW = notTitleSize.w - (lowerReadoutNaturalWidth + dojo.contentBox(this.domLowerImg).w) - (upperReadoutNaturalWidth + dojo.contentBox(this.domUpperImg).w) - (2 * 8);
                dojo.marginBox(this.domBar, { w: barW });
                dojo.style(this.domBar, 'top', '7px');
                dojo.style(this.domBar, 'left', (lowerReadoutNaturalWidth + tab.DomUtil.getContentBox(this.domLowerImg).w + 8) + 'px');
                dojo.style(this.domLowerInput, 'width', lowerReadoutNaturalWidth + 'px');
                dojo.style(this.domUpperInput, 'width', upperReadoutNaturalWidth + 'px');
            }
            else {
                var boundW = Math.min(maxReadoutW, Math.floor((notTitleSize.w / 2) - 4));
                dojo.marginBox(this.domLowerBound, { w: boundW });
                dojo.marginBox(this.domUpperBound, { w: boundW });
                dojo.style(this.domLowerInput, 'width', dojo.contentBox(this.domLowerBound).w + 'px');
                dojo.style(this.domUpperInput, 'width', dojo.contentBox(this.domUpperBound).w + 'px');
                var off = this.domLowerBound.offsetTop + this.domLowerBound.offsetHeight + 6;
                dojo.marginBox(this.domBar, { w: notTitleSize.w - 24 });
                dojo.style(this.domBar, 'top', off + 'px');
                dojo.style(this.domBar, 'left', '12px');
            }
        }
        else if (this.attributes['show-slider'] !== 'false') {
            dojo.addClass(this.domNode, this.classQFHideReadout);
            dojo.removeClass(this.domNode, this.classQFHideSlider);
            dojo.marginBox(this.domBar, { w: notTitleSize.w - 24 });
            dojo.style(this.domBar, 'left', '12px');
        }
        else if (this.attributes['show-readout'] !== 'false') {
            dojo.removeClass(this.domNode, this.classQFHideReadout);
            dojo.addClass(this.domNode, this.classQFHideSlider);
            var boundW = Math.min(maxReadoutW, Math.floor((notTitleSize.w / 2) - 4));
            dojo.marginBox(this.domLowerBound, { w: boundW });
            dojo.marginBox(this.domUpperBound, { w: boundW });
            dojo.style(this.domLowerInput, 'width', tab.DomUtil.getContentBox(this.domLowerBound).w + 'px');
            dojo.style(this.domUpperInput, 'width', tab.DomUtil.getContentBox(this.domUpperBound).w + 'px');
        }
        else {
            dojo.addClass(this.domNode, this.classQFHideSlider);
            dojo.addClass(this.domNode, this.classQFHideReadout);
        }
        this.oMetrics.top = this.domBar.offsetTop;
        this.oMetrics.absOffset = this.domBar.offsetLeft;
        this.oMetrics.left = 0;
        this.oMetrics.right = this.domBar.offsetWidth;
        if (this.hasCurrentMin()) {
            dojo.style(this.domLowerImg, 'top', (this.oMetrics.top - 4) + 'px');
            dojo.style(this.domLowerImg, 'visibility', 'visible');
        }
        else {
            dojo.style(this.domLowerImg, 'visibility', 'hidden');
        }
        if (this.hasCurrentMax()) {
            dojo.style(this.domUpperImg, 'top', (this.oMetrics.top - 4) + 'px');
            dojo.style(this.domUpperImg, 'visibility', 'visible');
        }
        else {
            dojo.style(this.domUpperImg, 'visibility', 'hidden');
        }
        var domContentVisibility = (this.shouldShowDomContent()) ? 'visible' : 'hidden';
        dojo.style(this.domContent, 'visibility', domContentVisibility);
        this.oMetrics.width = this.oMetrics.right - this.oMetrics.left;
        this.computePrecision(this.oMetrics.width);
        var showDataHighlight = (this.hasDataMin() || this.hasDataMax());
        dojo.style(this.domHighlight, 'visibility', (showDataHighlight) ? 'visible' : 'hidden');
        this.updateMinAndMax(this.oCurrentMin.v, this.oCurrentMax.v);
        this.updateDomainButton();
    },
    
    shouldShowDomContent: function tab_QuantitativeFilter$shouldShowDomContent() {
        return this.hasCurrentMax() || this.hasCurrentMin();
    },
    
    updateFromIcons: function tab_QuantitativeFilter$updateFromIcons() {
        var delta, lowerPos;
        var newValue;
        if (this.hasCurrentMin() && this._hasLowerImgMoved$2()) {
            var lowerOffset = this.getLowerPos();
            delta = lowerOffset - this.oMetrics.left;
            if (!delta) {
                newValue = this.getRangeMin();
            }
            else if (delta === this.oMetrics.width) {
                newValue = this.getRangeMax();
            }
            else if (this.hasCurrentMax() && this.getLowerPos() === this._getUpperPos$2()) {
                newValue = this.getCurMax();
            }
            else {
                newValue = this._scalePixelsToRange$2(delta, this.oMetrics.width, (this.getRangeMin() || 0));
            }
            if (ss.isValue(newValue)) {
                this.setMinValue(newValue);
            }
            this.lastLowerOffset = this.domLowerImg.offsetLeft;
            dojo.style(this.domRange, 'left', lowerOffset + 'px');
        }
        lowerPos = (this.hasCurrentMin()) ? this.getLowerPos() : this.oMetrics.left;
        if (this.hasCurrentMax()) {
            var rangeWidth = this._getUpperPos$2() - lowerPos;
            if (this._hasUpperImgMoved$2()) {
                delta = this.oMetrics.right - this._getUpperPos$2();
                if (!delta) {
                    newValue = this.getRangeMax();
                }
                else if (delta === this.oMetrics.width) {
                    newValue = this.getRangeMin();
                }
                else if (this.hasCurrentMin() && this.getLowerPos() === this._getUpperPos$2()) {
                    newValue = this.getCurMin();
                }
                else {
                    newValue = this._scalePixelsToRange$2(-delta, this.oMetrics.width, (this.getRangeMax() || 0));
                }
                if (ss.isValue(newValue)) {
                    this.setMaxValue(newValue);
                }
                this.lastUpperOffset = this.domUpperImg.offsetLeft;
            }
            dojo.style(this.domRange, 'width', rangeWidth + 'px');
        }
        else {
            dojo.style(this.domRange, 'width', (this.oMetrics.right - lowerPos) + 'px');
        }
        this.updateDataBar();
    },
    
    doMenu: function tab_QuantitativeFilter$doMenu() {
        this.showContextMenu(this.menuButton.domNode);
    },
    
    updateFromOneInput: function tab_QuantitativeFilter$updateFromOneInput(oInput) {
        var valMin, valMax;
        if (oInput === this.domLowerInput) {
            valMin = (this.hasCurrentMin()) ? this.getValueFromInput(this.domLowerInput, this.oCurrentMin) : -Number.MAX_VALUE;
            valMax = this.oCurrentMax.v;
        }
        else {
            valMin = this.oCurrentMin.v;
            valMax = (this.hasCurrentMax()) ? this.getValueFromInput(this.domUpperInput, this.oCurrentMax) : Number.MAX_VALUE;
        }
        this.updateMinAndMax(valMin, valMax);
    },
    
    updateMinAndMax: function tab_QuantitativeFilter$updateMinAndMax(valMin, valMax) {
        var lowerPos;
        if (ss.isValue(valMin) && ss.isValue(valMax)) {
            if (valMin > valMax) {
                var vT = valMin;
                valMin = valMax;
                valMax = vT;
            }
        }
        this.removeRangeOverride();
        if (this.hasCurrentMin() && ss.isValue(valMin) && !isNaN(valMin)) {
            this.setMinValue(valMin);
        }
        if (this.hasCurrentMax() && ss.isValue(valMax) && !isNaN(valMax)) {
            this.setMaxValue(valMax);
        }
        var range = this.getRange();
        lowerPos = this.oMetrics.left;
        if (this.hasCurrentMin()) {
            var lowerOffset = (ss.isValue(range) && !tab.FloatUtil.isEqual(range, 0)) ? Math.round((this.getCurMin() - this.getRangeMin()) * this.oMetrics.width / range) : 0;
            if (this.oMetrics.left + lowerOffset > this.oMetrics.width) {
                lowerOffset = this.oMetrics.left + this.oMetrics.width;
            }
            this.setLowerPos(this.oMetrics.left + lowerOffset);
            this.lastLowerOffset = this.domLowerImg.offsetLeft;
            dojo.style(this.domRange, 'left', (this.oMetrics.left + lowerOffset) + 'px');
            lowerPos = this.getLowerPos();
        }
        else {
            dojo.style(this.domRange, 'left', lowerPos + 'px');
        }
        if (this.hasCurrentMax()) {
            var rangeMin = (this.hasCurrentMin()) ? this.getCurMin() : this.getRangeMin();
            var rangeWidth = (ss.isValue(range) && !tab.FloatUtil.isEqual(range, 0)) ? Math.round((this.getCurMax() - rangeMin) * this.oMetrics.width / range) : this.oMetrics.width;
            this.setUpperPos(lowerPos + rangeWidth);
            this.lastUpperOffset = this.domUpperImg.offsetLeft;
            dojo.style(this.domRange, 'width', Math.max(rangeWidth, 0) + 'px');
        }
        else {
            dojo.style(this.domRange, 'width', Math.max(this.oMetrics.right - lowerPos, 0) + 'px');
        }
        this.updateDataBar();
    },
    
    updateDataBar: function tab_QuantitativeFilter$updateDataBar() {
        var dataOffset = 0;
        var dataWidth;
        var lowerPos;
        var range = this.getRange();
        if (ss.isValue(range) && !tab.FloatUtil.isEqual(range, 0) && this.hasDataMin()) {
            var leftValue = (this.hasCurrentMin()) ? this.getCurMin() : this.getRangeMin();
            dataOffset = Math.round((this.getDataMin() - leftValue) * this.oMetrics.width / range);
        }
        dojo.style(this.domHighlight, 'left', dataOffset + 'px');
        lowerPos = (this.hasCurrentMin()) ? this.getLowerPos() : this.oMetrics.left;
        dataWidth = ((this.hasCurrentMax()) ? this._getUpperPos$2() : this.oMetrics.right) - lowerPos;
        if (ss.isValue(range) && this.hasDataMax()) {
            var dataMin = (this.hasDataMin()) ? this.getDataMin() : this.getRangeMin();
            if (!tab.FloatUtil.isEqual(range, 0)) {
                dataWidth = Math.round((this.getDataMax() - dataMin) * this.oMetrics.width / range);
            }
            dataWidth = Math.max(dataWidth, 2);
        }
        dojo.style(this.domHighlight, 'width', Math.max(dataWidth, 0) + 'px');
    },
    
    startUpperCapture: function tab_QuantitativeFilter$startUpperCapture(e) {
        this.startCapture(e, false, this.domUpperImg);
    },
    
    startLowerCapture: function tab_QuantitativeFilter$startLowerCapture(e) {
        this.startCapture(e, false, this.domLowerImg);
    },
    
    startRangeCapture: function tab_QuantitativeFilter$startRangeCapture(e) {
        if (this.hasCurrentMin() && this.hasCurrentMax()) {
            this.startCapture(e, true, this.domRange);
        }
    },
    
    startCapture: function tab_QuantitativeFilter$startCapture(e, isRangeCapture, item) {
        this.savePreviousMinAndMaxVals();
        var moveEvent = (isRangeCapture) ? ss.Delegate.create(this, this._onRangeMove$2) : ss.Delegate.create(this, this.onMouseMove);
        dojo.stopEvent(e);
        var range = this.getRange();
        if (!ss.isValue(range) || tab.FloatUtil.isEqual(range, 0)) {
            return;
        }
        this.captureInfo = tab.$create__captureInfo(e.pageX, e.pageY, item.offsetLeft, isRangeCapture, item);
        if (isRangeCapture) {
            this.captureInfo._lowerStart = this.getLowerPos();
            this.captureInfo._upperStart = this._getUpperPos$2();
        }
        if (ss.isValue(this._mouseEvtDisposables$2)) {
            this._mouseEvtDisposables$2.dispose();
        }
        this._mouseEvtDisposables$2 = new tab.DisposableHolder();
        this._mouseEvtDisposables$2.add(spiff.EventUtil.bindWithDispose($(document), 'mousemove', moveEvent));
        this._mouseEvtDisposables$2.add(spiff.EventUtil.bindWithDispose($(document), 'mouseup', ss.Delegate.create(this, this._stopCapture$2)));
    },
    
    onMouseMove: function tab_QuantitativeFilter$onMouseMove(e) {
        var lowerPos = (this.hasCurrentMin()) ? this.getLowerPos() : this.oMetrics.left;
        var upperPos = (this.hasCurrentMax()) ? this._getUpperPos$2() : this.oMetrics.right;
        var minPos = (this.captureInfo._oImg === this.domLowerImg) ? this.oMetrics.left - this._iconWidth$2 : lowerPos;
        var maxPos = (this.captureInfo._oImg === this.domUpperImg) ? this.oMetrics.right : upperPos - this._iconWidth$2;
        var newPos = (e.pageX - this.captureInfo._x) + this.captureInfo._xStart - this.oMetrics.absOffset;
        e.stopPropagation();
        e.preventDefault();
        newPos = Math.min(maxPos, Math.max(minPos, newPos));
        var change = false;
        if (this.captureInfo._oImg === this.domLowerImg) {
            change = (newPos + this._iconWidth$2) !== lowerPos;
            this.setLowerPos(newPos + this._iconWidth$2);
        }
        else {
            change = newPos !== upperPos;
            this.setUpperPos(newPos);
        }
        this.updateFromIcons();
        if (change) {
            this.applyQuantFilter(this.getCurMin(), this.getCurMax());
        }
    },
    
    applyQuantFilter: function tab_QuantitativeFilter$applyQuantFilter(minVal, maxVal) {
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            var filterData = new tab.QuantitativeFilterData(this.oFilter.targetSheets, this.field, minVal, maxVal, this.previousMinVal, this.previousMaxVal);
            tab.FilterClientCommands.updateQuantitativeFilter(filterData);
        }
    },
    
    savePreviousMinAndMaxVals: function tab_QuantitativeFilter$savePreviousMinAndMaxVals() {
        this.previousMinVal = this.getCurMin();
        this.previousMaxVal = this.getCurMax();
    },
    
    _onRangeMove$2: function tab_QuantitativeFilter$_onRangeMove$2(e) {
        var minPos = this.captureInfo._x - (this.captureInfo._lowerStart - this.oMetrics.left);
        var maxPos = this.captureInfo._x + (this.oMetrics.right - this.captureInfo._upperStart);
        var newPos = e.pageX;
        newPos = Math.min(maxPos, Math.max(minPos, newPos));
        e.stopPropagation();
        e.preventDefault();
        this.setLowerPos(this.captureInfo._lowerStart + (newPos - this.captureInfo._x));
        this.setUpperPos(this.captureInfo._upperStart + (newPos - this.captureInfo._x));
        tab.ModelUtils.invalidateVisuals(this.oFilter.targetSheets);
        this.updateFromIcons();
    },
    
    _stopCapture$2: function tab_QuantitativeFilter$_stopCapture$2(e) {
        if (ss.isValue(this._mouseEvtDisposables$2)) {
            this._mouseEvtDisposables$2.dispose();
        }
        this._mouseEvtDisposables$2 = null;
        e.stopPropagation();
        e.preventDefault();
        if (this.captureInfo._x !== e.pageX) {
            this.removeRangeOverride();
            this.updateFromIcons();
            this.notifyChange();
        }
    },
    
    showLowerInput: function tab_QuantitativeFilter$showLowerInput(e) {
        if (!this.hasCurrentMin()) {
            return;
        }
        this.showInput(e, this.oCurrentMin, this.domLowerInput);
        dojo.addClass(this.domLowerBound, 'active');
        this.savePreviousMinAndMaxVals();
    },
    
    showUpperInput: function tab_QuantitativeFilter$showUpperInput(e) {
        if (!this.hasCurrentMax()) {
            return;
        }
        this.showInput(e, this.oCurrentMax, this.domUpperInput);
        dojo.addClass(this.domUpperBound, 'active');
        this.savePreviousMinAndMaxVals();
    },
    
    showInput: function tab_QuantitativeFilter$showInput(e, val, oInput) {
        dojo.stopEvent(e);
        if (dojo.style(oInput, 'display') !== 'none') {
            return;
        }
        oInput.value = tableau.format.formatDataValue(val, this.oFilter.role, this.get_editingFormat(), null, this.showFullDateTimes(this.get_editingFormat()));
        this.showInputStartValue = this.getValueFromInput(oInput, val);
        $(oInput).show().siblings('.readoutText').hide();
        oInput.focus();
        oInput.select();
    },
    
    lowerInputKeyDown: function tab_QuantitativeFilter$lowerInputKeyDown(e) {
        this._inputKeyDown$2(e, this.domLowerInput);
    },
    
    upperInputKeyDown: function tab_QuantitativeFilter$upperInputKeyDown(e) {
        this._inputKeyDown$2(e, this.domUpperInput);
    },
    
    _inputKeyDown$2: function tab_QuantitativeFilter$_inputKeyDown$2(e, oInput) {
        if (e.which === 27) {
            $(oInput).val('');
            oInput.blur();
        }
    },
    
    checkLowerEnter: function tab_QuantitativeFilter$checkLowerEnter(e) {
        this._checkEnter$2(e, this.domLowerInput);
    },
    
    checkUpperEnter: function tab_QuantitativeFilter$checkUpperEnter(e) {
        this._checkEnter$2(e, this.domUpperInput);
    },
    
    _checkEnter$2: function tab_QuantitativeFilter$_checkEnter$2(e, oInput) {
        if (e.keyCode === dojo.keys.ENTER) {
            dojo.stopEvent(e);
            oInput.blur();
        }
    },
    
    hideLowerInput: function tab_QuantitativeFilter$hideLowerInput(e) {
        this._hideInput$2(e, this.oCurrentMin, this.domLowerInput, this.domLowerBound);
    },
    
    hideUpperInput: function tab_QuantitativeFilter$hideUpperInput(e) {
        this._hideInput$2(e, this.oCurrentMax, this.domUpperInput, this.domUpperBound);
    },
    
    _hideInput$2: function tab_QuantitativeFilter$_hideInput$2(e, oldDV, oInput, inputContainer) {
        var newValue = this.getValueFromInput(oInput, oldDV);
        e.stopPropagation();
        e.preventDefault();
        this.applyInputValue(oldDV, oInput, inputContainer, newValue, ss.Delegate.create(this, function() {
            this.updateFromOneInput(oInput);
        }));
    },
    
    applyInputValue: function tab_QuantitativeFilter$applyInputValue(oldDV, oInput, inputContainer, newValue, updateFilter) {
        var newDV = {};
        newDV = dojo.mixin({}, oldDV);
        var formattedNewValue = null;
        if (isNaN(newValue)) {
            newValue = this.showInputStartValue;
        }
        else {
            newDV.v = newValue;
            formattedNewValue = this.speciallyFormatDataValueForQuantitativeQF(newDV);
        }
        var oReadout = $(oInput).hide().siblings('.readoutText').show();
        if (newValue != null && (this.showInputStartValue != null && !tab.FloatUtil.isEqual(this.showInputStartValue, newValue))) {
            oReadout.text(formattedNewValue);
            updateFilter();
            this.notifyChange();
        }
        this.showInputStartValue = null;
        dojo.removeClass(inputContainer, 'active');
    },
    
    applyChanges: function tab_QuantitativeFilter$applyChanges() {
        var changed = false;
        var newFilter = $.extend(false, {}, this.oFilter.table);
        if (this.hasCurrentMin() && (!ss.isValue(newFilter.min.v) || !tab.FloatUtil.isEqual(newFilter.min.v, this.getCurMin()))) {
            changed = true;
            newFilter.min = dojo.mixin({}, this.oCurrentMin);
        }
        if (this.hasCurrentMax() && (!ss.isValue(newFilter.max.v) || !tab.FloatUtil.isEqual(newFilter.max.v, this.getCurMax()))) {
            changed = true;
            newFilter.max = dojo.mixin({}, this.oCurrentMax);
        }
        if (!changed) {
            tab.FilterClientCommands.resetQuantitativeFilter(this.field, this.oFilter.targetSheets);
            return;
        }
        this.clearDataRange();
        ++this.rid;
        if (!this.isRange()) {
            newFilter.included = 'include-range';
        }
        tab.FilterClientCommands.setQuantitativeFilterRange(this.session.get_visualId(), this.field, newFilter.min.v, newFilter.max.v, newFilter.included);
        this._handleResetButtonState$2(newFilter.min.v, newFilter.max.v);
    },
    
    updateDomainButton: function tab_QuantitativeFilter$updateDomainButton() {
        if (!ss.isValue(this.oFilter.domains) || this.oFilter.domains.length <= 1) {
            dojo.style(this.domainButton.domNode, 'display', 'none');
            return;
        }
        dojo.removeClass(this.domainButton.iconNode, 'wcIconDomainAll');
        dojo.removeClass(this.domainButton.iconNode, 'wcIconDomainContext');
        dojo.removeClass(this.domainButton.iconNode, 'wcIconDomainRelevant');
        var currentDomainType = this.attributes['values'];
        if (currentDomainType === 'relevant') {
            this.domainButton.attr('label', tab.Strings.QuickFilterShowLargerRange);
            dojo.addClass(this.domainButton.iconNode, 'wcIconDomainRelevant');
        }
        else if (currentDomainType === 'context') {
            this.domainButton.attr('label', tab.Strings.QuickFilterShowSmallerRange);
            dojo.addClass(this.domainButton.iconNode, 'wcIconDomainContext');
        }
        else {
            this.domainButton.attr('label', tab.Strings.QuickFilterShowSmallerRange);
            dojo.addClass(this.domainButton.iconNode, 'wcIconDomainAll');
        }
    },
    
    toggleReset: function tab_QuantitativeFilter$toggleReset() {
        var currTable = this.oFilter.table;
        var minHasValue = ss.isValue(currTable.min.v);
        var maxHasValue = ss.isValue(currTable.max.v);
        if ((!minHasValue && maxHasValue) || (!maxHasValue && minHasValue)) {
            var min = null;
            var max = null;
            if (!minHasValue) {
                max = this.getRangeMax();
            }
            else {
                min = this.getRangeMin();
            }
            tab.FilterClientCommands.setQuantitativeFilterRange(this.session.get_visualId(), this.field, min, max, this.oFilter.table.included);
        }
        else {
            tab.FilterClientCommands.setQuantitativeFilterRange(this.session.get_visualId(), this.field, this.oRangeMin.v, this.oRangeMax.v, 'include-all');
        }
        tab.QfButtonUtil.disableResetButton(this.resetButton);
    },
    
    toggleDomain: function tab_QuantitativeFilter$toggleDomain() {
        var isContext = function(item) {
            return item === 'context';
        };
        var newDomainType;
        var currentDomainType = this.attributes['values'];
        if (currentDomainType === 'relevant') {
            newDomainType = 'all';
        }
        else if (currentDomainType === 'context') {
            newDomainType = 'relevant';
        }
        else if (dojo.some(this.oFilter.domains, isContext)) {
            newDomainType = 'context';
        }
        else {
            newDomainType = 'relevant';
        }
        this.doRequestSetAttributes({ values: newDomainType }, false);
    },
    
    doRequestSetAttributes: function tab_QuantitativeFilter$doRequestSetAttributes(attrs, suppressEvent) {
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(attrs));
        while ($enum1.moveNext()) {
            var att = $enum1.current;
            this.attributes[att] = attrs[att];
        }
        if (!tab.BaseSession.autoUpdate) {
            this.initFromState();
        }
        this.requestSetAttributes(attrs, suppressEvent);
    },
    
    notifyChange: function tab_QuantitativeFilter$notifyChange() {
        if (ss.isNullOrUndefined(this._applyTimer$2)) {
            window.clearTimeout(this._applyTimer$2);
            this._applyTimer$2 = null;
        }
        this._applyTimer$2 = window.setTimeout(ss.Delegate.create(this, this.applyChanges), this._applyDelay$2);
    },
    
    initFromState: function tab_QuantitativeFilter$initFromState() {
        this.layout();
    },
    
    localize: function tab_QuantitativeFilter$localize() {
    },
    
    contentBox: function tab_QuantitativeFilter$contentBox(node) {
        var oldDisplay = dojo.style(node, 'display');
        if (oldDisplay === 'none') {
            dojo.style(node, 'display', '');
        }
        var ret = dojo.contentBox(node);
        dojo.style(node, 'display', oldDisplay);
        return ret;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuickFilterDisplayView

tab.QuickFilterDisplayView = function tab_QuickFilterDisplayView(viewModel) {
    tab.QuickFilterDisplayView.initializeBase(this, [ viewModel, new tab.QuickFilterDisplayTemplate() ]);
    this.get__quickFilterDisplayViewModel$2().add_updateQuickFilterDisplay(ss.Delegate.create(this, this.handleUpdateQuickFilterDisplay));
    this.get__quickFilterDisplayViewModel$2().add_resized(ss.Delegate.create(this, this.updateSize));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get__quickFilterDisplayViewModel$2().remove_updateQuickFilterDisplay(ss.Delegate.create(this, this.handleUpdateQuickFilterDisplay));
    })));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get__quickFilterDisplayViewModel$2().remove_resized(ss.Delegate.create(this, this.updateSize));
    })));
    this.get__quickFilterDisplayViewModel$2().add_updateQuickFilterContent(ss.Delegate.create(this, this.handleUpdateQuickFilterContent));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get__quickFilterDisplayViewModel$2().remove_updateQuickFilterContent(ss.Delegate.create(this, this.handleUpdateQuickFilterContent));
    })));
    if (this.get__quickFilterDisplayViewModel$2().get_hasBorder()) {
        this.get_template().get_domRoot().addClass('tabBordered');
    }
}
tab.QuickFilterDisplayView.prototype = {
    _node$2: null,
    
    get_zonePresModel: function tab_QuickFilterDisplayView$get_zonePresModel() {
        return this.get__quickFilterDisplayViewModel$2().get_zone();
    },
    
    get_domRoot: function tab_QuickFilterDisplayView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    get__frame$2: function tab_QuickFilterDisplayView$get__frame$2() {
        return this.get__quickFilterDisplayViewModel$2().get_frame();
    },
    
    get__quickFilterDisplayViewModel$2: function tab_QuickFilterDisplayView$get__quickFilterDisplayViewModel$2() {
        return this.get_viewModel();
    },
    
    dispose: function tab_QuickFilterDisplayView$dispose() {
        if (ss.isValue(this._node$2)) {
            this._node$2.destroyRecursive(false);
            this._node$2 = null;
        }
        tab.QuickFilterDisplayView.callBaseMethod(this, 'dispose');
    },
    
    onAddedToDom: function tab_QuickFilterDisplayView$onAddedToDom() {
        tab.QuickFilterDisplayView.callBaseMethod(this, 'onAddedToDom');
        if (ss.isValue(this.get__quickFilterDisplayViewModel$2().get_quickFilterDisplayModel())) {
            this.handleUpdateQuickFilterDisplay();
        }
    },
    
    handleUpdateQuickFilterDisplay: function tab_QuickFilterDisplayView$handleUpdateQuickFilterDisplay() {
        if (ss.isValue(this._node$2) && !this.get__quickFilterDisplayViewModel$2().get_needToUpdate()) {
            return;
        }
        this._node$2 = this.createFilterPanel();
        this.get_template().get_domRoot().append(this._node$2.domNode);
        this._node$2.startup();
        this.updateSize();
        this.handleUpdateQuickFilterContent();
    },
    
    handleUpdateQuickFilterContent: function tab_QuickFilterDisplayView$handleUpdateQuickFilterContent() {
        if (ss.isValue(this._node$2) && this.get__quickFilterDisplayViewModel$2().get_needToUpdate()) {
            tab.Log.get(this).debug('Updating ' + this.get__quickFilterDisplayViewModel$2().get_filterPresModel().fieldCaption);
            this._node$2.updateAttributes(this.get__frame$2().attributes);
            this._node$2.updateFilterState(this.get__quickFilterDisplayViewModel$2().get_filterPresModel());
            this.get__quickFilterDisplayViewModel$2().set_needToUpdate(false);
        }
    },
    
    updateSize: function tab_QuickFilterDisplayView$updateSize() {
        tab.DomUtil.resize(this._node$2, tab.ZoneView.viewRect(this.get_zonePresModel()));
        var titleHeight = this.get__quickFilterDisplayViewModel$2().get_quickFilterDisplayPresModel().quickFilterTitle.h;
        if (this.get__quickFilterDisplayViewModel$2().get_hasBorder()) {
            titleHeight += 3;
        }
        titleHeight = Math.max(titleHeight, 17);
        var titleWidth = this.get__quickFilterDisplayViewModel$2().get_quickFilterDisplayPresModel().quickFilterTitle.w;
        this._node$2.setTitleSize((!this.get_zonePresModel().titleHeight) ? 0 : titleHeight, (!this.get_zonePresModel().titleWidth) ? 0 : titleWidth);
    },
    
    createFilterPanel: function tab_QuickFilterDisplayView$createFilterPanel() {
        var session = this.get__quickFilterDisplayViewModel$2().get_layoutSession();
        var sheetName = this.get__quickFilterDisplayViewModel$2().get_zone().sheet;
        var oProps = {};
        oProps.sessionid = session.get_id();
        oProps.urlRoot = session.get_urlRoot();
        oProps.layoutSession = session;
        oProps.sheetid = sheetName;
        oProps.zid = this.get__frame$2().key.zid;
        oProps.titleHTML = this.get__quickFilterDisplayViewModel$2().get_quickFilterDisplayModel().get_quickFilterTitle().html;
        oProps.session = this.get__quickFilterDisplayViewModel$2().get_viewSession();
        oProps.field = this.get__frame$2().param;
        oProps.quickFilterDisplayViewModel = this.get__quickFilterDisplayViewModel$2();
        if (ss.isValue(this.get__frame$2().format)) {
            oProps.format = this.get__frame$2().format;
        }
        if (ss.isValue(this.get__frame$2().attributes)) {
            oProps.attributes = this.get__frame$2().attributes;
        }
        if (ss.isValue(this.get__frame$2().w)) {
            oProps.width = this.get__frame$2().w;
        }
        var requestSetAttributes = ss.Delegate.create(this, function(att, suppressEvent) {
            this._setZoneAttribute$2(this.get__frame$2().param, this.get__quickFilterDisplayViewModel$2().get_visualId(), att, suppressEvent);
        });
        oProps.requestSetAttributes = requestSetAttributes;
        oProps.textStyle = this.get__quickFilterDisplayViewModel$2().get_quickFilterDisplayPresModel().textStyle;
        if (ss.isValue(this.get_zonePresModel().styledBox)) {
            oProps.backgroundColor = this.get_zonePresModel().styledBox.fillColor;
        }
        if (ss.isValue(this._node$2)) {
            this._node$2.updateFilterProperties(oProps);
            this._node$2.updateSubWidget(this.get__quickFilterDisplayViewModel$2().get_filterPresModel());
            return this._node$2;
        }
        var panel = this.makeFilterPanel(oProps);
        return panel;
    },
    
    makeFilterPanel: function tab_QuickFilterDisplayView$makeFilterPanel(oProps) {
        return new tableau.base.widget.FilterPanel(oProps);
    },
    
    _setZoneAttribute$2: function tab_QuickFilterDisplayView$_setZoneAttribute$2(field, visualId, attributes, suppressEvent) {
        if (Object.keyExists(attributes, 'mode')) {
            tab.Log.get(this).warn('Setting zone mode attribute.  This is deprecated');
            tab.FilterClientCommands.setCategoricalQuickFilterMode(visualId, field, attributes['mode']);
        }
        else if (Object.keyExists(attributes, 'values')) {
            tab.FilterClientCommands.setCategoricalQuickFilterDomain(visualId, field, attributes['values']);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.QuickFilterDisplayTemplate

tab.QuickFilterDisplayTemplate = function tab_QuickFilterDisplayTemplate() {
    tab.QuickFilterDisplayTemplate.initializeBase(this, [ $("<div class='tab-quick-filter'></div>") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarView

tab.ToolbarView = function tab_ToolbarView(viewModel) {
    tab.ToolbarView.initializeBase(this, [ viewModel, new tab.ToolbarTemplate() ]);
    this._toolbarViewModel$2 = viewModel;
    this._toolbarViewModel$2.add_newToolbar(ss.Delegate.create(this, this._updateToolbarButtons$2));
    this._toolbarViewModel$2.add_viewCountLoaded(ss.Delegate.create(this, this._updateToolbarPublicItems$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._toolbarViewModel$2.remove_newToolbar(ss.Delegate.create(this, this._updateToolbarButtons$2));
    })));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._toolbarViewModel$2.remove_viewCountLoaded(ss.Delegate.create(this, this._updateToolbarPublicItems$2));
    })));
}
tab.ToolbarView.prototype = {
    _toolbarViewModel$2: null,
    _toolbarInitialized$2: false,
    
    get_dom: function tab_ToolbarView$get_dom() {
        return this.get_template();
    },
    
    get__height$2: function tab_ToolbarView$get__height$2() {
        return (this._toolbarViewModel$2.get_shouldShowPublicWatermarkItems()) ? 59 : 27;
    },
    
    _updateToolbarButtons$2: function tab_ToolbarView$_updateToolbarButtons$2() {
        this.get_dom().toolbar.height(this.get__height$2());
        this.get_dom().vizItems.empty();
        var $enum1 = ss.IEnumerator.getEnumerator(this._toolbarViewModel$2.get_vizItems());
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            var b = tab.ToolbarButtonView.create(item);
            this.get_dom().vizItems.append(b.get_element());
        }
        this.get_dom().nonVizItems.empty();
        this.get_dom().nonVizItems.append(this._toolbarViewModel$2.generateDebugRenderModeFlag());
        var $enum2 = ss.IEnumerator.getEnumerator(this._toolbarViewModel$2.get_nonVizItems());
        while ($enum2.moveNext()) {
            var item = $enum2.current;
            var b = tab.ToolbarButtonView.create(item);
            this.get_dom().nonVizItems.append(b.get_element());
        }
        this._updateToolbarPublicItems$2();
        this._handleResize$2();
    },
    
    _updateToolbarPublicItems$2: function tab_ToolbarView$_updateToolbarPublicItems$2() {
        if (this._toolbarInitialized$2 && this._toolbarViewModel$2.get_shouldShowPublicWatermarkItems()) {
            this.get_dom().publicLogo.empty();
            this.get_dom().publicBelowLogo.empty();
            this._addPublicLogo$2();
            if (this._toolbarViewModel$2.get_shouldShowViewCount()) {
                this._addViewCountLine$2();
                if (this._toolbarViewModel$2.get_shouldShowAuthorByLine()) {
                    this._addDivider$2();
                }
            }
            if (this._toolbarViewModel$2.get_shouldShowAuthorByLine()) {
                this._addAuthorByLine$2();
            }
            this._handleResize$2();
        }
    },
    
    _addPublicLogo$2: function tab_ToolbarView$_addPublicLogo$2() {
        this.get_dom().publicLogo.prop('href', this._toolbarViewModel$2.get_publicLogoLink());
        var logo = $('<div />');
        logo.addClass('tab-publicLogo');
        this.get_dom().publicLogo.append(logo);
    },
    
    _addViewCountLine$2: function tab_ToolbarView$_addViewCountLine$2() {
        var viewCountText = $('<span>').html(this._toolbarViewModel$2.get_viewCountText());
        this.get_dom().publicBelowLogo.append(viewCountText);
    },
    
    _addDivider$2: function tab_ToolbarView$_addDivider$2() {
        var dividerText = $('<span>');
        dividerText.addClass('tab-belowPublicDivider');
        dividerText.html('|');
        this.get_dom().publicBelowLogo.append(dividerText);
    },
    
    _addAuthorByLine$2: function tab_ToolbarView$_addAuthorByLine$2() {
        var authorBylineText = $('<span>').html(this._toolbarViewModel$2.get_authorProfileLink());
        this.get_dom().publicBelowLogo.append(authorBylineText);
    },
    
    _verticallyCenterButtons$2: function tab_ToolbarView$_verticallyCenterButtons$2() {
        this.get_dom().vizItems.children().css('padding-top', 'initial');
        this.get_dom().nonVizItems.children().css('padding-top', 'initial');
        this.get_dom().vizItems.children().css('height', 'initial');
        this.get_dom().nonVizItems.children().css('height', 'initial');
        var toolbarHeight = this.get_dom().toolbar.innerHeight();
        var totalButtonHeight = 0;
        var firstButton = null;
        if (this.get_dom().vizItems.children().length > 0) {
            firstButton = this.get_dom().vizItems.children().first();
        }
        else if (this.get_dom().nonVizItems.children().length > 0) {
            firstButton = this.get_dom().nonVizItems.children().first();
        }
        if (ss.isValue(firstButton)) {
            firstButton.children().each(ss.Delegate.create(this, function(index, e) {
                var height = $(e).innerHeight();
                if (this.get_dom().vizItems.hasClass('hideLabels') || this.get_dom().vizItems.hasClass('horizontal')) {
                    if (height > totalButtonHeight) {
                        totalButtonHeight = height;
                    }
                }
                else {
                    totalButtonHeight += height;
                }
            }));
        }
        var itemsTopPadding = Math.floor(((toolbarHeight - totalButtonHeight) / 2));
        var itemsTopPaddingString = itemsTopPadding + 'px';
        var itemsHeightString = (toolbarHeight - itemsTopPadding) + 'px';
        this.get_dom().vizItems.children().css('padding-top', itemsTopPaddingString);
        this.get_dom().nonVizItems.children().css('padding-top', itemsTopPaddingString);
        this.get_dom().vizItems.children().css('height', itemsHeightString);
        this.get_dom().nonVizItems.children().css('height', itemsHeightString);
        if (this._toolbarViewModel$2.get_shouldShowPublicWatermarkItems()) {
            var publicItemsHeight = this.get_dom().publicItems.height();
            var publicItemsTopPadding = ((toolbarHeight - publicItemsHeight) / 2) + 'px';
            this.get_dom().publicItems.css('padding-top', publicItemsTopPadding);
        }
    },
    
    _handleResize$2: function tab_ToolbarView$_handleResize$2() {
        this.get_dom().vizItems.addClass('horizontal');
        this.get_dom().nonVizItems.addClass('horizontal');
        var totalWidthAvailable = this.get_dom().toolbar.width() - parseInt(this.get_dom().vizItems.css('padding-left').replaceAll('px', '')) - parseInt(this.get_dom().nonVizItems.css('padding-right').replaceAll('px', ''));
        var vizItemsWidth = this.get_dom().vizItems.width();
        var nonVizItemsWidth = this.get_dom().nonVizItems.width();
        var centerWidth = (this._toolbarViewModel$2.get_shouldShowPublicWatermarkItems()) ? this.get_dom().publicItems.outerWidth() : 0;
        var everythingFits = this._toolbarPiecesFitInBar$2(totalWidthAvailable, vizItemsWidth, centerWidth, nonVizItemsWidth);
        if (!everythingFits && this._canPutLabelsUnderneath$2()) {
            this.get_dom().vizItems.removeClass('horizontal');
            this.get_dom().nonVizItems.removeClass('horizontal');
            vizItemsWidth = this.get_dom().vizItems.width();
            nonVizItemsWidth = this.get_dom().nonVizItems.width();
            everythingFits = this._toolbarPiecesFitInBar$2(totalWidthAvailable, vizItemsWidth, centerWidth, nonVizItemsWidth);
        }
        if (!everythingFits) {
            this.get_dom().nonVizItems.addClass('hideLabels');
            this._addLabelTooltips$2(this.get_dom().nonVizItems);
            if (this._canPutLabelsUnderneath$2()) {
                this.get_dom().vizItems.addClass('hideLabels');
                this._addLabelTooltips$2(this.get_dom().vizItems);
            }
            vizItemsWidth = this.get_dom().vizItems.width();
            nonVizItemsWidth = this.get_dom().nonVizItems.width();
            everythingFits = this._toolbarPiecesFitInBar$2(totalWidthAvailable, vizItemsWidth, centerWidth, nonVizItemsWidth);
        }
        if (!everythingFits) {
            this.get_dom().vizItems.addClass('hideLabels');
            this._addLabelTooltips$2(this.get_dom().vizItems);
            vizItemsWidth = this.get_dom().vizItems.width();
            everythingFits = this._toolbarPiecesFitInBar$2(totalWidthAvailable, vizItemsWidth, centerWidth, nonVizItemsWidth);
        }
        if (!everythingFits && this._toolbarViewModel$2.get_shouldShowPublicWatermarkItems()) {
            this.get_dom().publicBelowLogo.hide();
            this.get_dom().publicItems.addClass('narrow');
            this.get_dom().publicLogo.attr('title', tab.Strings.ToolbarAboutTableau);
            centerWidth = this.get_dom().publicItems.outerWidth();
            everythingFits = this._toolbarPiecesFitInBar$2(totalWidthAvailable, vizItemsWidth, centerWidth, nonVizItemsWidth);
        }
        if (!everythingFits) {
            this.get_dom().vizItems.children().each(function(index, e) {
                var button = $(e);
                var isRedo = button.find('.tab-icon-redo').length > 0;
                if (isRedo) {
                    button.hide();
                }
            });
        }
        this._verticallyCenterButtons$2();
    },
    
    _addLabelTooltips$2: function tab_ToolbarView$_addLabelTooltips$2(items) {
        if (items.hasClass('hideLabels')) {
            items.find('.tabToolbarButton').each(function(index, e) {
                var label = $(e).find('.tabToolbarButtonText').text();
                e.setAttribute('title', label);
            });
        }
    },
    
    _toolbarPiecesFitInBar$2: function tab_ToolbarView$_toolbarPiecesFitInBar$2(totalWidth, leftWidth, centerWidth, rightWidth) {
        if (leftWidth + centerWidth + rightWidth >= totalWidth) {
            return false;
        }
        if (centerWidth > 0 && (leftWidth + (0.5 * centerWidth) >= (0.5 * totalWidth) || rightWidth + (0.5 * centerWidth) >= (0.5 * totalWidth))) {
            return false;
        }
        return true;
    },
    
    _canPutLabelsUnderneath$2: function tab_ToolbarView$_canPutLabelsUnderneath$2() {
        return tsConfig.isPublic && this.get__height$2() > 40;
    },
    
    onAddedToDom: function tab_ToolbarView$onAddedToDom() {
        this._toolbarInitialized$2 = true;
        this._updateToolbarButtons$2();
        tab.ToolbarView.callBaseMethod(this, 'onAddedToDom');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarTemplate

tab.ToolbarTemplate = function tab_ToolbarTemplate() {
    tab.ToolbarTemplate.initializeBase(this, [ $("\n            <div class='tab-toolbar tab-fill'>\n                <div class='tab-vizItems tab-fill-left' />\n                <div class='tab-publicItems'>\n                    <a class='tab-publicLogoLink' target='_blank' />\n                    <div class='tab-belowPublicLogo' />\n                </div>\n                <div class='tab-nonVizItems tab-fill-right' />\n            <div/>") ]);
    if (!tab.BrowserSupport.get_displayInlineBlock()) {
        this.get_domRoot().addClass('noDisplayInline');
    }
    this.toolbar = this.get_domRoot();
    this.vizItems = this.getElementBySelector('.tab-vizItems');
    this.publicItems = this.getElementBySelector('.tab-publicItems');
    this.publicLogo = this.getElementBySelector('.tab-publicLogoLink');
    this.publicBelowLogo = this.getElementBySelector('.tab-belowPublicLogo');
    this.nonVizItems = this.getElementBySelector('.tab-nonVizItems');
}
tab.ToolbarTemplate.prototype = {
    toolbar: null,
    vizItems: null,
    publicItems: null,
    publicLogo: null,
    publicBelowLogo: null,
    nonVizItems: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.WebZoneView

tab.WebZoneView = function tab_WebZoneView(viewModel, parentZoneViewModel) {
    tab.WebZoneView.initializeBase(this, [ viewModel, new tab.PageTemplate() ]);
    this._webZoneViewModel$2 = viewModel;
    this._parentZoneViewModel$2 = parentZoneViewModel;
    this._webZoneViewModel$2.add_newWebZone(ss.Delegate.create(this, this.handleNewWebZone));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._webZoneViewModel$2.remove_newWebZone(ss.Delegate.create(this, this.handleNewWebZone));
    })));
    this._parentZoneViewModel$2.add_resizeZone(ss.Delegate.create(this, this._handleResizeZone$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._parentZoneViewModel$2.remove_resizeZone(ss.Delegate.create(this, this._handleResizeZone$2));
    })));
}
tab.WebZoneView.prototype = {
    _webZoneViewModel$2: null,
    _parentZoneViewModel$2: null,
    _node$2: null,
    
    get_zonePresModel: function tab_WebZoneView$get_zonePresModel() {
        return this._webZoneViewModel$2.get_webZoneModel().get_zone();
    },
    
    get_webZonePresModel: function tab_WebZoneView$get_webZonePresModel() {
        return this._webZoneViewModel$2.get_webZoneModel().get_presModel();
    },
    
    get_domRoot: function tab_WebZoneView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    onAddedToDom: function tab_WebZoneView$onAddedToDom() {
        tab.WebZoneView.callBaseMethod(this, 'onAddedToDom');
        this.handleNewWebZone();
    },
    
    handleNewWebZone: function tab_WebZoneView$handleNewWebZone() {
        if (ss.isValue(this._node$2)) {
            this.updateWebZone();
        }
        else {
            this.createWebZone();
            this.get_template().get_domRoot().append(this._node$2);
        }
    },
    
    updateIFrameFromViewModel: function tab_WebZoneView$updateIFrameFromViewModel(iframeNode) {
        if (this.get_webZonePresModel().url !== this._node$2.children().first().prop('original_url')) {
            var url = tab.URIUtil.absolutizeURI(this.get_webZonePresModel().url);
            iframeNode.prop('src', url);
            iframeNode.prop('original_url', this.get_webZonePresModel().url);
        }
        tab.DomUtil.resize(iframeNode.get(0), tab.$create_Rect(this.get_zonePresModel().x, this.get_zonePresModel().y, this.get_zonePresModel().w, this.get_zonePresModel().h));
    },
    
    updateWebZone: function tab_WebZoneView$updateWebZone() {
        var iframeNode = this._node$2.children().first();
        this.updateIFrameFromViewModel(iframeNode);
    },
    
    createWebZone: function tab_WebZoneView$createWebZone() {
        var iframeName = 'frame_' + this.get_zonePresModel().zoneId.toString();
        var iframeNode;
        this._node$2 = $('<div>');
        if (tsConfig.is_mobile) {
            if (tab.BrowserSupport.get_isSafari()) {
                this._node$2.css('-webkit-overflow-scrolling', 'touch');
            }
            this._node$2.css('overflow', 'auto');
        }
        if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) {
            iframeNode = $('<iframe name="' + iframeName + '" frameborder="0"></iframe>');
            if (tab.BrowserSupport.get_browserVersion() < 7) {
                iframeNode.css('position', 'absolute');
            }
        }
        else {
            iframeNode = $('<iframe/>');
            iframeNode.prop('name', iframeName);
        }
        iframeNode.css('border', '0px none');
        this._node$2.append(iframeNode);
        this.updateIFrameFromViewModel(iframeNode);
    },
    
    _handleResizeZone$2: function tab_WebZoneView$_handleResizeZone$2() {
        this.updateWebZone();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WebZoneTemplate

tab.WebZoneTemplate = function tab_WebZoneTemplate() {
    tab.WebZoneTemplate.initializeBase(this, [ $("<div class='tab-web'></div>") ]);
}
tab.WebZoneTemplate.prototype = {
    content: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalLegendView

tab.CategoricalLegendView = function tab_CategoricalLegendView(viewModel, template) {
    this._columns$3 = [];
    tab.CategoricalLegendView.initializeBase(this, [ viewModel, template ]);
    this.setHighlightButtonVisibility(false);
}
tab.CategoricalLegendView.setDomNodeStyleSize = function tab_CategoricalLegendView$setDomNodeStyleSize(domNode, width, height) {
    domNode.css('width', width + 'px');
    domNode.css('height', height + 'px');
}
tab.CategoricalLegendView._setShowHide$3 = function tab_CategoricalLegendView$_setShowHide$3(jqueryObject, isShown) {
    if (isShown) {
        jqueryObject.show();
    }
    else {
        jqueryObject.hide();
    }
}
tab.CategoricalLegendView.prototype = {
    viewportWidth: 0,
    viewportHeight: 0,
    bodyOffset: null,
    _redrawItemsAnimationFrame$3: null,
    _hackyShapeSwatchRenderer$3: null,
    
    get_docSize: function tab_CategoricalLegendView$get_docSize() {
        var pointPM = this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.legendSize;
        return tab.$create_Size(pointPM.w, pointPM.h);
    },
    
    get_catLegendViewModel: function tab_CategoricalLegendView$get_catLegendViewModel() {
        return this.get_viewModel();
    },
    
    get_catLegendTemplate: function tab_CategoricalLegendView$get_catLegendTemplate() {
        return this.get_template();
    },
    
    get_scrollOffset: function tab_CategoricalLegendView$get_scrollOffset() {
        var left = this.get_catLegendTemplate().columnsHolder.scrollLeft();
        var top = this.get_catLegendTemplate().columnsHolder.scrollTop();
        return tab.$create_Point(left, top);
    },
    set_scrollOffset: function tab_CategoricalLegendView$set_scrollOffset(value) {
        this.get_catLegendTemplate().columnsHolder.scrollLeft(value.x);
        this.get_catLegendTemplate().columnsHolder.scrollTop(value.y);
        return value;
    },
    
    onAddedToDom: function tab_CategoricalLegendView$onAddedToDom() {
        tab.CategoricalLegendView.callBaseMethod(this, 'onAddedToDom');
        this.drawLegend();
    },
    
    onViewModelPropertyChanged: function tab_CategoricalLegendView$onViewModelPropertyChanged(sender, e) {
        if (e.get_propertyName() === 'isActiveZone') {
        }
        else if (e.get_propertyName() === 'Items') {
            if (this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.colCount === this._columns$3.length) {
                this._drawItems$3();
                this._updateHighlightingEnabled$3();
            }
        }
        else if (e.get_propertyName() === 'ParentZoneSizeChanged') {
            var parentZoneSize = this.get_catLegendViewModel().get__parentZoneSize();
            if (parentZoneSize.w === this.get_catLegendTemplate().panel.width() && parentZoneSize.h === this.get_catLegendTemplate().panel.height()) {
            }
            else {
                this.resetLegend();
            }
        }
        else if (e.get_propertyName() === 'CustomShapesLoaded') {
            if (this.get_catLegendViewModel().get_legendTypeEnum() === 'shape') {
                if (ss.isValue(this._redrawItemsAnimationFrame$3)) {
                    tab.WindowHelper.cancelAnimationFrame(this._redrawItemsAnimationFrame$3);
                }
                this._redrawItemsAnimationFrame$3 = tab.WindowHelper.requestAnimationFrame(ss.Delegate.create(this, function() {
                    this._redrawItemsAnimationFrame$3 = null;
                    this._drawItems$3();
                }));
            }
        }
        else {
            this.resetLegend();
        }
    },
    
    getLegendItemFromEvent: function tab_CategoricalLegendView$getLegendItemFromEvent(pseudoEvent) {
        var target = $(pseudoEvent.target);
        if (target.hasClass('tabLegendItemLabelHolder') || target.hasClass('tabLegendItem')) {
            return null;
        }
        return target.parents('.tabLegendItem').andSelf().first().data('tabLegendItem');
    },
    
    resetLegend: function tab_CategoricalLegendView$resetLegend() {
        this.drawLegend();
    },
    
    getViewportPosition: function tab_CategoricalLegendView$getViewportPosition(pseudoEvent) {
        var info = pseudoEvent.get_gestureInfo();
        var coords = tab.$create_Point(info.pageX, info.pageY);
        return coords;
    },
    
    getDocumentPosition: function tab_CategoricalLegendView$getDocumentPosition(viewportPosition) {
        var coords = tab.$create_Point(viewportPosition.x, viewportPosition.y);
        var posOrigin = tab.DomUtil.getDojoCoordsJQ(this.get_catLegendTemplate().columnsHolder);
        coords.x += this.get_catLegendTemplate().columnsHolder.scrollLeft() + this.bodyOffset.x - posOrigin.x;
        coords.y += this.get_catLegendTemplate().columnsHolder.scrollTop() + this.bodyOffset.y - posOrigin.y;
        return coords;
    },
    
    performSelectOnItem: function tab_CategoricalLegendView$performSelectOnItem(item, action, viewportCoords, contentSelRect) {
        if (this.get_catLegendViewModel().get_legendTypeEnum() !== 'map') {
            this.get_catLegendViewModel().selectItem(item, action);
            this.get_legendTooltip().singleSelectCoordinates(viewportCoords, tab.$create_Point(contentSelRect.x, contentSelRect.y), this.get_legendViewModel().get_regionType(), 'legenditem');
        }
    },
    
    performHoverOnItem: function tab_CategoricalLegendView$performHoverOnItem(viewportCoords, contentSelRect) {
        if (this.get_catLegendViewModel().get_legendTypeEnum() !== 'map') {
            this.get_legendTooltip().hoverOverCoordinates(viewportCoords, tab.$create_Point(contentSelRect.x, contentSelRect.y), 'legenditem', this.get_legendViewModel().get_regionType());
        }
    },
    
    setContentSize: function tab_CategoricalLegendView$setContentSize(viewportHeightParam, viewportWidthParam) {
        tab.CategoricalLegendView.setDomNodeStyleSize(this.get_catLegendTemplate().columnsHolder, viewportWidthParam, viewportHeightParam);
    },
    
    onLegendHighlighterTapped: function tab_CategoricalLegendView$onLegendHighlighterTapped() {
        this.get_catLegendViewModel().toggleHighlighting();
    },
    
    setHighlightButtonVisibility: function tab_CategoricalLegendView$setHighlightButtonVisibility(isVisible) {
        isVisible = isVisible && this.get_catLegendViewModel().get__shouldShowHighlighter();
        if (isVisible) {
            this.get_catLegendTemplate().legendHighlighter.show();
        }
        else {
            this.get_catLegendTemplate().legendHighlighter.hide();
        }
    },
    
    drawLegend: function tab_CategoricalLegendView$drawLegend() {
        var catLegendPM = this.get_catLegendViewModel().get_categoricalLegendPM();
        var catlayoutPM = catLegendPM.catLegendLayout;
        var $enum1 = ss.IEnumerator.getEnumerator(this._columns$3);
        while ($enum1.moveNext()) {
            var colTemplate = $enum1.current;
            colTemplate.get_domRoot().remove();
        }
        this._columns$3.clear();
        var panelWidth = this.get_catLegendViewModel().get__parentZoneSize().w;
        var panelHeight = this.get_catLegendViewModel().get__parentZoneSize().h;
        tab.CategoricalLegendView.setDomNodeStyleSize(this.get_catLegendTemplate().panel, panelWidth, panelHeight);
        var htmlId = 'tableau_base_legend_' + this.get_catLegendViewModel().get_regionType() + ((this.get_catLegendViewModel().get__shouldShowHighlighter()) ? '_q_' : '_') + encodeURIComponent((this.get_catLegendViewModel().get_visualId().worksheet));
        this.get_catLegendTemplate().panel.get(0).id = htmlId;
        tab.CategoricalLegendView._setShowHide$3(this.get_catLegendTemplate().titleArea, true);
        this.viewportWidth = panelWidth;
        this.viewportHeight = panelHeight;
        this.bodyOffset = tab.$create_Point(0, 0);
        this.drawTitle();
        var titleSize = this.get_catLegendViewModel().get__parentZoneTitleSize();
        if (this.get_catLegendViewModel().get_titleInline()) {
            var itemHeight = this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.rowHeight;
            this.get_baseLegendTemplate().titleArea.css('height', itemHeight + 'px');
            this.get_baseLegendTemplate().titleArea.css('line-height', itemHeight + 'px');
            this.viewportWidth -= titleSize.w;
            this.bodyOffset.x += titleSize.w;
        }
        else {
            this.viewportHeight -= titleSize.h;
            this.bodyOffset.y += titleSize.h;
        }
        this.setContentSize(this.viewportHeight, this.viewportWidth);
        var scrollOffset = catLegendPM.scrollOffset;
        if (ss.isNullOrUndefined(scrollOffset)) {
            scrollOffset = {};
            scrollOffset.x = 0;
            scrollOffset.y = 0;
        }
        this.set_scrollOffset(tab.PointUtil.fromPresModel(scrollOffset));
        var areaWidth = catlayoutPM.areaSize.w;
        var areaHeight = catlayoutPM.areaSize.h;
        var swatchWidth = catlayoutPM.imageSize.w;
        var swatchHeight = catlayoutPM.imageSize.h;
        var swatchLeftPadding = Math.ceil((areaWidth - swatchWidth) / 2);
        var swatchTopPadding = Math.ceil((areaHeight - swatchHeight) / 2);
        var swatchArea = tab.$create_Size(areaWidth, areaHeight);
        var swatchRect = null;
        var accountForColorSwatchBorder = false;
        if (this.get_catLegendViewModel().legendType === 'color' || this.get_catLegendViewModel().legendType === 'map') {
            swatchRect = tab.$create_Rect(swatchLeftPadding, swatchTopPadding, swatchWidth, swatchHeight);
            accountForColorSwatchBorder = ss.isValue(this.get_catLegendViewModel().get__colorLegendPM().swatchBorderColor);
        }
        var colWidth = this._getColWidth$3(catlayoutPM);
        for (var col = 0; col < catlayoutPM.colCount; ++col) {
            var newCol = new tab.CategoricalLegendColumnHtmlTemplate(catlayoutPM.rowCount, colWidth, catlayoutPM.rowHeight, swatchArea, swatchRect, accountForColorSwatchBorder);
            this._columns$3.add(newCol);
            newCol.column.width(colWidth);
            this.get_catLegendTemplate().columnHolder.append(newCol.get_domRoot());
        }
        this._updateHighlightingEnabled$3();
        this._drawItems$3();
    },
    
    _updateHighlightingEnabled$3: function tab_CategoricalLegendView$_updateHighlightingEnabled$3() {
        this.get_catLegendTemplate().legendHighlighter.toggleClass('tabHighlightEnabled', this.get_catLegendViewModel().get__isHighlightingEnabled());
        this.get_catLegendTemplate().legendHighlighter.toggleClass('tabHighlightDisabled', !this.get_catLegendViewModel().get__isHighlightingEnabled());
    },
    
    _drawItems$3: function tab_CategoricalLegendView$_drawItems$3() {
        var catLegendPM = this.get_catLegendViewModel().get_categoricalLegendPM();
        var catlayoutPM = catLegendPM.catLegendLayout;
        var numItems = this.get_catLegendViewModel().get_numLegendItems();
        var itemIdx = 0;
        for (var col = 0; col < catlayoutPM.colCount && itemIdx < numItems; ++col) {
            var currentCol = this._columns$3[col];
            for (var row = 0; row < catlayoutPM.rowCount && itemIdx < numItems && row < currentCol.get_legendItems().length; ++row) {
                var itemTemplate = currentCol.get_legendItems()[row];
                var catLegendItem = this._drawItem$3(itemIdx, itemTemplate);
                if (ss.isValue(catLegendItem)) {
                    this._drawItemText$3(catLegendItem, catLegendPM, itemTemplate);
                    itemTemplate.get_domRoot().data('tabLegendItem', catLegendItem);
                }
                ++itemIdx;
            }
        }
    },
    
    _drawItem$3: function tab_CategoricalLegendView$_drawItem$3(itemIdx, itemTemplate) {
        var toRet = null;
        switch (this.get_catLegendViewModel().legendType) {
            case 'color':
            case 'map':
                toRet = this._drawColorItem$3(itemIdx, itemTemplate);
                break;
            case 'size':
                toRet = this._drawSizeItem$3(itemIdx, itemTemplate);
                break;
            case 'shape':
                toRet = this._drawShapeItem$3(itemIdx, itemTemplate);
                break;
            default:
                ss.Debug.fail('unsupported legend type: ' + this.get_catLegendViewModel().legendType);
                break;
        }
        return toRet;
    },
    
    _applyFoggingToColor$3: function tab_CategoricalLegendView$_applyFoggingToColor$3(color, backgroundColor) {
        var fogBlendFactor = tab.PaneDrawInfo.getFogBlendFactor(backgroundColor);
        var foggedBackground = tab.PaneDrawInfo.applyFogToBackgroundColor(backgroundColor, fogBlendFactor);
        return tab.PaneDrawInfo.fogColorTransform(color, foggedBackground, fogBlendFactor);
    },
    
    _drawColorItem$3: function tab_CategoricalLegendView$_drawColorItem$3(itemIdx, itemTemplate) {
        var colorLegendPM = this.get_catLegendViewModel().get__colorLegendPM();
        var catLegendItem = colorLegendPM.colorLegendItems[itemIdx];
        var swatchBGColor = this.get_catLegendViewModel().get__swatchBackgroundColor();
        var swatchColor = tab.ColorModel.fromColorCode(catLegendItem.color);
        swatchColor = tab.ColorModel.alphaComposite(swatchColor, swatchBGColor);
        var itemIsFogged = this.get_catLegendViewModel().isGrayed(catLegendItem);
        if (itemIsFogged) {
            swatchColor = this._applyFoggingToColor$3(swatchColor, swatchBGColor);
        }
        var swatchColorString = swatchColor.toString();
        itemTemplate.itemSwatch.css('background-color', swatchColorString);
        itemTemplate.itemSwatch.get(0).id = swatchColorString;
        if (ss.isValue(colorLegendPM.swatchBorderColor)) {
            itemTemplate.itemSwatch.css('border-style', 'solid');
            var swatchBorderColor = tab.ColorModel.fromColorCode(colorLegendPM.swatchBorderColor);
            if (itemIsFogged) {
                swatchBorderColor = this._applyFoggingToColor$3(swatchBorderColor, swatchBGColor);
            }
            itemTemplate.itemSwatch.css('border-color', swatchBorderColor.toString());
        }
        return catLegendItem;
    },
    
    _drawShapeItem$3: function tab_CategoricalLegendView$_drawShapeItem$3(itemIdx, itemTemplate) {
        ss.Debug.assert(ss.isValue(itemTemplate.renderContext), 'Shape legends should have canvases');
        var shapeLegendPM = this.get_catLegendViewModel().get__shapeLegendPM();
        var catLegendItem = shapeLegendPM.shapeLegendItems[itemIdx];
        var areaWidth = shapeLegendPM.catLegendLayout.areaSize.w;
        var areaHeight = shapeLegendPM.catLegendLayout.areaSize.h;
        var context = itemTemplate.renderContext;
        context.clearRect(0, 0, areaWidth, areaHeight);
        if (this._hackyShapeSwatchRenderer$3 == null || !this._hackyShapeSwatchRenderer$3._containsShape(catLegendItem.shapeId)) {
            this._hackyShapeSwatchRenderer$3 = new tab._hackyShapeSwatchRenderer(itemTemplate, areaWidth / 2, areaHeight / 2, shapeLegendPM.catLegendLayout.imageSize.w, shapeLegendPM.catLegendLayout.imageSize.h, this.get_catLegendViewModel().get__swatchBackgroundColor());
        }
        this._hackyShapeSwatchRenderer$3._renderSwatch(context, catLegendItem.shapeId, this.get_catLegendViewModel().isGrayed(catLegendItem));
        itemTemplate.itemSwatch.get(0).id = catLegendItem.shapeId.toString();
        return catLegendItem;
    },
    
    _drawSizeItem$3: function tab_CategoricalLegendView$_drawSizeItem$3(itemIdx, itemTemplate) {
        ss.Debug.assert(ss.isValue(itemTemplate.renderContext), 'Size legends should have canvases');
        var sizeLegendPM = this.get_catLegendViewModel().get__sizeLegendPM();
        var catLegendItem = sizeLegendPM.sizeLegendItems[itemIdx];
        var areaWidth = sizeLegendPM.catLegendLayout.areaSize.w;
        var areaHeight = sizeLegendPM.catLegendLayout.areaSize.h;
        var swatchHeight = sizeLegendPM.catLegendLayout.imageSize.h;
        var swatchTopPadding = Math.ceil((areaHeight - swatchHeight) / 2);
        var context = itemTemplate.renderContext;
        context.save();
        var swatchFillColor = tab.CategoricalLegendView._sizeSwatchFillColor$3;
        var swatchBorderColor = tab.CategoricalLegendView._sizeSwatchBorderColor$3;
        if (this.get_catLegendViewModel().isGrayed(catLegendItem)) {
            var swatchBGColor = this.get_catLegendViewModel().get__swatchBackgroundColor();
            swatchFillColor = this._applyFoggingToColor$3(swatchFillColor, swatchBGColor);
            swatchBorderColor = this._applyFoggingToColor$3(swatchBorderColor, swatchBGColor);
        }
        context.set_shapeFillStyle(swatchFillColor.toString());
        context.set_strokeStyle(swatchBorderColor.toString());
        context.set_lineWidth(2);
        var centerX = areaWidth / 2;
        var centerY = areaHeight / 2;
        var radius = catLegendItem.size / 2;
        context.clearRect(0, 0, areaWidth, areaHeight);
        context.setClip(tab.$create_RectXY(0, 1, areaWidth, areaHeight - 2));
        switch (sizeLegendPM.primitiveType) {
            case 'shape':
            case 'circle':
            case 'pie':
                context.beginPath();
                context.arc(centerX, centerY, radius, 0, Math.PI * 2, false);
                context.closePath();
                context.fill();
                context.beginPath();
                context.arc(centerX, centerY, radius, 0, Math.PI * 2, false);
                context.closePath();
                context.stroke();
                break;
            case 'line':
            case 'gantt':
            case 'bar':
                context.fillRect(centerX - radius, swatchTopPadding, catLegendItem.size, swatchHeight);
                break;
            case 'square':
                var left = centerX - radius;
                var top = centerY - radius;
                context.fillRect(left, top, catLegendItem.size, catLegendItem.size);
                context.strokeRect(left, top, catLegendItem.size, catLegendItem.size);
                break;
            case 'text':
                var textStyle = sizeLegendPM.swatchTextStyle;
                if (ss.isUndefined(textStyle)) {
                    textStyle = sizeLegendPM.textStyle;
                }
                tab.DisplayList2DRenderer.setTextProperties(context, textStyle, catLegendItem.size);
                context.set_textAlign('center');
                context.fillText1(tab.Strings.SizeLegendTextMarkSwatch, centerX, centerY);
                break;
            default:
                ss.Debug.fail('Unsupported primitive type: ' + sizeLegendPM.primitiveType);
                break;
        }
        context.restore();
        itemTemplate.itemSwatch.get(0).id = sizeLegendPM.primitiveType + '_' + catLegendItem.size.toString();
        return catLegendItem;
    },
    
    _getColWidth$3: function tab_CategoricalLegendView$_getColWidth$3(catlayoutPM) {
        if (catlayoutPM.legendLayout === 'grid' && (catlayoutPM.legendSize.w < catlayoutPM.colWidth)) {
            return catlayoutPM.legendSize.w;
        }
        else {
            return catlayoutPM.colWidth;
        }
    },
    
    _drawItemText$3: function tab_CategoricalLegendView$_drawItemText$3(itemPM, legendPM, itemTemplate) {
        var textStyle = legendPM.textStyle;
        var altTextColor = null;
        var itemBackgroundColor = '';
        if (this.get_catLegendViewModel().isSelected(itemPM)) {
            textStyle = legendPM.selectedTextStyleModel;
            itemBackgroundColor = legendPM.selectBgColor;
        }
        else if (this.get_catLegendViewModel().isGrayed(itemPM)) {
            var swatchBGColor = this.get_catLegendViewModel().get__swatchBackgroundColor();
            altTextColor = this._applyFoggingToColor$3(tab.ColorModel.fromColorCode(textStyle.color), swatchBGColor).toString();
        }
        var textYPos = legendPM.catLegendLayout.textOrigin.y;
        var textXPos = legendPM.catLegendLayout.textOrigin.x;
        var textAlignDir = 'left';
        var colWidth = this._getColWidth$3(legendPM.catLegendLayout);
        var itemWidth = colWidth - textXPos;
        if (textStyle.halign === 'h-align-right' || legendPM.catLegendLayout.rightJustify) {
            textAlignDir = 'right';
            itemTemplate.itemLabelHolder.css('overflow', 'inherit');
            var rightPos = Math.max(colWidth - textXPos - legendPM.catLegendLayout.maxItemSpan, 0);
            itemTemplate.itemLabelHolder.css('right', rightPos + 'px');
            itemWidth = colWidth - rightPos;
        }
        else {
            itemTemplate.itemLabelHolder.css('left', textXPos + 'px');
        }
        itemTemplate.itemLabelHolder.css('top', textYPos + 'px');
        itemTemplate.itemLabelHolder.css('width', itemWidth + 'px');
        itemTemplate.itemLabelHolder.css('bottom', '0px');
        itemTemplate.itemLabelHolder.css('text-align', textAlignDir);
        itemTemplate.itemLabel.css('background-color', itemBackgroundColor);
        itemTemplate.itemLabel.css(tab.FormattingConverters._makeFormatStyleDict(textStyle, altTextColor));
        itemTemplate.itemLabel.text(itemPM.text);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalLegendColumnHtmlTemplate

tab.CategoricalLegendColumnHtmlTemplate = function tab_CategoricalLegendColumnHtmlTemplate(numRows, itemWidth, itemHeight, swatchArea, swatchRect, accountForColorBorder) {
    tab.CategoricalLegendColumnHtmlTemplate.initializeBase(this, [ $("<span class='tabLegendItemColumn'/>") ]);
    this.column = this.get_domRoot();
    this._legendItems$1 = new Array(numRows);
    for (var ii = 0; ii < numRows; ++ii) {
        this._legendItems$1[ii] = new tab.CategoricalLegendItemHtmlTemplate(swatchArea, swatchRect, accountForColorBorder);
        tab.CategoricalLegendView.setDomNodeStyleSize(this._legendItems$1[ii].get_domRoot(), itemWidth, itemHeight);
        this._legendItems$1[ii].itemLabel.width(itemWidth);
        this.column.append(this._legendItems$1[ii].get_domRoot());
    }
}
tab.CategoricalLegendColumnHtmlTemplate.prototype = {
    column: null,
    _legendItems$1: null,
    
    get_legendItems: function tab_CategoricalLegendColumnHtmlTemplate$get_legendItems() {
        return this._legendItems$1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalLegendItemHtmlTemplate

tab.CategoricalLegendItemHtmlTemplate = function tab_CategoricalLegendItemHtmlTemplate(swatchArea, swatchRect, accountForColorBorder) {
    tab.CategoricalLegendItemHtmlTemplate.initializeBase(this, [ $("<div class='tabLegendItem'><span class='tabLegendItemSwatchHolder'></span><span class='tabLegendItemLabelHolder'><span class='tabLegendItemLabel' /></span></div>") ]);
    this.item = this.get_domRoot();
    var swatchAreaHolder = this.getElementBySelector('.tabLegendItemSwatchHolder');
    this.itemLabel = this.getElementBySelector('.tabLegendItemLabel');
    this.itemLabelHolder = this.getElementBySelector('.tabLegendItemLabelHolder');
    tab.CategoricalLegendView.setDomNodeStyleSize(swatchAreaHolder, swatchArea.w, swatchArea.h);
    var swatchHtml = (ss.isValue(swatchRect)) ? "<span class='tabLegendItemSwatch' />" : "<canvas class='tabLegendItemSwatch' />";
    swatchAreaHolder.append($(swatchHtml));
    this.itemSwatch = this.getElementBySelector('.tabLegendItemSwatch');
    if (ss.isNullOrUndefined(swatchRect)) {
        var canvasElt = this.itemSwatch.get(0);
        this.renderContext = tab.CanvasRenderer.getRenderContext(canvasElt);
        this.canvasElt = canvasElt;
        tab.CanvasUtil.sizeCanvasWithHighDPISupport(this.canvasElt, this.renderContext, swatchArea);
    }
    else {
        var rect = tab.$create_Rect(swatchRect.l, swatchRect.t, swatchRect.w, swatchRect.h);
        if (accountForColorBorder) {
            var BorderWidth = 1;
            rect.w -= 2 * BorderWidth;
            rect.h -= 2 * BorderWidth;
            this.itemSwatch.css('border-width', BorderWidth + 'px');
            this.itemSwatch.css('border-style', 'none');
        }
        tab.CategoricalLegendView.setDomNodeStyleSize(this.itemSwatch, rect.w, rect.h);
        this.itemSwatch.css('top', rect.t + 'px');
        this.itemSwatch.css('left', rect.l + 'px');
        this.renderContext = null;
    }
}
tab.CategoricalLegendItemHtmlTemplate.prototype = {
    item: null,
    itemSwatch: null,
    itemLabelHolder: null,
    itemLabel: null,
    renderContext: null,
    canvasElt: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalLegendTemplate

tab.CategoricalLegendTemplate = function tab_CategoricalLegendTemplate(template) {
    tab.CategoricalLegendTemplate.initializeBase(this, [ template ]);
    this.panel = this.get_domRoot();
    this.panel.append($(tab.CategoricalLegendTemplate._iconHighlighterHTMLTemplate$2));
    this.columnsHolder = this.getElementBySelector('.tabLegendContentHolder');
    this.columnHolder = this.getElementBySelector('.tabLegendColumnHolder');
    this.legendHighlighter = this.getElementBySelector(tab.LegendTemplate.legendHighlighterSelector);
    this.legendHighlighter.attr('title', tab.Strings.LegendPanelHighlightSelectedItems);
}
tab.CategoricalLegendTemplate.prototype = {
    panel: null,
    columnsHolder: null,
    columnHolder: null,
    legendHighlighter: null
}


////////////////////////////////////////////////////////////////////////////////
// tab._hackyShapeSwatchRenderer

tab._hackyShapeSwatchRenderer = function tab__hackyShapeSwatchRenderer(itemTemplate, xPos, yPos, swatchWidth, swatchHeight, swatchBgColor) {
    tab._hackyShapeSwatchRenderer.initializeBase(this, [ itemTemplate.canvasElt, itemTemplate.renderContext ]);
    this._shapeToMarkMap$2 = {};
    var customShapes = tab.ApplicationModel.get_instance().get_shapeManager().get_imageKeys();
    var markCount = Object.getKeyCount(tab.PaneDrawInfo.shapeMapping) + customShapes.length;
    var ShapeSwatchStrokeWidth = 2;
    var defaultSwatchWidth = swatchWidth - (2 * ShapeSwatchStrokeWidth);
    var defaultSwatchHeight = swatchHeight - (2 * ShapeSwatchStrokeWidth);
    var defaultLeft = xPos - (defaultSwatchWidth / 2);
    var defaultTop = yPos - (defaultSwatchHeight / 2);
    var customSwatchWidth = swatchWidth - 1;
    var customSwatchHeight = swatchHeight - 1;
    var customLeft = xPos - (customSwatchWidth / 2);
    var customTop = yPos - (customSwatchHeight / 2);
    var tupleCol = this._createBlankDataColumnPresModel$2(markCount);
    var dataCol = this._createBlankDataColumnPresModel$2(markCount);
    var widthColumn = this._createBlankDataColumnPresModel$2(markCount);
    var heightColumn = this._createBlankDataColumnPresModel$2(markCount);
    var leftColumn = this._createBlankDataColumnPresModel$2(markCount);
    var topColumn = this._createBlankDataColumnPresModel$2(markCount);
    for (var markNum = 0; markNum < markCount; markNum++) {
        var key;
        if (markNum < Object.keys(tab.PaneDrawInfo.shapeMapping).length) {
            key = Object.keys(tab.PaneDrawInfo.shapeMapping)[markNum];
            widthColumn.dataValues[markNum] = defaultSwatchWidth;
            heightColumn.dataValues[markNum] = defaultSwatchHeight;
            leftColumn.dataValues[markNum] = defaultLeft;
            topColumn.dataValues[markNum] = defaultTop;
        }
        else {
            key = customShapes[markNum - Object.keys(tab.PaneDrawInfo.shapeMapping).length];
            widthColumn.dataValues[markNum] = customSwatchWidth;
            heightColumn.dataValues[markNum] = customSwatchHeight;
            leftColumn.dataValues[markNum] = customLeft;
            topColumn.dataValues[markNum] = customTop;
        }
        this._shapeToMarkMap$2[key] = markNum;
        dataCol.dataValues[markNum] = key;
        tupleCol.dataValues[markNum] = markNum.toString();
    }
    var pdMarks = {};
    pdMarks.encodingColumns = {};
    pdMarks.encodingColumns['shape_id'] = dataCol;
    pdMarks.encodingColumns['tuple_id'] = tupleCol;
    pdMarks.encodingColumns['width'] = widthColumn;
    pdMarks.encodingColumns['height'] = heightColumn;
    pdMarks.encodingColumns['left'] = leftColumn;
    pdMarks.encodingColumns['top'] = topColumn;
    pdMarks.intMap = {};
    pdMarks.intMap['color'] = new tab.ColorModel(0, 0, 0, 1).toArgbInt();
    pdMarks.intMap['background_color'] = swatchBgColor.toArgbInt();
    pdMarks.floatMap = {};
    pdMarks.floatMap['x'] = xPos;
    pdMarks.floatMap['y'] = yPos;
    var pane = {};
    pane.paneRect = {};
    pane.paneRect.y = 0;
    pane.paneRect.x = 0;
    pane.paneRect.w = swatchWidth;
    pane.paneRect.h = swatchHeight;
    var paneMarks = {};
    paneMarks.startIndex = 0;
    paneMarks.endIndex = markCount;
    var sceneInfo = new tab.SceneInfo();
    this._fakePaneDrawInfo$2 = new tab.PaneDrawInfo('pdKey', sceneInfo, pane, paneMarks, pdMarks, null);
}
tab._hackyShapeSwatchRenderer.prototype = {
    _fakePaneDrawInfo$2: null,
    _shapeToMarkMap$2: null,
    _context$2: null,
    
    get_currentContext: function tab__hackyShapeSwatchRenderer$get_currentContext() {
        if (this._context$2 != null) {
            return this._context$2;
        }
        return tab._hackyShapeSwatchRenderer.callBaseMethod(this, 'get_currentContext');
    },
    
    _createBlankDataColumnPresModel$2: function tab__hackyShapeSwatchRenderer$_createBlankDataColumnPresModel$2(arraySize) {
        var columnModel = {};
        columnModel.dataValues = new Array(arraySize);
        return columnModel;
    },
    
    _containsShape: function tab__hackyShapeSwatchRenderer$_containsShape(shapeId) {
        return ss.isValue(this._shapeToMarkMap$2[shapeId.toString()]);
    },
    
    _renderSwatch: function tab__hackyShapeSwatchRenderer$_renderSwatch(ctx, shapeId, shouldFog) {
        this._context$2 = ctx;
        var colorMode = (shouldFog) ? 'colorOverrideFog' : 'colorOverrideOpaque';
        this._drawShapeMarkLayer(this._fakePaneDrawInfo$2, this._shapeToMarkMap$2[shapeId.toString()], 'normalOn', colorMode);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LegacyLegendView

tab.LegacyLegendView = function tab_LegacyLegendView(viewModel, template) {
    this._subscriptions$3 = [];
    this.bodyOffset = tab.$create_Point(0, 0);
    tab.LegacyLegendView.initializeBase(this, [ viewModel, template ]);
    this.legacyLegendViewModel = viewModel;
    this.legacyLegendViewModel.add_newLegacyLegend(ss.Delegate.create(this, this.handleNewLegacyLegend));
    this.legacyLegendViewModel.add_validStateChanged(ss.Delegate.create(this, this.handleValidStateChanged));
    this._updateLegendSizeFromParent$3();
}
tab.LegacyLegendView.prototype = {
    legacyLegendViewModel: null,
    _legendPanelSize$3: null,
    _timestamp$3: 0,
    eventHandler: null,
    iterButtons: null,
    _rid$3: 0,
    bodySize: null,
    
    get_domRoot: function tab_LegacyLegendView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    get_domNode: function tab_LegacyLegendView$get_domNode() {
        return this.get_template().get_domRoot().get(0);
    },
    
    get__session$3: function tab_LegacyLegendView$get__session$3() {
        return this.legacyLegendViewModel.get_viewSession();
    },
    
    get_serverRenderedModel: function tab_LegacyLegendView$get_serverRenderedModel() {
        return this.legacyLegendViewModel.get_presModel();
    },
    
    get_legendTemplate: function tab_LegacyLegendView$get_legendTemplate() {
        return this.get_template();
    },
    
    onAddedToDom: function tab_LegacyLegendView$onAddedToDom() {
        tab.LegacyLegendView.callBaseMethod(this, 'onAddedToDom');
        this._timestamp$3 = new Date().getTime();
        this.eventHandler = this.makeViewerInputHandler(this.get__session$3(), this.get_legendTemplate().get_contentArea().get(0));
        this._subscriptions$3.add(this.get__session$3().registerEventListener('refreshLegacyLegendImages', ss.Delegate.create(this, this.refreshImages)));
        this._subscriptions$3.add(this.get__session$3().registerEventListener('refreshVisualModel', ss.Delegate.create(this, this.refreshImages)));
        this._subscriptions$3.add(this.get__session$3().registerEventListener('selectionChanged', ss.Delegate.create(this, this.onSelectionChanged)));
        this.iterButtons = new tab.IteratorButtons(this.get_legendTemplate().get_contentArea(), true, 12);
        this.updateHighlightStatus();
        this.hideControls();
        this.doConnections();
        this.disposables.add(spiff.ClickHandler.targetAndClick(this.get_legendTemplate().domHighlighter, ss.Delegate.create(this, this.toggleHighlight)));
        this.get_legendTemplate().domImageBody.load(ss.Delegate.create(this, function() {
            this._sizeContentImage$3();
            this.setBodySize();
        }));
        this.get_legendTemplate().domImageBody.error(ss.Delegate.create(this, function() {
            this.onImageLoadFailed();
        }));
        this.refreshImages(this.legacyLegendViewModel.get__urlCacheInfo());
    },
    
    dispose: function tab_LegacyLegendView$dispose() {
        this.legacyLegendViewModel.remove_newLegacyLegend(ss.Delegate.create(this, this.handleNewLegacyLegend));
        var $enum1 = ss.IEnumerator.getEnumerator(this._subscriptions$3);
        while ($enum1.moveNext()) {
            var subscription = $enum1.current;
            dojo.unsubscribe(subscription);
        }
        if (ss.isValue(this.eventHandler)) {
            this.eventHandler.dispose();
            this.eventHandler = null;
        }
        this.iterButtons.dispose();
        tab.LegacyLegendView.callBaseMethod(this, 'dispose');
    },
    
    handleNewLegacyLegend: function tab_LegacyLegendView$handleNewLegacyLegend() {
        var newModel = this.legacyLegendViewModel.get_presModel();
        if (ss.isValue(this.get_serverRenderedModel()) && this.get_serverRenderedModel().fieldNameId === newModel.fieldNameId && this.get_serverRenderedModel().fieldName === newModel.fieldName) {
            this._sizeContentImage$3();
            this.updateHighlightStatus();
        }
        else {
            this.refreshImages(this.legacyLegendViewModel.get__urlCacheInfo());
        }
    },
    
    handleValidStateChanged: function tab_LegacyLegendView$handleValidStateChanged() {
        if (this.legacyLegendViewModel.get__valid()) {
            this.refreshImages(this.legacyLegendViewModel.get__urlCacheInfo());
        }
    },
    
    onViewModelPropertyChanged: function tab_LegacyLegendView$onViewModelPropertyChanged(sender, e) {
        if (String.equals(e.get_propertyName(), 'urlCacheInfo', false)) {
        }
        else if (String.equals(e.get_propertyName(), 'ParentZoneSizeChanged', false)) {
            this._updateLegendSizeFromParent$3();
        }
    },
    
    _updateLegendSizeFromParent$3: function tab_LegacyLegendView$_updateLegendSizeFromParent$3() {
        var parentSize = this.legacyLegendViewModel.get__parentZoneSize();
        if (ss.isValue(parentSize) && !tab.SizeUtil.equals(parentSize, this._legendPanelSize$3)) {
            this.get_legendTemplate().domBox.css({ width: parentSize.w + 'px', height: parentSize.h + 'px' });
            this._legendPanelSize$3 = parentSize;
        }
    },
    
    get_visualId: function tab_LegacyLegendView$get_visualId() {
        return tab.ModelUtils.getVisualId(this.legacyLegendViewModel.get_sheetName());
    },
    
    allowHover: function tab_LegacyLegendView$allowHover() {
    },
    
    disallowHover: function tab_LegacyLegendView$disallowHover() {
    },
    
    doConnections: function tab_LegacyLegendView$doConnections() {
    },
    
    cancelHover: function tab_LegacyLegendView$cancelHover() {
    },
    
    hideControls: function tab_LegacyLegendView$hideControls() {
        this.get_legendTemplate().domHighlighter.css('visibility', 'hidden');
        this.get_domRoot().removeClass('tvmodeSelect');
    },
    
    updateHighlightStatus: function tab_LegacyLegendView$updateHighlightStatus() {
        this.get_legendTemplate().domHighlighter.toggleClass('tabHighlightEnabled', this.get_serverRenderedModel().isHighlightEnabled);
        this.get_legendTemplate().domHighlighter.toggleClass('tabHighlightDisabled', !this.get_serverRenderedModel().isHighlightEnabled);
    },
    
    refreshImages: function tab_LegacyLegendView$refreshImages(cacheInfo) {
        this._rid$3 += 1;
        this.bodySize = null;
        var requestId = this._rid$3 + 'Z' + this._timestamp$3;
        var fieldId = (ss.isValue(this.get_serverRenderedModel().fieldNameId)) ? this.get_serverRenderedModel().fieldNameId.toString() : '';
        this.disallowHover();
        this.get_legendTemplate().domBox.addClass('LegendBusy');
        if (tab.BrowserSupport.get_isSafari() || this.get_serverRenderedModel().isVisuallyCat) {
            this.get_legendTemplate().get_contentArea().css('overflow', 'hidden');
        }
        var bodyUrl = this.get__session$3().formatLegendRegionTileURL(cacheInfo, this.get_serverRenderedModel().legendType + '-body', this.get_serverRenderedModel().fieldName, fieldId, requestId);
        this.get_legendTemplate().domImageBody.attr('src', bodyUrl);
    },
    
    onImageLoadFailed: function tab_LegacyLegendView$onImageLoadFailed() {
        this.get_legendTemplate().domContent.css('visibility', 'hidden');
    },
    
    onSelectionChanged: function tab_LegacyLegendView$onSelectionChanged(oSelectionInfo) {
        if (ss.isNullOrUndefined(oSelectionInfo)) {
            return;
        }
        this.allowHover();
    },
    
    getDocumentPoint: function tab_LegacyLegendView$getDocumentPoint(pseudoEvent) {
        var offset = tab.$create_Point(0, 0);
        if (this.get_legendViewModel().get_titleInline() && !this.get_serverRenderedModel().titleInline) {
            offset.x = -this.get_legendViewModel().get_titleWidth();
            offset.y = this.get_legendViewModel().get_titleHeight();
        }
        return tab.$create_Point(pseudoEvent.pageX + offset.x, pseudoEvent.pageY + offset.y);
    },
    
    documentPointToContentPoint: function tab_LegacyLegendView$documentPointToContentPoint(documentPoint) {
        var contentPosition = this.get_legendTemplate().get_contentArea().offset();
        return tab.$create_Point(documentPoint.x - contentPosition.left + this.get_legendTemplate().get_contentArea().scrollLeft() + this.bodyOffset.x, documentPoint.y - contentPosition.top + this.get_legendTemplate().get_contentArea().scrollTop() + this.bodyOffset.y);
    },
    
    onHover: function tab_LegacyLegendView$onHover(pseudoEvent) {
        var documentPoint = this.getDocumentPoint(pseudoEvent);
        var contentPoint = this.documentPointToContentPoint(documentPoint);
        if ('map' !== this.get_serverRenderedModel().legendType) {
            this.get_legendTooltip().hoverOverCoordinates(documentPoint, contentPoint, 'legenditem', this.legacyLegendViewModel.get_regionType());
        }
    },
    
    toggleHighlight: function tab_LegacyLegendView$toggleHighlight() {
        this.get_serverRenderedModel().isHighlightEnabled = !this.get_serverRenderedModel().isHighlightEnabled;
        this.updateHighlightStatus();
        this.get__session$3().toggleHighlight(this.legacyLegendViewModel.get_regionType(), this.get_serverRenderedModel().fieldName);
    },
    
    setBodySize: function tab_LegacyLegendView$setBodySize() {
        this.get_legendTemplate().domContent.css('visibility', '');
        this.allowHover();
        this.get_legendTemplate().domBox.removeClass('LegendBusy');
        this.bodySize = tab.$create_Size(this.get_legendTemplate().domImageBody.width(), this.get_legendTemplate().domImageBody.height());
        this.layout();
    },
    
    layout: function tab_LegacyLegendView$layout() {
        if (!!!this.bodySize) {
            return;
        }
        this.drawTitle();
        this.get_domRoot().removeClass('LegendHorizontal');
        var oZoneSize = this._legendPanelSize$3;
        var notTitleSize = tab.$create_Size(oZoneSize.w, oZoneSize.h);
        this.bodyOffset = tab.$create_Point(0, 0);
        if (this.get_legendViewModel().get_titleInline()) {
            notTitleSize.w = oZoneSize.w - this.get_legendViewModel().get_titleWidth();
            this.bodyOffset.x = this.get_serverRenderedModel().titleWidth;
        }
        else {
            notTitleSize.h = oZoneSize.h - this.get_legendViewModel().get_titleHeight();
            this.bodyOffset.y = this.get_serverRenderedModel().titleHeight;
        }
        this.layoutButtons(notTitleSize);
    },
    
    getFieldNameVec: function tab_LegacyLegendView$getFieldNameVec() {
        if (ss.isValue(this.get_serverRenderedModel().fieldName)) {
            return this.get_serverRenderedModel().fieldName.toString().split('\n');
        }
        return null;
    },
    
    _sizeContentImage$3: function tab_LegacyLegendView$_sizeContentImage$3() {
        var serverModel = this.get_serverRenderedModel();
        if (!serverModel.isVisuallyCat) {
            this.get_legendTemplate().domImageBody.css('width', 'inherit');
        }
        else if (this.get_serverRenderedModel().legendLayout !== 'vertical') {
            var height = serverModel.regionHeight;
            if (!!!serverModel.titleInline && ss.isValue(serverModel.titleHeight) && !!serverModel.titleHeight) {
                height -= serverModel.titleHeight + 1;
            }
            this.get_legendTemplate().domImageBody.css('height', height + 'px');
            this.get_legendTemplate().domImageBody.css('width', '');
        }
        else {
            this.get_legendTemplate().domImageBody.css('width', serverModel.regionWidth + 'px');
            this.get_legendTemplate().domImageBody.css('height', '');
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LegacyLegendTemplate

tab.LegacyLegendTemplate = function tab_LegacyLegendTemplate(root) {
    tab.LegacyLegendTemplate.initializeBase(this, [ root ]);
    this.domBox = this.getElementBySelector('.LegendBox');
    this.domContent = this.getElementBySelector('.LegendContent');
    this.domHighlighter = this.getElementBySelector(tab.LegendTemplate.legendHighlighterSelector);
    this.domImageBody = this.getElementBySelector('.LegendImageBody');
}
tab.LegacyLegendTemplate.prototype = {
    domBox: null,
    domContent: null,
    domHighlighter: null,
    domImageBody: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.PageView

tab.PageView = function tab_PageView(viewModel) {
    tab.PageView.initializeBase(this, [ viewModel, new tab.PageTemplate() ]);
    this.pageViewModel = viewModel;
    this.pageViewModel.add_newPage(ss.Delegate.create(this, this.handleNewPage));
    this.pageViewModel.add_resized(ss.Delegate.create(this, this.updateSize));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.pageViewModel.remove_newPage(ss.Delegate.create(this, this.handleNewPage));
    })));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.pageViewModel.remove_resized(ss.Delegate.create(this, this.updateSize));
    })));
}
tab.PageView.prototype = {
    pageViewModel: null,
    _node$2: null,
    
    get_zonePresModel: function tab_PageView$get_zonePresModel() {
        return this.pageViewModel.get_pageModel().get_zone();
    },
    
    get_domRoot: function tab_PageView$get_domRoot() {
        return this.get_template().get_domRoot();
    },
    
    dispose: function tab_PageView$dispose() {
        if (ss.isValue(this._node$2)) {
            this._node$2.destroyRecursive(false);
            this._node$2 = null;
        }
        tab.PageView.callBaseMethod(this, 'dispose');
    },
    
    onAddedToDom: function tab_PageView$onAddedToDom() {
        tab.PageView.callBaseMethod(this, 'onAddedToDom');
        if (ss.isValue(this.pageViewModel.get_pageModel())) {
            this.handleNewPage();
        }
    },
    
    handleNewPage: function tab_PageView$handleNewPage() {
        if (ss.isNullOrUndefined(this._node$2) && ss.isValue(this.pageViewModel.get_pageModel()) && ss.isValue(this.pageViewModel.get_pageModel().get_pagePresModel())) {
            var presModel = this.pageViewModel.get_pageModel().get_pagePresModel();
            this._node$2 = this.createCurrentPagePanel(presModel);
            this.get_template().get_domRoot().append(this._node$2.domNode);
            this._node$2.startup();
            var zoneRect = tab.$create_RectXY(0, 0, this.get_zonePresModel().w, this.get_zonePresModel().h);
            tab.DomUtil.resize(this._node$2, tab.RectXYUtil.toRect(zoneRect));
        }
    },
    
    updateSize: function tab_PageView$updateSize() {
        if (ss.isValue(this.pageViewModel.get_pageModel()) && ss.isValue(this.pageViewModel.get_pageModel().get_pagePresModel())) {
            this._node$2.destroyRecursive();
            this._node$2 = null;
            this.handleNewPage();
        }
    },
    
    createCurrentPagePanel: function tab_PageView$createCurrentPagePanel(presModel) {
        var props = {};
        props.cpHeight = this.get_zonePresModel().h;
        props.sheetid = this.get_zonePresModel().sheet;
        props.zid = this.get_zonePresModel().zoneId;
        props.enable = this.pageViewModel.get_historyTrailsEnabled();
        props.show_slider = presModel.showPageSlider;
        props.show_toggle = this.pageViewModel.get_showHistoryToggle();
        props.show_dropdown = presModel.showPageReadout;
        props.current_page = presModel.currentPage;
        props.pages = presModel.pageNames;
        props.session = this.pageViewModel.get_viewSession();
        props.layoutSession = this.pageViewModel.get_layoutSession();
        props.lTitle = this.pageViewModel.get_pageModel().get_title();
        props.titleHtml = presModel.titleHtml;
        props.zoneTitleHeight = this.get_zonePresModel().titleHeight;
        props.zoneTitleWidth = this.get_zonePresModel().titleWidth;
        props.isDashboard = true;
        props.pageViewModel = this.pageViewModel;
        return this.instantiateCurrentPagePanel(props);
    },
    
    instantiateCurrentPagePanel: function tab_PageView$instantiateCurrentPagePanel(props) {
        return new tableau.base.widget.CurrentPagePanel(props);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PageTemplate

tab.PageTemplate = function tab_PageTemplate() {
    tab.PageTemplate.initializeBase(this, [ $("<div class='tab-page'></div>") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShareView

tab.ShareView = function tab_ShareView(viewModel) {
    tab.ShareView.initializeBase(this, [ viewModel, new tab.ShareTemplate() ]);
    this._shareViewModel$2 = viewModel;
    this._shareViewModel$2.saveSharedView();
    this._buildShareContent$2();
    this._isNarrow$2 = window.innerWidth <= 300;
}
tab.ShareView.prototype = {
    _shareViewModel$2: null,
    _isNarrow$2: false,
    
    get__dom$2: function tab_ShareView$get__dom$2() {
        return this.get_template();
    },
    
    _buildShareContent$2: function tab_ShareView$_buildShareContent$2() {
        var linkDiv = $("\n            <div class='tab-shareLinkSection'>\n                <span class='tab-shareLinkTitle tab-shareTitle'/>\n                <input class='tab-shareLinkInput tab-shareInput' type='text'/>\n                <div class='tab-shareLinkSocial'/>\n            </div>");
        var embedDiv = $("\n            <div class='tab-shareEmbedSection'>\n                <span class='tab-shareEmbedTitle tab-shareTitle'/>\n                <input class='tab-shareEmbedInput tab-shareInput'/>\n            </div>");
        if (this._shareViewModel$2.get_allowSharingDifferentViews()) {
            this.get__dom$2().shareArea.append($("\n            <div class='tab-shareViewStateSection'>\n                <span class='tab-shareCurrentView tab-shareViewToggle'/><span class='tab-shareOriginalView tab-shareViewToggle'/>\n            </div>"));
            this.get__dom$2().shareStateArea = this.get__dom$2().getElementBySelector('.tab-shareViewStateSection');
            this.get__dom$2().shareCurrentView = this.get__dom$2().getElementBySelector('.tab-shareCurrentView');
            this.get__dom$2().shareOriginalView = this.get__dom$2().getElementBySelector('.tab-shareOriginalView');
        }
        if (this._shareViewModel$2.get_toolbarIsBottom()) {
            this.get__dom$2().shareArea.append(embedDiv);
            this.get__dom$2().shareArea.append(linkDiv);
        }
        else {
            this.get__dom$2().shareArea.append(linkDiv);
            this.get__dom$2().shareArea.append(embedDiv);
        }
        this.get__dom$2().shareLinkTitle = this.get__dom$2().getElementBySelector('.tab-shareLinkTitle');
        this.get__dom$2().shareLinkInput = this.get__dom$2().getElementBySelector('.tab-shareLinkInput');
        this.get__dom$2().shareLinkSocial = this.get__dom$2().getElementBySelector('.tab-shareLinkSocial');
        this.get__dom$2().shareEmbedTitle = this.get__dom$2().getElementBySelector('.tab-shareEmbedTitle');
        this.get__dom$2().shareEmbedInput = this.get__dom$2().getElementBySelector('.tab-shareEmbedInput');
        if (tsConfig.is_mobile) {
            this.get__dom$2().shareLinkInput.click(ss.Delegate.create(this, function() {
                this.get__dom$2().shareLinkInput.get(0).setSelectionRange(0,this.get__dom$2().shareLinkInput.val().length);
            }));
            this.get__dom$2().shareEmbedInput.click(ss.Delegate.create(this, function() {
                this.get__dom$2().shareEmbedInput.get(0).setSelectionRange(0,this.get__dom$2().shareEmbedInput.val().length);
            }));
        }
        else {
            this.get__dom$2().shareLinkInput.attr('readonly', 'readonly');
            this.get__dom$2().shareLinkInput.click(ss.Delegate.create(this, function() {
                this.get__dom$2().shareLinkInput.focus();
                this.get__dom$2().shareLinkInput.select();
            }));
            this.get__dom$2().shareEmbedInput.attr('readonly', 'readonly');
            this.get__dom$2().shareEmbedInput.click(ss.Delegate.create(this, function() {
                this.get__dom$2().shareEmbedInput.focus();
                this.get__dom$2().shareEmbedInput.select();
            }));
        }
    },
    
    _updateShareData$2: function tab_ShareView$_updateShareData$2() {
        this.get__dom$2().shareLinkTitle.html(this._shareViewModel$2.get_linkLabel());
        this.get__dom$2().shareEmbedTitle.html(this._shareViewModel$2.get_embedLabel());
        this._createViewToggle$2();
        if (this._shareViewModel$2.get_shouldShowSocialShareOptions()) {
            this.get__dom$2().shareLinkSocial.empty();
            var facebook = $("<div class='tab-shareSocial tab-shareSocialFacebook'/>");
            facebook.click(ss.Delegate.create(this, function() {
                this._shareViewModel$2.doFacebookShareAction();
            }));
            this.get__dom$2().shareLinkSocial.append(facebook);
            var twitter = $("<div class='tab-shareSocial tab-shareSocialTwitter'/>");
            twitter.click(ss.Delegate.create(this, function() {
                this._shareViewModel$2.doTwitterShareAction();
            }));
            this.get__dom$2().shareLinkSocial.append(twitter);
        }
        this._updateShareLinks$2();
    },
    
    _createViewToggle$2: function tab_ShareView$_createViewToggle$2() {
        if (!this._shareViewModel$2.get_allowSharingDifferentViews()) {
            return;
        }
        var currentView;
        var originalView;
        if (this._isNarrow$2) {
            var current = $("<input type='radio' name='state' checked>" + this._shareViewModel$2.get_currentViewLabel() + '</input>');
            this.get__dom$2().shareCurrentView.append(current);
            this.get__dom$2().shareCurrentView.addClass('narrow');
            var original = $("<input type='radio' name='state'>" + this._shareViewModel$2.get_originalViewLabel() + '</input>');
            this.get__dom$2().shareOriginalView.append(original);
            this.get__dom$2().shareOriginalView.addClass('narrow');
            this.get__dom$2().shareStateArea.height(this.get__dom$2().shareStateArea.height() + 15);
            currentView = new spiff.ToggleButton(current);
            originalView = new spiff.ToggleButton(original);
            this.get__dom$2().shareStateArea.addClass('narrow');
        }
        else {
            this.get__dom$2().shareCurrentView.html(this._shareViewModel$2.get_currentViewLabel());
            this.get__dom$2().shareOriginalView.html(this._shareViewModel$2.get_originalViewLabel());
            currentView = new spiff.ToggleButton(this.get__dom$2().shareCurrentView);
            originalView = new spiff.ToggleButton(this.get__dom$2().shareOriginalView);
        }
        var buttonGroup = new spiff.ButtonGroup();
        buttonGroup.addButton(currentView);
        buttonGroup.addButton(originalView);
        buttonGroup.selectButton(currentView);
        this._shareViewModel$2.set_shouldShareOriginalView(false);
        originalView.add_propertyChanged(ss.Delegate.create(this, this._toggleShowOriginalView$2));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            originalView.remove_propertyChanged(ss.Delegate.create(this, this._toggleShowOriginalView$2));
        })));
    },
    
    _toggleShowOriginalView$2: function tab_ShareView$_toggleShowOriginalView$2(button, eventArgs) {
        if (eventArgs.get_propertyName() === spiff.ToggleButton.selectedProperty) {
            this._shareViewModel$2.set_shouldShareOriginalView((button).get_selected());
            this._updateShareLinks$2();
        }
    },
    
    _updateShareLinks$2: function tab_ShareView$_updateShareLinks$2() {
        this.get__dom$2().shareLinkInput.val(this._shareViewModel$2.generateShareUrl());
        this.get__dom$2().shareEmbedInput.val(this._shareViewModel$2.generateEmbedUrl());
    },
    
    onAddedToDom: function tab_ShareView$onAddedToDom() {
        this._updateShareData$2();
        tab.ShareView.callBaseMethod(this, 'onAddedToDom');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShareTemplate

tab.ShareTemplate = function tab_ShareTemplate() {
    tab.ShareTemplate.initializeBase(this, [ $("\n            <div class='tab-shareView tab-toolbarFlyout'>\n            </div>") ]);
    this.shareArea = this.get_domRoot();
}
tab.ShareTemplate.prototype = {
    shareArea: null,
    shareStateArea: null,
    shareCurrentView: null,
    shareOriginalView: null,
    shareLinkTitle: null,
    shareLinkInput: null,
    shareLinkSocial: null,
    shareEmbedTitle: null,
    shareEmbedInput: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.SimpleRegionCanvasView

tab.SimpleRegionCanvasView = function tab_SimpleRegionCanvasView(viewModel, domNode, paneTableVM) {
    tab.SimpleRegionCanvasView.initializeBase(this, [ viewModel, domNode ]);
    this.renderer = new tab.DisplayList2DRenderer(this.canvasElt, this.context);
    this._paneTableVM$4 = paneTableVM;
}
tab.SimpleRegionCanvasView.prototype = {
    _paneTableVM$4: null,
    
    get_displayListRenderer: function tab_SimpleRegionCanvasView$get_displayListRenderer() {
        return this.renderer;
    },
    
    get_visualListVM: function tab_SimpleRegionCanvasView$get_visualListVM() {
        return this.get_viewModel();
    },
    
    performRender: function tab_SimpleRegionCanvasView$performRender() {
        var timingContext = tabBootstrap.MetricsController.get_instance().createContext('RNDRRG', tabBootstrap.MetricsSuites.rendering);
        this.get_displayListRenderer().clear();
        this.get_displayListRenderer().renderVisualList(this.get_visualListVM(), this._paneTableVM$4.get_scene().get_imageDictionary());
        timingContext.close();
    },
    
    postRenderFinalPass: function tab_SimpleRegionCanvasView$postRenderFinalPass() {
        this.get_displayListRenderer()._renderCanvasBorders(this.get_visualListVM());
    },
    
    onViewModelPropertyChanged: function tab_SimpleRegionCanvasView$onViewModelPropertyChanged(sender, e) {
        if (e.get_propertyName() === 'HoverNode') {
            var offset = tab.$create_Point(-this.get_scrollPos().x, -this.get_scrollPos().y);
            this.invalidateRect(this.get_visualListVM().dirtyRect(offset), true);
        }
        else {
            tab.SimpleRegionCanvasView.callBaseMethod(this, 'onViewModelPropertyChanged', [ sender, e ]);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LogOnView

tab.LogOnView = function tab_LogOnView(viewModel) {
    tab.LogOnView.initializeBase(this, [ viewModel, spiff.Template.fromHtml("<div class='tabLogon'>") ]);
    this.logOnViewModel = viewModel;
    var signInButtonContainer = $('<div>');
    var signInButton = spiff.StyledTextButton.createActionButton(ss.Delegate.create(this, this._openPopup$2), tab.Strings.LogOnButton, 'tabLogOnDialogButton', spiff.ButtonSize.large, 1);
    signInButtonContainer.append(signInButton.get_element());
    this.get_element().append(signInButtonContainer);
    this.disposables.add(signInButton);
    this.logOnViewModel.add_shown(ss.Delegate.create(this, this._shown$2));
    this.logOnViewModel.add_hidden(ss.Delegate.create(this, this._hidden$2));
    this._modalDialog$2 = new spiff.ModalDialog(' ', this.get_element());
    this._modalDialog$2.get_dialogElement().addClass('tabLogonDialog');
    this._modalDialog$2.add_closed(ss.Delegate.create(this, function() {
        this.logOnViewModel.cancel();
    }));
    this.disposables.add(this._modalDialog$2);
    tab.LogOnView._logOnCompleteCallback$2 = ss.Delegate.create(this, this._logOnComplete$2);
}
tab.LogOnView.fireLogOnComplete = function tab_LogOnView$fireLogOnComplete() {
    if (ss.isValue(tab.LogOnView._logOnCompleteCallback$2)) {
        tab.LogOnView._logOnCompleteCallback$2();
    }
}
tab.LogOnView.prototype = {
    logOnViewModel: null,
    _modalDialog$2: null,
    
    dispose: function tab_LogOnView$dispose() {
        tab.LogOnView._logOnCompleteCallback$2 = null;
        this.logOnViewModel.remove_shown(ss.Delegate.create(this, this._shown$2));
        this.logOnViewModel.remove_hidden(ss.Delegate.create(this, this._hidden$2));
        this._modalDialog$2.dispose();
        tab.LogOnView.callBaseMethod(this, 'dispose');
    },
    
    onViewModelPropertyChanged: function tab_LogOnView$onViewModelPropertyChanged(sender, e) {
        this.updateContent();
    },
    
    updateContent: function tab_LogOnView$updateContent() {
    },
    
    _logOnComplete$2: function tab_LogOnView$_logOnComplete$2() {
        this.logOnViewModel.logOnComplete();
    },
    
    _shown$2: function tab_LogOnView$_shown$2() {
        this._openPopup$2();
        this._modalDialog$2.show();
    },
    
    _hidden$2: function tab_LogOnView$_hidden$2() {
        this._modalDialog$2.dispose();
    },
    
    _openPopup$2: function tab_LogOnView$_openPopup$2() {
        var popupWidth = 800;
        var popupHeight = 600;
        var win = new tab.WindowHelper(window.self);
        var left = win.get_screenLeft() + ((win.get_outerWidth() - popupWidth) / 2);
        var top = win.get_screenTop() + ((win.get_outerHeight() - popupHeight) / 3);
        var popupOptionsString = String.format('width={0},height={1},left={2},top={3},toolbar=1,resizable=1', popupWidth, popupHeight, left, top);
        var popupUrl = '/#/signin?closePopupWhenDone=true&site=' + encodeURIComponent(tsConfig.site_url_name);
        var popup = tab.WindowHelper.open(popupUrl, 'TableauAuthentication', popupOptionsString);
        if (ss.isValue(popup)) {
            _.defer(function() {
                popup.focus();
            });
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.NotificationView

tab.NotificationView = function tab_NotificationView(viewModel) {
    tab.NotificationView.initializeBase(this, [ viewModel, spiff.Template.fromHtml("<div class='tabNotification'>") ]);
    this.notificationViewModel = viewModel;
    this._messageDom$2 = $('<div>').addClass('tabNotificationMessage').appendTo(this.get_element());
    this.updateContent();
    this._closeDom$2 = spiff.ClickHandler.targetAndClick($('<div>').addClass('tabNotificationClose').html('\u00d7'), ss.Delegate.create(this, this._handleCloseClicked$2)).get_target();
    this._closeDom$2.appendTo(this.get_element());
    this.notificationViewModel.add_shown(ss.Delegate.create(this, this.shown));
    this.notificationViewModel.add_hidden(ss.Delegate.create(this, this.hidden));
}
tab.NotificationView.prototype = {
    notificationViewModel: null,
    _messageDom$2: null,
    _closeDom$2: null,
    _pendingDispose$2: false,
    _visible$2: false,
    
    dispose: function tab_NotificationView$dispose() {
        if (this._visible$2) {
            this._pendingDispose$2 = true;
            return;
        }
        this.notificationViewModel.remove_shown(ss.Delegate.create(this, this.shown));
        this.notificationViewModel.remove_hidden(ss.Delegate.create(this, this.hidden));
        tab.NotificationView.callBaseMethod(this, 'dispose');
    },
    
    onViewModelPropertyChanged: function tab_NotificationView$onViewModelPropertyChanged(sender, e) {
        this.updateContent();
    },
    
    updateContent: function tab_NotificationView$updateContent() {
        this._messageDom$2.text(this.notificationViewModel.get_message());
    },
    
    hidden: function tab_NotificationView$hidden() {
        this.get_element().fadeOut('slow', ss.Delegate.create(this, this._onFadeOutCompleted$2));
    },
    
    shown: function tab_NotificationView$shown() {
        this._visible$2 = true;
        this.get_element().css('display', 'none');
        this.get_element().appendTo($('body'));
        this.get_element().css('margin-left', '-' + (this.get_element().outerWidth(true) / 2) + 'px');
        this.get_element().fadeIn('fast');
    },
    
    _onFadeOutCompleted$2: function tab_NotificationView$_onFadeOutCompleted$2() {
        this._visible$2 = false;
        if (this._pendingDispose$2) {
            this.dispose();
        }
        else {
            this.get_element().detach();
        }
    },
    
    _handleCloseClicked$2: function tab_NotificationView$_handleCloseClicked$2(e) {
        this.hidden();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PaneTableCanvasView

tab.PaneTableCanvasView = function tab_PaneTableCanvasView(viewModel, domNode) {
    tab.PaneTableCanvasView.initializeBase(this, [ viewModel, domNode ]);
    this.renderer = new tab.PaneTable2DRenderer(this.canvasElt, this.context);
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(viewModel.get_vizRegionMap()));
    while ($enum1.moveNext()) {
        var part = $enum1.current;
        if (!tab.PaneTableViewModel.blackListVisualParts.contains(part)) {
            viewModel.get_vizRegionMap()[part].add_propertyChanged(ss.Delegate.create(this, this.onViewModelPropertyChanged));
        }
    }
}
tab.PaneTableCanvasView.prototype = {
    _dragCanvasElt$4: null,
    _dragCanvasContext$4: null,
    
    get_paneTableVM: function tab_PaneTableCanvasView$get_paneTableVM() {
        return this.get_viewModel();
    },
    
    get_paneTableRenderer: function tab_PaneTableCanvasView$get_paneTableRenderer() {
        return this.renderer;
    },
    
    get_isContentOpaque: function tab_PaneTableCanvasView$get_isContentOpaque() {
        return !this.get_paneTableVM().get_mapServerModel().get_useFastMaps();
    },
    
    performRender: function tab_PaneTableCanvasView$performRender() {
        var props = {};
        props['viz'] = this.get_paneTableVM().get_sheetId();
        var timingContext = tabBootstrap.MetricsController.get_instance().createContext('RNDRPT', tabBootstrap.MetricsSuites.rendering, props);
        this.renderer.clear();
        this.get_paneTableRenderer().renderScene(this.get_paneTableVM());
        if (this._dragCanvasElt$4 != null) {
            if (this.get_actualViewSize().w !== this._dragCanvasElt$4.width || this.get_actualViewSize().h !== this._dragCanvasElt$4.height) {
                tab.CanvasUtil.densifyCanvasUsingSize(this._dragCanvasElt$4, this.get_actualViewSize(), this.get_effectiveViewSize());
            }
            this._dragCanvasContext$4.clearRect(0, 0, this._dragCanvasElt$4.width, this._dragCanvasElt$4.height);
            this.copyContent(this._dragCanvasContext$4);
        }
        timingContext.close();
    },
    
    onViewModelPropertyChanged: function tab_PaneTableCanvasView$onViewModelPropertyChanged(sender, e) {
        var invalidRects = this.get_paneTableVM().getAndClearInvalidationRects();
        if (!invalidRects.length) {
            this.invalidate(false);
        }
        else {
            var unionRect = tab.$create_RectXY(0, 0, 0, 0);
            var $enum1 = ss.IEnumerator.getEnumerator(invalidRects);
            while ($enum1.moveNext()) {
                var rect = $enum1.current;
                unionRect = tab.RectXYUtil.union(unionRect, rect);
            }
            var offset = tab.$create_Point(-this.get_scrollPos().x, -this.get_scrollPos().y);
            unionRect = tab.RectXYUtil.offsetRect(unionRect, offset);
            this.invalidateRect(unionRect, false);
        }
    },
    
    postRenderFinalPass: function tab_PaneTableCanvasView$postRenderFinalPass() {
        this.get_paneTableRenderer().renderViewportBorders(this.get_paneTableVM());
        this.get_paneTableRenderer().renderAxisRulers(this.get_paneTableVM(), this.get_docSize(), this.get_scrollPos());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SubscribeView

tab.SubscribeView = function tab_SubscribeView(viewModel, toolbarButton) {
    tab.SubscribeView.initializeBase(this, [ viewModel, spiff.Template.fromHtml("<div class='tabSubscribe'>") ]);
    this.get__subscribeViewModel$2().add_shown(ss.Delegate.create(this, this._shown$2));
    this.get__subscribeViewModel$2().add_hidden(ss.Delegate.create(this, this._hidden$2));
    this.get__subscribeViewModel$2().add_modeChange(ss.Delegate.create(this, this.layout));
    this.get__subscribeViewModel$2().add_emailChanged(ss.Delegate.create(this, this.handleEmailUpdated));
    this.get__subscribeViewModel$2().add_schedulesChanged(ss.Delegate.create(this, this.handleSchedulesUpdated));
    this.get__subscribeViewModel$2().add_emailValidationChanged(ss.Delegate.create(this, this._handleEmailValidationChanged$2));
    this.get__subscribeViewModel$2().add_subjectValidationChanged(ss.Delegate.create(this, this._handleSubjectValidationChanged$2));
    this.comboBoxViewModel = new tab.ComboBoxViewModel();
    this.comboBoxView = spiff.ObjectRegistry.newView(tab.ComboBoxView, this.comboBoxViewModel);
    this.toolbarButton = toolbarButton;
    this.panel = this.get_element();
    this.buildDom();
    this.panel.hide();
    $('body').append(this.panel);
    this.enableTextSelection();
}
tab.SubscribeView.prototype = {
    glass: null,
    toolbarButton: null,
    panel: null,
    emailPanel: null,
    subscribePanel: null,
    sheetButtonWorksheet: null,
    sheetButtonWorkbook: null,
    nextButton: null,
    cancelButton: null,
    subscribeButton: null,
    comboBoxView: null,
    comboBoxViewModel: null,
    
    get_defaultPanelWidth: function tab_SubscribeView$get_defaultPanelWidth() {
        return 300;
    },
    
    get__subscribeViewModel$2: function tab_SubscribeView$get__subscribeViewModel$2() {
        return this.get_viewModel();
    },
    
    dispose: function tab_SubscribeView$dispose() {
        this.get__subscribeViewModel$2().remove_shown(ss.Delegate.create(this, this._shown$2));
        this.get__subscribeViewModel$2().remove_hidden(ss.Delegate.create(this, this._hidden$2));
        this.get__subscribeViewModel$2().remove_modeChange(ss.Delegate.create(this, this.layout));
        this.get__subscribeViewModel$2().remove_emailChanged(ss.Delegate.create(this, this.handleEmailUpdated));
        this.get__subscribeViewModel$2().remove_schedulesChanged(ss.Delegate.create(this, this.handleSchedulesUpdated));
        this.get__subscribeViewModel$2().remove_emailValidationChanged(ss.Delegate.create(this, this._handleEmailValidationChanged$2));
        this.get__subscribeViewModel$2().remove_subjectValidationChanged(ss.Delegate.create(this, this._handleSubjectValidationChanged$2));
        this.comboBoxViewModel.dispose();
        this.removeGlass();
        tab.SubscribeView.callBaseMethod(this, 'dispose');
    },
    
    removeGlass: function tab_SubscribeView$removeGlass() {
        if (ss.isValue(this.glass)) {
            this.glass.remove_click(ss.Delegate.create(this, this._glassClicked$2));
            this.glass.dispose();
            this.glass = null;
        }
    },
    
    buildDom: function tab_SubscribeView$buildDom() {
        this.get_element().append($('<div>').addClass('tabSubscribeTitleContainer').append($('<span>').addClass('tabSubscribeTitle').text(tab.Strings.SubscribeTitle)));
        this.get_element().append($('<div>').addClass('tabSubscribeModePanel'));
    },
    
    layout: function tab_SubscribeView$layout() {
        if (this.get__subscribeViewModel$2().get_mode() === tab.SubscribeViewModel.modeEmail) {
            this.layoutEmailSetup();
        }
        else {
            this.layoutSubscribeSetup();
        }
    },
    
    layoutEmailSetup: function tab_SubscribeView$layoutEmailSetup() {
        var modePanel = this.get_element().find('.tabSubscribeModePanel').first();
        if (ss.isValue(this.subscribePanel)) {
            this.subscribePanel.detach();
        }
        if (!ss.isValue(this.emailPanel)) {
            this.nextButton = spiff.StyledButton.createStyledButton(ss.Delegate.create(this, this._handleNextClicked$2), tab.Strings.SubscribeNext, 'tabSubscribeNextButton', 1);
            this.disposables.add(this.nextButton);
            this.cancelButton = spiff.StyledButton.createStyledButton(ss.Delegate.create(this, this._handleCancelClicked$2), tab.Strings.SubscribeCancel, 'tabSubscribeCancelButton', 2);
            this.disposables.add(this.cancelButton);
            this.nextButton.set_disabled(true);
            this.emailPanel = $('<div>');
            this.emailPanel.append($('<div>').addClass('tabSubscribeEmailContainer').append($('<div>').addClass('tabSubscribeLabel').text(tab.Strings.SubscribeEnterAddress)).append($('<input>').attr({ type: 'text', id: 'tabSubscribeAddress' }).addClass('tabSubscribeTextbox').keyup(ss.Delegate.create(this, this._handleEmailKeyup$2))));
            this.emailPanel.append($('<div>').addClass('tabSubscribeButtonContainer').append(this.nextButton.get_element()).append(this.cancelButton.get_element()));
        }
        modePanel.append(this.emailPanel);
    },
    
    layoutSubscribeSetup: function tab_SubscribeView$layoutSubscribeSetup() {
        var modePanel = this.get_element().find('.tabSubscribeModePanel').first();
        if (ss.isValue(this.emailPanel)) {
            this.emailPanel.detach();
        }
        if (!ss.isValue(this.subscribePanel)) {
            this.subscribeButton = spiff.StyledButton.createStyledButton(ss.Delegate.create(this, this._handleSubscribeClicked$2), tab.Strings.SubscribeSubscribe, 'tabSubscribeSubscribeButton', 1);
            this.disposables.add(this.subscribeButton);
            this.cancelButton = spiff.StyledButton.createStyledButton(ss.Delegate.create(this, this._handleCancelClicked$2), tab.Strings.SubscribeCancel, 'tabSubscribeCancelButton', 2);
            this.disposables.add(this.cancelButton);
            this.subscribePanel = $('<div>');
            this.subscribePanel.append($('<div>').addClass('tabSubscribeEmailContainer').append($('<div>').addClass('tabSubscribeLabel').text(tab.Strings.SubscribeTo)).append($('<div>').addClass('tabSubscribeEmailAddress'))).append($('<div>').addClass('tabSubscribeLabel').text(tab.Strings.SubscribeSubject)).append($('<input>').attr({ type: 'text', id: 'tabSubscribeSubject' }).addClass('tabSubscribeTextbox').val(this.get__subscribeViewModel$2().get_defaultSubject()).keyup(ss.Delegate.create(this, this._handleSubjectKeyup$2)));
            this.subscribePanel.append($('<div>').addClass('tabSubscribeLabel').text(tab.Strings.SubscribeSchedule)).append($('<div>').addClass('tabSubscribeSchedules').append(this._createScheduleDropDown$2()));
            this.subscribePanel.append($('<div>').addClass('tabSubscribeLabel').text(tab.Strings.SubscribeContent)).append(this._createSheetButtons$2());
            this.subscribePanel.append($('<div>').addClass('tabSubscribeButtonContainer').append(this.subscribeButton.get_element()).append(this.cancelButton.get_element()));
        }
        this.subscribePanel.find('.tabSubscribeEmailAddress').text(this.get__subscribeViewModel$2().get_email());
        modePanel.append(this.subscribePanel);
    },
    
    handleEmailUpdated: function tab_SubscribeView$handleEmailUpdated() {
        if (ss.isValue(this.subscribePanel)) {
            var email = this.subscribePanel.find('.tabSubscribeEmailAddress');
            if (ss.isValue(email)) {
                email.text(this.get__subscribeViewModel$2().get_email());
            }
        }
    },
    
    handleSchedulesUpdated: function tab_SubscribeView$handleSchedulesUpdated() {
        this.comboBoxViewModel.clearItems();
        var first = true;
        var $enum1 = ss.IEnumerator.getEnumerator(this.get__subscribeViewModel$2().get_schedules());
        while ($enum1.moveNext()) {
            var sched = $enum1.current;
            var item = new tab.ComboBoxItem(null, sched.get_name(), sched, null);
            this.comboBoxViewModel.addItem(item);
            if (first) {
                this.comboBoxViewModel.set_selectedItem(item);
                first = false;
            }
        }
    },
    
    place: function tab_SubscribeView$place() {
        var body = $(document.body);
        var panelWidth = this.get_defaultPanelWidth();
        var toolbarButtonOffset = this.toolbarButton.offset();
        var buttonWidth = this.toolbarButton.outerWidth();
        var bodyWidth = body.width();
        var bodyHeight = body.height();
        var left = toolbarButtonOffset.left + buttonWidth;
        var right = bodyWidth - left;
        if (right < 10) {
            var difference = 10 - right;
            left = left - difference;
        }
        left = (left > panelWidth) ? left - panelWidth : 0;
        var css = { left: left + 'px', width: panelWidth + 'px' };
        if (this.get__subscribeViewModel$2().get_isTop()) {
            var top = toolbarButtonOffset.top + this.toolbarButton.outerHeight();
            css['top'] = top + 'px';
        }
        else {
            var bottom = bodyHeight - toolbarButtonOffset.top;
            css['bottom'] = bottom + 'px';
        }
        this.panel.css(css);
    },
    
    _createScheduleDropDown$2: function tab_SubscribeView$_createScheduleDropDown$2() {
        this.comboBoxViewModel.clearItems();
        var first = true;
        var $enum1 = ss.IEnumerator.getEnumerator(this.get__subscribeViewModel$2().get_schedules());
        while ($enum1.moveNext()) {
            var sched = $enum1.current;
            var item = new tab.ComboBoxItem(null, sched.get_name(), sched, null);
            this.comboBoxViewModel.addItem(item);
            if (first) {
                this.comboBoxViewModel.set_selectedItem(item);
                first = false;
            }
        }
        return this.comboBoxView.get_element();
    },
    
    _createSheetButtons$2: function tab_SubscribeView$_createSheetButtons$2() {
        var buttonContainer = $('<div>').addClass('tabSubscribeSheetButtonContainer');
        this.sheetButtonWorksheet = this._createSheetButton$2(ss.Delegate.create(this, function(e) {
            this.sheetButtonWorkbook.removeClass('tabSubscribeSheetButtonSelected');
            this.sheetButtonWorksheet.addClass('tabSubscribeSheetButtonSelected');
            this.get__subscribeViewModel$2().set_sheetSelectionIsWorkbook(false);
        }), tab.Strings.SubscribeSheet, 'tabSubscribeSheetButtonLeft', 'tab-subscribe-icon-worksheet');
        this.sheetButtonWorkbook = this._createSheetButton$2(ss.Delegate.create(this, function(e) {
            this.sheetButtonWorksheet.removeClass('tabSubscribeSheetButtonSelected');
            this.sheetButtonWorkbook.addClass('tabSubscribeSheetButtonSelected');
            this.get__subscribeViewModel$2().set_sheetSelectionIsWorkbook(true);
        }), tab.Strings.SubscribeWorkbook, 'tabSubscribeSheetButtonRight', 'tab-subscribe-icon-workbook');
        buttonContainer.append(this.sheetButtonWorksheet);
        buttonContainer.append(this.sheetButtonWorkbook);
        this.sheetButtonWorksheet.addClass('tabSubscribeSheetButtonSelected');
        return buttonContainer;
    },
    
    _createSheetButton$2: function tab_SubscribeView$_createSheetButton$2(clickHandler, buttonText, buttonClass, buttonImageClass) {
        return spiff.ClickHandler.targetAndClick($('<button>').addClass('tabSubscribeSheetButton').addClass(buttonClass).append($('<span>').addClass('tabSubscribeSheetButtonIcon').addClass(buttonImageClass)).append($('<div>').addClass('tabSubscribeSheetButtonLabel').text(buttonText)), clickHandler).get_target();
    },
    
    _handleNextClicked$2: function tab_SubscribeView$_handleNextClicked$2() {
        if (this.get__subscribeViewModel$2().get_intermediateEmailValid() && ss.isValue(this.emailPanel)) {
            var writeInEmail = $('#tabSubscribeAddress').val();
            var success = ss.Delegate.create(this, function() {
                this._removeInvalidAddressError$2();
                this.emailPanel.detach();
                this.get__subscribeViewModel$2().startSubscribe();
            });
            var failure = ss.Delegate.create(this, function() {
                this._showInvalidAddressError$2();
            });
            this.get__subscribeViewModel$2().submitEmail(writeInEmail, success, failure);
        }
    },
    
    _handleSubscribeClicked$2: function tab_SubscribeView$_handleSubscribeClicked$2() {
        if (this.get__subscribeViewModel$2().get_intermediateSubjectValid()) {
            var subject = $('#tabSubscribeSubject').val();
            var schedule = this.comboBoxViewModel.get_selectedItem().get_data();
            this.get__subscribeViewModel$2().createSubscription(subject, schedule, tab.Strings.SubscribeSuccess, tab.Strings.SubscribeFailure);
            this.get__subscribeViewModel$2().hide();
        }
    },
    
    _handleCancelClicked$2: function tab_SubscribeView$_handleCancelClicked$2() {
        this.get__subscribeViewModel$2().hide();
    },
    
    _glassClicked$2: function tab_SubscribeView$_glassClicked$2() {
        this._handleCancelClicked$2();
    },
    
    _handleSubjectKeyup$2: function tab_SubscribeView$_handleSubjectKeyup$2(e) {
        this.get__subscribeViewModel$2().set_intermediateSubject($(e.target).val());
    },
    
    _handleEmailKeyup$2: function tab_SubscribeView$_handleEmailKeyup$2(e) {
        this.get__subscribeViewModel$2().set_intermediateEmail($(e.target).val());
    },
    
    _handleSubjectValidationChanged$2: function tab_SubscribeView$_handleSubjectValidationChanged$2() {
        if (this.get__subscribeViewModel$2().get_intermediateSubjectValid()) {
            this.subscribeButton.set_disabled(false);
        }
        else {
            this.subscribeButton.set_disabled(true);
        }
    },
    
    _handleEmailValidationChanged$2: function tab_SubscribeView$_handleEmailValidationChanged$2() {
        if (this.get__subscribeViewModel$2().get_intermediateEmailValid()) {
            this.nextButton.set_disabled(false);
        }
        else {
            this.nextButton.set_disabled(true);
        }
    },
    
    _hidden$2: function tab_SubscribeView$_hidden$2() {
        this.get_element().fadeOut('fast', ss.Delegate.create(this, this._detach$2));
    },
    
    _detach$2: function tab_SubscribeView$_detach$2() {
        if (ss.isValue(this.emailPanel)) {
            this.emailPanel.detach();
        }
        if (ss.isValue(this.subscribePanel)) {
            this.subscribePanel.detach();
        }
        this.removeGlass();
    },
    
    _shown$2: function tab_SubscribeView$_shown$2() {
        this.removeGlass();
        this.glass = new spiff.Glass();
        this.glass.add_click(ss.Delegate.create(this, this._glassClicked$2));
        this.glass.show();
        this.layout();
        this.place();
        this.get_element().fadeIn('fast');
    },
    
    _showInvalidAddressError$2: function tab_SubscribeView$_showInvalidAddressError$2() {
        if (ss.isValue(this.emailPanel) && !(this.emailPanel.find('.tabSubscribeError').size() > 0)) {
            var emailContainer = this.emailPanel.find('.tabSubscribeEmailContainer');
            emailContainer.append($('<div>').addClass('tabSubscribeError').text(tab.Strings.SubscribeInvalidAddress));
        }
    },
    
    _removeInvalidAddressError$2: function tab_SubscribeView$_removeInvalidAddressError$2() {
        if (ss.isValue(this.emailPanel)) {
            this.emailPanel.find('.tabSubscribeError').remove();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.VisualRegionCanvasView

tab.VisualRegionCanvasView = function tab_VisualRegionCanvasView(viewModel, domNode) {
    this.completeDocSize = tab.$create_Size(0, 0);
    tab.VisualRegionCanvasView.initializeBase(this, [ viewModel ]);
    this._domNode$3 = domNode;
    this.containers = $('.tvimagesContainer', this._domNode$3);
}
tab.VisualRegionCanvasView.prototype = {
    renderer: null,
    containers: null,
    _domNode$3: null,
    
    add_loadComplete: function tab_VisualRegionCanvasView$add_loadComplete(value) {
        this.__loadComplete$3 = ss.Delegate.combine(this.__loadComplete$3, value);
    },
    remove_loadComplete: function tab_VisualRegionCanvasView$remove_loadComplete(value) {
        this.__loadComplete$3 = ss.Delegate.remove(this.__loadComplete$3, value);
    },
    
    __loadComplete$3: null,
    
    get_docSize: function tab_VisualRegionCanvasView$get_docSize() {
        return this.completeDocSize;
    },
    
    destroy: function tab_VisualRegionCanvasView$destroy() {
        this.dispose();
    },
    
    dispose: function tab_VisualRegionCanvasView$dispose() {
        this.renderer = null;
        tab.VisualRegionCanvasView.callBaseMethod(this, 'dispose');
    },
    
    refreshImages: function tab_VisualRegionCanvasView$refreshImages(newCacheInfo) {
    },
    
    reset: function tab_VisualRegionCanvasView$reset(newGeometry, newTileSize) {
        if (ss.isNullOrUndefined(newGeometry)) {
            return;
        }
        var newSize = tab.$create_Size(newGeometry.w, newGeometry.h);
        if (ss.isValue(this.completeDocSize) && !tab.SizeUtil.equals(newSize, this.completeDocSize)) {
            var viewSize = this.get_effectiveViewSize();
            var newScrollPos = tab.$create_Point(Math.min(newSize.w - viewSize.w, this.scrollOffset.x), Math.min(newSize.h - viewSize.h, this.scrollOffset.y));
            this.set_scrollPos(newScrollPos);
        }
        this.completeDocSize = newSize;
        this.containers.width(newGeometry.w);
        this.containers.height(newGeometry.h);
    },
    
    copyContent: function tab_VisualRegionCanvasView$copyContent(destContext) {
        destContext.drawImage1(this.canvasElt, 0, 0);
    },
    
    redraw: function tab_VisualRegionCanvasView$redraw() {
        if (!this.get_needsRedraw() || ss.isNullOrUndefined(this.renderer)) {
            return;
        }
        this.renderer.reset();
        this.context.save();
        this.context.setClip(this._createDirtyRectWithPixelRatioApplied$3());
        tab.CanvasUtil.scaleCanvasDrawing(this.context, this.get_pixelRatio());
        this.renderer.set_renderOffset(this.scrollOffset);
        this.performRender();
        this.context.restore();
        this.postRenderFinalPass();
        this.clearDirty();
        this.raiseLoadComplete();
    },
    
    redrawFinished: function tab_VisualRegionCanvasView$redrawFinished() {
    },
    
    raiseLoadComplete: function tab_VisualRegionCanvasView$raiseLoadComplete() {
        tab.Log.get(this).debug('Load complete');
        if (ss.isValue(this.__loadComplete$3)) {
            this.__loadComplete$3(this, ss.EventArgs.Empty);
        }
    },
    
    onViewModelPropertyChanged: function tab_VisualRegionCanvasView$onViewModelPropertyChanged(sender, e) {
        this.invalidate(false);
    },
    
    _createDirtyRectWithPixelRatioApplied$3: function tab_VisualRegionCanvasView$_createDirtyRectWithPixelRatioApplied$3() {
        var x1 = this.get_dirtyRect().x * this.get_pixelRatio();
        var y1 = this.get_dirtyRect().y * this.get_pixelRatio();
        var x2 = (this.get_dirtyRect().x + this.get_dirtyRect().w) * this.get_pixelRatio();
        var y2 = (this.get_dirtyRect().y + this.get_dirtyRect().h) * this.get_pixelRatio();
        var startX = Math.floor(x1);
        var startY = Math.floor(y1);
        return tab.$create_RectXY(startX, startY, Math.ceil(x2) - startX, Math.ceil(y2) - startY);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ZoneView

tab.ZoneView = function tab_ZoneView(zoneViewModel) {
    tab.ZoneView.initializeBase(this, [ zoneViewModel, new tab.ZoneTemplate() ]);
    this.get__zoneVM$2().add_updateZone(ss.Delegate.create(this, this._handleUpdateZone$2));
    this.get__zoneVM$2().add_resizeZone(ss.Delegate.create(this, this._handleResizeZone$2));
    this.get__zoneVM$2().add_newZoneContent(ss.Delegate.create(this, this._handleNewZoneContent$2));
    this.get__zoneVM$2().add_validStateChanged(ss.Delegate.create(this, this._refreshValidState$2));
}
tab.ZoneView.viewRect = function tab_ZoneView$viewRect(zonePresModel) {
    var borderSpace = 0;
    if (ss.isValue(zonePresModel.styledBox) && zonePresModel.styledBox.borderStyle !== 'bs-none' && ss.isValue(zonePresModel.styledBox.uw)) {
        borderSpace = zonePresModel.styledBox.uw;
    }
    var zoneRect = tab.$create_RectXY(0, 0, zonePresModel.w - (2 * borderSpace), zonePresModel.h - (2 * borderSpace));
    return tab.RectXYUtil.toRect(zoneRect);
}
tab.ZoneView.prototype = {
    _zoneContentView$2: null,
    _glass$2: null,
    
    get__zoneContentView: function tab_ZoneView$get__zoneContentView() {
        return this._zoneContentView$2;
    },
    set__zoneContentView: function tab_ZoneView$set__zoneContentView(value) {
        ss.Debug.assert(ss.isNullOrUndefined(this._zoneContentView$2), "shouldn't be set already. that would be bad");
        this._zoneContentView$2 = value;
        this.get_template().get_domRoot().append(this._zoneContentView$2.get_template().get_domRoot());
        this._zoneContentView$2.onAddedToDom();
        return value;
    },
    
    get__zoneVM$2: function tab_ZoneView$get__zoneVM$2() {
        return this.get_viewModel();
    },
    
    dispose: function tab_ZoneView$dispose() {
        this.get__zoneVM$2().remove_updateZone(ss.Delegate.create(this, this._handleUpdateZone$2));
        this.get__zoneVM$2().remove_resizeZone(ss.Delegate.create(this, this._handleResizeZone$2));
        this.get__zoneVM$2().remove_newZoneContent(ss.Delegate.create(this, this._handleNewZoneContent$2));
        this.get__zoneVM$2().remove_validStateChanged(ss.Delegate.create(this, this._refreshValidState$2));
        if (ss.isValue(this._zoneContentView$2)) {
            this._zoneContentView$2.dispose();
            this._zoneContentView$2 = null;
        }
        this._removeGlass$2();
        tab.ZoneView.callBaseMethod(this, 'dispose');
    },
    
    _removeGlass$2: function tab_ZoneView$_removeGlass$2() {
        if (ss.isValue(this._glass$2)) {
            this._glass$2.dispose();
            this._glass$2 = null;
        }
    },
    
    onViewModelPropertyChanged: function tab_ZoneView$onViewModelPropertyChanged(sender, e) {
        if (e.get_propertyName() === 'isActiveZone') {
        }
    },
    
    _updateZoneHighlight$2: function tab_ZoneView$_updateZoneHighlight$2() {
        var visibleState = (this.get__zoneVM$2().get__isActiveZone()) ? 'visible' : 'hidden';
        (this.get_template()).highlightBorders.css('visibility', visibleState);
    },
    
    _disable$2: function tab_ZoneView$_disable$2() {
        if (!this.get_template().get_domRoot().get(0).offsetHeight || !this.get_template().get_domRoot().get(0).offsetWidth) {
            return;
        }
        if (!ss.isValue(this._glass$2)) {
            this._glass$2 = new spiff.Glass(this.get_template().get_domRoot().get(0));
            this._glass$2.set_opaque(true);
        }
        this._glass$2.show();
    },
    
    _enable$2: function tab_ZoneView$_enable$2() {
        this._removeGlass$2();
    },
    
    onAddedToDom: function tab_ZoneView$onAddedToDom() {
        tab.ZoneView.callBaseMethod(this, 'onAddedToDom');
        if (ss.isNullOrUndefined(this.get__zoneContentView())) {
            this._handleUpdateZone$2();
            this._handleResizeZone$2();
            if (ss.isValue(this.get__zoneVM$2().get_zoneContentViewModel())) {
                this._handleNewZoneContent$2(this.get__zoneVM$2().get_zoneContentViewModel());
            }
            this._refreshValidState$2();
        }
        if (tab.ZoneView._suppressTooltipOverZones$2.contains(this.get__zoneVM$2().get_zoneType())) {
            this.get_element().addClass('tabSuppressVizTooltipsAndOverlays');
        }
        this.get_element().click(ss.Delegate.create(this, this._popupPresModelBrowser$2));
    },
    
    _popupPresModelBrowser$2: function tab_ZoneView$_popupPresModelBrowser$2(e) {
        if (e.altKey) {
            var model = this.get__zoneVM$2().get_model().get_presModel();
            if (this.get__zoneVM$2().get_zoneType() === 'viz') {
                model = { zonePresModel: model, applicationPresModel: tab.ApplicationModel.get_instance().get_appPresModel() };
            }
            var treeData = new tab.PresModelBrowserViewModel(model);
            if (ss.isNullOrUndefined(tab.ZoneView._presModelBrowser$2)) {
                tab.ZoneView._presModelBrowser$2 = new tab.PresModelBrowserView('pres_model_browser', treeData);
                $(document.body).append(tab.ZoneView._presModelBrowser$2.get_element());
            }
            else {
                tab.ZoneView._presModelBrowser$2.update(treeData);
            }
            tab.ZoneView._presModelBrowser$2.get_element().show();
        }
    },
    
    _handleUpdateZone$2: function tab_ZoneView$_handleUpdateZone$2() {
        this.get_template().get_domRoot().css('z-index', this.get__zoneVM$2().get_zoneZIndex().toString());
        var transparentBackground = tab.FeatureParamsLookup.getBoolDefaultTrue(tab.FeatureParam.transparentBackground);
        var allowTransparency = ss.isValue(transparentBackground) && transparentBackground;
        if (allowTransparency && tab.ZoneView._transparentDashboardObjects$2.contains(this.get__zoneVM$2().get_zoneType())) {
        }
        else {
            this.get_template().get_domRoot().css('background-color', this.get__zoneVM$2().get_backgroundColor());
        }
        if (this.get__zoneVM$2().get_zoneType() === 'layout-flow' || this.get__zoneVM$2().get_zoneType() === 'layout-free-form' || this.get__zoneVM$2().get_zoneType() === 'empty') {
            this.get_template().get_domRoot().addClass('wcLayoutContainer');
        }
        var zonesThatUseStyledBox = [ 'layout-flow', 'map', 'color', 'size', 'shape', 'filter', 'paramctrl' ];
        if (zonesThatUseStyledBox.contains(this.get__zoneVM$2().get_zoneType())) {
            var styleDict = tab.FormattingConverters._makeStyledBoxCssDict(this.get__zoneVM$2().get_model().get_zonePresModel().styledBox, allowTransparency);
            this.get_template().get_domRoot().css(styleDict);
        }
        this._refreshValidState$2();
    },
    
    _handleResizeZone$2: function tab_ZoneView$_handleResizeZone$2() {
        this.get_template().get_domRoot().css('width', this.get__zoneVM$2().get_width().toString() + 'px');
        this.get_template().get_domRoot().css('height', this.get__zoneVM$2().get_height().toString() + 'px');
        this.get_template().get_domRoot().css('top', this.get__zoneVM$2().get_y().toString() + 'px');
        this.get_template().get_domRoot().css('left', this.get__zoneVM$2().get_x().toString() + 'px');
    },
    
    _refreshValidState$2: function tab_ZoneView$_refreshValidState$2() {
        if (!this.get__zoneVM$2().get_valid()) {
            this._disable$2();
        }
        else {
            this._enable$2();
        }
    },
    
    _handleNewZoneContent$2: function tab_ZoneView$_handleNewZoneContent$2(zoneContentViewModel) {
        tab.Log.get(this).debug('New zone content: %o', zoneContentViewModel);
        var zoneType = this.get__zoneVM$2().get_zoneType();
        switch (zoneType) {
            case 'title':
            case 'text':
                this.set__zoneContentView(new tab.TextRegionView(zoneContentViewModel));
                break;
            case 'size':
            case 'shape':
            case 'color':
            case 'map':
                if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
                    if (Type.canCast(zoneContentViewModel, tab.CategoricalLegendViewModel)) {
                        this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.CategoricalLegendView, zoneContentViewModel));
                    }
                    else if (Type.canCast(zoneContentViewModel, tab.QuantitativeColorLegendViewModel)) {
                        this.set__zoneContentView(new tab.QuantitativeColorLegendView(zoneContentViewModel));
                    }
                }
                else {
                    var llv = spiff.ObjectRegistry.newView(tab.LegacyLegendView, zoneContentViewModel);
                    this.set__zoneContentView(llv);
                }
                break;
            case 'current-page':
                this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.PageView, zoneContentViewModel));
                break;
            case 'filter':
                this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.QuickFilterDisplayView, zoneContentViewModel));
                break;
            case 'paramctrl':
                this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.ParameterControlView, zoneContentViewModel));
                break;
            case 'flipboard-nav':
                this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.FlipboardNavigatorView, zoneContentViewModel));
                break;
            case 'flipboard':
                this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.FlipboardView, zoneContentViewModel));
                break;
            case 'web':
                this.set__zoneContentView(new tab.WebZoneView(zoneContentViewModel, this.get__zoneVM$2()));
                break;
            case 'bitmap':
                this.set__zoneContentView(new tab.ImageZoneView(zoneContentViewModel, this.get__zoneVM$2()));
                break;
            case 'viz':
                this.set__zoneContentView(spiff.ObjectRegistry.newView(tab.PaneTableView, zoneContentViewModel));
                break;
            default:
                tab.Log.get(this).warn('Unknown zone type: %s', zoneType);
                break;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ZoneTemplate

tab.ZoneTemplate = function tab_ZoneTemplate() {
    tab.ZoneTemplate.initializeBase(this, [ $(tab.ZoneTemplate._htmlTemplate$1) ]);
    this.highlightBorders = this.getElementsBySelector('.wcHighlight');
}
tab.ZoneTemplate.prototype = {
    highlightBorders: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ActionExecutedEventArgs

tab.ActionExecutedEventArgs = function tab_ActionExecutedEventArgs() {
    tab.ActionExecutedEventArgs.initializeBase(this);
}
tab.ActionExecutedEventArgs.prototype = {
    action: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.TextRegionView

tab.TextRegionView = function tab_TextRegionView(viewModel) {
    this._browserTransformRoots$2 = [ 'transform', '-ms-transform', '-webkit-transform', '-moz-transform', '-o-transform' ];
    tab.TextRegionView.initializeBase(this, [ viewModel, new tab.TextRegionTemplate() ]);
    this.get__textRegionViewModel$2().add_newTextRegion(ss.Delegate.create(this, this.handleNewTextRegion));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get__textRegionViewModel$2().remove_newTextRegion(ss.Delegate.create(this, this.handleNewTextRegion));
    })));
}
tab.TextRegionView.prototype = {
    
    get__textRegionViewModel$2: function tab_TextRegionView$get__textRegionViewModel$2() {
        return this.get_viewModel();
    },
    
    get__textRegionTemplate$2: function tab_TextRegionView$get__textRegionTemplate$2() {
        return this.get_template();
    },
    
    onAddedToDom: function tab_TextRegionView$onAddedToDom() {
        tab.TextRegionView.callBaseMethod(this, 'onAddedToDom');
        this.handleNewTextRegion();
    },
    
    handleNewTextRegion: function tab_TextRegionView$handleNewTextRegion() {
        if (!this.get__textRegionViewModel$2().hasPresModel()) {
            ss.Debug.assert(false, 'Trying to load a text region without a pres model!');
            return;
        }
        this._createBoundaryDiv$2(this.get__textRegionTemplate$2().textRegionBoundaryElem);
        this._createContentDiv$2(this.get__textRegionTemplate$2().contentElem);
    },
    
    updateContentTextSelectability: function tab_TextRegionView$updateContentTextSelectability(isSelectable) {
        if (isSelectable) {
            this.get__textRegionTemplate$2().contentElem.addClass('selectable-text');
        }
        else {
            this.get__textRegionTemplate$2().contentElem.removeClass('selectable-text');
        }
    },
    
    _createContentDiv$2: function tab_TextRegionView$_createContentDiv$2(contentRootElem) {
        var elementCss = {};
        contentRootElem.html(this.get__textRegionViewModel$2().get_html());
        tab.FormattingConverters.cleanUpFontFamilyStyles(contentRootElem);
        tab.DomUtil.stopPropagationOfInputEvents(contentRootElem);
        if (this._isRotatedRight$2(this.get__textRegionViewModel$2().get_orientation()) || this._isRotatedLeft$2(this.get__textRegionViewModel$2().get_orientation())) {
            var parentWidth = contentRootElem.parent().width();
            var parentHeight = contentRootElem.parent().height();
            elementCss['width'] = parentHeight + 'px';
            var yTransformOrigin = '0%';
            if (this._isRotatedRight$2(this.get__textRegionViewModel$2().get_orientation())) {
                if (!(tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9)) {
                    elementCss['bottom'] = '100%';
                }
                yTransformOrigin = '100%';
            }
            else if (this._isRotatedLeft$2(this.get__textRegionViewModel$2().get_orientation())) {
                if (!(tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9)) {
                    elementCss['top'] = '100%';
                }
                yTransformOrigin = '0%';
            }
            contentRootElem.css(elementCss);
            elementCss['left'] = this._getCssLeftForRotatedText$2(parentWidth, contentRootElem.height(), this.get__textRegionViewModel$2().get_hAlign(), this.get__textRegionViewModel$2().get_orientation());
            this._addCssTransform$2(contentRootElem, '0% ' + yTransformOrigin, this.get__textRegionViewModel$2().get_orientation().toString());
        }
        else {
            elementCss['width'] = '100%';
            var parentHeight = this.get__textRegionTemplate$2().get_domRoot().height();
            if (parentHeight <= contentRootElem.height() && !this._isAnyTextTallerThanZone$2(contentRootElem, parentHeight)) {
                elementCss['top'] = '0%';
            }
            else {
                switch (this.get__textRegionViewModel$2().get_vAlign()) {
                    case 'v-align-center':
                        elementCss['top'] = '50%';
                        elementCss['margin-top'] = (-contentRootElem.height() / 2).toString() + 'px';
                        break;
                    case 'v-align-bottom':
                        elementCss['bottom'] = '0%';
                        break;
                    case 'v-align-top':
                        elementCss['top'] = '0%';
                        break;
                    default:
                        ss.Debug.fail('bad text alignment');
                        break;
                }
            }
        }
        contentRootElem.css(elementCss);
    },
    
    _isAnyTextTallerThanZone$2: function tab_TextRegionView$_isAnyTextTallerThanZone$2(localRoot, parentHeight) {
        var toRet = false;
        localRoot.find('span').each(function(index, element) {
            if (!toRet && ss.isValue(element.style.lineHeight)) {
                toRet = parseInt(element.style.lineHeight) >= parentHeight;
            }
        });
        return toRet;
    },
    
    _createBoundaryDiv$2: function tab_TextRegionView$_createBoundaryDiv$2(boundaryRootElem) {
        var styledBox = this.get__textRegionViewModel$2().get_styledBox();
        var borderStyle = tab.FormattingConverters.getCSSBorderStyle(styledBox.borderStyle);
        var elementCss = { 'border-width': styledBox.uw + 'px', 'border-color': styledBox.borderColor, 'border-style': borderStyle };
        if (this.get__textRegionViewModel$2().get_styledBox().hasFill) {
            this._applyFill$2(elementCss);
        }
        boundaryRootElem.css(elementCss);
    },
    
    _applyFill$2: function tab_TextRegionView$_applyFill$2(elementCss) {
        var transparentBackground = tab.FeatureParamsLookup.getBoolDefaultTrue(tab.FeatureParam.transparentBackground);
        var backgroundFillColor = tab.ColorModel.fromColorCode(this.get__textRegionViewModel$2().get_styledBox().fillColor);
        if (ss.isValue(transparentBackground) && transparentBackground && backgroundFillColor.get_a() < 1) {
            if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) {
                var backgroundArgb = backgroundFillColor.toArgbHex();
                var transparentBackgroundFilterHack = 'progid:DXImageTransform.Microsoft.gradient(' + 'startColorStr=' + backgroundArgb + ',' + 'endColorStr=' + backgroundArgb + ')';
                elementCss['background'] = 'transparent';
                elementCss['filter'] = transparentBackgroundFilterHack;
                elementCss['-ms-filter'] = transparentBackgroundFilterHack;
                elementCss['zoom'] = 1;
            }
            else {
                elementCss['background-color'] = backgroundFillColor.toString();
            }
        }
        else {
            if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) {
                elementCss['background-color'] = backgroundFillColor.toRgb();
            }
            else {
                elementCss['background-color'] = backgroundFillColor.toString();
            }
        }
    },
    
    _isRotatedRight$2: function tab_TextRegionView$_isRotatedRight$2(orientation) {
        return Math.round(orientation) === 90;
    },
    
    _isRotatedLeft$2: function tab_TextRegionView$_isRotatedLeft$2(orientation) {
        return Math.round(orientation) === -90;
    },
    
    _addCssTransform$2: function tab_TextRegionView$_addCssTransform$2(elem, origin, angle) {
        var css = {};
        if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) {
            var rotationNumber = (angle === '90') ? 1 : (angle === '-90') ? 3 : 0;
            if (!!rotationNumber) {
                var backgroundColor = 'white';
                var backgroundColorArgb = 'white';
                if (this.get__textRegionViewModel$2().get_styledBox().hasFill) {
                    var fillColor = tab.ColorModel.fromColorCode(this.get__textRegionViewModel$2().get_styledBox().fillColor);
                    var transparentBackground = tab.FeatureParamsLookup.getBoolDefaultTrue(tab.FeatureParam.transparentBackground);
                    if (ss.isValue(transparentBackground) && transparentBackground) {
                        var dashboardBackground = 'white';
                        var dashboardModel = tab.ModelUtils.findContentDashboard();
                        if (ss.isValue(dashboardModel)) {
                            dashboardBackground = (dashboardModel.get_backgroundColor() || 'white');
                        }
                        var blended = tab.ColorModel.alphaComposite(fillColor, tab.ColorModel.fromColorCode(dashboardBackground));
                        fillColor = new tab.ColorModel(blended.get_r(), blended.get_g(), blended.get_b(), 1);
                    }
                    backgroundColor = fillColor.toRgb();
                    backgroundColorArgb = fillColor.toArgbHex();
                }
                var chromaFilter = "progid:DXImageTransform.Microsoft.Chroma(color='" + backgroundColorArgb + "')";
                var rotationFilter = 'progid:DXImageTransform.Microsoft.BasicImage(rotation=' + rotationNumber + ')';
                var filter = chromaFilter + ' ' + rotationFilter;
                css['-ms-filter'] = filter;
                css['filter'] = filter;
                css['background-color'] = backgroundColor;
            }
        }
        else {
            var $enum1 = ss.IEnumerator.getEnumerator(this._browserTransformRoots$2);
            while ($enum1.moveNext()) {
                var transformRoot = $enum1.current;
                css[transformRoot + '-origin'] = origin;
                css[transformRoot] = 'rotate(' + angle + 'deg)';
            }
        }
        elem.css(css);
    },
    
    _getCssLeftForRotatedText$2: function tab_TextRegionView$_getCssLeftForRotatedText$2(containerWidth, contentElemHeight, align, orientation) {
        var left = 0;
        if (contentElemHeight > containerWidth) {
            if (this._isRotatedRight$2(orientation)) {
                align = 'h-align-right';
            }
            else {
                align = 'h-align-left';
            }
        }
        if (align === 'h-align-left') {
            left = 0;
        }
        else if (align === 'h-align-right') {
            left = containerWidth - contentElemHeight;
        }
        else if (align === 'h-align-center') {
            left = (containerWidth / 2) - (contentElemHeight / 2);
        }
        return left.toString() + 'px';
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TextRegionTemplate

tab.TextRegionTemplate = function tab_TextRegionTemplate() {
    tab.TextRegionTemplate.initializeBase(this, [ $("<div class='tab-textRegion'><div class='tab-textRegion-boundary'><div class='tab-textRegion-content selectable-text'></div></div></div>") ]);
    var g = ss.Delegate.create(this, this.getElementBySelector);
    this.textRegionBoundaryElem = g('.tab-textRegion-boundary');
    this.contentElem = g('.tab-textRegion-content');
}
tab.TextRegionTemplate.prototype = {
    textRegionBoundaryElem: null,
    contentElem: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledImageViewModel

tab.TiledImageViewModel = function tab_TiledImageViewModel() {
    tab.TiledImageViewModel.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledImageView

tab.TiledImageView = function tab_TiledImageView(viewModel) {
    tab.TiledImageView.initializeBase(this, [ viewModel, new tab.TiledImageTemplate() ]);
}
tab.TiledImageView.prototype = {
    
    get_canScrollX: function tab_TiledImageView$get_canScrollX() {
        return (this.get_docSize().w - this.get_actualViewSize().w) > 0;
    },
    
    get_canScrollY: function tab_TiledImageView$get_canScrollY() {
        return (this.get_docSize().h - this.get_actualViewSize().h) > 0;
    },
    
    get_docSize: function tab_TiledImageView$get_docSize() {
        return tab.$create_Size(this.get_element().width(), this.get_element().height());
    },
    
    get_actualViewSize: function tab_TiledImageView$get_actualViewSize() {
        return tab.$create_Size(0, 0);
    },
    
    get_effectiveViewSize: function tab_TiledImageView$get_effectiveViewSize() {
        return this.get_actualViewSize();
    },
    
    get_scrollPos: function tab_TiledImageView$get_scrollPos() {
        return tab.$create_Point(this.get_element().scrollLeft(), this.get_element().scrollTop());
    },
    set_scrollPos: function tab_TiledImageView$set_scrollPos(value) {
        this.setXPos(value.x);
        this.setYPos(value.y);
        return value;
    },
    
    setXPos: function tab_TiledImageView$setXPos(xPos) {
        this.get_element().scrollLeft(xPos);
    },
    
    setYPos: function tab_TiledImageView$setYPos(yPos) {
        this.get_element().scrollTop(yPos);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledImageTemplate

tab.TiledImageTemplate = function tab_TiledImageTemplate() {
    tab.TiledImageTemplate.initializeBase(this, [ $("<div class='tvimagesContainer'></div>") ]);
    this.container = this.getElementBySelector('.tvimagesContainer');
}
tab.TiledImageTemplate.prototype = {
    container: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxView

tab.ComboBoxView = function tab_ComboBoxView(viewModel, dom) {
    tab.ComboBoxView.initializeBase(this, [ viewModel, dom ]);
    this._viewModel$2 = viewModel;
    this._dom$2 = dom;
    this._viewModel$2.add_selectedItemChanged(ss.Delegate.create(this, this._selectedItemChanged$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_selectedItemChanged(ss.Delegate.create(this, this._selectedItemChanged$2));
    })));
    this.clickHandler = spiff.ClickHandler.targetAndClick(this._dom$2.get_domRoot(), ss.Delegate.create(this, function() {
        if (this._viewModel$2.get_showDropdownIcon()) {
            this._dom$2.icon.addClass('tabComboBoxNoIconPressed');
        }
        this._viewModel$2.comboClicked(this._dom$2.get_domRoot());
    }));
    this.disposables.add(this.clickHandler);
    this._dom$2.get_domRoot().keydown(ss.Delegate.create(this, this._onDomKeydown$2));
    this._dom$2.get_domRoot().addClass((!this._viewModel$2.get_theme()) ? 'tabComboStdTheme' : 'tabComboCompactTheme');
    if (ss.isValue(this._viewModel$2.get_formattingStyle())) {
        tab.WidgetStyle.applyFormattingByClassName(this._viewModel$2.get_menuStyleClass(), this._viewModel$2.get_formattingStyle());
    }
    this._viewModel$2.add_menuHidden(ss.Delegate.create(this, this._handleMenuHidden$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_menuHidden(ss.Delegate.create(this, this._handleMenuHidden$2));
    })));
    this._selectedItemChanged$2(this._viewModel$2.get_selectedItem());
}
tab.ComboBoxView.prototype = {
    clickHandler: null,
    _viewModel$2: null,
    _dom$2: null,
    
    _handleMenuHidden$2: function tab_ComboBoxView$_handleMenuHidden$2() {
        this._dom$2.icon.removeClass('tabComboBoxNoIconPressed');
    },
    
    _onDomKeydown$2: function tab_ComboBoxView$_onDomKeydown$2(e) {
        var indexChange = 0;
        switch (e.which) {
            case 40:
                indexChange = 1;
                break;
            case 38:
                indexChange = -1;
                break;
            default:
                return;
        }
        e.preventDefault();
        e.stopPropagation();
        var selectedIndex = this._viewModel$2.get_items().indexOf(this._viewModel$2.get_selectedItem());
        if (selectedIndex < 0) {
            return;
        }
        selectedIndex += indexChange;
        if (selectedIndex >= 0 && selectedIndex < this._viewModel$2.get_items().length) {
            this._viewModel$2.set_selectedItem(this._viewModel$2.get_items()[selectedIndex]);
        }
    },
    
    _selectedItemChanged$2: function tab_ComboBoxView$_selectedItemChanged$2(arg) {
        if (Type.canCast(arg, tab.CustomComboBoxItem)) {
            return;
        }
        this._dom$2.icon.remove();
        if (ss.isNullOrUndefined(arg)) {
            var str = (ss.isValue(this._viewModel$2.get_summary())) ? this._viewModel$2.get_summary() : '&nbsp;';
            this._dom$2.name.html(str);
            return;
        }
        this._dom$2.icon = $('<span/>').addClass('tabComboBoxIcon').addClass(arg.get_iconClass()).appendTo(this._dom$2.get_domRoot());
        if (!ss.isValue(arg.get_iconClass())) {
            this._dom$2.get_domRoot().addClass('tabComboBoxNoIcon');
        }
        this._dom$2.name.text(arg.get_name());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxTemplate

tab.ComboBoxTemplate = function tab_ComboBoxTemplate() {
    tab.ComboBoxTemplate.initializeBase(this, [ $("<span class='tabComboBox tab-ctrl-formatted-widget tab-ctrl-formatted-darker-border-hover'>\n    <span class='tabComboBoxIcon'/>\n    <div class='tabComboBoxNameContainer tab-ctrl-formatted-fixedsize'><span class='tabComboBoxName'/></div>\n    <span class='tabComboBoxButton'/>\n</span>") ]);
    this.icon = this.getElementBySelector('.tabComboBoxIcon');
    this.name = this.getElementBySelector('.tabComboBoxName');
    this.button = this.getElementBySelector('.tabComboBoxButton');
}
tab.ComboBoxTemplate.prototype = {
    icon: null,
    name: null,
    button: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxViewModel

tab.ComboBoxViewModel = function tab_ComboBoxViewModel() {
    this._items$1 = [];
    this._theme$1 = 0;
    this._menuTheme$1 = 0;
    tab.ComboBoxViewModel.initializeBase(this);
}
tab.ComboBoxViewModel.prototype = {
    _selectedItem$1: null,
    _summary$1: null,
    _currentMenu$1: null,
    _showSelectedItem$1: true,
    _showDropdownIcon$1: false,
    _enabled$1: true,
    _formattingStyle$1: null,
    _menuStyleClass$1: '',
    
    add_itemsChanged: function tab_ComboBoxViewModel$add_itemsChanged(value) {
        this.__itemsChanged$1 = ss.Delegate.combine(this.__itemsChanged$1, value);
    },
    remove_itemsChanged: function tab_ComboBoxViewModel$remove_itemsChanged(value) {
        this.__itemsChanged$1 = ss.Delegate.remove(this.__itemsChanged$1, value);
    },
    
    __itemsChanged$1: null,
    
    add_selectedItemChanged: function tab_ComboBoxViewModel$add_selectedItemChanged(value) {
        this.__selectedItemChanged$1 = ss.Delegate.combine(this.__selectedItemChanged$1, value);
    },
    remove_selectedItemChanged: function tab_ComboBoxViewModel$remove_selectedItemChanged(value) {
        this.__selectedItemChanged$1 = ss.Delegate.remove(this.__selectedItemChanged$1, value);
    },
    
    __selectedItemChanged$1: null,
    
    add_menuHidden: function tab_ComboBoxViewModel$add_menuHidden(value) {
        this.__menuHidden$1 = ss.Delegate.combine(this.__menuHidden$1, value);
    },
    remove_menuHidden: function tab_ComboBoxViewModel$remove_menuHidden(value) {
        this.__menuHidden$1 = ss.Delegate.remove(this.__menuHidden$1, value);
    },
    
    __menuHidden$1: null,
    
    get_theme: function tab_ComboBoxViewModel$get_theme() {
        return this._theme$1;
    },
    set_theme: function tab_ComboBoxViewModel$set_theme(value) {
        this._theme$1 = value;
        return value;
    },
    
    get_menuTheme: function tab_ComboBoxViewModel$get_menuTheme() {
        return this._menuTheme$1;
    },
    set_menuTheme: function tab_ComboBoxViewModel$set_menuTheme(value) {
        this._menuTheme$1 = value;
        return value;
    },
    
    get_formattingStyle: function tab_ComboBoxViewModel$get_formattingStyle() {
        return this._formattingStyle$1;
    },
    set_formattingStyle: function tab_ComboBoxViewModel$set_formattingStyle(value) {
        this._formattingStyle$1 = value;
        return value;
    },
    
    get_menuStyleClass: function tab_ComboBoxViewModel$get_menuStyleClass() {
        return this._menuStyleClass$1;
    },
    set_menuStyleClass: function tab_ComboBoxViewModel$set_menuStyleClass(value) {
        this._menuStyleClass$1 = value;
        return value;
    },
    
    get_items: function tab_ComboBoxViewModel$get_items() {
        return this._items$1;
    },
    
    get_selectedItem: function tab_ComboBoxViewModel$get_selectedItem() {
        return this._selectedItem$1;
    },
    set_selectedItem: function tab_ComboBoxViewModel$set_selectedItem(value) {
        if (this._selectedItem$1 === value) {
            return;
        }
        this._selectedItem$1 = value;
        if (ss.isValue(this.__selectedItemChanged$1)) {
            this.__selectedItemChanged$1(this._selectedItem$1);
        }
        return value;
    },
    
    get_summary: function tab_ComboBoxViewModel$get_summary() {
        return this._summary$1;
    },
    set_summary: function tab_ComboBoxViewModel$set_summary(value) {
        this._summary$1 = value;
        return value;
    },
    
    get_showSelectedItem: function tab_ComboBoxViewModel$get_showSelectedItem() {
        return this._showSelectedItem$1;
    },
    set_showSelectedItem: function tab_ComboBoxViewModel$set_showSelectedItem(value) {
        this._showSelectedItem$1 = value;
        return value;
    },
    
    get_showDropdownIcon: function tab_ComboBoxViewModel$get_showDropdownIcon() {
        return this._showDropdownIcon$1;
    },
    set_showDropdownIcon: function tab_ComboBoxViewModel$set_showDropdownIcon(value) {
        this._showDropdownIcon$1 = value;
        return value;
    },
    
    get_enabled: function tab_ComboBoxViewModel$get_enabled() {
        return this._enabled$1;
    },
    set_enabled: function tab_ComboBoxViewModel$set_enabled(value) {
        this._enabled$1 = value;
        return value;
    },
    
    dispose: function tab_ComboBoxViewModel$dispose() {
        if (ss.isValue(this._currentMenu$1)) {
            this._currentMenu$1.dispose();
        }
        tab.ComboBoxViewModel.callBaseMethod(this, 'dispose');
        this._currentMenu$1 = null;
    },
    
    setItems: function tab_ComboBoxViewModel$setItems(newItems) {
        this._items$1.clear();
        var $enum1 = ss.IEnumerator.getEnumerator(newItems);
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            this._items$1.add(item);
        }
        this._raiseItemsChanged$1();
    },
    
    addItem: function tab_ComboBoxViewModel$addItem(item) {
        this._items$1.add(item);
        this._raiseItemsChanged$1();
    },
    
    clearItems: function tab_ComboBoxViewModel$clearItems() {
        this._items$1.clear();
        this._raiseItemsChanged$1();
        this.set_selectedItem(null);
    },
    
    updateCurrentMenu: function tab_ComboBoxViewModel$updateCurrentMenu() {
        if (!this._items$1.length || !this._enabled$1 || !ss.isValue(this._currentMenu$1)) {
            return;
        }
        var menuItems = this._createMenuItems$1();
        this._currentMenu$1.set_menu(new spiff.Menu(menuItems.first));
        this._currentMenu$1.set_selectedItem(menuItems.second);
    },
    
    comboClicked: function tab_ComboBoxViewModel$comboClicked(relativeTo) {
        if (!this._items$1.length || !this._enabled$1) {
            return;
        }
        var menuItems = this._createMenuItems$1();
        this._currentMenu$1 = spiff.MenuViewModel.createForMenu(new spiff.Menu(menuItems.first), ss.Delegate.create(this, this._menuItemClicked$1), this._createMenuTheme$1());
        this._currentMenu$1.add_hidden(ss.Delegate.create(this, this._raiseMenuHidden$1));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this._currentMenu$1.remove_hidden(ss.Delegate.create(this, this._raiseMenuHidden$1));
        })));
        this._currentMenu$1.show(spiff.ShowMenuOptions.create(relativeTo, false, relativeTo.outerWidth(false)));
        this._currentMenu$1.set_selectedItem(menuItems.second);
        this._currentMenu$1.set_focusedItem(menuItems.second);
    },
    
    _createMenuItems$1: function tab_ComboBoxViewModel$_createMenuItems$1() {
        var menuItems = [];
        var selectedMenuItem = null;
        if (ss.isValue(this._items$1)) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._items$1);
            while ($enum1.moveNext()) {
                var i = $enum1.current;
                if (this._showSelectedItem$1 || i !== this._selectedItem$1) {
                    var mi = i.asMenuItem();
                    if (i === this._selectedItem$1) {
                        selectedMenuItem = mi;
                    }
                    menuItems.add(mi);
                }
            }
        }
        return new ss.Tuple(menuItems, selectedMenuItem);
    },
    
    _createMenuTheme$1: function tab_ComboBoxViewModel$_createMenuTheme$1() {
        switch (this._menuTheme$1) {
            case 0:
                return new tab.ComboBoxMenuTheme();
            case 1:
                return new tab.ComboBoxDropdownMenuTheme(this.get_menuStyleClass());
            default:
                return new tab.ComboBoxMenuTheme();
        }
    },
    
    _raiseMenuHidden$1: function tab_ComboBoxViewModel$_raiseMenuHidden$1() {
        if (ss.isValue(this.__menuHidden$1)) {
            this.__menuHidden$1();
        }
    },
    
    _raiseItemsChanged$1: function tab_ComboBoxViewModel$_raiseItemsChanged$1() {
        if (ss.isValue(this.__itemsChanged$1)) {
            this.__itemsChanged$1();
        }
    },
    
    _menuItemClicked$1: function tab_ComboBoxViewModel$_menuItemClicked$1(arg) {
        var ci = arg.get_data();
        tab.Log.get(this).debug('item selected: %o', ci);
        this.set_selectedItem(ci);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxItem

tab.ComboBoxItem = function tab_ComboBoxItem(iconClass, name, data, description) {
    this._iconClass = iconClass;
    this._name = name;
    this._data = data;
    this._description = description;
}
tab.ComboBoxItem.prototype = {
    _iconClass: null,
    _name: null,
    _data: null,
    _description: null,
    
    get_iconClass: function tab_ComboBoxItem$get_iconClass() {
        return this._iconClass;
    },
    
    get_name: function tab_ComboBoxItem$get_name() {
        return this._name;
    },
    
    get_data: function tab_ComboBoxItem$get_data() {
        return this._data;
    },
    
    get_description: function tab_ComboBoxItem$get_description() {
        return this._description;
    },
    
    asMenuItem: function tab_ComboBoxItem$asMenuItem() {
        return spiff.MenuItem.newItemWithIconAndDescription(this, this.get_name(), this.get_iconClass(), this.get_description());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CustomComboBoxItem

tab.CustomComboBoxItem = function tab_CustomComboBoxItem(domRoot, iconClass, name, data, description) {
    tab.CustomComboBoxItem.initializeBase(this, [ iconClass, name, data, description ]);
    this._domRoot$1 = domRoot;
}
tab.CustomComboBoxItem.prototype = {
    _domRoot$1: null,
    
    get_domRoot: function tab_CustomComboBoxItem$get_domRoot() {
        return this._domRoot$1;
    },
    
    asMenuItem: function tab_CustomComboBoxItem$asMenuItem() {
        return spiff.CustomMenuItem.newCustomMenuItem(this.get_domRoot());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxMenuTheme

tab.ComboBoxMenuTheme = function tab_ComboBoxMenuTheme() {
    tab.ComboBoxMenuTheme.initializeBase(this);
    this.itemClass = 'tabMenuItemComboTheme';
    this.menuClass = 'tabMenuComboTheme';
}


////////////////////////////////////////////////////////////////////////////////
// tab.ComboBoxDropdownMenuTheme

tab.ComboBoxDropdownMenuTheme = function tab_ComboBoxDropdownMenuTheme(extraMenuClass) {
    tab.ComboBoxDropdownMenuTheme.initializeBase(this);
    this.itemClass = 'tabMenuItemComboDropdownTheme tab-ctrl-formatted-text';
    this.menuClass = 'tabMenuComboDropdownTheme tab-ctrl-formatted-widget ' + extraMenuClass;
}


////////////////////////////////////////////////////////////////////////////////
// tab.AuthorByline

tab.AuthorByline = function tab_AuthorByline(repositoryUrl) {
    this._repositoryUrl = repositoryUrl;
    this.authorBylineElement = $('<div>').addClass('wcAuthorByline');
    this.authorBylineText = $('<span>');
    this.authorBylineElement.append(this.authorBylineText);
}
tab.AuthorByline.prototype = {
    authorBylineElement: null,
    authorBylineText: null,
    _repositoryUrl: null,
    
    get_element: function tab_AuthorByline$get_element() {
        return this.authorBylineElement;
    },
    
    displayAuthorByline: function tab_AuthorByline$displayAuthorByline(domWatermarkParentWidth) {
        var leftMargin = ((domWatermarkParentWidth - this.authorBylineElement.width()) / 2) + 'px';
        this.authorBylineElement.css('left', leftMargin);
        var profileLink = this._getAuthorProfileLink();
        var bylineText = String.format('<a target="_blank" href="{0}">{1}</a>', tableau.format.escapeHTML(profileLink), tableau.format.escapeHTML(tab.Strings.AuthorBylineText));
        this.authorBylineText.html(bylineText);
    },
    
    dispose: function tab_AuthorByline$dispose() {
        if (ss.isValue(this.authorBylineElement)) {
            this.authorBylineElement.remove();
        }
    },
    
    _getAuthorProfileLink: function tab_AuthorByline$_getAuthorProfileLink() {
        var location = window.location;
        return String.format('{0}//{1}/profile/app/rdr/repo?workbook={2}', location.protocol, location.hostname, this._repositoryUrl);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CategoricalFilter

tab.CategoricalFilter = function tab_CategoricalFilter(props) {
    this.attributes = {};
    tab.CategoricalFilter.initializeBase(this);
    this._categoricalSelectionBehavior$2 = new tab.CategoricalSelection(this);
}
tab.CategoricalFilter._domainChanged$2 = function tab_CategoricalFilter$_domainChanged$2(prevFilter, newFilter) {
    if (ss.isNullOrUndefined(prevFilter)) {
        return true;
    }
    var prevTuples = prevFilter.table.tuples;
    var newTuples = newFilter.table.tuples;
    if (prevTuples.length !== newTuples.length) {
        return true;
    }
    for (var i = 0, len = prevTuples.length; i < len; i++) {
        if (prevTuples[i].t[0].v !== newTuples[i].t[0].v) {
            return true;
        }
    }
    return false;
}
tab.CategoricalFilter._resetQFChangedFromEnabledToDisabled$2 = function tab_CategoricalFilter$_resetQFChangedFromEnabledToDisabled$2(prevFilter, newFilter) {
    if (ss.isNullOrUndefined(prevFilter)) {
        return true;
    }
    var prevResetDisabled = ss.isValue(prevFilter.all) && prevFilter.all;
    var newResetDisabled = ss.isValue(newFilter.all) && newFilter.all;
    return (prevResetDisabled !== newResetDisabled) && newResetDisabled;
}
tab.CategoricalFilter.prototype = {
    widgetsInTemplate: true,
    _categoricalSelectionBehavior$2: null,
    getContextMenuCommands: null,
    requestSetAttributes: null,
    session: null,
    field: '',
    filterViewModel: null,
    presModel: null,
    applyDelay: 1000,
    isTypeInList: false,
    domContent: null,
    domBox: null,
    searchDiv: null,
    resetButton: null,
    domainButton: null,
    menuButton: null,
    stateId: 0,
    _searchWidget$2: null,
    singleSelectMenuItem: null,
    multiSelectMenuItem: null,
    inclusiveMenuItem: null,
    exclusiveMenuItem: null,
    getSID: null,
    mode: null,
    metricsOnly: false,
    searchButton: null,
    domControls: null,
    titleH: 0,
    titleW: 0,
    width: 0,
    modeContents: null,
    domHorizScroll: null,
    conditionals: null,
    showContextMenu: null,
    _prevOFilter$2: null,
    
    get_domBox: function tab_CategoricalFilter$get_domBox() {
        return this.domBox;
    },
    
    get_resetButton: function tab_CategoricalFilter$get_resetButton() {
        return this.resetButton;
    },
    
    get_applyDelay: function tab_CategoricalFilter$get_applyDelay() {
        return this.applyDelay;
    },
    
    get_isTypeInList: function tab_CategoricalFilter$get_isTypeInList() {
        return this.isTypeInList;
    },
    
    get_oFilter: function tab_CategoricalFilter$get_oFilter() {
        return this.oFilter;
    },
    
    get_filterViewModel: function tab_CategoricalFilter$get_filterViewModel() {
        return this.filterViewModel;
    },
    
    get_viewModel: function tab_CategoricalFilter$get_viewModel() {
        return this.filterViewModel;
    },
    
    get_dijitDeclaredClass: function tab_CategoricalFilter$get_dijitDeclaredClass() {
        return this.declaredClass;
    },
    
    get_mode: function tab_CategoricalFilter$get_mode() {
        return this.mode;
    },
    set_mode: function tab_CategoricalFilter$set_mode(value) {
        this.mode = value;
        return value;
    },
    
    get_session: function tab_CategoricalFilter$get_session() {
        return this.session;
    },
    set_session: function tab_CategoricalFilter$set_session(value) {
        this.session = value;
        return value;
    },
    
    get_attributes: function tab_CategoricalFilter$get_attributes() {
        return this.attributes;
    },
    set_attributes: function tab_CategoricalFilter$set_attributes(value) {
        this.attributes = value;
        return value;
    },
    
    get_field: function tab_CategoricalFilter$get_field() {
        return this.field;
    },
    
    get_stateId: function tab_CategoricalFilter$get_stateId() {
        return this.stateId;
    },
    set_stateId: function tab_CategoricalFilter$set_stateId(value) {
        this.stateId = value;
        return value;
    },
    
    get_modeContents: function tab_CategoricalFilter$get_modeContents() {
        return this.modeContents;
    },
    
    get_domContent: function tab_CategoricalFilter$get_domContent() {
        return this.domContent;
    },
    set_domContent: function tab_CategoricalFilter$set_domContent(value) {
        this.domContent = value;
        return value;
    },
    
    get_dijitDomNode: function tab_CategoricalFilter$get_dijitDomNode() {
        return this.domNode;
    },
    set_dijitDomNode: function tab_CategoricalFilter$set_dijitDomNode(value) {
        this.domNode = value;
        return value;
    },
    
    get_domain: function tab_CategoricalFilter$get_domain() {
        var domain = null;
        if (!!this.get_attributes()['values']) {
            domain = this.get_attributes()['values'];
        }
        return domain;
    },
    
    get_searchWidget: function tab_CategoricalFilter$get_searchWidget() {
        return this._searchWidget$2;
    },
    set_searchWidget: function tab_CategoricalFilter$set_searchWidget(value) {
        this._searchWidget$2 = value;
        return value;
    },
    
    get_presModel: function tab_CategoricalFilter$get_presModel() {
        return this.presModel;
    },
    
    get_backgroundColor: function tab_CategoricalFilter$get_backgroundColor() {
        return this.backgroundColor;
    },
    
    get__prevOFilter$2: function tab_CategoricalFilter$get__prevOFilter$2() {
        return this._prevOFilter$2;
    },
    set__prevOFilter$2: function tab_CategoricalFilter$set__prevOFilter$2(value) {
        this._prevOFilter$2 = value;
        return value;
    },
    
    get_quickFilter: function tab_CategoricalFilter$get_quickFilter() {
        return this;
    },
    
    get_filterTable: function tab_CategoricalFilter$get_filterTable() {
        return this.get_filterViewModel().get_catFilterTable();
    },
    
    getCheckDropdownCatmodeClass: function tab_CategoricalFilter$getCheckDropdownCatmodeClass() {
        return tableau.base.widget.catmode.CheckDropdown;
    },
    
    getChecklistCatmodeClass: function tab_CategoricalFilter$getChecklistCatmodeClass() {
        return tableau.base.widget.catmode.Checklist;
    },
    
    getRadiolistCatmodeClass: function tab_CategoricalFilter$getRadiolistCatmodeClass() {
        return tableau.base.widget.catmode.Radiolist;
    },
    
    getSliderCatmodeClass: function tab_CategoricalFilter$getSliderCatmodeClass() {
        return tableau.base.widget.catmode.Slider;
    },
    
    getDropdownCatmodeClass: function tab_CategoricalFilter$getDropdownCatmodeClass() {
        return tableau.base.widget.catmode.SimpleDropdown;
    },
    
    getPatternCatmodeClass: function tab_CategoricalFilter$getPatternCatmodeClass() {
        return tableau.base.widget.catmode.Pattern;
    },
    
    getTypeInListCatmodeClass: function tab_CategoricalFilter$getTypeInListCatmodeClass() {
        return tableau.base.widget.catmode.TypeIn;
    },
    
    makeSmallSearchWidget: function tab_CategoricalFilter$makeSmallSearchWidget(props, hostDiv) {
        return new tableau.base.widget.SmallSearchWidget(props, hostDiv);
    },
    
    makeSearchWidget: function tab_CategoricalFilter$makeSearchWidget(props, hostDiv) {
        return new tableau.base.widget.SearchWidget(props, hostDiv);
    },
    
    makeFilteringSearchWidget: function tab_CategoricalFilter$makeFilteringSearchWidget(props) {
        return new tableau.base.widget.FilteringSearchWidget(props);
    },
    
    makePendingChangesManager: function tab_CategoricalFilter$makePendingChangesManager() {
        return new tab.PendingChangesManager(this.get_modeContents(), this.oFilter.table.actual_size, this.oFilter.exclude, this.oFilter.all);
    },
    
    postCreate: function tab_CategoricalFilter$postCreate() {
        this.getSID = ss.Delegate.create(this, function() {
            return this.get_stateId();
        });
        this._initMode$2();
        this._localize$2();
        if (this.mode !== 'pattern') {
            tableau.util.disableTextSelection(this.get_domContent());
        }
        if (this.filterViewModel.get_filterType() !== 'Categorical') {
            tab.Log.get(this).warn('Incompatible filter view model type for CategoricalFilter: %s', this.filterViewModel.get_filterType());
        }
        var thisQf = tab.$create_SearchWidgetQfProperty();
        thisQf.qf = this;
        if (this.mode === 'slider') {
            this.set_searchWidget(this.makeSmallSearchWidget(thisQf, this.searchDiv));
        }
        else if (this._usingFilteringSearchWidget$2()) {
            this.set_searchWidget(this.makeFilteringSearchWidget(thisQf));
        }
        else {
            this.set_searchWidget(this.makeSearchWidget(thisQf, this.searchDiv));
        }
        this.get_searchWidget().startup();
        if (!this.metricsOnly) {
            var hideSearchButton = (this.mode === 'checkdropdown' || this.mode === 'dropdown' || this.mode === 'pattern' || this.mode === 'typeinlist' || this.shouldHideSearchButton());
            var hideDomainButton = (this.mode === 'pattern' || this.mode === 'typeinlist' || this.shouldHideDomainButton());
            var hideResetButton = (this.mode === 'pattern' || this.mode === 'typeinlist' || this.shouldHideResetButton());
            this.processControlButtons(hideSearchButton, hideDomainButton, this.shouldHideContextMenu(), hideResetButton);
        }
        this.initFromState(true, false);
    },
    
    processControlButtons: function tab_CategoricalFilter$processControlButtons(hideSearchButton, hideDomainButton, hideMenuButton, hideResetButton) {
        var buttonCount = 0;
        var processButton = function(button, hide) {
            if (hide) {
                dojo.addClass(button.domNode, 'CFButtonHide');
            }
            else {
                buttonCount += 1;
                dojo.addClass(button.domNode, 'CFButtonR' + buttonCount);
            }
        };
        processButton(this.menuButton, hideMenuButton);
        processButton(this.domainButton, hideDomainButton);
        processButton(this.searchButton, hideSearchButton);
        processButton(this.resetButton, hideResetButton);
        dojo.addClass(this.domControls, 'CF' + buttonCount + 'Button');
        $(this.menuButton.domNode).css('background-color', this.backgroundColor);
        $(this.domainButton.domNode).css('background-color', this.backgroundColor);
        $(this.searchButton.domNode).css('background-color', this.backgroundColor);
        $(this.resetButton.domNode).css('background-color', this.backgroundColor);
    },
    
    setTitleSize: function tab_CategoricalFilter$setTitleSize(newH, newW) {
        this.titleH = newH;
        this.titleW = newW;
    },
    
    updateStateIfNeeded: function tab_CategoricalFilter$updateStateIfNeeded() {
        this.set_stateId(this.get_stateId() + 1);
    },
    
    handleClickIfPending: function tab_CategoricalFilter$handleClickIfPending(node) {
        if (this.shouldDeferChanges()) {
            this.get_modeContents().pendingManager.handleItemClicked(tableau.FilterItem.getIndex(node), node);
        }
    },
    
    shouldDeferChanges: function tab_CategoricalFilter$shouldDeferChanges() {
        var hasApplyFlag = this.get_attributes()['show-apply'] === 'true';
        return hasApplyFlag && (this.get_mode() === 'checklist' || this.get_mode() === 'checkdropdown');
    },
    
    shouldHideResetButton: function tab_CategoricalFilter$shouldHideResetButton() {
        return this.hideEmptyTitlebar() || this.get_attributes()['show-all'] === 'false' || this.get_attributes()['show-filter-state'] === 'false';
    },
    
    shouldHideSearchButton: function tab_CategoricalFilter$shouldHideSearchButton() {
        return this.hideEmptyTitlebar() || this.get_attributes()['show-search'] === 'false';
    },
    
    shouldHideIncludeExclude: function tab_CategoricalFilter$shouldHideIncludeExclude() {
        return this.hideEmptyTitlebar() || this.get_attributes()['show-exclude'] === 'false';
    },
    
    shouldHideDomainButton: function tab_CategoricalFilter$shouldHideDomainButton() {
        return this.hideEmptyTitlebar() || this.get_attributes()['show-morefewerbutton'] !== 'true';
    },
    
    shouldHideContextMenu: function tab_CategoricalFilter$shouldHideContextMenu() {
        var commands = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
        return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commands) || !commands.get_commandItems().length;
    },
    
    _isInlineTitle$2: function tab_CategoricalFilter$_isInlineTitle$2() {
        return dojo.hasClass(this.domNode, 'CFInlineTitle');
    },
    
    resize: function tab_CategoricalFilter$resize(marginBox) {
        dojo.marginBox(this.domNode, marginBox);
        this.layout();
    },
    
    destroy: function tab_CategoricalFilter$destroy(preserveDom) {
        if (ss.isValue(this.get_modeContents()) && (typeof(this.get_modeContents().destroy) === 'function')) {
            this.get_modeContents().destroy();
            this.modeContents = null;
        }
        if (ss.isValue(this.get_searchWidget())) {
            this.get_searchWidget().destroy();
            this.set_searchWidget(null);
        }
        this.requestSetAttributes = null;
        this.getContextMenuCommands = null;
        this.showContextMenu = null;
        this.get_domContent().innerHTML = '';
        this.domContent = null;
        this.inherited(arguments);
    },
    
    handleItemClick: function tab_CategoricalFilter$handleItemClick(node) {
        if (ss.isValue(this.get_modeContents().pendingManager)) {
            this.get_modeContents().pendingManager.handleItemClicked(tableau.FilterItem.getIndex(node), node);
        }
        if (tableau.FilterItem.isAllItem(node)) {
            this.doSelectAll(this.isSingleSelect() || tableau.FilterItem.isChecked(node));
            return;
        }
    },
    
    getMetrics: function tab_CategoricalFilter$getMetrics() {
        var oZoneSize = dojo.marginBox(this.domNode);
        var pad;
        if (!this._isCompactFilter$2()) {
            pad = 1;
            var oItems = dojo.contentBox(this.get_domContent());
            var numItems = this.get_domContent().childNodes.length;
            if (dojo.isFF && tab.BrowserSupport.get_isMac()) {
                pad += 4;
            }
            return { fixed: { w: 0, h: oZoneSize.h - oItems.h + pad }, item: { w: 0, h: oItems.h / numItems } };
        }
        else {
            return { fixed: { w: 0, h: oZoneSize.h } };
        }
    },
    
    _initMode$2: function tab_CategoricalFilter$_initMode$2() {
        this.mode = this.get_oFilter().mode || 'checklist';
        if (!String.isNullOrEmpty(this.get_oFilter().pattern)) {
            this.mode = 'pattern';
        }
        this.isTypeInList = (this.mode === 'typeinlist');
    },
    
    initFromState: function tab_CategoricalFilter$initFromState(suppressLayout, suppressSearchUpdate, fromClientSide) {
        var contentData;
        var i;
        var itemName;
        var fieldname = tableau.format.formatColumnDisplayName(this.get_oFilter(), false);
        var sum = 0;
        var facet = '';
        var showFacets = this.get_oFilter().showFacets && this.width > 100;
        var tuples;
        var scrollTop = 0;
        var scrollMax = 0;
        var isReInit = ss.isValue(this.get_modeContents()) && this._usingFilteringSearchWidget$2();
        if (ss.isValue(this.get_modeContents()) && ss.isValue(this.get_modeContents().get_scrollNode()) && this.get_modeContents().get_scrollNode().scrollTop > 0) {
            scrollTop = this.get_modeContents().get_scrollNode().scrollTop;
        }
        var hasPendingManager = ss.isValue(this.modeContents) && ss.isValue(this.get_modeContents().pendingManager);
        var pendingManagerOverridesAllState = hasPendingManager && ss.isValue(this.get_modeContents().pendingManager.get_allItemCheckState());
        var pendingAllState = hasPendingManager && (this.get_modeContents().pendingManager.get_allItemCheckState() || false);
        var allState = (pendingManagerOverridesAllState) ? pendingAllState : this.get_oFilter().all || this.get_oFilter().allNotChecked;
        var domNode = $(this.domNode);
        domNode.toggleClass('CFAll', allState);
        domNode.toggleClass('CFValue', !allState);
        if (this.get_oFilter().exclude) {
            dojo.addClass(this.domNode, 'CFExclusive');
        }
        else {
            dojo.removeClass(this.domNode, 'CFExclusive');
        }
        this.handleResetButtonState();
        this.updateDomainButton();
        if (ss.isValue(this.get_modeContents()) && this.get_modeContents().shouldNotReinstantiate()) {
            var domainChanged = tab.CategoricalFilter._domainChanged$2(this.get__prevOFilter$2(), this.get_oFilter());
            var exludeChanged = this.get__prevOFilter$2().exclude !== this.get_oFilter().exclude;
            var resetChanged = tab.CategoricalFilter._resetQFChangedFromEnabledToDisabled$2(this.get__prevOFilter$2(), this.get_oFilter());
            this.set__prevOFilter$2(this.get_oFilter());
            if ((ss.isValue(this.get_oFilter().domains) && this.get_oFilter().domains.contains('relevant') && domainChanged) || exludeChanged) {
                this.updateSearch();
            }
            else if (resetChanged) {
                if (this.get_searchWidget().get_isVisible()) {
                    this.get_searchWidget().toggleUI();
                }
            }
            return;
        }
        this.set__prevOFilter$2(this.get_oFilter());
        this._initMode$2();
        if (this.get_oFilter().exclude) {
            fieldname = tab.Strings.QuickFilterTitleBarExclusive(fieldname);
        }
        dojo.attr(this.domTitleBar, 'title', fieldname);
        this.updateTitleBar();
        if (!isReInit) {
            this.get_domContent().innerHTML = '';
        }
        itemName = tab.FilterItemUtil.getBaseItemName(this, 'FI');
        contentData = (this.mode === 'pattern') ? this.get_oFilter().pattern : this.get_oFilter().table.tuples;
        if (showFacets && (this.mode === 'slider' || this.mode === 'checklist' || this.mode === 'checkdropdown' || this.mode === 'radiolist' || this.mode === 'dropdown')) {
            tuples = this.get_oFilter().table.tuples;
            for (i = 0; i < tuples.length; i++) {
                sum += parseInt(tuples[i].f[0].v, 10);
            }
            facet = sum.toString();
        }
        if (isReInit) {
            if (!fromClientSide && ss.isValue(this.modeContents.pendingManager)) {
                this.get_modeContents().pendingManager.resetFilterInfo(this.get_oFilter().table.actual_size, this.get_oFilter().exclude, this.get_oFilter().all);
                this.get_modeContents().pendingManager.resetPendingChanges();
            }
            this.get_modeContents().resetContent(contentData, itemName, facet);
        }
        else {
            if (ss.isValue(this.get_modeContents()) && (typeof(this.get_modeContents().destroy) === 'function')) {
                this.get_modeContents().destroy();
                this.modeContents = null;
            }
            this._instantiateContent$2();
            this.get_modeContents().set_width(this.width);
            this.get_modeContents().instantiate(contentData, itemName, facet);
        }
        this._categoricalSelectionBehavior$2.refreshRangeAnchorAndSelection();
        this.conditionals.init(this.get_oFilter().condition, this.get_oFilter().limit);
        if (!suppressLayout) {
            this.layout();
        }
        if ((!suppressSearchUpdate & !this._usingFilteringSearchWidget$2()) === 1) {
            this.updateSearch();
        }
        if (ss.isValue(this.get_modeContents()) && ss.isValue(this.get_modeContents().get_scrollNode())) {
            scrollMax = this.get_modeContents().get_scrollNode().scrollHeight - this.get_modeContents().get_scrollNode().clientHeight;
            this.get_modeContents().get_scrollNode().scrollTop = Math.min(scrollTop, scrollMax);
        }
    },
    
    handleResetButtonState: function tab_CategoricalFilter$handleResetButtonState() {
        if (ss.isValue(this.get_oFilter().all) && this.get_oFilter().all) {
            tab.QfButtonUtil.disableResetButton(this.get_resetButton());
        }
        else {
            tab.QfButtonUtil.enableResetButton(this.get_resetButton());
        }
    },
    
    _baseInstantiateContent$2: function tab_CategoricalFilter$_baseInstantiateContent$2() {
        var filterClass = null;
        if (this.mode === 'checkdropdown') {
            filterClass = this.getCheckDropdownCatmodeClass();
        }
        else if (this.mode === 'checklist') {
            filterClass = this.getChecklistCatmodeClass();
        }
        else if (this.mode === 'radiolist') {
            filterClass = this.getRadiolistCatmodeClass();
        }
        else if (this.mode === 'slider') {
            filterClass = this.getSliderCatmodeClass();
        }
        else if (this.mode === 'dropdown') {
            filterClass = this.getDropdownCatmodeClass();
        }
        else if (this.mode === 'pattern') {
            filterClass = this.getPatternCatmodeClass();
        }
        else if (this.mode === 'typeinlist') {
            filterClass = this.getTypeInListCatmodeClass();
        }
        if (filterClass == null) {
            return;
        }
        this.modeContents = new filterClass(this, this.get_domContent(), this.get_attributes());
    },
    
    _instantiateContent$2: function tab_CategoricalFilter$_instantiateContent$2() {
        this._baseInstantiateContent$2();
    },
    
    updateSearch: function tab_CategoricalFilter$updateSearch() {
        this.get_searchWidget().updateSearch();
    },
    
    applyChanges: function tab_CategoricalFilter$applyChanges() {
        this.get_modeContents().applyChanges();
    },
    
    applyChangesByChangelist: function tab_CategoricalFilter$applyChangesByChangelist(changelist) {
        if (this.shouldDeferChanges()) {
            this.get_modeContents().pendingManager.processChanges(changelist);
            if (ss.isValue(this.get_modeContents().pendingManager.get_allItemCheckState())) {
                if (this.get_modeContents().pendingManager.get_allItemCheckState()) {
                    dojo.addClass(this.domNode, 'CFAll');
                }
                else {
                    dojo.removeClass(this.domNode, 'CFAll');
                }
            }
        }
        else {
            this.get_modeContents().applyChangesByChangelist(changelist, this.mode);
        }
    },
    
    applyPendingChangesByChangelist: function tab_CategoricalFilter$applyPendingChangesByChangelist() {
        if (this.get_modeContents().pendingManager.isSelectAll()) {
            this._applyDoSelectAll$2(true);
        }
        else if (this.get_modeContents().pendingManager.isDeSelectAll()) {
            this._applyDoSelectAll$2(false);
        }
        else {
            var pending = this.get_modeContents().pendingManager.get_pendingChangelist();
            this.get_modeContents().applyChangesByChangelist(pending, this.mode);
        }
        this.get_modeContents().pendingManager.resetPendingChanges();
    },
    
    cancelPendingChangesByChangelist: function tab_CategoricalFilter$cancelPendingChangesByChangelist() {
        this.get_modeContents().pendingManager.resetPendingChanges();
        this.initFromState(false, true, true);
    },
    
    _usingFilteringSearchWidget$2: function tab_CategoricalFilter$_usingFilteringSearchWidget$2() {
        return this.mode === 'checklist' || this.mode === 'radiolist' || this.mode === 'checkdropdown' || this.mode === 'dropdown';
    },
    
    filterBySearchResults: function tab_CategoricalFilter$filterBySearchResults(data) {
        if (data == null) {
            this.initFromState(false, true, true);
        }
        else if (this._usingFilteringSearchWidget$2()) {
            this.modeContents.updateContent(data);
            this._categoricalSelectionBehavior$2.clearRangeAnchor();
        }
    },
    
    updateStateFromSearch: function tab_CategoricalFilter$updateStateFromSearch(changed) {
        var suppressLayout = false;
        var suppressSearchUpdate = this.get_isTypeInList();
        if (this.get_isTypeInList()) {
            this._updateTypeInListStateFromSearch$2(changed);
        }
        this.initFromState(suppressLayout, suppressSearchUpdate);
    },
    
    _updateTypeInListStateFromSearch$2: function tab_CategoricalFilter$_updateTypeInListStateFromSearch$2(changed) {
        var contentItem;
        var contentItems = {};
        var i;
        var item;
        var searchResults;
        var tuple;
        var tuples = this.get_oFilter().table.tuples;
        for (i = 0; i < tuples.length; i++) {
            item = tab.$create_CatFilterContentItem();
            item.node = this.fetchChildNodeByIndex(i);
            item.tuple = tuples[i];
            contentItems[tuples[i].d || tuples[i].t[0].v] = item;
        }
        for (i = 0; i < changed.tuples.length; i++) {
            tuple = changed.tuples[i];
            contentItem = contentItems[tuple.d || tuple.t[0].v];
            if (ss.isValue(contentItem) && ss.isValue(contentItem.node)) {
                tableau.FilterItem.setChecked(contentItem.node, tuple.s, contentItem.tuple);
            }
            else {
                searchResults = tableau.util.binarySearch(tuple, tuples, 0, null, ss.Delegate.create(this, this._tupleDisplayNameComparer$2));
                if (!searchResults.found) {
                    tuples.splice(searchResults.index, 0, tuple);
                }
            }
        }
    },
    
    _tupleDisplayNameComparer$2: function tab_CategoricalFilter$_tupleDisplayNameComparer$2(tuple1, tuple2) {
        var dname1 = tableau.format.formatTupleDisplayName(tuple1);
        var dname2 = tableau.format.formatTupleDisplayName(tuple2);
        if (dname1 === dname2) {
            return 0;
        }
        else if (String.compare(dname1, dname2) < 0) {
            return -1;
        }
        else {
            return 1;
        }
    },
    
    fetchChildNodeByIndex: function tab_CategoricalFilter$fetchChildNodeByIndex(index) {
        return this.get_modeContents().fetchChildNodeByIndex(index);
    },
    
    isSingleSelect: function tab_CategoricalFilter$isSingleSelect() {
        return this.mode !== 'checklist' && this.mode !== 'checkdropdown' && this.mode !== 'typeinlist';
    },
    
    updateDomainButton: function tab_CategoricalFilter$updateDomainButton() {
        if (ss.isNullOrUndefined(this.get_oFilter().domains) || this.get_oFilter().domains.length <= 1) {
            dojo.style(this.domainButton.domNode, 'display', 'none');
            return;
        }
        dojo.removeClass(this.domainButton.iconNode, 'wcIconDomainAll');
        dojo.removeClass(this.domainButton.iconNode, 'wcIconDomainContext');
        dojo.removeClass(this.domainButton.iconNode, 'wcIconDomainRelevant');
        if (this.get_attributes()['values'] === tableau.types.QFDomain.QFD_RELEVANT) {
            this.domainButton.attr('label', tab.Strings.QuickFilterDomainShowMoreValues);
            dojo.addClass(this.domainButton.iconNode, 'wcIconDomainRelevant');
        }
        else if (this.get_attributes()['values'] === tableau.types.QFDomain.QFD_CONTEXT) {
            this.domainButton.attr('label', tab.Strings.QuickFilterDomainShowFewerValues);
            dojo.addClass(this.domainButton.iconNode, 'wcIconDomainContext');
        }
        else {
            this.domainButton.attr('label', tab.Strings.QuickFilterDomainShowFewerValues);
            dojo.addClass(this.domainButton.iconNode, 'wcIconDomainAll');
        }
    },
    
    doMenu: function tab_CategoricalFilter$doMenu() {
        this.showContextMenu(this.menuButton.domNode);
    },
    
    toggleReset: function tab_CategoricalFilter$toggleReset() {
        tab.QfButtonUtil.disableResetButton(this.resetButton);
        this.doSelectAll(true, true);
    },
    
    toggleDomain: function tab_CategoricalFilter$toggleDomain() {
        var isContext = function(item) {
            return item === tableau.types.QFDomain.QFD_CONTEXT;
        };
        if (this.get_attributes()['values'] === tableau.types.QFDomain.QFD_RELEVANT) {
            this._doRequestSetAttributes$2({ values: tableau.types.QFDomain.QFD_ALL }, false);
        }
        else if (this.get_attributes()['values'] === tableau.types.QFDomain.QFD_CONTEXT) {
            this._doRequestSetAttributes$2({ values: tableau.types.QFDomain.QFD_RELEVANT }, false);
        }
        else if (dojo.some(this.get_oFilter().domains, isContext)) {
            this._doRequestSetAttributes$2({ values: tableau.types.QFDomain.QFD_CONTEXT }, false);
        }
        else {
            this._doRequestSetAttributes$2({ values: tableau.types.QFDomain.QFD_RELEVANT }, false);
        }
    },
    
    getTheAllItemNode: function tab_CategoricalFilter$getTheAllItemNode() {
        return this.get_modeContents().fetchAllItem();
    },
    
    doSelectAll: function tab_CategoricalFilter$doSelectAll(turnOn, forceApply) {
        if (this.shouldDeferChanges()) {
            this.get_modeContents().pendingManager.processAll(turnOn);
            if (turnOn) {
                dojo.addClass(this.domNode, 'CFAll');
            }
            else {
                dojo.removeClass(this.domNode, 'CFAll');
            }
            if (forceApply) {
                this.applyPendingChangesByChangelist();
            }
        }
        else {
            this._applyDoSelectAll$2(turnOn);
        }
    },
    
    _applyDoSelectAll$2: function tab_CategoricalFilter$_applyDoSelectAll$2(turnOn) {
        var i, len;
        var currentState;
        var item;
        var filterData;
        var aliases = [];
        if (this.mode === 'checklist' || this.mode === 'checkdropdown') {
            if ($(this.get_domContent()).find('.tiledContent').length > 0) {
                len = this.get_oFilter().table.actual_size;
                var checkstate = (this.get_oFilter().exclude) ? !turnOn : turnOn;
                for (i = 0; i < len; ++i) {
                    item = this.fetchChildNodeByIndex(i);
                    if (ss.isValue(item)) {
                        tableau.FilterItem.setChecked(item, checkstate);
                    }
                }
            }
        }
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            filterData = new tab.CategoricalFilterData(this.get_oFilter().targetSheets, this.get_field(), this.get_oFilter().exclude, null);
            if (turnOn) {
                filterData.set_includeAll(true);
            }
            tab.FilterClientCommands.updateCategoricalFilter(filterData);
        }
        if (turnOn) {
            tab.FilterClientCommands.setCategoricalFilterValues(this.get_session().get_visualId(), this.get_field(), 'filter-all', null);
        }
        else if (this.mode === 'checklist' || this.mode === 'checkdropdown') {
            tab.QfButtonUtil.enableResetButton(this.resetButton);
            currentState = {};
            currentState.schema = this.get_oFilter().table.schema;
            currentState.tuples = new Array(0);
            if (this.get_oFilter().exclude) {
                this._doTiledSelectExcludeAllOff$2();
                return;
            }
            tab.FilterClientCommands.setCategoricalFilterValues(this.get_session().get_visualId(), this.get_field(), 'filter-replace', aliases);
        }
    },
    
    _doTiledSelectExcludeAllOff$2: function tab_CategoricalFilter$_doTiledSelectExcludeAllOff$2() {
        var item;
        var i, from = 0, to = this.get_oFilter().table.actual_size - 1;
        var changelist = new tab.Changelist();
        var change = new tab.RawChange();
        if ($(this.get_domContent()).find('.tiledContent').length > 0) {
            for (i = from; i <= to; i++) {
                item = this.get_modeContents().fetchChildNodeByIndex(i);
                if (ss.isValue(item)) {
                    tableau.FilterItem.setChecked(item, true);
                }
            }
        }
        change.setRange(new tab.IntegerRange(from, to), true);
        changelist.addChange(change);
        this.get_modeContents().applyChangesByChangelist(changelist, this.mode);
    },
    
    toggleSearchUI: function tab_CategoricalFilter$toggleSearchUI() {
        this.get_searchWidget().toggleUI();
    },
    
    _doRequestSetAttributes$2: function tab_CategoricalFilter$_doRequestSetAttributes$2(attrs, suppressEvent) {
        this.requestSetAttributes(attrs, suppressEvent);
    },
    
    doscrollHoriz: function tab_CategoricalFilter$doscrollHoriz() {
        this.get_domContent().scrollLeft = this.domHorizScroll.scrollLeft;
    },
    
    _isCompactFilter$2: function tab_CategoricalFilter$_isCompactFilter$2() {
        return this.mode === 'slider' || this.mode === 'dropdown' || this.mode === 'checkdropdown' || this.mode === 'pattern';
    },
    
    getTitleOffset: function tab_CategoricalFilter$getTitleOffset() {
        if (dojo.hasClass(this.domNode, 'CFInlineTitle')) {
            return 0;
        }
        else {
            return dojo.marginBox(this.domTitleBar).h;
        }
    },
    
    _getSearchWidgetDim: function tab_CategoricalFilter$_getSearchWidgetDim() {
        var s = this.get_searchWidget().get_dijitDomNode();
        if (dojo.style(s, 'display') === 'none' || this._usingFilteringSearchWidget$2()) {
            var toRet = tab.$create_DojoCoords();
            toRet.h = 0;
            toRet.l = 0;
            toRet.t = 0;
            toRet.w = 0;
            return toRet;
        }
        else {
            return dojo.marginBox(s);
        }
    },
    
    layoutVertical: function tab_CategoricalFilter$layoutVertical(notTitleSize) {
        var contentHeight;
        var oConditionals = { h: 0 };
        var oSearch = { h: 0 };
        this._layoutSearchWidget(notTitleSize);
        oSearch = this._getSearchWidgetDim();
        contentHeight = notTitleSize.h - oConditionals.h - oSearch.h;
        this.get_modeContents().layout(tab.$create_Size(notTitleSize.w, contentHeight), false);
    },
    
    _getContentFloatingElement: function tab_CategoricalFilter$_getContentFloatingElement() {
        return (this.get_isTypeInList()) ? this.get_searchWidget().get_dijitDomNode() : this.get_domContent();
    },
    
    _layoutSearchWidget: function tab_CategoricalFilter$_layoutSearchWidget(notTitleSize) {
        var listHeight;
        var oConditionals;
        if (this.get_searchWidget().get_isVisible()) {
            oConditionals = { h: 0 };
            listHeight = notTitleSize.h - oConditionals['h'];
            this.get_searchWidget().layout(listHeight);
        }
    },
    
    _layoutTypeInList: function tab_CategoricalFilter$_layoutTypeInList(notTitleSize) {
        if (this._isInlineTitle$2()) {
            dojo.marginBox(this.get_searchWidget().get_dijitDomNode(), notTitleSize);
        }
        else {
            dojo.style(this.get_searchWidget().get_dijitDomNode(), { width: 'auto', height: 'auto' });
        }
        this.layoutVertical(notTitleSize);
    },
    
    _layoutCompactFilter: function tab_CategoricalFilter$_layoutCompactFilter(notTitleSize) {
        dojo.addClass(this.domNode, 'CFHorizontal');
        this._layoutSearchWidget(notTitleSize);
        this.get_modeContents().layout(tab.$create_Size(notTitleSize.w, notTitleSize.h), false);
    },
    
    layout: function tab_CategoricalFilter$layout() {
        var contentFloatingElem;
        var oTitleBar, oZoneSize;
        var notTitleSize;
        this.updateTitleBar();
        if (ss.isNullOrUndefined(this.domNode.parentNode)) {
            return;
        }
        dojo.removeClass(this.domNode, 'CFHorizontal');
        dojo.removeClass(this.domNode, 'CFInlineTitle');
        dojo.style(this.domHorizScroll, 'display', 'none');
        oTitleBar = dojo.marginBox(this.domTitleBar);
        this.resetTitleSize();
        if (this.titleH > 0) {
            oTitleBar.h = this.titleH;
            dojo.marginBox(this.domTitleBar, { h: oTitleBar.h });
        }
        if (this.titleW > 0) {
            oTitleBar.w = this.titleW;
            dojo.marginBox(this.domTitleBar, { w: oTitleBar.w });
        }
        tableau.util.setupTitleEllipsis($(this.domTitleBar));
        oZoneSize = dojo.contentBox(this.domNode);
        notTitleSize = tab.$create_Size(oZoneSize.w, oZoneSize.h);
        if (!this.metricsOnly) {
            if (!this.hideEmptyTitlebar()) {
                contentFloatingElem = this._getContentFloatingElement();
                if (this.titleW > 0) {
                    notTitleSize.w = oZoneSize.w - oTitleBar.w;
                    dojo.style(this.domTitleBar, 'float', 'left');
                    dojo.style(contentFloatingElem, 'float', 'left');
                    dojo.addClass(this.domNode, 'CFInlineTitle');
                }
                else {
                    notTitleSize.h = oZoneSize.h - oTitleBar.h;
                    dojo.style(this.domTitleBar, 'float', 'none');
                    dojo.style(contentFloatingElem, 'float', 'none');
                }
            }
        }
        if (this._isCompactFilter$2()) {
            this._layoutCompactFilter(notTitleSize);
        }
        else {
            if (this.get_isTypeInList()) {
                this._layoutTypeInList(notTitleSize);
            }
            else {
                this.layoutVertical(notTitleSize);
            }
        }
    },
    
    _localize$2: function tab_CategoricalFilter$_localize$2() {
        tableau.util.localizeDojoLabeledControls([ new ss.Tuple(this.searchButton, 'QuickFilterSearch'), new ss.Tuple(this.domainButton, 'QuickFilterDomainShowFewerValues') ]);
    },
    
    clearRangeAnchorAndSelection: function tab_CategoricalFilter$clearRangeAnchorAndSelection() {
        this._categoricalSelectionBehavior$2.clearRangeAnchorAndSelection();
    },
    
    forEachSelected: function tab_CategoricalFilter$forEachSelected(itemCallback) {
        if (ss.isNullOrUndefined(itemCallback) || $.isFunction(itemCallback)) {
            return;
        }
        var selectedIndexes = this._categoricalSelectionBehavior$2.get_selectedIndexes();
        for (var i = 0, length = selectedIndexes.length; i < length; i++) {
            var index = selectedIndexes[i];
            var node = this.fetchChildNodeByIndex(index);
            itemCallback(index, node);
        }
    },
    
    onListItemClick: function tab_CategoricalFilter$onListItemClick(evt) {
        this._categoricalSelectionBehavior$2.onListItemClick(evt);
    },
    
    notifyChange: function tab_CategoricalFilter$notifyChange(callback) {
        this._categoricalSelectionBehavior$2.notifyChange(callback);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.BaseDropdown

tab.BaseDropdown = function tab_BaseDropdown(parent, div, attrs) {
    tab.BaseDropdown.initializeBase(this, [ parent, div, attrs ]);
    if (parent.get_searchWidget().get_dijitClassName().indexOf('FilteringSearchWidget') < 0) {
        tab.Log.get(this).error('Dropdown catmode Categorical search widget must be a FilteringSearchWidget');
    }
    this.searchBox = parent.get_searchWidget();
    this.searchBox.setStyle(1);
    this._formattingApplied$2 = false;
}
tab.BaseDropdown.prototype = {
    dropdown: null,
    menuNode: null,
    glass: null,
    dropdownLabelContainer: null,
    fillListElement: null,
    searchBox: null,
    currentlySelected: 0,
    multimode: false,
    _showMenuAbove$2: false,
    _formattingApplied$2: false,
    
    get_scrollNode: function tab_BaseDropdown$get_scrollNode() {
        var retVal = null;
        if (ss.isValue(this.menuNode)) {
            retVal = this.menuNode.children('.CFInnerContainer').get(0);
        }
        return retVal;
    },
    
    instantiate: function tab_BaseDropdown$instantiate(tuples, itemName, facet) {
        this.fillListElement = ss.Delegate.create(this, function(listElement) {
            this.createListElement(listElement, tuples, itemName, facet);
        });
        this.dropdown = $('<span>').addClass('tabComboBox').addClass('tab-ctrl-formatted-widget').addClass('tab-ctrl-formatted-darker-border-hover').addClass('tabComboStdTheme').addClass('tabComboBoxNoIcon').addClass('tiledContent').bind('click', ss.Delegate.create(this, this.onDropdownClicked));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.dropdown.remove();
        })));
        this.dropdownLabelContainer = $('<div>').addClass('tabComboBoxNameContainer').addClass('tab-ctrl-formatted-fixedsize').appendTo(this.dropdown);
        $('<span>').addClass('tabComboBoxName').text(this.getLabelText(tuples)).appendTo(this.dropdownLabelContainer);
        $('<span>').addClass('tabComboBoxButton').appendTo(this.dropdown);
        this.div.appendChild(this.dropdown.get(0));
        if (ss.isValue(this.menuNode)) {
            this.menuNode.children('.tiledContent').remove();
            this.fillMenu(this.menuNode);
        }
        this._resetSearchBox$2(tuples.length);
    },
    
    updateContent: function tab_BaseDropdown$updateContent(data) {
        if (tab.BrowserSupport.get_isIE()) {
            this.menuNode.css('box-shadow', 'none');
        }
        var results = (data.length > 0) ? data.join('') : this.searchBox.get_noMatchHtml();
        var jqueryDiv = this.menuNode.children('.tiledContent');
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
            this.tiledWidget = null;
        }
        jqueryDiv.html(results);
        if (this._showMenuAbove$2) {
            var offset = this.dropdown.offset();
            this.menuNode.css('top', (offset.top - this.menuNode.outerHeight()) + 'px');
        }
        if (tab.BrowserSupport.get_isIE()) {
            this.menuNode.css('box-shadow', '2px 2px 2px #adadad');
        }
    },
    
    resetContent: function tab_BaseDropdown$resetContent(tuples, itemName, facet) {
        this.fillListElement = ss.Delegate.create(this, function(listElement) {
            this.createListElement(listElement, tuples, itemName, facet);
        });
        if (ss.isValue(this.menuNode)) {
            this._updateFilterStateClasses$2(this.menuNode);
            var menuTopLeft = this._getMenuTopLeft$2();
            this.menuNode.css({ top: menuTopLeft.y + 'px', left: menuTopLeft.x + 'px' });
        }
        this.dropdownLabelContainer.children().text(this.getLabelText(tuples));
        if (ss.isValue(this.searchBox) && this.searchBox.isShowingResults()) {
            return;
        }
        if (ss.isValue(this.menuNode)) {
            tab.BrowserViewport.getViewport(ss.Delegate.create(this, function(viewport) {
                if (ss.isValue(this.tiledWidget)) {
                    this.tiledWidget.destroy();
                    this.tiledWidget = null;
                }
                if (ss.isValue(this.menuNode)) {
                    this.menuNode.children().remove();
                    this._fillAndStyleMenu$2(viewport, this.menuNode);
                }
            }));
        }
        this._resetSearchBox$2(tuples.length);
    },
    
    _resetSearchBox$2: function tab_BaseDropdown$_resetSearchBox$2(tupleLength) {
        var allItemLength = (this.shouldUseAllItem()) ? 1 : 0;
        if (tupleLength + allItemLength <= 5) {
            this.searchBox.hideUI();
        }
        else {
            this.searchBox.showUI();
        }
    },
    
    shouldNotReinstantiate: function tab_BaseDropdown$shouldNotReinstantiate() {
        return false;
    },
    
    layout: function tab_BaseDropdown$layout(contentSize, horizontalLayout) {
        this.inherited(arguments);
        var marginBox = dojo.marginBox(this.div);
        var divw = marginBox.w;
        if (divw > 8) {
            $(this.div.firstChild).css({ width: (divw - 8) + 'px', 'margin-left': '3px' });
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.updateViewport(contentSize.w, contentSize.h);
        }
    },
    
    destroy: function tab_BaseDropdown$destroy() {
        this.dispose();
        this.removeGlass();
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = null;
    },
    
    fetchAllItem: function tab_BaseDropdown$fetchAllItem() {
        if (!this.shouldUseAllItem()) {
            return null;
        }
        else {
            return this.menuNode.children('.CFInnerContainer').children('.FIItem').get(0);
        }
    },
    
    fetchChildNodeByIndex: function tab_BaseDropdown$fetchChildNodeByIndex(index) {
        if (ss.isValue(this.tiledWidget)) {
            return this.tiledWidget.getElement(index);
        }
        else {
            return null;
        }
    },
    
    getLabelText: function tab_BaseDropdown$getLabelText(tuples) {
        var isAll = tab.FilterItemUtil.isAllOrAllChecked(this.parent);
        this.currentlySelected = -1;
        this.multimode = false;
        var len = tuples.length;
        if (!len) {
            if (!isAll) {
                tab.Log.get(this).warn("Tuple array length is 0, but we're not in ALL mode.");
            }
            return tab.Strings.QuickFilterAll;
        }
        for (var i = 0; i < len; i++) {
            if (tuples[i].s && !isAll) {
                if (this.currentlySelected > -1) {
                    this.multimode = true;
                    break;
                }
                this.currentlySelected = i;
            }
        }
        if (isAll && (len > 1)) {
            return tab.Strings.QuickFilterAll;
        }
        else if (this.multimode) {
            return tab.Strings.QuickFilterMultipleValues;
        }
        else if (this.currentlySelected === -1 && this.hasSummaryText()) {
            return this.getSummaryText();
        }
        else {
            var itemIndex = (this.currentlySelected > -1) ? this.currentlySelected : 0;
            return tableau.format.formatTupleDisplayName(tuples[itemIndex] || '', true, this.parent.get_oFilter().role);
        }
    },
    
    onDropdownClicked: function tab_BaseDropdown$onDropdownClicked(e) {
        tab.BrowserViewport.getViewport(ss.Delegate.create(this, this._showMenu$2));
    },
    
    _showMenu$2: function tab_BaseDropdown$_showMenu$2(viewport) {
        if (this._menuIsShowing$2()) {
            return;
        }
        var body = document.body;
        this.removeGlass();
        this.glass = new spiff.Glass();
        this.glass.add_click(ss.Delegate.create(this, this.hideMenu));
        this.glass.set_zIndex(899);
        this.glass.show();
        var menuTopLeft = this._getMenuTopLeft$2();
        this.menuNode = $('<div>').attr('id', this.parent.id + '_menu').addClass('CFOuterContainer').addClass('tabMenuComboDropdownTheme').addClass('tab-ctrl-formatted-widget').css({ position: 'absolute', top: menuTopLeft.y + 'px', left: menuTopLeft.x + 'px', 'max-height': (30 * this.get_lineHeight()) + 'px', 'z-index': 900, visibility: 'hidden' }).appendTo(body);
        if (!this._formattingApplied$2) {
            tab.WidgetStyle.applyFormatting(this.menuNode.get(0), this.parent.get_presModel().textStyle, this.parent.get_backgroundColor(), this.get_lineHeight());
            this._formattingApplied$2 = true;
        }
        this.searchBox.startupNoAppend();
        this._updateFilterStateClasses$2(this.menuNode);
        this._fillAndStyleMenu$2(viewport, this.menuNode);
        dojo.toggleClass(this.menuNode.get(0), 'QFDropdownMenuAbove', this._showMenuAbove$2);
    },
    
    removeGlass: function tab_BaseDropdown$removeGlass() {
        if (ss.isValue(this.glass)) {
            this.glass.remove_click(ss.Delegate.create(this, this.hideMenu));
            this.glass.dispose();
            this.glass = null;
        }
    },
    
    hideMenu: function tab_BaseDropdown$hideMenu() {
        this.searchBox.clearSearch();
        this.removeGlass();
        if (ss.isValue(this.menuNode)) {
            this.menuNode.remove();
            this.menuNode = null;
        }
    },
    
    _menuIsShowing$2: function tab_BaseDropdown$_menuIsShowing$2() {
        return ss.isValue(this.menuNode) || ss.isValue(this.glass);
    },
    
    _getMenuTopLeft$2: function tab_BaseDropdown$_getMenuTopLeft$2() {
        var offset = this.dropdown.offset();
        var height = this.dropdown.outerHeight();
        return tab.$create_Point(offset.left, offset.top + height - 1);
    },
    
    _fillAndStyleMenu$2: function tab_BaseDropdown$_fillAndStyleMenu$2(viewport, menu) {
        if (ss.isNullOrUndefined(menu)) {
            return;
        }
        this.fillMenu(menu);
        this._showMenuAbove$2 = this._shouldShowMenuAbove$2(viewport, menu);
        if (this._showMenuAbove$2) {
            $(this.searchBox.domNode).appendTo(menu);
        }
        else {
            $(this.searchBox.domNode).insertBefore(menu.children().first());
        }
        this._styleMenu$2(viewport, menu);
        if (this.searchBox.get_isVisible()) {
            this.searchBox.showUI();
        }
    },
    
    _styleMenu$2: function tab_BaseDropdown$_styleMenu$2(viewport, menu) {
        var offset = this.dropdown.offset();
        var width = this.dropdown.outerWidth();
        var body = document.body;
        var tile0 = menu.find('.tile').eq(0);
        var oldRight = tile0.css('right');
        var oldWidth = (ss.isValue(tile0[0])) ? tile0[0].style.width : '';
        tile0.css('right', 'auto');
        tile0.css('width', '');
        var w = tile0.width() + 20;
        tile0.css('right', oldRight);
        tile0.css('width', oldWidth);
        w = Math.max(w, width);
        var bodywidth = $(body).width();
        w = Math.min(w, bodywidth);
        menu.width(w);
        var menuoffset = menu.offset();
        var menuright = menuoffset.left + menu.outerWidth();
        var vizContainer = $(body).find('.dashboardSpacer');
        var vizoffset = vizContainer.offset();
        var vizright = vizoffset.left + vizContainer.width();
        var excessright = menuright - vizright;
        if (excessright > 0) {
            var l = menuoffset.left - excessright;
            l = Math.max(l, 0);
            menu.css('left', l + 'px');
        }
        var maxMenuHeight = 30 * this.get_lineHeight();
        var minMenuHeight = 3 * this.get_lineHeight();
        var visibleRoom = viewport.getVisibleRoom(tab.PointUtil.fromPosition(offset));
        var maxheight = ((this._showMenuAbove$2) ? visibleRoom.roomAbove : visibleRoom.roomBelow - 2) - 20;
        maxheight = maxheight - parseInt(menu.css('border-bottom-width'));
        maxheight = Math.min(maxheight, maxMenuHeight);
        maxheight = Math.max(maxheight, minMenuHeight);
        menu.css('max-height', maxheight + 'px');
        if (this._showMenuAbove$2) {
            if (visibleRoom.roomAbove > (maxheight - 1)) {
                menu.css('top', (offset.top - menu.outerHeight()) + 'px');
            }
            else {
                menu.css('top', (offset.top - visibleRoom.roomAbove) + 'px');
            }
        }
        var searchHeight = (ss.isValue(this.searchBox) && this.searchBox.get_isVisible()) ? dojo.marginBox(this.searchBox.domNode).h : 0;
        var applyHeight = 0;
        var innerContainer = menu.children('.CFInnerContainer');
        if (this.parent.shouldDeferChanges() && ss.isValue(this.apply) && !this.menuNode.hasClass('CFDropdownNoItems')) {
            applyHeight = dojo.marginBox(this.apply.get_element().get(0)).h;
            this.layoutApplyButton(innerContainer);
        }
        if (ss.isValue(innerContainer)) {
            innerContainer.css('max-height', (menu.get(0).clientHeight - searchHeight - applyHeight) + 'px');
            this.tiledWidget.updateViewport(innerContainer.height(), 0);
        }
        menu.css('visibility', 'visible');
    },
    
    _shouldShowMenuAbove$2: function tab_BaseDropdown$_shouldShowMenuAbove$2(viewport, menu) {
        var offset = this.dropdown.offset();
        var maxMenuHeight = 30 * this.get_lineHeight();
        var visibleRoom = viewport.getVisibleRoom(tab.PointUtil.fromPosition(offset));
        var showAbove = Math.min(menu.outerHeight(), maxMenuHeight) > visibleRoom.roomBelow && visibleRoom.roomAbove > visibleRoom.roomBelow;
        return showAbove;
    },
    
    fillMenu: function tab_BaseDropdown$fillMenu(menu) {
        if (ss.isNullOrUndefined(menu)) {
            return;
        }
        var checklistJQ = $('<div>').addClass('CFInnerContainer').addClass('tab-ctrl-formatted-text');
        menu.append(checklistJQ);
        this.fillListElement(checklistJQ.get(0));
    },
    
    _updateFilterStateClasses$2: function tab_BaseDropdown$_updateFilterStateClasses$2(menu) {
        if (this.parent.get_oFilter().all || this.parent.get_oFilter().allNotChecked) {
            menu.addClass('CFAll');
        }
        else {
            menu.removeClass('CFAll');
        }
        if (this.parent.get_oFilter().exclude) {
            menu.addClass('CFExclusive');
        }
        else {
            menu.removeClass('CFExclusive');
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.BaseMode

tab.BaseMode = function tab_BaseMode(parent, div, attrs) {
    this.disposables = new tab.DisposableHolder();
    tab.BaseMode.initializeBase(this);
    this.disposables = new tab.DisposableHolder();
    this.parent = parent;
    this.div = div;
    this.attributes = {};
    if (ss.isValue(attrs)) {
        this.attributes = attrs;
    }
}
tab.BaseMode.prototype = {
    _width$1: 0,
    div: null,
    parent: null,
    attributes: null,
    _itemFormatter$1: null,
    pendingManager: null,
    apply: null,
    cancel: null,
    tiledWidget: null,
    
    get_lineHeight: function tab_BaseMode$get_lineHeight() {
        return this.parent.get_presModel().lineHeight;
    },
    
    get_width: function tab_BaseMode$get_width() {
        return this._width$1;
    },
    set_width: function tab_BaseMode$set_width(value) {
        this._width$1 = value;
        return value;
    },
    
    get_itemFormatter: function tab_BaseMode$get_itemFormatter() {
        return this._itemFormatter$1;
    },
    set_itemFormatter: function tab_BaseMode$set_itemFormatter(value) {
        this._itemFormatter$1 = value;
        return value;
    },
    
    get_scrollNode: function tab_BaseMode$get_scrollNode() {
        return null;
    },
    
    instantiate: function tab_BaseMode$instantiate(tuples, itemName, facet) {
        alert(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    
    shouldNotReinstantiate: function tab_BaseMode$shouldNotReinstantiate() {
        return false;
    },
    
    updateContent: function tab_BaseMode$updateContent(data) {
        alert(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    
    resetContent: function tab_BaseMode$resetContent(tuples, itemName, facet) {
        alert(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    
    setUpForPendingChanges: function tab_BaseMode$setUpForPendingChanges() {
        if (this.parent.shouldDeferChanges()) {
            this.pendingManager = this.parent.makePendingChangesManager();
            this.pendingManager.add_onPendingChanges(ss.Delegate.create(this, this.enableApplyButton));
            this.pendingManager.add_onNoPendingChanges(ss.Delegate.create(this, this.disableApplyButton));
            this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
                this.pendingManager.remove_onPendingChanges(ss.Delegate.create(this, this.enableApplyButton));
                this.pendingManager.remove_onNoPendingChanges(ss.Delegate.create(this, this.disableApplyButton));
            })));
            this._initApplyButton$1();
        }
    },
    
    _initApplyButton$1: function tab_BaseMode$_initApplyButton$1() {
        this.apply = spiff.LabelButton.newNativeButton();
        this.apply.set_label(tab.Strings.QuickFilterApply);
        var applyClick = ss.Delegate.create(this, function() {
            this.resetPendingVisuals(false);
            this.parent.applyPendingChangesByChangelist();
        });
        this.apply.add_click(applyClick);
        this.disposables.add(this.apply);
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.apply.remove_click(applyClick);
        })));
        this.cancel = spiff.LabelButton.newNativeButton();
        this.cancel.set_label(tab.Strings.QuickFilterCancel);
        var cancelClick = ss.Delegate.create(this, function() {
            this.resetPendingVisuals(true);
            this.parent.cancelPendingChangesByChangelist();
        });
        this.cancel.add_click(cancelClick);
        this.disposables.add(this.cancel);
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.cancel.remove_click(cancelClick);
        })));
        this.disableApplyButton();
    },
    
    appendApplyButton: function tab_BaseMode$appendApplyButton(node) {
        if (this.parent.shouldDeferChanges()) {
            node.addClass('CFApplyButtonContainer');
            node.append(this.cancel.get_element());
            node.append(this.apply.get_element());
        }
    },
    
    layoutApplyButton: function tab_BaseMode$layoutApplyButton(container) {
        if (ss.isValue(container)) {
            var totalWidth = container.width();
            var sideMargin = parseInt(this.apply.get_element().css('margin-right'));
            var maxWidth = Math.floor((totalWidth / 2) - sideMargin);
            var attributeName = 'max-width';
            if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() <= 8 && maxWidth < this.apply.get_element().width()) {
                attributeName = 'width';
            }
            this.apply.get_element().css(attributeName, maxWidth + 'px');
            this.cancel.get_element().css(attributeName, maxWidth + 'px');
        }
    },
    
    enableApplyButton: function tab_BaseMode$enableApplyButton() {
        this.apply.set_disabled(false);
        this.cancel.set_disabled(false);
    },
    
    disableApplyButton: function tab_BaseMode$disableApplyButton() {
        this.apply.set_disabled(true);
        this.cancel.set_disabled(true);
    },
    
    resetPendingVisuals: function tab_BaseMode$resetPendingVisuals(resetCheckState) {
    },
    
    applyChanges: function tab_BaseMode$applyChanges() {
        alert(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    
    layout: function tab_BaseMode$layout(contentSize, horizontalLayout) {
        dojo.marginBox(this.div, contentSize);
    },
    
    fetchChildNodeByIndex: function tab_BaseMode$fetchChildNodeByIndex(index) {
        if (ss.isNullOrUndefined(index) || index < 0) {
            return null;
        }
        if (tableau.FilterItem.isAllItem(this.div.firstChild)) {
            index += 1;
        }
        return this.div.childNodes[index];
    },
    
    fetchAllItem: function tab_BaseMode$fetchAllItem() {
        return this.div.childNodes[0];
    },
    
    shouldUseAllItem: function tab_BaseMode$shouldUseAllItem() {
        return this.attributes['show-all'] !== 'false';
    },
    
    countIfAll: function tab_BaseMode$countIfAll(tuples) {
        var numChecked = (this.parent.get_mode() === 'checklist') ? 1 : 0;
        for (var i = 0; i < tuples.length; i++) {
            if (tuples[i].s) {
                numChecked += 1;
            }
        }
        return numChecked === tuples.length;
    },
    
    getSummaryText: function tab_BaseMode$getSummaryText() {
        return (this.hasSummaryText()) ? this.parent.get_oFilter().summary : '';
    },
    
    formatTuple: function tab_BaseMode$formatTuple(tuple) {
        return tableau.format.formatTupleDisplayName(tuple, true, this.parent.get_oFilter().role);
    },
    
    formatFacet: function tab_BaseMode$formatFacet(tuple) {
        return tableau.format.formatTupleDisplayFacet(tuple, true, this.parent.get_oFilter().role);
    },
    
    onSmallSearchUI: function tab_BaseMode$onSmallSearchUI(searchIsOn, searchDiv) {
    },
    
    hasSummaryText: function tab_BaseMode$hasSummaryText() {
        var isSlider = this.parent.get_mode() === 'slider';
        var isDrop = this.parent.get_mode() === 'dropdown' || this.parent.get_mode() === 'checkdropdown';
        var summary = this.parent.get_oFilter().summary;
        var isNotAll = summary !== tab.Strings.QuickFilterAll;
        return ss.isValue(summary) && (isSlider || (isDrop && isNotAll));
    },
    
    applyChangesByChangelist: function tab_BaseMode$applyChangesByChangelist(changelist, filterType) {
        var domain = this.attributes['values'] || '';
        var toAdd = [];
        var toRemove = [];
        var indexes = [];
        if (filterType === 'checklist' || filterType === 'checkdropdown' || filterType === 'typeinlist') {
            var parameters = changelist.compileForChecklist(domain);
            var index;
            for (var i = 0; i < parameters.select.length; i++) {
                index = parameters.select[i];
                toAdd.add(index);
            }
            for (var i = 0; i < parameters.deselect.length; i++) {
                index = parameters.deselect[i];
                toRemove.add(index);
            }
            tab.FilterClientCommands.modifyCategoricalFilterValuesByIndex(this.parent.get_session().get_visualId(), this.parent.get_field(), toAdd, toRemove);
        }
        else if (filterType === 'radiolist') {
            var parameters = changelist.compileForRadiolist(domain);
            indexes.add(parameters.index);
            tab.FilterClientCommands.setCategoricalFilterValuesByIndex(this.parent.get_session().get_visualId(), this.parent.get_field(), 'filter-replace', indexes);
        }
    },
    
    dispose: function tab_BaseMode$dispose() {
        this.disposables.dispose();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CheckDropdown

tab.CheckDropdown = function tab_CheckDropdown(parent, div, attrs) {
    tab.CheckDropdown.initializeBase(this, [ parent, div, attrs ]);
    this.set_itemFormatter(tableau.FilterItem.formatChecklistFilterItemHtml);
}
tab.CheckDropdown.prototype = {
    
    instantiate: function tab_CheckDropdown$instantiate(tuples, itemName, facet) {
        this.setUpForPendingChanges();
        this.inherited(arguments);
    },
    
    fillMenu: function tab_CheckDropdown$fillMenu(menu) {
        this.inherited(arguments);
        var wrapper = $('<div>');
        this.appendApplyButton(wrapper);
        if (wrapper.children().length > 0) {
            menu.append(wrapper);
            wrapper.css('height', this.apply.get_element().outerHeight(true) + 'px');
        }
    },
    
    createListElement: function tab_CheckDropdown$createListElement(div, tuples, itemName, facet) {
        if (this.shouldUseAllItem() && tuples.length > 0) {
            tab.Checklist.addAllItem($(div), this.parent, itemName, facet, tab.Checklist.shouldCheckAllItem(this.parent.get_oFilter(), this.pendingManager), tableau.FilterItem.formatChecklistFilterItemHtml);
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = tab.TiledWidgetFactory.createChecklist(this.parent, tuples, div, itemName, this.get_lineHeight());
        var mouseDisposable = spiff.EventUtil.bindWithDispose($(div), 'click', ss.Delegate.create(this.parent, this.parent.onListItemClick));
        this.disposables.add(mouseDisposable);
        var touchDisposable = spiff.EventUtil.bindWithDispose($(div), 'touchend', ss.Delegate.create(this.parent, this.parent.onListItemClick));
        this.disposables.add(touchDisposable);
        dojo.toggleClass(div.parentNode, 'CFDropdownNoItems', !tuples.length);
        if (!tuples.length) {
            $(div).text(tab.Strings.QuickFilterNoItems);
        }
    },
    
    resetPendingVisuals: function tab_CheckDropdown$resetPendingVisuals(resetCheckState) {
        var jqueryDiv;
        if (ss.isValue(this.searchBox) && this.searchBox.isShowingResults()) {
            jqueryDiv = this.menuNode.children('.tiledContent');
        }
        else {
            jqueryDiv = this.menuNode.find('.tile');
        }
        if (ss.isNullOrUndefined(jqueryDiv)) {
            return;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(jqueryDiv.children().get());
        while ($enum1.moveNext()) {
            var checkbox = $enum1.current;
            if (tableau.FilterItem.isPending(checkbox)) {
                tableau.FilterItem.togglePendingState(checkbox);
                if (resetCheckState) {
                    tableau.FilterItem.setChecked(checkbox, !tableau.FilterItem.isChecked(checkbox));
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Checklist

tab.Checklist = function tab_Checklist(parent, div, attrs) {
    tab.Checklist.initializeBase(this, [ parent, div, attrs ]);
    this.set_itemFormatter(tab.Checklist.getFilterItemHtml);
}
tab.Checklist.addAllItem = function tab_Checklist$addAllItem(checklistDiv, filter, itemName, allFacet, isChecked, formatter) {
    var allDiv = tab.FilterItemUtil.getAllItemHtml(filter, itemName, allFacet, isChecked, formatter);
    var div = checklistDiv.append($(allDiv).addClass('tab-ctrl-formatted-text'));
    tableau.FilterItem.setChecked(div.children().get(0), isChecked);
}
tab.Checklist.shouldCheckAllItem = function tab_Checklist$shouldCheckAllItem(ofilter, pendingManager) {
    if (ss.isValue(pendingManager) && ss.isValue(pendingManager.get_allItemCheckState())) {
        return pendingManager.get_allItemCheckState();
    }
    return ofilter.all || (ofilter.allChecked && !ofilter.exclude) || (ofilter.allNotChecked && ofilter.exclude);
}
tab.Checklist.prototype = {
    checkListContainer: null,
    _searchBox$2: null,
    
    get_scrollNode: function tab_Checklist$get_scrollNode() {
        return this.checkListContainer;
    },
    
    instantiate: function tab_Checklist$instantiate(tuples, itemName, facet) {
        this.setUpForPendingChanges();
        this.div.innerHTML = '';
        if (this.parent.get_searchWidget().get_dijitClassName().indexOf('FilteringSearchWidget') < 0) {
            tab.Log.get(this).error('Checklist catmode Categorical search widget must be a FilteringSearchWidget');
        }
        this._searchBox$2 = this.parent.get_searchWidget();
        this._searchBox$2.setStyle(2);
        var jqueryDiv = $(this.div);
        this._searchBox$2.startupAndAppendTo(jqueryDiv);
        this._searchBox$2.hideUI();
        var cl = $('<div>').addClass('CFInnerContainer').addClass('tab-ctrl-formatted-text');
        dojo.addClass(this.div, 'CFOuterContainer');
        jqueryDiv.append(cl);
        this.checkListContainer = cl.get(0);
        this.createChecklist(this.checkListContainer, tuples, itemName, facet);
        jqueryDiv.children('.FIItem').focus();
        var disposable = spiff.EventUtil.bindWithDispose($(this.div), 'click', ss.Delegate.create(this.parent, this.parent.onListItemClick));
        this.disposables.add(disposable);
        this.appendApplyButton($(this.div));
    },
    
    resetContent: function tab_Checklist$resetContent(tuples, itemName, facet) {
        var jqueryDiv = $(this.checkListContainer);
        jqueryDiv.empty();
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
            this.tiledWidget = null;
        }
        this.createChecklist(this.checkListContainer, tuples, itemName, facet);
        this.appendApplyButton($(this.div));
    },
    
    updateContent: function tab_Checklist$updateContent(data) {
        var results = (data.length > 0) ? data.join('') : this._searchBox$2.get_noMatchHtml();
        var jqueryDiv = $(this.checkListContainer);
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
            this.tiledWidget = null;
        }
        jqueryDiv.html(results);
    },
    
    shouldNotReinstantiate: function tab_Checklist$shouldNotReinstantiate() {
        return ss.isValue(this._searchBox$2) && this._searchBox$2.isShowingResults();
    },
    
    layout: function tab_Checklist$layout(contentSize, horizontalLayout) {
        this.inherited(arguments);
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.updateViewport(contentSize.w, contentSize.h);
        }
        var searchHeight = (ss.isValue(this._searchBox$2) && this._searchBox$2.get_isVisible()) ? dojo.marginBox(this._searchBox$2.domNode).h : 0;
        var applyHeight = 0;
        if (this.parent.shouldDeferChanges()) {
            applyHeight = dojo.marginBox(this.apply.get_element().get(0)).h;
            this.layoutApplyButton($(this.checkListContainer));
        }
        if (ss.isValue(this.checkListContainer)) {
            dojo.style(this.checkListContainer, 'height', (this.div.clientHeight - searchHeight - applyHeight) + 'px');
        }
    },
    
    destroy: function tab_Checklist$destroy() {
        this.dispose();
        if (ss.isValue(this._searchBox$2)) {
            this._searchBox$2.destroy();
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = null;
    },
    
    fetchChildNodeByIndex: function tab_Checklist$fetchChildNodeByIndex(index) {
        if (ss.isValue(this.tiledWidget)) {
            return this.tiledWidget.getElement(index);
        }
        else {
            return null;
        }
    },
    
    createChecklist: function tab_Checklist$createChecklist(div, tuples, itemName, facet) {
        if (this.shouldUseAllItem() && tuples.length > 0) {
            tab.Checklist.addAllItem($(div), this.parent, itemName, facet, tab.Checklist.shouldCheckAllItem(this.parent.get_oFilter(), this.pendingManager), tableau.FilterItem.formatChecklistFilterItemHtml);
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = tab.TiledWidgetFactory.createChecklist(this.parent, tuples, div, itemName, this.get_lineHeight());
    },
    
    fetchAllItem: function tab_Checklist$fetchAllItem() {
        if (ss.isValue(this.checkListContainer)) {
            return this.checkListContainer.firstChild;
        }
        else {
            return null;
        }
    },
    
    resetPendingVisuals: function tab_Checklist$resetPendingVisuals(resetCheckState) {
        var jqueryDiv;
        if (ss.isValue(this._searchBox$2) && this._searchBox$2.isShowingResults()) {
            jqueryDiv = $(this.checkListContainer);
        }
        else {
            jqueryDiv = $(this.checkListContainer).find('.tile');
        }
        if (ss.isNullOrUndefined(jqueryDiv)) {
            return;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(jqueryDiv.children().get());
        while ($enum1.moveNext()) {
            var checkbox = $enum1.current;
            if (tableau.FilterItem.isPending(checkbox)) {
                tableau.FilterItem.togglePendingState(checkbox);
                if (resetCheckState) {
                    tableau.FilterItem.setChecked(checkbox, !tableau.FilterItem.isChecked(checkbox));
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.HierarchicalFilter

tab.HierarchicalFilter = function tab_HierarchicalFilter(props) {
    this.templateString = "<div class='HierarchicalFilter'>" + "<div dojoAttachPoint='domBox' class='HierarchicalFilterBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<div class='FilterTitle' dojoAttachPoint='domTitleBar'></div>" + "<div dojoType='dijit.form.Button' class='HFButton HFSearchButton' showlabel='false'" + "dojoAttachPoint='searchButton' dojoAttachEvent='onClick:toggleSearchUI'" + "iconClass='wcIconSearch'>Search</div>" + "<div dojoType='dijit.form.Button' class='HFButton HFMenuButton' dojoAttachPoint='menuButton'" + "name='type' dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'>" + '</div>' + '</div>' + "<div dojoAttachPoint='searchDiv'></div>" + "<div class='HFLevels tab-ctrl-formatted-coloronly' dojoAttachPoint='domLevelBox'>" + "<table cellspacing='2'><tr dojoAttachPoint='domLevelContainer'></tr></table></div>" + "<div class='HFSelection tab-ctrl-formatted-text' dojoAttachPoint='domContent'></div>" + "<div dojoType='tableau.base.widget.ConditionalsWidget' dojoAttachPoint='conditionals'></div>" + '</div>' + '</div>';
    this._items$2 = [];
    this.attributes = {};
    tab.HierarchicalFilter.initializeBase(this);
}
tab.HierarchicalFilter._applyLevelPickerFormatting$2 = function tab_HierarchicalFilter$_applyLevelPickerFormatting$2(textStyleModel, backgroundColorString) {
    var backgroundColorModel = tab.ColorModel.fromColorCode(backgroundColorString);
    var textColorModel = tab.ColorModel.fromColorCode(textStyleModel.color);
    var ctrlBoxStyle = {};
    var boxBorderColor = tab.ColorModel.alphaCompositeSolidDest(tab.ColorModel.fromColorModelPlusAlpha(textColorModel, tab.HierarchicalFilter._borderColorAlpha$2), backgroundColorModel);
    ctrlBoxStyle['border-width'] = '1px';
    ctrlBoxStyle['border-style'] = 'solid';
    ctrlBoxStyle['border-color'] = boxBorderColor.toRgb();
    tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelNoneSelected', ctrlBoxStyle);
    var ctrlBoxesStyleLighter = {};
    var boxBorderColorLighter = tab.ColorModel.alphaCompositeSolidDest(tab.ColorModel.fromColorModelPlusAlpha(textColorModel, tab.HierarchicalFilter._borderColorLighterAlpha$2), backgroundColorModel);
    ctrlBoxesStyleLighter['border-color'] = boxBorderColorLighter.toRgb();
    tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelSomeSelected', ctrlBoxesStyleLighter);
    tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelAllSelected', ctrlBoxesStyleLighter);
    var allSelected = {};
    var someSelected = {};
    var noneSelected = {};
    var backgroundColorDefault = tab.ColorModel.fromColorCode(backgroundColorString);
    var backgroundColorLightest = tab.ColorModel.alphaCompositeSolidDest(tab.ColorModel.fromColorModelPlusAlpha(backgroundColorModel, tab.HierarchicalFilter._backgroundColorLightestAlpha$2), tab.HierarchicalFilter._white$2);
    var backgroundColorLight = tab.ColorModel.alphaCompositeSolidDest(tab.ColorModel.fromColorModelPlusAlpha(backgroundColorModel, tab.HierarchicalFilter._backgroundColorLightAlpha$2), tab.HierarchicalFilter._white$2);
    if (backgroundColorDefault.luminance() > 95) {
        backgroundColorLightest = tab.HierarchicalFilter._backgroundColorLightestOverride$2;
        backgroundColorLight = tab.HierarchicalFilter._backgroundColorLightOverride$2;
    }
    allSelected['background-color'] = backgroundColorLightest.toRgb();
    someSelected['background-color'] = backgroundColorLight.toRgb();
    noneSelected['background-color'] = backgroundColorDefault.toRgb();
    tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelAllSelected', allSelected);
    tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelSomeSelected', someSelected);
    tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelNoneSelected', noneSelected);
}
tab.HierarchicalFilter.prototype = {
    widgetsInTemplate: true,
    session: null,
    field: '',
    filterViewModel: null,
    _applyDelay$2: 500,
    stateId: 0,
    _titleH$2: 0,
    _titleW$2: 0,
    domBox: null,
    domLevelBox: null,
    domContent: null,
    domControls: null,
    searchDiv: null,
    searchButton: null,
    RANGE_START: 'minValue',
    RANGE_END: 'maxValue',
    _getSID$2: null,
    _mode$2: null,
    tree: null,
    _applyTimer: null,
    searchWidget: null,
    menuButton: null,
    conditionals: null,
    domLevelContainer: null,
    metricsOnly: false,
    getContextMenuCommands: null,
    showContextMenu: null,
    requestSetAttributes: null,
    
    get_isTypeInList: function tab_HierarchicalFilter$get_isTypeInList() {
        return false;
    },
    
    get_oFilter: function tab_HierarchicalFilter$get_oFilter() {
        return this.oFilter;
    },
    
    get_filterViewModel: function tab_HierarchicalFilter$get_filterViewModel() {
        return this.filterViewModel;
    },
    
    get_viewModel: function tab_HierarchicalFilter$get_viewModel() {
        return this.filterViewModel;
    },
    
    get_dijitDeclaredClass: function tab_HierarchicalFilter$get_dijitDeclaredClass() {
        return this.declaredClass;
    },
    
    get_mode: function tab_HierarchicalFilter$get_mode() {
        return this._mode$2;
    },
    set_mode: function tab_HierarchicalFilter$set_mode(value) {
        alert(tab.Strings.noLoc('Bad interface call to set HierarchicalFilter.Mode'));
        return value;
    },
    
    get_session: function tab_HierarchicalFilter$get_session() {
        return this.session;
    },
    set_session: function tab_HierarchicalFilter$set_session(value) {
        this.session = value;
        return value;
    },
    
    get_domain: function tab_HierarchicalFilter$get_domain() {
        var domain = null;
        if (!!this.get_attributes()['values']) {
            domain = this.get_attributes()['values'];
        }
        return domain;
    },
    
    get_attributes: function tab_HierarchicalFilter$get_attributes() {
        return this.attributes;
    },
    set_attributes: function tab_HierarchicalFilter$set_attributes(value) {
        this.attributes = value;
        return value;
    },
    
    get_field: function tab_HierarchicalFilter$get_field() {
        return this.field;
    },
    
    get_stateId: function tab_HierarchicalFilter$get_stateId() {
        return this.stateId;
    },
    set_stateId: function tab_HierarchicalFilter$set_stateId(value) {
        this.stateId = value;
        return value;
    },
    
    get_modeContents: function tab_HierarchicalFilter$get_modeContents() {
        tab.Log.get(this).info(tab.Strings.noLoc('Bad interface call on HierarchicalFilter.ModeContents'));
        return null;
    },
    
    get_domContent: function tab_HierarchicalFilter$get_domContent() {
        return this.domContent;
    },
    set_domContent: function tab_HierarchicalFilter$set_domContent(value) {
        this.domContent = value;
        return value;
    },
    
    get_dijitDomNode: function tab_HierarchicalFilter$get_dijitDomNode() {
        return this.domNode;
    },
    set_dijitDomNode: function tab_HierarchicalFilter$set_dijitDomNode(value) {
        this.domNode = value;
        return value;
    },
    
    get_searchWidget: function tab_HierarchicalFilter$get_searchWidget() {
        return this.searchWidget;
    },
    set_searchWidget: function tab_HierarchicalFilter$set_searchWidget(value) {
        this.searchWidget = value;
        return value;
    },
    
    destroy: function tab_HierarchicalFilter$destroy() {
        this.tree.remove_notifyChangeCalled(ss.Delegate.create(this, this._notifyMemberChange$2));
        this.searchWidget.destroy();
        this.searchWidget = null;
        this.tree.destroy();
        this.tree = null;
        this.inherited(arguments);
    },
    
    applyChangesByChangelist: function tab_HierarchicalFilter$applyChangesByChangelist(changelist) {
        alert(tab.Strings.noLoc('Bad interface call on HierarchicalFilter.ApplyChangesByChangelist'));
    },
    
    postCreate: function tab_HierarchicalFilter$postCreate() {
        if (this.filterViewModel.get_filterType() !== 'Hierarchical') {
            tab.Log.get(this).warn('Incompatible filter view model type for HierarchicalFilter: %s', this.filterViewModel.get_filterType());
        }
        var buttonCount = 0;
        this._getSID$2 = ss.Delegate.create(this, function() {
            return this.stateId;
        });
        var thisQf = tab.$create_SearchWidgetQfProperty();
        thisQf.qf = this;
        this.searchWidget = new tableau.base.widget.SearchWidget(thisQf, this.searchDiv);
        this.searchWidget.startup();
        this.initFromState(true);
        this._localize$2();
        var tree = this.tree;
        dojo.forEach((this.tree.rootNode.getChildren()), function(node) {
            if (node.isExpandable) {
                tree._expandNode(node);
            }
        });
        if (!this.metricsOnly) {
            var processButton = ss.Delegate.create(this, function(button, hide) {
                if (!this._hasDomNode(button)) {
                    return;
                }
                if (hide) {
                    dojo.addClass(button.domNode, 'HFButtonHide');
                }
                else {
                    buttonCount += 1;
                    dojo.addClass(button.domNode, 'HFButtonR' + buttonCount);
                }
                $(button.domNode).css('background-color', this.backgroundColor);
            });
            processButton(this.menuButton, this.shouldHideContextMenu());
            processButton(this.searchButton, this.shouldHideSearchButton());
            dojo.addClass(this.domControls, 'HF' + buttonCount + 'Button');
        }
        tab.HierarchicalFilter._applyLevelPickerFormatting$2(this.textStyle, this.backgroundColor);
    },
    
    _fixIEInitialDraw$2: function tab_HierarchicalFilter$_fixIEInitialDraw$2() {
        if (!!dojo.isIE) {
            dojo.style(this.domContent, 'zoom', '1');
            var contentElement = $(this.domContent);
            tab.WindowHelper.requestAnimationFrame(function() {
                tab.RenderUtil.manualFadeAnimation(contentElement, 96, 100, 8, 3875, true);
            });
        }
    },
    
    shouldHideLevelButtons: function tab_HierarchicalFilter$shouldHideLevelButtons() {
        return (this.attributes['show-levels'] === 'false');
    },
    
    shouldHideSearchButton: function tab_HierarchicalFilter$shouldHideSearchButton() {
        return this.hideEmptyTitlebar() || (this.attributes['show-search'] === 'false');
    },
    
    shouldHideContextMenu: function tab_HierarchicalFilter$shouldHideContextMenu() {
        var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
        return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || !commandsWrapper.get_commandItems().length;
    },
    
    resize: function tab_HierarchicalFilter$resize(marginBox) {
        dojo.marginBox(this.domNode, marginBox);
        this.layout();
    },
    
    getMetrics: function tab_HierarchicalFilter$getMetrics() {
        var numItems = this.tree.rootNode.getChildren().length;
        var oItems = dojo.contentBox(this.tree.domNode);
        var oSize = dojo.marginBox(this.domNode);
        return { fixed: { w: 0, h: oSize.h - oItems.h + 1 }, item: { w: 0, h: Math.max(oItems.h / numItems, 20) } };
    },
    
    isSingleSelect: function tab_HierarchicalFilter$isSingleSelect() {
        return (this._mode$2 !== 'checklist');
    },
    
    initMode: function tab_HierarchicalFilter$initMode() {
        this._mode$2 = this._getModeFromAttributes$2();
    },
    
    _getModeFromAttributes$2: function tab_HierarchicalFilter$_getModeFromAttributes$2() {
        var m = 'checklist';
        if (Object.keyExists(this.attributes, 'mode')) {
            m = this.attributes['mode'];
        }
        return m;
    },
    
    createTreeDom: function tab_HierarchicalFilter$createTreeDom() {
        var model = new tableau.base.widget.hsm.TreeModel(this.session, this.field, this.oFilter.levels.length, this.isSingleSelect());
        model.onChildrenChange(model.root, model.itemsFromTable(this.oFilter.table[0], 0));
        var treeParams = {};
        treeParams.model = model;
        treeParams.showRoot = false;
        this.tree = new tableau.base.widget.hsm.Tree(treeParams);
        this.tree.add_notifyChangeCalled(ss.Delegate.create(this, this._notifyMemberChange$2));
        this.connect(this.tree, '_onTreeFocus', ss.Delegate.create(this, this.updateRangeAnchor));
        this.domContent.appendChild(this.tree.domNode);
    },
    
    hideEmptyTitlebar: function tab_HierarchicalFilter$hideEmptyTitlebar() {
        return String.isNullOrEmpty(tableau.format.formatColumnDisplayName(this.oFilter));
    },
    
    setTitleSize: function tab_HierarchicalFilter$setTitleSize(newH, newW) {
        this._titleH$2 = newH;
        this._titleW$2 = newW;
    },
    
    initFromState: function tab_HierarchicalFilter$initFromState(suppressRefresh) {
        if (this._getModeFromAttributes$2() !== this._mode$2) {
            dojox.data.dom.removeChildren(this.domContent);
        }
        if (!this.domContent.hasChildNodes()) {
            this.initMode();
            this.createTreeDom();
        }
        var fieldname = tableau.format.formatColumnDisplayName(this.oFilter);
        dojo.attr(this.domTitleBar, 'title', fieldname);
        this.updateTitleBar();
        if (ss.isValue(this.domLevelContainer)) {
            dojox.data.dom.removeChildren(this.domLevelContainer);
        }
        if (this.shouldHideLevelButtons()) {
            if (ss.isValue(this.domLevelBox)) {
                dojo.attr(this.domLevelBox, 'display', 'none');
            }
        }
        else {
            this._formatLevelButtons$2();
        }
        if (!suppressRefresh) {
            this.tree.model.refresh(this.oFilter.table);
        }
        if (ss.isValue(this.tree.anchor)) {
            dojo.addClass(this.tree.anchor.labelNode, 'anchorSelection');
            dojo.addClass(this.tree.anchor.domNode, 'anchorSelectionNode');
        }
        else {
            this.tree.anchor = null;
        }
        this.conditionals.init(this.oFilter.condition, this.oFilter.limit);
        this.layout();
        if (ss.isValue(this.searchWidget)) {
            this.searchWidget.updateSearch();
        }
    },
    
    _formatLevelButtons$2: function tab_HierarchicalFilter$_formatLevelButtons$2() {
        var domNode;
        if (ss.isNullOrUndefined(this.domLevelBox)) {
            return;
        }
        domNode = document.createElement('td');
        domNode.appendChild(document.createTextNode('\u00a0'));
        dojo.addClass(domNode, 'HFLevelSpacer');
        for (var i = 0; i < this.oFilter.levels.length; i++) {
            domNode = document.createElement('td');
            domNode.appendChild(document.createTextNode(i.toString()));
            this.domLevelContainer.appendChild(domNode);
            if (this._mode$2 !== 'radiolist') {
                if (!this.oFilter.levels[i]) {
                    dojo.addClass(domNode, 'HFLevelAllSelected');
                }
                else if (this.oFilter.levels[i] === 1) {
                    dojo.addClass(domNode, 'HFLevelNoneSelected');
                }
                else {
                    dojo.addClass(domNode, 'HFLevelSomeSelected');
                }
            }
            if (!i) {
                dojo.addClass(domNode, 'HFLevelFirst');
            }
            else {
                if (i < this.oFilter.levels.length - 1) {
                    dojo.addClass(domNode, 'HFLevelNonLeaf');
                }
                else {
                    dojo.addClass(domNode, 'HFLevelLast');
                }
            }
            this.connect(domNode, 'onclick', ss.Delegate.create(this, this.onLevelClick));
        }
    },
    
    doMenu: function tab_HierarchicalFilter$doMenu() {
        this.showContextMenu(this.menuButton.domNode);
    },
    
    _applyChanges$2: function tab_HierarchicalFilter$_applyChanges$2() {
        var curSchema = [];
        var curTuples = [];
        var nodes = [].concat(this.tree.rootNode.getChildren());
        var updateMode = 'filter-delta';
        var toAdd = [];
        var toRemove = [];
        if (!nodes.length) {
            return;
        }
        do {
            var node = nodes.shift();
            var t = node.item.tuple;
            if (node.item.schema.length > curSchema.length) {
                curSchema = node.item.schema;
            }
            if (node.isChecked && !t.s) {
                t.s = true;
                curTuples.push(t);
                if (this.isSingleSelect()) {
                    updateMode = 'filter-replace';
                    break;
                }
            }
            else if (!node.isChecked && t.s) {
                delete t.s;
                curTuples.push(t);
            }
            nodes = nodes.concat(node.getChildren());
        } while (!!nodes.length);
        var tuples = curTuples;
        if (!!tuples.length) {
            for (var i = 0; i < tuples.length; i++) {
                var lastIndex = tuples[i].t.length - 1;
                var alias = tuples[i].t[lastIndex].v;
                if (tuples[i].s) {
                    toAdd.push(alias);
                }
                else {
                    toRemove.push(alias);
                }
            }
            tab.FilterClientCommands.doMemberHierarchialFilter(this.session.get_visualId(), this.field, toAdd, toRemove, updateMode);
        }
    },
    
    _applyRangeChanges$2: function tab_HierarchicalFilter$_applyRangeChanges$2(anchor, prev_anchor) {
        if (ss.isNullOrUndefined(anchor) || ss.isNullOrUndefined(prev_anchor)) {
            return;
        }
        var depth = this.tree.getDepth(prev_anchor);
        var earlier = this.tree.findEarlierNode(prev_anchor, anchor, depth);
        var later = (earlier === prev_anchor) ? anchor : prev_anchor;
        var earlierTuple = earlier.item.tuple.t;
        var laterTuple = later.item.tuple.t;
        var earlierAlias = earlierTuple[earlierTuple.length - 1].v;
        var laterAlias = laterTuple[laterTuple.length - 1].v;
        var rangeAdd = {};
        var rangeRemove = {};
        var updateMode = 'filter-delta';
        if (anchor.isChecked) {
            rangeAdd[this.RANGE_START] = earlierAlias;
            rangeAdd[this.RANGE_END] = laterAlias;
        }
        else {
            rangeRemove[this.RANGE_START] = earlierAlias;
            rangeRemove[this.RANGE_END] = laterAlias;
        }
        tab.FilterClientCommands.doRangeHierarchialFilter(this.session.get_visualId(), this.field, rangeAdd, rangeRemove, updateMode);
    },
    
    updateStateFromSearch: function tab_HierarchicalFilter$updateStateFromSearch(changed) {
        var changedHash = {};
        var newtuples = changed.tuples;
        for (var i = 0; i < newtuples.length; i++) {
            changedHash[newtuples[i].d] = (!!newtuples[i].s);
        }
        var nodes = [].concat(this.tree.rootNode.getChildren());
        while (!!nodes.length) {
            var node = nodes.shift();
            var t = node.item.tuple;
            var match = changedHash[t.d];
            if (ss.isValue(match)) {
                if (match !== t.s) {
                    if (match) {
                        node.isChecked = true;
                        (node.labelNode.firstChild).checked = true;
                        t.s = true;
                    }
                    else {
                        node.isChecked = false;
                        (node.labelNode.firstChild).checked = false;
                        delete t.s;
                    }
                }
            }
            else if (this.isSingleSelect() && t.s) {
                node.isChecked = false;
                (node.labelNode.firstChild).checked = false;
                delete t.s;
            }
            nodes = nodes.concat(node.getChildren());
        }
    },
    
    updateRangeAnchor: function tab_HierarchicalFilter$updateRangeAnchor(node) {
        if (this.isSingleSelect()) {
            return;
        }
        if (this.tree.anchor === node) {
            return;
        }
        if (ss.isValue(this.tree.anchor)) {
            dojo.removeClass(this.tree.anchor.labelNode, 'anchorSelection');
            dojo.removeClass(this.tree.anchor.domNode, 'anchorSelectionNode');
            dojo.removeClass(this.tree.anchor.labelNode, 'dijitTreeLabelFocused');
            this.tree.prev_anchor = this.tree.anchor;
        }
        this.tree.anchor = node;
        dojo.addClass(this.tree.anchor.labelNode, 'anchorSelection');
        dojo.addClass(this.tree.anchor.domNode, 'anchorSelectionNode');
    },
    
    _notifyMemberChange$2: function tab_HierarchicalFilter$_notifyMemberChange$2(e) {
        if (e.target.tagName.toLowerCase() === 'input') {
            if (ss.isValue(this._applyTimer)) {
                window.clearTimeout(this._applyTimer);
                this._applyTimer = null;
            }
            this.stateId++;
            var targetWidget = dijit.getEnclosingWidget(e.target.parentNode);
            if (this.tree.anchor !== targetWidget) {
                this.updateRangeAnchor(targetWidget);
            }
            if (!!e.shiftKey && ss.isValue(this.tree.prev_anchor) && this.tree.getDepth(this.tree.prev_anchor) === this.tree.getDepth(this.tree.anchor) && !this.isSingleSelect()) {
                this.updateCheckboxRange(this.tree.anchor, this.tree.prev_anchor);
                this._applyRangeChanges$2(this.tree.anchor, this.tree.prev_anchor);
            }
            else {
                this._applyTimer = window.setTimeout(ss.Delegate.create(this, this._applyChanges$2), this._applyDelay$2);
            }
        }
    },
    
    updateCheckboxRange: function tab_HierarchicalFilter$updateCheckboxRange(anchor, prevAnchor) {
        var depth = this.tree.getDepth(prevAnchor);
        var earlier = this.tree.findEarlierNode(prevAnchor, anchor, depth);
        var later = (earlier === prevAnchor) ? anchor : prevAnchor;
        var newCheckState = anchor.isChecked;
        var node = earlier;
        this.tree.anchorIsStart = (earlier !== prevAnchor);
        while (ss.isValue(node) && node.isTreeNode && node !== later) {
            (node.labelNode.firstChild).checked = newCheckState;
            node.isChecked = newCheckState;
            node = this._getNextInLevel$2(node, depth);
        }
        (later.labelNode.firstChild).checked = newCheckState;
        later.isChecked = newCheckState;
    },
    
    _getNextInLevel$2: function tab_HierarchicalFilter$_getNextInLevel$2(node, level) {
        var currentLevel = level;
        var currentNode = node;
        var nextNode = node.getNextSibling();
        if (ss.isValue(nextNode)) {
            return nextNode;
        }
        while (ss.isNullOrUndefined(nextNode) && currentLevel >= 0) {
            currentNode = currentNode.getParent();
            currentLevel -= 1;
            nextNode = currentNode.getNextSibling();
            while (ss.isValue(nextNode)) {
                var foundkid = this._getFirstChildInLevel$2(nextNode, currentLevel, level);
                if (ss.isValue(foundkid)) {
                    return foundkid;
                }
                nextNode = nextNode.getNextSibling();
            }
        }
        if (currentLevel >= 0) {
            return nextNode;
        }
        return null;
    },
    
    _getFirstChildInLevel$2: function tab_HierarchicalFilter$_getFirstChildInLevel$2(node, currentLevel, seekLevel) {
        if (ss.isNullOrUndefined(node)) {
            return null;
        }
        if (currentLevel < 0) {
            return null;
        }
        if (currentLevel > seekLevel) {
            return null;
        }
        if (currentLevel === seekLevel) {
            return node;
        }
        if (node.hasChildren()) {
            var kids = node.getChildren();
            var l = kids.length;
            for (var i = 0; i < l; i++) {
                var foundkid = this._getFirstChildInLevel$2(kids[i], currentLevel + 1, seekLevel);
                if (ss.isValue(foundkid)) {
                    return foundkid;
                }
            }
        }
        return null;
    },
    
    toggleSearchUI: function tab_HierarchicalFilter$toggleSearchUI() {
        if (ss.isValue(this.searchWidget)) {
            this.searchWidget.toggleUI();
        }
    },
    
    onLevelClick: function tab_HierarchicalFilter$onLevelClick(e) {
        var domNode = e.target;
        var newState;
        var addLevels = [];
        var removeLevels = [];
        if (domNode.tagName.toLowerCase() !== 'td') {
            return;
        }
        dojo.stopEvent(e);
        if (this.isSingleSelect()) {
            return;
        }
        var lvl = parseInt(dojox.data.dom.textContent(domNode), 10);
        if (!this.oFilter.levels[lvl]) {
            newState = false;
            dojo.removeClass(domNode, 'HFLevelAllSelected');
            dojo.removeClass(domNode, 'HFLevelSomeSelected');
            dojo.addClass(domNode, 'HFLevelNoneSelected');
        }
        else {
            newState = true;
            dojo.removeClass(domNode, 'HFLevelNoneSelected');
            dojo.removeClass(domNode, 'HFLevelSomeSelected');
            dojo.addClass(domNode, 'HFLevelAllSelected');
        }
        if (newState) {
            addLevels.push(lvl);
        }
        else {
            removeLevels.push(lvl);
        }
        if (addLevels.length > 0 || removeLevels.length > 0) {
            tab.FilterClientCommands.doLevelHierarchialFilter(this.session.get_visualId(), this.field, addLevels, removeLevels, 'filter-delta');
        }
    },
    
    layout: function tab_HierarchicalFilter$layout() {
        var contentElement = $(this.domContent);
        contentElement.hide();
        dojo.removeClass(this.domNode, 'HFHorizontal');
        var oZoneSize = dojo.contentBox(this.domNode);
        var oTitleBar = dojo.marginBox(this.domTitleBar);
        var oLevelBox = (ss.isValue(this.domLevelBox)) ? dojo.marginBox(this.domLevelBox) : { w: 0, h: 0 };
        var oConditionals = dojo.marginBox(this.conditionals.domNode);
        var oSearch = { h: 0 };
        this.updateTitleBar();
        this.resetTitleSize();
        if (this._titleH$2 > 0) {
            oTitleBar.h = this._titleH$2;
            dojo.marginBox(this.domTitleBar, { h: oTitleBar.h });
        }
        if (this._titleW$2 > 0) {
            oTitleBar.w = this._titleW$2;
            dojo.marginBox(this.domTitleBar, { w: oTitleBar.w });
        }
        tableau.util.setupTitleEllipsis($(this.domTitleBar));
        var titleHcontrib = oTitleBar.h;
        var contentW = oZoneSize.w;
        if (!this.hideEmptyTitlebar() && this._titleW$2 > 0) {
            dojo.addClass(this.domNode, 'HFHorizontal');
            dojo.style(this.domTitleBar, 'float', 'left');
            if (ss.isValue(this.domLevelBox)) {
                dojo.style(this.domLevelBox, 'float', 'left');
            }
            if (this._hasDomNode(this.menuButton)) {
                dojo.addClass(this.menuButton.domNode, 'HFButtonHide');
            }
            if (this._hasDomNode(this.searchButton)) {
                dojo.addClass(this.searchButton.domNode, 'HFButtonHide');
            }
            contentW -= oTitleBar.w;
            titleHcontrib = 0;
        }
        else {
            if (!this.shouldHideContextMenu() && this._hasDomNode(this.menuButton)) {
                dojo.removeClass(this.menuButton.domNode, 'HFButtonHide');
            }
            if (!this.shouldHideSearchButton() && this._hasDomNode(this.searchButton)) {
                dojo.removeClass(this.searchButton.domNode, 'HFButtonHide');
            }
            dojo.style(this.domTitleBar, 'float', 'none');
            if (ss.isValue(this.domLevelBox)) {
                dojo.style(this.domLevelBox, 'float', 'none');
            }
        }
        if (ss.isValue(this.searchWidget) && this.searchWidget.get_isVisible()) {
            var listHeight = oZoneSize.h - titleHcontrib - oLevelBox.h - oConditionals.h;
            this.searchWidget.layout(listHeight);
            oSearch = dojo.marginBox(this.searchWidget.get_dijitDomNode());
        }
        var h = oZoneSize.h - titleHcontrib - oLevelBox.h - oConditionals.h - oSearch.h;
        if (ss.isValue(this.domLevelBox)) {
            dojo.marginBox(this.domLevelBox, { w: contentW });
        }
        dojo.marginBox(this.domContent, { h: h, w: contentW });
        this._fixIEInitialDraw$2();
        contentElement.show();
    },
    
    _hasDomNode: function tab_HierarchicalFilter$_hasDomNode(widget) {
        return ss.isValue(widget) && ss.isValue(widget.domNode);
    },
    
    _localize$2: function tab_HierarchicalFilter$_localize$2() {
        tableau.util.localizeDojoLabeledControls([ new ss.Tuple(this.searchButton, 'QuickFilterSearch') ]);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Pattern

tab.Pattern = function tab_Pattern(parent, div, attrs) {
    tab.Pattern.initializeBase(this, [ parent, div, attrs ]);
}
tab.Pattern.prototype = {
    widget: null,
    
    instantiate: function tab_Pattern$instantiate(pattern, itemName) {
        this.widget = new tableau.base.widget.ui.TypeIn(this.div, ss.Delegate.create(this, this.doChange), 'Pattern');
        this.widget.instantiate(pattern, itemName);
    },
    
    destroy: function tab_Pattern$destroy() {
        this.widget.destroy();
    },
    
    layout: function tab_Pattern$layout(contentSize, horizontalLayout) {
        this.inherited(arguments);
        this.widget.layout();
    },
    
    doChange: function tab_Pattern$doChange(newPattern) {
        this.parent.set_stateId(this.parent.get_stateId() + 1);
        this.parent.get_session().setPatternFilterState(newPattern, this.parent);
        this.parent.get_oFilter().pattern = newPattern;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SimpleDropdown

tab.SimpleDropdown = function tab_SimpleDropdown(parent, div, attrs) {
    tab.SimpleDropdown.initializeBase(this, [ parent, div, attrs ]);
    this.set_itemFormatter(tableau.FilterItem.formatDropdownListFilterItemHtml);
}
tab.SimpleDropdown.prototype = {
    
    createListElement: function tab_SimpleDropdown$createListElement(div, tuples, itemName, facet) {
        if (this.shouldUseAllItem() && tuples.length > 0) {
            tab.Checklist.addAllItem($(div), this.parent, itemName, facet, false, tableau.FilterItem.formatDropdownListFilterItemHtml);
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = tab.TiledWidgetFactory.createSimpleList(this.parent, tuples, div, itemName, this.get_lineHeight());
        var mouseDisposable = spiff.EventUtil.bindWithDispose($(div), 'click', ss.Delegate.create(this, this._onSelection$3));
        this.disposables.add(mouseDisposable);
        var touchDisposable = spiff.EventUtil.bindWithDispose($(div), 'touchend', ss.Delegate.create(this, this._onSelection$3));
        this.disposables.add(touchDisposable);
        dojo.toggleClass(div.parentNode, 'CFDropdownNoItems', !tuples.length);
        if (!tuples.length) {
            $(div).text(tab.Strings.QuickFilterNoItems);
        }
    },
    
    _onSelection$3: function tab_SimpleDropdown$_onSelection$3(evt) {
        var node = tableau.FilterItem.getNodeFromEvent(evt);
        if (!!!node) {
            return;
        }
        var index = tableau.FilterItem.getIndex(node);
        if (index === -1 && !this.parent.get_oFilter().all) {
            this.parent.doSelectAll(true);
            this.hideMenu();
            return;
        }
        if (index !== this.currentlySelected) {
            if (index >= this.parent.get_oFilter().table.actual_size || index < 0) {
                this.hideMenu();
                return;
            }
            this.parent.set_stateId(this.parent.get_stateId() + 1);
            var indices = [];
            indices.push(index);
            tab.FilterClientCommands.setCategoricalFilterValuesByIndex(this.parent.get_session().get_visualId(), this.parent.get_field(), 'filter-replace', indices);
        }
        this.hideMenu();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SliderCatmode

tab.SliderCatmode = function tab_SliderCatmode(parent, div, attrs) {
    tab.SliderCatmode.initializeBase(this, [ parent, div, attrs ]);
}
tab.SliderCatmode.prototype = {
    _tuples$2: null,
    _widget$2: null,
    
    instantiate: function tab_SliderCatmode$instantiate(tuples, itemName, facet) {
        this._tuples$2 = tuples;
        var isAll = tab.FilterItemUtil.isAllOrAllChecked(this.parent);
        if (this.shouldUseAllItem()) {
            var allTuple = [];
            allTuple.push(tab.$create_TupleStruct(tab.Strings.QuickFilterAll, isAll, [ tab.$create_DataValueStruct('i', facet) ]));
            this._tuples$2 = $.merge(allTuple, tuples);
        }
        else {
            isAll = false;
        }
        this._widget$2 = new tableau.base.widget.ui.Slider(this.div, this.attributes, isAll, ss.Delegate.create(this, this.updateViz), ss.Delegate.create(this.parent, this.parent.getTitleOffset), ss.Delegate.create(this, this.getCurrentText), ss.Delegate.create(this, this.onIntermediateChange), ss.Delegate.create(this, this.getCurrentFacet), this.parent.get_oFilter().showFacets);
        this._widget$2.instantiateFromTuples(this._tuples$2, this.getSummaryText());
    },
    
    destroy: function tab_SliderCatmode$destroy() {
        this._widget$2.destroy();
    },
    
    layout: function tab_SliderCatmode$layout(contentSize, horizontalLayout) {
        this.inherited(arguments);
        this._widget$2.layout();
    },
    
    showOrHide: function tab_SliderCatmode$showOrHide(elem, show) {
        dojo.style(elem, 'display', ((show) ? '' : 'none'));
    },
    
    onSmallSearchUI: function tab_SliderCatmode$onSmallSearchUI(searchIsOn, searchDiv) {
        var show = !searchIsOn;
        var w = this._widget$2;
        if (w.styleid === 2 || w.styleid === 4) {
            this.showOrHide(w.slider.decrementButton, show);
            this.showOrHide(w.slider.incrementButton, show);
        }
        if (w.styleid === 3) {
            this.showOrHide(w.div, show);
            dojo.style(searchDiv, 'marginBottom', '2px');
        }
        else if (w.styleid < 3) {
            this.showOrHide(w.readout, show);
            if (w.get_oneLineLayout()) {
                this.showOrHide(w.div, show);
            }
        }
        else {
            this.showOrHide(w.slider.tableauSlider, show);
        }
    },
    
    getRealIndex: function tab_SliderCatmode$getRealIndex(index) {
        if (ss.isUndefined(index) || isNaN(index)) {
            return 0;
        }
        var intIndex = parseInt(index.toString(), 10);
        if (intIndex < 0) {
            intIndex = 0;
        }
        return intIndex;
    },
    
    updateViz: function tab_SliderCatmode$updateViz(index) {
        var currentState = {};
        currentState.schema = this.parent.get_oFilter().table.schema;
        currentState.tuples = [];
        var realIndex = this.getRealIndex(index);
        var aliases = new Array(0);
        if (this.shouldUseAllItem() && !realIndex) {
            this.parent.doSelectAll(true);
            return;
        }
        this._tuples$2[realIndex].s = true;
        currentState.tuples.push(this._tuples$2[realIndex]);
        this.parent.set_stateId(this.parent.get_stateId() + 1);
        var alias = (this._tuples$2[realIndex].d || this._tuples$2[realIndex].t[0].v);
        aliases.push(alias);
        tab.FilterClientCommands.setCategoricalFilterValues(this.parent.get_session().get_visualId(), this.parent.get_field(), 'filter-replace', aliases);
    },
    
    onIntermediateChange: function tab_SliderCatmode$onIntermediateChange() {
        if (this.parent.get_searchWidget().get_isVisible()) {
            this.parent.get_searchWidget().toggleUI();
        }
    },
    
    getCurrentText: function tab_SliderCatmode$getCurrentText(index) {
        var realIndex = this.getRealIndex(index);
        var tuple = this._tuples$2[realIndex];
        return tableau.format.formatTupleDisplayName(tuple, true, this.parent.get_oFilter().role);
    },
    
    getCurrentFacet: function tab_SliderCatmode$getCurrentFacet(index) {
        var realIndex = this.getRealIndex(index);
        var tuple = this._tuples$2[realIndex];
        return tableau.format.formatTupleDisplayFacet(tuple, true, this.parent.get_oFilter().role);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TypeInCatmode

tab.TypeInCatmode = function tab_TypeInCatmode(parent, div, attrs) {
    tab.TypeInCatmode.initializeBase(this, [ parent, div, attrs ]);
}
tab.TypeInCatmode.prototype = {
    isContainer: true,
    _contentsWidget$2: null,
    
    instantiate: function tab_TypeInCatmode$instantiate(tuples, itemName, facet) {
        this._contentsWidget$2 = new tableau.base.widget.TypeInFilterContents({ parentFilter: this.parent, tuples: tuples, itemName: itemName, role: this.parent.get_oFilter().role });
        this.div.appendChild(this._contentsWidget$2.domNode);
        this._contentsWidget$2.startup();
        this._setupDismissResultsHandlers$2();
    },
    
    _setupDismissResultsHandlers$2: function tab_TypeInCatmode$_setupDismissResultsHandlers$2() {
        var globalClickHandler = ss.Delegate.create(this, function(evt) {
            var resultsDom = (this.parent.get_searchWidget()).domResults;
            if (tab.DomUtil.isEqualOrAncestorOf(resultsDom, evt.target)) {
                return;
            }
            if (evt.target === this.parent.get_searchWidget().get_domXButton()) {
                this.parent.get_searchWidget().clearSearch();
            }
            else {
                this.parent.get_searchWidget().clearSearch(true, true);
            }
        });
        this.disposables.add(spiff.EventUtil.bindWithDispose($(document.body), 'mousedown', globalClickHandler));
    },
    
    destroy: function tab_TypeInCatmode$destroy() {
        this.dispose();
        if (ss.isValue(this._contentsWidget$2)) {
            this._contentsWidget$2.destroyRecursive(false);
        }
        this._contentsWidget$2 = null;
    },
    
    layout: function tab_TypeInCatmode$layout(contentSize, horizontalLayout) {
        this.inherited(arguments);
        this._contentsWidget$2.layout(contentSize, horizontalLayout);
    },
    
    fetchChildNodeByIndex: function tab_TypeInCatmode$fetchChildNodeByIndex(index) {
        var children = this._contentsWidget$2.domItemsList.childNodes;
        if (!tab.MiscUtil.isValidIndex(index, children)) {
            return null;
        }
        return children[index];
    },
    
    applyChanges: function tab_TypeInCatmode$applyChanges() {
        var serverState = this._getServerState$2();
        var uiState = this._contentsWidget$2.getUIState();
        var aliasesAdded = this._getStateDifference$2(uiState, serverState);
        var aliasesRemoved = this._getStateDifference$2(serverState, uiState);
        if (aliasesAdded.length > 0 || aliasesRemoved.length > 0) {
            this.parent.set_stateId(this.parent.get_stateId() + 1);
            tab.FilterClientCommands.modifyCategoricalFilterValues(this.parent.get_session().get_visualId(), this.parent.get_field(), aliasesAdded, aliasesRemoved);
        }
    },
    
    _getServerState$2: function tab_TypeInCatmode$_getServerState$2() {
        var tuples = this.parent.get_oFilter().table.tuples;
        var state = {};
        var len = tuples.length;
        for (var i = 0; i < len; i++) {
            var tuple = tuples[i];
            state[this._contentsWidget$2.getFormattedAlias(tuple)] = tuple.s;
        }
        return state;
    },
    
    _getStateDifference$2: function tab_TypeInCatmode$_getStateDifference$2(state1, state2) {
        var diff = [];
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(state1));
        while ($enum1.moveNext()) {
            var alias = $enum1.current;
            if (tab.MiscUtil.hasOwnProperty(state1, alias)) {
                if (state1[alias] && !state2[alias]) {
                    diff.push(alias);
                }
            }
        }
        return diff;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Radiolist

tab.Radiolist = function tab_Radiolist(parent, div, attrs) {
    tab.Radiolist.initializeBase(this, [ parent, div, attrs ]);
    this.set_itemFormatter(tableau.FilterItem.formatRadiolistFilterItemHtml);
}
tab.Radiolist.prototype = {
    _searchBox$2: null,
    contentNode: null,
    
    get_scrollNode: function tab_Radiolist$get_scrollNode() {
        return this.contentNode;
    },
    
    instantiate: function tab_Radiolist$instantiate(tuples, itemName, facet) {
        if (this.parent.get_searchWidget().get_dijitClassName().indexOf('FilteringSearchWidget') < 0) {
            tab.Log.get(this).error('Checklist catmode Categorical search widget must be a FilteringSearchWidget');
        }
        this._searchBox$2 = this.parent.get_searchWidget();
        this._searchBox$2.setStyle(2);
        var jqueryDiv = $(this.div).addClass('CFOuterContainer');
        this._searchBox$2.startupAndAppendTo(jqueryDiv);
        this._searchBox$2.hideUI();
        var rl = $('<div>').addClass('CFInnerContainer').addClass('tab-ctrl-formatted-text');
        jqueryDiv.append(rl);
        this.contentNode = rl.get(0);
        this.resetContent(tuples, itemName, facet);
        this.disposables.add(spiff.EventUtil.bindWithDispose($(this.div), 'click', ss.Delegate.create(this.parent, this.parent.onListItemClick)));
    },
    
    resetContent: function tab_Radiolist$resetContent(tuples, itemName, facet) {
        var jqueryDiv = $(this.contentNode);
        jqueryDiv.empty();
        if (this.shouldUseAllItem() && tuples.length > 0) {
            tab.Checklist.addAllItem(jqueryDiv, this.parent, itemName, facet, tab.FilterItemUtil.isAllOrAllChecked(this.parent), this.get_itemFormatter());
            if (tab.FilterItemUtil.isAllOrAllChecked(this.parent)) {
                for (var i = 0; i < tuples.length; i++) {
                    tuples[i].s = false;
                }
            }
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = tab.TiledWidgetFactory.createRadiolist(this.parent, tuples, this.contentNode, itemName, this.get_lineHeight());
    },
    
    updateContent: function tab_Radiolist$updateContent(data) {
        var results = (data.length > 0) ? data.join('') : this._searchBox$2.get_noMatchHtml();
        var jqueryDiv = $(this.contentNode);
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
            this.tiledWidget = null;
        }
        jqueryDiv.html(results);
    },
    
    shouldNotReinstantiate: function tab_Radiolist$shouldNotReinstantiate() {
        return ss.isValue(this._searchBox$2) && this._searchBox$2.isShowingResults();
    },
    
    layout: function tab_Radiolist$layout(contentSize, horizontalLayout) {
        this.inherited(arguments);
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.updateViewport(contentSize.w, contentSize.h);
        }
        var searchHeight = (ss.isValue(this._searchBox$2) && this._searchBox$2.get_isVisible()) ? dojo.marginBox(this._searchBox$2.domNode).h : 0;
        dojo.style(this.contentNode, 'height', (this.div.clientHeight - searchHeight) + 'px');
    },
    
    destroy: function tab_Radiolist$destroy() {
        this.dispose();
        if (ss.isValue(this._searchBox$2)) {
            this._searchBox$2.destroy();
        }
        if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
        }
        this.tiledWidget = null;
    },
    
    fetchChildNodeByIndex: function tab_Radiolist$fetchChildNodeByIndex(index) {
        if (ss.isValue(this.tiledWidget)) {
            return this.tiledWidget.getElement(index);
        }
        else {
            return null;
        }
    },
    
    fetchAllItem: function tab_Radiolist$fetchAllItem() {
        if (this.shouldUseAllItem() && ss.isValue(this.contentNode)) {
            return this.contentNode.firstChild;
        }
        else {
            return null;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CommandExecutedEventArgs

tab.CommandExecutedEventArgs = function tab_CommandExecutedEventArgs() {
    tab.CommandExecutedEventArgs.initializeBase(this);
}
tab.CommandExecutedEventArgs.prototype = {
    command: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.ConditionalsWidget

tab.ConditionalsWidget = function tab_ConditionalsWidget() {
    this.templateString = "<div class='ConditionalsWidget tab-ctrl-formatted-text'>" + "<div class='Conditional' dojoAttachPoint='domCondition'>" + "<span dojoAttachPoint='domConditionTitle' class='ConditionalTitle'>Condition</span><br/>" + "<span dojoAttachPoint='domConditionText'></span></div>" + "<div class='Conditional' dojoAttachPoint='domLimit'>" + "<span dojoAttachPoint='domLimitTitle' class='ConditionalTitle'>Limit</span><br/>" + "<span dojoAttachPoint='domLimitText'></span></div>" + '</div>';
    tab.ConditionalsWidget.initializeBase(this);
}
tab.ConditionalsWidget.prototype = {
    isContainer: false,
    domCondition: null,
    domConditionTitle: null,
    domConditionText: null,
    domLimit: null,
    domLimitTitle: null,
    domLimitText: null,
    
    init: function tab_ConditionalsWidget$init(condition, limit) {
        if (!tab.MiscUtil.isNullOrEmpty(condition)) {
            this.domConditionText.innerHTML = condition;
            this.domCondition.title = condition;
        }
        else {
            dojo.style(this.domCondition, 'display', 'none');
        }
        if (!tab.MiscUtil.isNullOrEmpty(limit)) {
            this.domLimitText.innerHTML = limit;
            this.domLimit.title = limit;
        }
        else {
            dojo.style(this.domLimit, 'display', 'none');
        }
        if (!tab.MiscUtil.isNullOrEmpty(condition) && !tab.MiscUtil.isNullOrEmpty(limit)) {
            dojo.style(this.domLimit, 'borderTop', 'solid 1px #FAFAFA');
        }
    },
    
    postCreate: function tab_ConditionalsWidget$postCreate() {
        this._localize$1();
    },
    
    _localize$1: function tab_ConditionalsWidget$_localize$1() {
        this.domConditionTitle.innerHTML = tableau.format.escapeHTML(tab.Strings.QuickFilterConditionalsCondition);
        this.domLimitTitle.innerHTML = tableau.format.escapeHTML(tab.Strings.QuickFilterConditionalsLimit);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ContinuousSlider

tab.ContinuousSlider = function tab_ContinuousSlider(viewModel) {
    tab.ContinuousSlider.initializeBase(this, [ viewModel, new tab._continuousSliderTemplate() ]);
    this.viewModel = viewModel;
    this.get_template().get_domRoot().addClass(this.viewModel.get_sliderClassName());
}
tab.ContinuousSlider.prototype = {
    viewModel: null,
    
    applyChanges: function tab_ContinuousSlider$applyChanges(index) {
        this.viewModel.set_sliderCurrentValue(index);
    },
    
    dispose: function tab_ContinuousSlider$dispose() {
        tab.ContinuousSlider.callBaseMethod(this, 'dispose');
        this.viewModel = null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._continuousSliderTemplate

tab._continuousSliderTemplate = function tab__continuousSliderTemplate() {
    tab._continuousSliderTemplate.initializeBase(this, [ $("<div class='tabHorizontalSlider'>\n</div>'") ]);
}


////////////////////////////////////////////////////////////////////////////////
// tab.CurrentPagePanel

tab.CurrentPagePanel = function tab_CurrentPagePanel(oProps) {
    this.templateString = "<div dojoAttachPoint='containerNode'\u009d baseClass='currentPagePanel'>" + "<div dojoAttachPoint='_titlePane' style='border:0; float:left; width:100%; overflow:hidden;'></div>" + "<div dojoType='dijit.layout.SplitContainer' persist='false' dojoAttachPoint='innerWrapper' orientation='${cpOrientation}' sizerWidth='0' dragRestriction='true' activeSizing='false' style='float:left;'>" + "<div dojoType='dijit.layout.LayoutContainer' sizeShare='24' sizeMin='24' style='display:${display_dropdown};' dojoAttachPoint='buttonsContainer' >" + "<button dojoAttachEvent='onClick:prevPage' dojoType='dijit.form.Button' layoutAlign='left' style='margin:0; margin-right:2px;' iconClass='dijitIcon cpLeftArrowBlack' showLabel='false' dojoAttachPoint='_leftBtn'></button>" + "<select dojoAttachEvent='onChange:onSelection' dojoType='tableau.base.widget.ui.iDropDownSelect' dojoAttachPoint='_dropdown' layoutAlign='client' autoWidth='true' minSize='100' hasDownArrow='true' popupExtraClass='${popupClass}'></select>" + "<button dojoAttachEvent='onClick:nextPage' dojoType='dijit.form.Button' layoutAlign='right' style='clear: left; margin:0; margin-left:2px;' iconClass='dijitIcon cpRightArrowBlack' showLabel='false' dojoAttachPoint='_rightBtn'></button>" + '</div>' + "<div dojoType='dijit.layout.ContentPane' sizeShare='24' sizeMin='24' style='display:${display_slider}; padding:6px 0 0 0; border:0; overflow:hidden;' dojoAttachPoint='sliderPane'>" + "<div dojoAttachEvent='onChange:onSliderChange' dojoType='dijit.form.HorizontalSlider' slideDuration='0'" + "pageIncrement='1' minimum='0' maximum='${maximum}' discreteValues='${discrete_values}' intermediateChanges='false' showButtons='false'" + "dojoAttachPoint='_slider'></div>" + "<div dojoAttachPoint='_horizontalRuleNode'></div>" + '</div>' + '</div>' + "<div dojoType='dijit.layout.ContentPane' dojoAttachPoint='_checkboxPane' style='padding:0; height:16px; width:110px; display:${display_toggle}; border:0; position:relative; float:left;'>" + "<input dojoAttachEvent='onChange:onCheckboxChange' dojoType='dijit.form.CheckBox' dojoAttachPoint='_showHistoryCb'/>" + '</div>' + '</div>';
    tab.CurrentPagePanel.initializeBase(this);
}
tab.CurrentPagePanel.prototype = {
    baseClass: 'currentPagePanel',
    widgetsInTemplate: true,
    _subscriptions: null,
    zid: 0,
    sliderPane: null,
    show_toggle: false,
    show_dropdown: false,
    show_slider: false,
    sheetid: null,
    session: null,
    lTitle: null,
    titleHtml: null,
    isDashboard: false,
    pageViewModel: null,
    innerWrapper: null,
    cpHeight: 0,
    buttonsContainer: null,
    _started: false,
    _slider: null,
    _showHistoryCb: null,
    _rightBtn: null,
    _leftBtn: null,
    _horizontalRuleNode: null,
    _dropdown: null,
    _checkboxPane: null,
    rid: 0,
    timestamp: 0,
    _horizontalRule: null,
    oldSize: 0,
    containerNode: null,
    titleSize: null,
    zoneTitleHeight: 0,
    zoneTitleWidth: 0,
    _titlePane: null,
    pages: null,
    current_page: 0,
    refreshed: false,
    enable: false,
    cpOrientation: null,
    display_dropdown: null,
    display_slider: null,
    display_toggle: null,
    maximum: 0,
    discrete_values: 0,
    show_ruler: null,
    ruler_count: 0,
    popupClass: null,
    requestTimeout: null,
    rebuildLayoutTimeout: null,
    BUTTONS_HEIGHT: 26,
    ONLY_BUTTONS: 24,
    SLIDER_HEIGHT: 16,
    ONLY_SLIDER: 15,
    TOGGLE_HEIGHT: 16,
    TOGGLE_WIDTH_OFFSET: 90,
    RULE_OFFSET: 5,
    DOM_OFFSET: 4,
    WIDGET_SPACE: 8,
    SCROLL_PAGES: 14,
    
    startup: function tab_CurrentPagePanel$startup() {
        this.containerNode = this.domNode;
        this.titleSize = tab.$create_Size(0, 0);
        this.inherited(arguments);
        this.innerWrapper.startup();
        this.buttonsContainer.startup();
        this.refreshLayout(this.pages, this.current_page, this.enable);
        if (this.show_toggle) {
            var label = document.createElement('label');
            label.innerHTML = tableau.format.escapeHTML(tab.Strings.CurrentPagePanelShowHistory);
            dojo.attr(label, 'for', this._showHistoryCb.id);
            dojo.place(label, this._checkboxPane.domNode);
            if (('attr' in this._showHistoryCb) && this.pageViewModel.get_isHistoryToggleInteractionDisabled()) {
                this._showHistoryCb.attr('disabled', true);
            }
        }
        var pageModel = this.pageViewModel.get_pageModel();
        pageModel.add_newPage(ss.Delegate.create(this, this.onPageChanged));
        this._rightBtn.setAttribute('_scroll', false);
        this._leftBtn.setAttribute('_scroll', false);
        this._slider.setAttribute('_scroll', false);
    },
    
    onPageChanged: function tab_CurrentPagePanel$onPageChanged(pagePresModel) {
        this.refreshLayout(pagePresModel.pageNames, pagePresModel.currentPage, pagePresModel.pageTrailOptions.state);
    },
    
    layout: function tab_CurrentPagePanel$layout() {
        var titleOffsetWidth = 0;
        var titleOffsetHeight = 0;
        var toggleOffsetHeight = 0;
        if (ss.isNullOrUndefined(this.titleSize) || (ss.isValue(this.lTitle) && !this.titleSize.w)) {
            return;
        }
        var oNode = dojo.marginBox(this.containerNode);
        var widgetWidth = oNode.w - this.DOM_OFFSET;
        var widgetHeight = 0;
        if (this.titleSize.w < oNode.w) {
            if (oNode.h < this.getWidgetOffset()) {
                this.cpOrientation = 'horizontal';
            }
            else {
                this.cpOrientation = 'vertical';
            }
            widgetWidth -= this.titleSize.w;
            titleOffsetWidth = this.titleSize.w;
        }
        else {
            if (oNode.h - this.titleSize.h < this.getWidgetOffset()) {
                this.cpOrientation = 'horizontal';
            }
            else {
                this.cpOrientation = 'vertical';
            }
            titleOffsetHeight = this.titleSize.h / 2;
        }
        if (this.cpOrientation === 'horizontal') {
            if (this.show_toggle) {
                widgetWidth -= this.TOGGLE_WIDTH_OFFSET;
            }
            widgetHeight = (this.show_dropdown) ? this.BUTTONS_HEIGHT : this.SLIDER_HEIGHT;
        }
        else {
            widgetHeight = (this.show_slider) ? this.SLIDER_HEIGHT : 0;
            widgetHeight += (this.show_dropdown) ? this.BUTTONS_HEIGHT : 0;
            toggleOffsetHeight = (this.show_toggle) ? this.TOGGLE_HEIGHT / 2 : 0;
        }
        this.innerWrapper.isHorizontal = this.cpOrientation === 'horizontal';
        dojo.marginBox(this.innerWrapper.domNode, { w: widgetWidth, h: widgetHeight });
        this.innerWrapper.resize();
        var oSlider = dojo.marginBox(this.sliderPane.domNode);
        if (this._horizontalRule != null && oSlider.w > 0) {
            dojo.marginBox(this._horizontalRule.domNode, { w: oSlider.w });
            if (this.pages.length * 2 > oSlider.w) {
                dojo.style(this._horizontalRule.domNode, 'display', 'none');
            }
            else {
                dojo.style(this._horizontalRule.domNode, 'display', '');
            }
        }
        var buttonOffset = Math.min(((oNode.h - widgetHeight) / 2) - titleOffsetHeight - toggleOffsetHeight, 6);
        var buttonTop = buttonOffset + (2 * titleOffsetHeight);
        dojo.style(this.innerWrapper.domNode, { top: Math.max(buttonTop, 0) + 'px', position: 'absolute', left: (titleOffsetWidth + (this.DOM_OFFSET / 2)) + 'px' });
        if (this.cpOrientation === 'vertical') {
            dojo.style(this.buttonsContainer.domNode, { height: this.ONLY_BUTTONS + 'px', position: 'relative', top: '', left: '', padding: '0 0 2px 0' });
            this.buttonsContainer.resize();
            dojo.style(this.sliderPane.domNode, { height: this.SLIDER_HEIGHT + 'px', position: 'relative', top: '', left: '' });
            dojo.style(this._checkboxPane.domNode, { width: Math.max(oNode.w - 1, 0) + 'px', top: Math.max(buttonTop, 0) + widgetHeight + buttonOffset + 'px', position: 'absolute', left: titleOffsetWidth + 'px' });
        }
        else {
            dojo.marginBox(this.sliderPane.domNode, { w: oSlider.w - this.WIDGET_SPACE });
            if (this._horizontalRule != null) {
                dojo.marginBox(this._horizontalRule.domNode, { w: oSlider.w - this.WIDGET_SPACE - this.RULE_OFFSET });
            }
            var oDropdown = dojo.marginBox(this._dropdown.domNode);
            dojo.marginBox(this._dropdown.domNode, { w: oDropdown.w - this.WIDGET_SPACE });
            dojo.marginBox(this._rightBtn.domNode, { l: oDropdown.l + oDropdown.w - this.WIDGET_SPACE });
            dojo.style(this.buttonsContainer.domNode, { height: this.ONLY_BUTTONS + 'px', position: '', top: '', left: '', padding: '0 0 2px 0' });
            this.buttonsContainer.resize();
            dojo.style(this.sliderPane.domNode, { height: this.SLIDER_HEIGHT + 'px', position: '', top: '', left: ((widgetWidth + this.DOM_OFFSET) / 2) + 'px' });
            dojo.style(this._checkboxPane.domNode, { top: Math.max(buttonTop, 0) + 'px', position: 'absolute', left: titleOffsetWidth + widgetWidth + (this.DOM_OFFSET / 2) + 'px' });
        }
        var width = parseInt(dojo.style(this._dropdown.domNode, 'width')) - 24;
        dojo.marginBox(this._dropdown.containerNode, { w: width });
    },
    
    getWidgetOffset: function tab_CurrentPagePanel$getWidgetOffset() {
        var retVal = (this.show_dropdown) ? this.BUTTONS_HEIGHT : 0;
        retVal += (this.show_slider) ? this.SLIDER_HEIGHT : 0;
        retVal += (this.show_toggle) ? this.TOGGLE_HEIGHT : 0;
        return retVal;
    },
    
    postMixInProperties: function tab_CurrentPagePanel$postMixInProperties() {
        this.display_dropdown = (this.show_dropdown) ? 'block' : 'none';
        this.display_slider = (this.show_slider) ? 'block' : 'none';
        this.display_toggle = (this.show_toggle) ? 'block' : 'none';
        var numPages = this.pages.length;
        this.maximum = numPages - 1;
        this.discrete_values = numPages;
        this.show_ruler = (this.show_slider) ? 'block' : 'none';
        this.ruler_count = numPages;
        this.popupClass = (numPages > this.SCROLL_PAGES) ? 'cpPopupEx' : 'cpPopup';
        this.cpOrientation = (this.cpHeight < this.getWidgetOffset()) ? 'horizontal' : 'vertical';
    },
    
    postCreate: function tab_CurrentPagePanel$postCreate() {
        this.inherited(arguments);
        this.timestamp = new Date().getTime();
        if (!this.show_dropdown) {
            this.innerWrapper.removeChild(this.buttonsContainer);
        }
        if (!this.show_slider) {
            this.innerWrapper.removeChild(this.sliderPane);
        }
        if (this.show_toggle && ('attr' in this._showHistoryCb)) {
            this._showHistoryCb.attr('checked', this.enable);
        }
    },
    
    _setPageFunc$2: function tab_CurrentPagePanel$_setPageFunc$2(newPage, oldPage) {
        this._clearRequestTimeout$2();
        this.requestTimeout = window.setTimeout(ss.Delegate.create(this, function() {
            this._doSetPage$2(newPage, oldPage);
        }), 500);
    },
    
    _clearRequestTimeout$2: function tab_CurrentPagePanel$_clearRequestTimeout$2() {
        if (ss.isValue(this.requestTimeout)) {
            window.clearTimeout(this.requestTimeout);
            this.requestTimeout = null;
        }
    },
    
    _clearRebuildLayoutTimeout$2: function tab_CurrentPagePanel$_clearRebuildLayoutTimeout$2() {
        if (ss.isValue(this.rebuildLayoutTimeout)) {
            window.clearTimeout(this.rebuildLayoutTimeout);
            this.rebuildLayoutTimeout = null;
        }
    },
    
    _doSetPage$2: function tab_CurrentPagePanel$_doSetPage$2(newPage, oldPage) {
        this._clearRequestTimeout$2();
        if (this.isDashboard) {
            tab.PageServerCommands.syncedChangePage(this.pageViewModel.get_visualId(), this.zid, newPage);
        }
        else {
            tab.PageServerCommands.changePage(newPage, this.pageViewModel.get_visualId());
        }
    },
    
    destroy: function tab_CurrentPagePanel$destroy(preserveDom) {
        this.pageViewModel.get_pageModel().remove_newPage(ss.Delegate.create(this, this.onPageChanged));
        dojo.forEach(this._subscriptions, dojo.unsubscribe);
        this._clearRequestTimeout$2();
        this._clearRebuildLayoutTimeout$2();
        this.inherited(arguments);
    },
    
    setTitle: function tab_CurrentPagePanel$setTitle() {
        this._titlePane.innerHTML = this.titleHtml;
        this.setTitleSize();
    },
    
    setTitleSize: function tab_CurrentPagePanel$setTitleSize() {
        var oTitleBar = dojo.marginBox(this._titlePane);
        if (!this.zoneTitleWidth) {
            oTitleBar.w = dojo.marginBox(this.containerNode).w;
        }
        else {
            oTitleBar.w = this.zoneTitleWidth;
            dojo.marginBox(this._titlePane, oTitleBar);
        }
        this.titleSize = oTitleBar;
        dojo.style(this._titlePane, { height: this.titleSize.h + 'px' });
        this.layout();
        tableau.util.setupTitleEllipsis($(this._titlePane));
    },
    
    refreshLayout: function tab_CurrentPagePanel$refreshLayout(newPages, page, newEnable) {
        var rebuildDropdown = false;
        this.refreshed = false;
        this.current_page = page;
        this.pages = newPages;
        var delayRefresh = false;
        var refreshFunc = ss.Delegate.create(this, function() {
            this.refreshed = true;
            this.refreshWidget(this.current_page);
        });
        if (this.show_dropdown) {
            var pageLen = this.pages.length;
            rebuildDropdown = false;
            if (pageLen !== this._dropdown.options.length) {
                rebuildDropdown = true;
            }
            else {
                for (var i = 0; i < pageLen; i++) {
                    var label = this._dropdown.options[i].label;
                    if (this.pages[i] !== label) {
                        rebuildDropdown = true;
                        break;
                    }
                }
            }
            if (rebuildDropdown) {
                this._clearRebuildLayoutTimeout$2();
                delayRefresh = true;
                this._dropdown.options = [];
                this.rebuildLayoutTimeout = window.setTimeout(ss.Delegate.create(this, function() {
                    var options = [];
                    for (var i = 0, pageLength = newPages.length; i < pageLength; i++) {
                        options.add({ label: newPages[i], value: i.toString(10), selected: i === this.current_page });
                    }
                    this._dropdown.addOption(options);
                    this._dropdown.startup();
                    refreshFunc();
                }), 1);
                this._dropdown.popupExtraClass = (newPages.length > this.SCROLL_PAGES) ? 'cpPopupEx' : 'cpPopup';
            }
            else {
                this._dropdown.setValue(this.current_page);
            }
        }
        if (this.show_slider) {
            if (this._horizontalRule != null) {
                this._horizontalRule.destroy(false);
                this._horizontalRule = null;
            }
            this._slider.maximum = this.pages.length - 1;
            this._slider.discreteValues = this.pages.length;
            dijit.setWaiState(this._slider.focusNode, 'valuemax', this.pages.length);
            if (this.pages.length < 1200) {
                var rulesParams = { style: 'width:100%; height:3px; margin-left:4px; margin-right:4px;', count: this.pages.length };
                this._horizontalRule = new dijit.form.HorizontalRule(rulesParams, this._horizontalRuleNode);
                this._horizontalRule.placeAt(this.sliderPane.domNode, 2);
                this._horizontalRule.startup();
            }
            this._slider.startup();
        }
        if (this.show_toggle && arguments.length > 2) {
            this._showHistoryCb.attr('value', newEnable);
            this.enable = newEnable;
        }
        this.setTitle();
        if (!delayRefresh) {
            refreshFunc();
        }
    },
    
    refreshWidget: function tab_CurrentPagePanel$refreshWidget(page) {
        if (this.show_dropdown && this._dropdown != null) {
            this._dropdown.setValue(this.current_page);
            this._rightBtn.setAttribute('disabled', this.current_page === (this.pages.length - 1));
            this._rightBtn.attr('iconClass', 'dijitIcon cpRightArrow' + ((this.current_page === (this.pages.length - 1)) ? 'Grey' : 'Black'));
            this._leftBtn.setAttribute('disabled', !this.current_page);
            this._leftBtn.attr('iconClass', 'dijitIcon cpLeftArrow' + ((!this.current_page) ? 'Grey' : 'Black'));
        }
        if (this.show_slider && this._slider != null) {
            this._slider.setValue(this.current_page);
        }
    },
    
    prevPage: function tab_CurrentPagePanel$prevPage(e) {
        if (!this.current_page) {
            return;
        }
        this._setPageFunc$2(this.current_page - 1, this.current_page);
        this.refreshWidget(this.current_page - 1);
    },
    
    nextPage: function tab_CurrentPagePanel$nextPage(e) {
        if (this.current_page === (this.pages.length - 1)) {
            return;
        }
        this._setPageFunc$2(this.current_page + 1, this.current_page);
        this.refreshWidget(this.current_page + 1);
    },
    
    onCheckboxChange: function tab_CurrentPagePanel$onCheckboxChange() {
        if (!this.refreshed) {
            return;
        }
        this.enable = !this.enable;
        tab.PageServerCommands.toggleTrails(this.pageViewModel.get_visualId());
    },
    
    onSelection: function tab_CurrentPagePanel$onSelection(selectedPage, propagate) {
        var selectedPageAsInt = parseInt(selectedPage);
        selectedPageAsInt = (isNaN(selectedPageAsInt)) ? 0 : selectedPageAsInt;
        if ((selectedPageAsInt === this.current_page) || !this._started || !this.refreshed) {
            return;
        }
        this._doSetPage$2(selectedPageAsInt, this.current_page);
        this.refreshWidget(selectedPageAsInt);
    },
    
    onSliderChange: function tab_CurrentPagePanel$onSliderChange(selectedPage) {
        var selectedPageAsInt = parseInt(selectedPage);
        if (selectedPageAsInt === this.current_page || !this.refreshed) {
            return;
        }
        this._setPageFunc$2(selectedPageAsInt, this.current_page);
        this.refreshWidget(selectedPageAsInt);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CustomViewsPanel

tab.CustomViewsPanel = function tab_CustomViewsPanel(viewModel, toolbarButton) {
    this.controlDisposables = new tab.DisposableHolder();
    tab.CustomViewsPanel.initializeBase(this, [ $(tab.CustomViewsPanel.constructHtml()) ]);
    this.viewModel = viewModel;
    this.viewModel.add_panelVisbilityChanged(ss.Delegate.create(this, this.handleVisiblityChanged));
    this.viewModel.add_modeChanged(ss.Delegate.create(this, this.handleModeChanged));
    this.viewModel.add_customViewListChanged(ss.Delegate.create(this, this.handleCustomViewListChanged));
    this.viewModel.add_defaultCustomViewChanged(ss.Delegate.create(this, this.handleDefaultCustomViewChanged));
    this.viewModel.add_startManageEnabledChanged(ss.Delegate.create(this, this.handleStartManageEnabledChanged));
    this.viewModel.add_applyManageEnabledChanged(ss.Delegate.create(this, this.handleApplyManageEnabledChanged));
    this.viewModel.add_manageListItemsChanged(ss.Delegate.create(this, this.handleManageListItemsChanged));
    this.toolbarButton = toolbarButton;
    this.panelWidth = this.get_defaultPanelWidth();
    this.panelHeight = this.get_defaultPanelHeight();
    this.body = $(document.body);
    this.panel = this.get_element();
    this.headerPanel = this.panel.find('.tab-cv-header-panel');
    this.rememberPanel = this.panel.find('.tab-cv-remember-panel');
    this.rememberNameHolder = this.rememberPanel.find('.tab-cv-remember-name-holder');
    this.rememberNameInput = this.rememberPanel.find('.tab-cv-remember-name-input');
    this.rememberNamePlaceholder = this.rememberPanel.find('.tab-cv-remember-name-placeholder');
    this.rememberButton = this.rememberPanel.find('.tab-cv-remember-button');
    this.makeDefaultPanel = this.panel.find('.tab-cv-make-default-panel');
    this.makeDefaultButton = this.makeDefaultPanel.find('.tab-cv-make-default-button');
    this.listPanel = this.panel.find('.tab-cv-list-panel');
    this.listMyCustomViews = this.listPanel.find('.tab-cv-list-my');
    this.listMyCustomViewsHeader = this.listPanel.find('.tab-cv-list-my-header');
    this.listOtherCustomViews = this.listPanel.find('.tab-cv-list-other');
    this.listOtherCustomViewsHeader = this.listPanel.find('.tab-cv-list-other-header');
    this.startManagePanel = this.panel.find('.tab-cv-start-manage-panel');
    this.startManageButton = this.startManagePanel.find('.tab-cv-start-manage-button');
    this.finishManagePanel = this.panel.find('.tab-cv-finish-manage-panel');
    this.applyManageButton = this.finishManagePanel.find('.tab-cv-apply-manage-button');
    this.cancelManageButton = this.finishManagePanel.find('.tab-cv-cancel-manage-button');
    this.resizeHandle = this.panel.find('.tab-cv-resize-handle');
    this.rememberButton.find('.tab-cv-styled-button-middle').text(tab.Strings.CustomViewsRemember);
    this.makeDefaultButton.text(tab.Strings.CustomViewsCurrentDefaultIs(tab.Strings.CustomViewsOriginalView));
    this.listMyCustomViewsHeader.text(tab.Strings.CustomViewsMyCustomViews);
    this.listOtherCustomViewsHeader.text(tab.Strings.CustomViewsOtherCustomViews);
    this.startManageButton.find('.tab-cv-start-manage-button-text').text(tab.Strings.CustomViewsStartManage);
    this.applyManageButton.find('.tab-cv-styled-button-middle').text(tab.Strings.CustomViewsDone);
    this.cancelManageButton.find('.tab-cv-styled-button-middle').text(tab.Strings.CustomViewsCancel);
    this.panel.hide();
    this.panel.appendTo(document.body);
    this.panel.remove();
}
tab.CustomViewsPanel.constructHtml = function tab_CustomViewsPanel$constructHtml() {
    var sb = new ss.StringBuilder();
    sb.append('<div class="tab-cv-panel tab-unselectable" unselectable="on">');
    sb.append('<div class="tab-cv-header-panel" unselectable="on">');
    sb.append('<span class="tab-cv-header-text" unselectable="on"></span>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-remember-panel" unselectable="on">');
    sb.append('<div class="tab-cv-remember-name-holder" unselectable="on">');
    sb.append('<input type="text" maxlength="255"');
    sb.append(' class="tab-cv-remember-name-input tab-selectable" tabindex="1">');
    sb.append('<div class="tab-cv-remember-name-placeholder">');
    sb.append(tab.Strings.CustomViewsNameYourCustomView).append('</div>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-remember-button tab-cv-styled-button" unselectable="on" tabindex="2">');
    sb.append('<span class="tab-cv-styled-button-left" unselectable="on"></span>');
    sb.append('<span class="tab-cv-styled-button-middle" unselectable="on"></span>');
    sb.append('<span class="tab-cv-styled-button-right" unselectable="on"></span>');
    sb.append('</div>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-make-default-panel" unselectable="on">');
    sb.append('<div class="tab-cv-make-default-button tab-disabled" unselectable="on" tabindex="3"></div>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-list-panel" unselectable="on">');
    sb.append('<div class="tab-cv-list-panel-scroller" unselectable="on">');
    sb.append('<div class="tab-cv-list-my-header" unselectable="on"></div>');
    sb.append('<div class="tab-cv-list-my" unselectable="on"></div>');
    sb.append('<div class="tab-cv-list-other-header" unselectable="on"></div>');
    sb.append('<div class="tab-cv-list-other" unselectable="on"></div>');
    sb.append('</div>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-start-manage-panel" unselectable="on">');
    sb.append('<div class="tab-cv-start-manage-top-border" unselectable="on"></div>');
    sb.append('<div class="tab-cv-start-manage-button" unselectable="on" tabindex="4">');
    sb.append('<span class="tab-cv-start-manage-button-icon tab-icon-cv-manage" unselectable="on"></span>');
    sb.append('<span class="tab-cv-start-manage-button-text" unselectable="on"></span>');
    sb.append('</div>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-finish-manage-panel" unselectable="on">');
    sb.append('<div class="tab-cv-apply-manage-button tab-cv-styled-button" unselectable="on" tabindex="3">');
    sb.append('<span class="tab-cv-styled-button-left" unselectable="on"></span>');
    sb.append('<span class="tab-cv-styled-button-middle" unselectable="on"></span>');
    sb.append('<span class="tab-cv-styled-button-right" unselectable="on"></span>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-cancel-manage-button tab-cv-styled-button" unselectable="on" tabindex="4">');
    sb.append('<span class="tab-cv-styled-button-left" unselectable="on"></span>');
    sb.append('<span class="tab-cv-styled-button-middle" unselectable="on"></span>');
    sb.append('<span class="tab-cv-styled-button-right" unselectable="on"></span>');
    sb.append('</div>');
    sb.append('</div>');
    sb.append('<div class="tab-cv-resize-handle" unselectable="on">');
    sb.append('<div class="tab-cv-resize-handle-icon" unselectable="on">');
    sb.append('</div>');
    sb.append('</div>');
    sb.append('</div>');
    return sb.toString();
}
tab.CustomViewsPanel.prototype = {
    viewModel: null,
    toolbarButton: null,
    glass: null,
    panelWidth: 0,
    panelHeight: 0,
    resizing: false,
    resizeStartPanelWidth: 0,
    resizeStartPanelHeight: 0,
    resizeStartX: 0,
    resizeStartY: 0,
    body: null,
    panel: null,
    headerPanel: null,
    rememberPanel: null,
    rememberNameHolder: null,
    rememberNameInput: null,
    rememberNamePlaceholder: null,
    rememberButton: null,
    makeDefaultPanel: null,
    makeDefaultButton: null,
    listPanel: null,
    listMyCustomViews: null,
    listMyCustomViewsHeader: null,
    listOtherCustomViews: null,
    listOtherCustomViewsHeader: null,
    startManagePanel: null,
    startManageButton: null,
    finishManagePanel: null,
    applyManageButton: null,
    cancelManageButton: null,
    resizeHandle: null,
    
    dispose: function tab_CustomViewsPanel$dispose() {
        this.viewModel.remove_panelVisbilityChanged(ss.Delegate.create(this, this.handleVisiblityChanged));
        this.viewModel.remove_modeChanged(ss.Delegate.create(this, this.handleModeChanged));
        this.viewModel.remove_customViewListChanged(ss.Delegate.create(this, this.handleCustomViewListChanged));
        this.viewModel.remove_defaultCustomViewChanged(ss.Delegate.create(this, this.handleDefaultCustomViewChanged));
        this.viewModel.remove_startManageEnabledChanged(ss.Delegate.create(this, this.handleStartManageEnabledChanged));
        this.viewModel.remove_applyManageEnabledChanged(ss.Delegate.create(this, this.handleApplyManageEnabledChanged));
        this.viewModel.remove_manageListItemsChanged(ss.Delegate.create(this, this.handleManageListItemsChanged));
        this.removeGlass();
        this.controlDisposables.dispose();
        tab.CustomViewsPanel.callBaseMethod(this, 'dispose');
        this.body = null;
        this.panel = null;
        this.headerPanel = null;
        this.rememberPanel = null;
        this.rememberNameHolder = null;
        this.rememberNameInput = null;
        this.rememberNamePlaceholder = null;
        this.rememberButton = null;
        this.makeDefaultPanel = null;
        this.makeDefaultButton = null;
        this.listPanel = null;
        this.listMyCustomViews = null;
        this.listMyCustomViewsHeader = null;
        this.listOtherCustomViews = null;
        this.listOtherCustomViewsHeader = null;
        this.startManagePanel = null;
        this.startManageButton = null;
        this.finishManagePanel = null;
        this.applyManageButton = null;
        this.cancelManageButton = null;
        this.resizeHandle = null;
        this.toolbarButton = null;
        this.viewModel = null;
    },
    
    handleVisiblityChanged: function tab_CustomViewsPanel$handleVisiblityChanged(sender, e) {
        if (this.viewModel.get_isPanelVisible()) {
            this.show();
        }
        else {
            this.hide();
        }
    },
    
    handleModeChanged: function tab_CustomViewsPanel$handleModeChanged(sender, e) {
        if (this.viewModel.get_isPanelVisible()) {
            this.layout();
            this.updateControls();
            this.updateCustomViewsList();
        }
    },
    
    handleCustomViewListChanged: function tab_CustomViewsPanel$handleCustomViewListChanged(sender, e) {
        this.updateMakeDefaultButton();
        this.updateStartManageButton();
        this.updateCustomViewsList();
    },
    
    handleDefaultCustomViewChanged: function tab_CustomViewsPanel$handleDefaultCustomViewChanged(sender, e) {
        this.updateMakeDefaultButton();
        this.updateCustomViewsList();
    },
    
    handleStartManageEnabledChanged: function tab_CustomViewsPanel$handleStartManageEnabledChanged(sender, e) {
        this.updateStartManageButton();
    },
    
    handleApplyManageEnabledChanged: function tab_CustomViewsPanel$handleApplyManageEnabledChanged(sender, e) {
        this.updateApplyManageButton();
    },
    
    handleManageListItemsChanged: function tab_CustomViewsPanel$handleManageListItemsChanged(sender, e) {
        this.updateManageListItems();
    },
    
    show: function tab_CustomViewsPanel$show() {
        this.removeGlass();
        this.glass = new spiff.Glass();
        this.glass.add_click(ss.Delegate.create(this, this.glassClicked));
        this.glass.show();
        this.panel.appendTo(document.body);
        this.panel.fadeIn('fast');
        this.layout();
        this.place();
        this.bindControls();
        this.updateControls();
    },
    
    hide: function tab_CustomViewsPanel$hide() {
        this.panel.fadeOut('fast', ss.Delegate.create(this, this.remove));
    },
    
    removeGlass: function tab_CustomViewsPanel$removeGlass() {
        if (ss.isValue(this.glass)) {
            this.glass.remove_click(ss.Delegate.create(this, this.glassClicked));
            this.glass.dispose();
            this.glass = null;
        }
    },
    
    glassClicked: function tab_CustomViewsPanel$glassClicked() {
        this.viewModel.hide();
    },
    
    remove: function tab_CustomViewsPanel$remove() {
        this.removeGlass();
        this.panel.remove();
    },
    
    layout: function tab_CustomViewsPanel$layout() {
        if (this.viewModel.get_mode() === tab.CustomViewsViewModel.modeSelect) {
            this.layoutSelectMode();
        }
        else if (this.viewModel.get_mode() === tab.CustomViewsViewModel.modeManage) {
            this.layoutManageMode();
        }
    },
    
    layoutSelectMode: function tab_CustomViewsPanel$layoutSelectMode() {
        var makeDefaultPanelTop = this.get_panelBorder();
        var listPanelTop = this.get_panelBorder();
        var listPanelBottom = this.get_panelBorder();
        if (tsConfig.allow_custom_view_save) {
            this.headerPanel.hide();
            this.rememberPanel.show();
            this.startManagePanel.show();
            var rememberPanelHeight = this.rememberPanel.outerHeight();
            var startManagePanelHeight = this.startManagePanel.outerHeight();
            listPanelTop += rememberPanelHeight;
            listPanelBottom += startManagePanelHeight;
            makeDefaultPanelTop += rememberPanelHeight;
            this.listPanel.removeClass('tab-cv-list-panel-bottom');
            var rememberButtonWidth = this.rememberButton.outerWidth();
            var rememberNameHolderRight = 3 + 7 + rememberButtonWidth + 7;
            this.rememberNameHolder.css('right', rememberNameHolderRight + 'px');
        }
        else {
            this.headerPanel.show();
            this.rememberPanel.hide();
            this.startManagePanel.hide();
            this.headerPanel.find('.tab-cv-header-text').text(tab.Strings.CustomViewsSelectCustomView);
            var headerPanelHeight = this.headerPanel.outerHeight();
            listPanelTop += headerPanelHeight;
            makeDefaultPanelTop += headerPanelHeight;
            this.listPanel.addClass('tab-cv-list-panel-bottom');
        }
        if (tsConfig.allow_custom_view_default) {
            this.makeDefaultPanel.show();
            this.makeDefaultPanel.css('top', makeDefaultPanelTop + 'px');
            var makeDefaultPanelHeight = this.makeDefaultPanel.outerHeight();
            listPanelTop += makeDefaultPanelHeight;
        }
        else {
            this.makeDefaultPanel.hide();
        }
        this.finishManagePanel.hide();
        this.listPanel.css({ top: listPanelTop + 'px', bottom: listPanelBottom + 'px' });
    },
    
    layoutManageMode: function tab_CustomViewsPanel$layoutManageMode() {
        var listPanelTop = this.get_panelBorder();
        var listPanelBottom = this.get_panelBorder();
        this.headerPanel.show();
        this.rememberPanel.hide();
        this.headerPanel.find('.tab-cv-header-text').text(tab.Strings.CustomViewsManageCustomViews);
        var headerPanelHeight = this.headerPanel.outerHeight();
        listPanelTop += headerPanelHeight;
        this.makeDefaultPanel.hide();
        this.startManagePanel.hide();
        this.finishManagePanel.show();
        var finishManagePanelHeight = this.finishManagePanel.outerHeight();
        listPanelBottom += finishManagePanelHeight;
        var cancelManageButtonWidth = this.cancelManageButton.outerWidth();
        var applyManageButtonRight = 7 + cancelManageButtonWidth + 7;
        this.applyManageButton.css('right', applyManageButtonRight + 'px');
        this.listPanel.css({ top: listPanelTop + 'px', bottom: listPanelBottom + 'px' });
    },
    
    place: function tab_CustomViewsPanel$place() {
        var toolbarButtonOffset = this.toolbarButton.offset();
        var bodyWidth = this.body.width();
        var bodyHeight = this.body.height();
        var left = toolbarButtonOffset.left;
        if (bodyWidth - (left + this.panelWidth) < 10) {
            this.panelWidth = bodyWidth - left - 10;
        }
        var css = { left: left + 'px', width: this.panelWidth + 'px' };
        if (this.viewModel.get_isTop()) {
            var top = toolbarButtonOffset.top + this.toolbarButton.outerHeight();
            css['top'] = top + 'px';
            var bottom = bodyHeight - (top + this.panelHeight);
            if (bottom < 10) {
                bottom = 10;
                this.panelHeight = bodyHeight - (top + bottom);
            }
        }
        else {
            var bottom = bodyHeight - toolbarButtonOffset.top;
            css['bottom'] = bottom + 'px';
            var top = bodyHeight - (bottom + this.panelHeight);
            if (top < 10) {
                top = 10;
                this.panelHeight = bodyHeight - (top + bottom);
            }
        }
        css['height'] = this.panelHeight + 'px';
        this.panel.css(css);
    },
    
    bindControls: function tab_CustomViewsPanel$bindControls() {
        this.rememberNameInput.unbind('keydown');
        this.rememberNameInput.keydown(ss.Delegate.create(this, this.rememberNameInputKeydown));
        this.rememberNameInput.unbind('keyup');
        this.rememberNameInput.keyup(ss.Delegate.create(this, this.rememberNameInputKeyup));
        this.controlDisposables.dispose();
        this.controlDisposables.add(spiff.ClickHandler.targetAndClick(this.rememberNamePlaceholder, ss.Delegate.create(this, this.rememberNamePlaceholderClicked)));
        this.controlDisposables.add(spiff.ClickHandler.targetAndClick(this.rememberButton, ss.Delegate.create(this, this.rememberButtonClicked)));
        this.controlDisposables.add(spiff.ClickHandler.targetAndClick(this.startManageButton, ss.Delegate.create(this, this.startManageButtonClicked)));
        this.controlDisposables.add(spiff.ClickHandler.targetAndClick(this.applyManageButton, ss.Delegate.create(this, this.applyManageButtonClicked)));
        this.controlDisposables.add(spiff.ClickHandler.targetAndClick(this.cancelManageButton, ss.Delegate.create(this, this.cancelManageButtonClicked)));
    },
    
    updateControls: function tab_CustomViewsPanel$updateControls() {
        if (this.viewModel.get_mode() === tab.CustomViewsViewModel.modeSelect) {
            this.updateRememberControls();
            this.updateMakeDefaultButton();
            this.updateStartManageButton();
        }
        else if (this.viewModel.get_mode() === tab.CustomViewsViewModel.modeManage) {
            this.updateApplyManageButton();
        }
    },
    
    updateRememberControls: function tab_CustomViewsPanel$updateRememberControls() {
        this.rememberNameInput.val((ss.isValue(this.viewModel.get_currentCustomView())) ? this.viewModel.get_currentCustomView().name : '');
        this.updateRememberButton();
    },
    
    updateRememberButton: function tab_CustomViewsPanel$updateRememberButton() {
        var nameInput = this.rememberNameInput.val();
        if (!nameInput.length) {
            this.rememberNamePlaceholder.show();
        }
        else {
            this.rememberNamePlaceholder.hide();
        }
        if (!nameInput.trim().length) {
            this._disableRememberButton$1();
        }
        else {
            this._enableRememberButton$1();
        }
    },
    
    updateMakeDefaultButton: function tab_CustomViewsPanel$updateMakeDefaultButton() {
        var current = this.viewModel.get_currentCustomView();
        var buttonText;
        var buttonEnabled;
        if (ss.isValue(current)) {
            if (this.viewModel.isDefault(current)) {
                buttonText = tab.Strings.CustomViewsCurrentDefaultIs(current.name);
                buttonEnabled = false;
            }
            else {
                buttonText = tab.Strings.CustomViewsChangeDefaultTo(current.name);
                buttonEnabled = true;
            }
        }
        else {
            if (ss.isValue(tsConfig.current_custom_view_id)) {
                buttonText = tab.Strings.CustomViewsCannotChangeDefault;
                buttonEnabled = false;
            }
            else {
                if (this.viewModel.isDefault(current)) {
                    buttonText = tab.Strings.CustomViewsCurrentDefaultIs(tab.Strings.CustomViewsOriginalView);
                    buttonEnabled = false;
                }
                else {
                    buttonText = tab.Strings.CustomViewsChangeDefaultTo(tab.Strings.CustomViewsOriginalView);
                    buttonEnabled = true;
                }
            }
        }
        if (buttonEnabled) {
            this.makeDefaultButton.removeClass('tab-disabled');
            this.disposables.add(spiff.ClickHandler.targetAndClick(this.makeDefaultButton, ss.Delegate.create(this, this.makeDefaultButtonClicked)));
        }
        else {
            this.makeDefaultButton.addClass('tab-disabled');
        }
        this.makeDefaultButton.text(buttonText);
    },
    
    updateStartManageButton: function tab_CustomViewsPanel$updateStartManageButton() {
        if (this.viewModel.get_startManageEnabled()) {
            this.startManageButton.removeClass('tab-disabled');
        }
        else {
            this.startManageButton.addClass('tab-disabled');
        }
    },
    
    updateApplyManageButton: function tab_CustomViewsPanel$updateApplyManageButton() {
        this.applyManageButton.removeClass('tab-disabled');
        if (!this.viewModel.get_applyManageEnabled()) {
            this.applyManageButton.addClass('tab-disabled');
        }
    },
    
    updateCustomViewsList: function tab_CustomViewsPanel$updateCustomViewsList() {
        if (this.viewModel.get_mode() === tab.CustomViewsViewModel.modeSelect) {
            if (this.viewModel.get_myCustomViews().length > 0) {
                this.listMyCustomViewsHeader.show();
                this.listMyCustomViews.show();
                this.listOtherCustomViewsHeader.show();
                this.listMyCustomViewsHeader.text(tab.Strings.CustomViewsMyCustomViews);
                var first = true;
                var listMyCustomViewsHtmlBuilder = new ss.StringBuilder();
                var $enum1 = ss.IEnumerator.getEnumerator(this.viewModel.get_myCustomViews());
                while ($enum1.moveNext()) {
                    var cv = $enum1.current;
                    if (first) {
                        first = false;
                    }
                    else {
                        this.appendListItemSeparatorHtml(listMyCustomViewsHtmlBuilder);
                    }
                    this.appendSelectListItemHtml(listMyCustomViewsHtmlBuilder, cv, false);
                }
                this.listMyCustomViews.html(listMyCustomViewsHtmlBuilder.toString());
                var listMyItems = this.listMyCustomViews.find('.tab-cv-select-list-item');
                listMyItems.each(ss.Delegate.create(this, function(index, item) {
                    this.bindListItem($(item), this.viewModel.get_myCustomViews()[index]);
                }));
            }
            else {
                if (tsConfig.allow_custom_view_save) {
                    this.listMyCustomViewsHeader.show();
                    this.listMyCustomViews.show();
                    this.listOtherCustomViewsHeader.show();
                    this.listMyCustomViewsHeader.text(tab.Strings.CustomViewsMyCustomViews);
                    var addYourOwnCustomViewsHtmlBuilder = new ss.StringBuilder();
                    addYourOwnCustomViewsHtmlBuilder.append("<div class='tab-cv-text-list-item'>");
                    addYourOwnCustomViewsHtmlBuilder.append(tab.Strings.CustomViewsAddYourOwnCustomView);
                    addYourOwnCustomViewsHtmlBuilder.append('</div>');
                    this.listMyCustomViews.html(addYourOwnCustomViewsHtmlBuilder.toString());
                }
                else {
                    this.listMyCustomViewsHeader.hide();
                    this.listMyCustomViews.hide();
                    this.listOtherCustomViewsHeader.hide();
                }
            }
            this.listOtherCustomViews.show();
            var otherCustomViewsHtmlBuilder = new ss.StringBuilder();
            this.appendSelectListItemHtml(otherCustomViewsHtmlBuilder, null, false);
            var $enum2 = ss.IEnumerator.getEnumerator(this.viewModel.get_otherCustomViews());
            while ($enum2.moveNext()) {
                var cv = $enum2.current;
                this.appendListItemSeparatorHtml(otherCustomViewsHtmlBuilder);
                this.appendSelectListItemHtml(otherCustomViewsHtmlBuilder, cv, true);
            }
            this.listOtherCustomViews.html(otherCustomViewsHtmlBuilder.toString());
            var originalItem = this.listOtherCustomViews.find('.tab-cv-select-list-item-original');
            this.bindListItem(originalItem, null);
            var otherItems = this.listOtherCustomViews.find('.tab-cv-select-list-item-customized');
            otherItems.each(ss.Delegate.create(this, function(index, item) {
                this.bindListItem($(item), this.viewModel.get_otherCustomViews()[index]);
            }));
        }
        else if (this.viewModel.get_mode() === tab.CustomViewsViewModel.modeManage) {
            this.listMyCustomViewsHeader.show();
            this.listMyCustomViews.show();
            this.listMyCustomViewsHeader.text(tab.Strings.CustomViewsManageHeader);
            var first = true;
            var changesHtmlBuilder = new ss.StringBuilder();
            var $enum3 = ss.IEnumerator.getEnumerator(this.viewModel.get_changes());
            while ($enum3.moveNext()) {
                var change = $enum3.current;
                if (first) {
                    first = false;
                }
                else {
                    this.appendListItemSeparatorHtml(changesHtmlBuilder);
                }
                this.appendManageListItemHtml(changesHtmlBuilder, change);
            }
            this.listMyCustomViews.html(changesHtmlBuilder.toString());
            this.updateManageListItems();
            var listMyItems = this.listMyCustomViews.find('.tab-cv-manage-list-item');
            listMyItems.each(ss.Delegate.create(this, function(index, item) {
                var listItem = $(item);
                var change = this.viewModel.get_changes()[index];
                if (tsConfig.allow_custom_view_share) {
                    var advertiseButton = listItem.find('.tab-cv-manage-list-item-advertise-button');
                    this.disposables.add(spiff.ClickHandler.targetAndClick(advertiseButton, ss.Delegate.create(this, function(e) {
                        this.manageListItemAdvertiseButtonClicked(e, change);
                    })));
                }
                var nameInput = listItem.find('.tab-cv-manage-list-item-name-input');
                nameInput.val(this.viewModel.get_changes()[index].get_name());
                var eventData = { change: this.viewModel.get_changes()[index] };
                nameInput.keyup(eventData, ss.Delegate.create(this, this.manageListItemNameChanged));
                var deleteButton = listItem.find('.tab-cv-manage-list-item-delete-button');
                this.disposables.add(spiff.ClickHandler.targetAndClick(deleteButton, ss.Delegate.create(this, function(e) {
                    this.manageListItemDeleteButtonClicked(e, change);
                })));
                var undoButton = listItem.find('.tab-cv-manage-list-item-undo-button');
                undoButton.text(tab.Strings.CustomViewsUndo);
                this.disposables.add(spiff.ClickHandler.targetAndClick(undoButton, ss.Delegate.create(this, function(e) {
                    this.manageListItemUndoButtonClicked(e, change);
                })));
                var nameDeleted = listItem.find('.tab-cv-manage-list-item-name-deleted');
                nameDeleted.css('right', (undoButton.outerWidth() + 7 + 2) + 'px');
            }));
            this.listOtherCustomViewsHeader.hide();
            this.listOtherCustomViews.hide();
        }
    },
    
    appendListItemSeparatorHtml: function tab_CustomViewsPanel$appendListItemSeparatorHtml(sb) {
    },
    
    appendSelectListItemHtml: function tab_CustomViewsPanel$appendSelectListItemHtml(sb, cv, showOwner) {
        var itemClass;
        var customViewName;
        var ownerName;
        var advertiseIconClass;
        var isDefault = this.viewModel.isDefault(cv);
        if (ss.isValue(cv)) {
            itemClass = 'tab-cv-select-list-item-customized';
            customViewName = tableau.format.escapeHTML(cv.name);
            ownerName = (showOwner) ? tableau.format.escapeHTML(cv.owner.friendlyName) : null;
            advertiseIconClass = (cv.isPublic) ? 'tab-icon-cv-advertise-on' : 'tab-icon-cv-advertise-off';
        }
        else {
            itemClass = 'tab-cv-select-list-item-original';
            customViewName = tab.Strings.CustomViewsOriginalView;
            ownerName = tableau.format.escapeHTML(tsConfig.workbook_owner_friendly_name);
            advertiseIconClass = 'tab-icon-cv-advertise-on';
        }
        sb.append('<div unselectable="on" class="').append('tab-cv-select-list-item ').append(itemClass);
        if (this.viewModel.get_currentCustomView() === cv) {
            sb.append(' ').append('tab-cv-select-list-item-current');
        }
        sb.append('" title="').append(customViewName);
        if (isDefault) {
            sb.append(' (').append(tab.Strings.CustomViewsDefault).append(')');
        }
        if (ss.isValue(ownerName)) {
            sb.append(' (').append(ownerName).append(')');
        }
        sb.append('">');
        sb.append('<span unselectable="on" class="tab-cv-select-list-item-advertise-icon ').append(advertiseIconClass).append('"></span>');
        this.appendSelectListItemNameAndAuthorHtml(sb, customViewName, ownerName, isDefault);
        sb.append('</div>');
    },
    
    appendManageListItemHtml: function tab_CustomViewsPanel$appendManageListItemHtml(sb, change) {
        var originalName = tab.Strings.CustomViewsOriginalName(tableau.format.escapeHTML(change.get_original().name));
        var nameClass = (tsConfig.allow_custom_view_share) ? 'tab-cv-manage-list-item-name-can-advertise' : 'tab-cv-manage-list-item-name-cannot-advertise';
        sb.append("<div class='tab-cv-manage-list-item'>");
        if (tsConfig.allow_custom_view_share) {
            sb.append("<div unselectable='on' class='tab-cv-manage-list-item-advertise-button'>");
            sb.append("<div unselectable='on' class='tab-cv-manage-list-item-advertise-icon'></div>");
            sb.append('</div>');
        }
        sb.append("<div class='tab-cv-manage-list-item-name-input-holder ").append(nameClass).append("'>");
        sb.append("<input type='text' maxlength='255' class='tab-cv-manage-list-item-name-input tab-selectable'");
        sb.append(" title='").append(originalName).append("'>");
        sb.append('</div>');
        sb.append("<div unselectable='on' class='tab-cv-manage-list-item-name-deleted ");
        sb.append(nameClass);
        if (tab.BrowserSupport.get_isIE()) {
            sb.append(' ie');
        }
        sb.append("' title='").append(originalName).append("'></div>");
        sb.append("<div unselectable='on' class='tab-cv-manage-list-item-delete-button'>");
        sb.append("<div unselectable='on' class='tab-cv-manage-list-item-delete-icon tab-icon-cv-delete'></div>");
        sb.append('</div>');
        sb.append("<div unselectable='on' class='tab-cv-manage-list-item-undo-button'></div>");
        sb.append('</div>');
    },
    
    updateManageListItems: function tab_CustomViewsPanel$updateManageListItems() {
        var listMyItems = this.listMyCustomViews.find('.tab-cv-manage-list-item');
        listMyItems.each(ss.Delegate.create(this, function(index, item) {
            var listItem = $(item);
            var change = this.viewModel.get_changes()[index];
            var advertiseButton = listItem.find('.tab-cv-manage-list-item-advertise-button');
            var advertiseIcon = listItem.find('.tab-cv-manage-list-item-advertise-icon');
            var nameInputHolder = listItem.find('.tab-cv-manage-list-item-name-input-holder');
            var nameInput = listItem.find('.tab-cv-manage-list-item-name-input');
            var nameDeleted = listItem.find('.tab-cv-manage-list-item-name-deleted');
            var deleteButton = listItem.find('.tab-cv-manage-list-item-delete-button');
            var undoButton = listItem.find('.tab-cv-manage-list-item-undo-button');
            if (change.get_isPublic()) {
                advertiseIcon.removeClass('tab-icon-cv-advertise-off');
                advertiseIcon.addClass('tab-icon-cv-advertise-on');
            }
            else {
                advertiseIcon.removeClass('tab-icon-cv-advertise-on');
                advertiseIcon.addClass('tab-icon-cv-advertise-off');
            }
            if (change.get_markedForDeletion()) {
                advertiseButton.removeClass('tab-enabled');
                advertiseButton.addClass('tab-opacity-50');
                nameInputHolder.hide();
                nameDeleted.show();
                deleteButton.hide();
                undoButton.show();
                nameDeleted.text(change.get_name());
            }
            else {
                advertiseButton.addClass('tab-enabled');
                advertiseButton.removeClass('tab-opacity-50');
                nameInputHolder.show();
                nameDeleted.hide();
                deleteButton.show();
                undoButton.hide();
                if (!this.viewModel.isChangeValid(change)) {
                    nameInput.addClass('tab-invalid');
                }
                else {
                    nameInput.removeClass('tab-invalid');
                }
                if (change.get_name() !== change.get_original().name) {
                    nameInput.addClass('tab-changed');
                }
                else {
                    nameInput.removeClass('tab-changed');
                }
            }
        }));
    },
    
    bindListItem: function tab_CustomViewsPanel$bindListItem(item, cv) {
        this.disposables.add(spiff.ClickHandler.targetAndClick(item, ss.Delegate.create(this, function(e) {
            this.listItemClicked(e, cv);
        })));
    },
    
    listItemClicked: function tab_CustomViewsPanel$listItemClicked(e, cv) {
        this.viewModel.select(cv);
    },
    
    rememberNameInputKeydown: function tab_CustomViewsPanel$rememberNameInputKeydown(e) {
        if (e.which === 13) {
            this.saveCustomView();
        }
    },
    
    rememberNameInputKeyup: function tab_CustomViewsPanel$rememberNameInputKeyup(e) {
        this.updateRememberButton();
    },
    
    rememberNamePlaceholderClicked: function tab_CustomViewsPanel$rememberNamePlaceholderClicked(e) {
        this.rememberNameInput.focus();
    },
    
    rememberButtonClicked: function tab_CustomViewsPanel$rememberButtonClicked(e) {
        this.saveCustomView();
    },
    
    saveCustomView: function tab_CustomViewsPanel$saveCustomView() {
        var name = this.rememberNameInput.val().trim();
        if (name.length > 0 && this._isRememberButtonEnabled$1()) {
            this._disableRememberButton$1();
            this.viewModel.save(name);
        }
    },
    
    makeDefaultButtonClicked: function tab_CustomViewsPanel$makeDefaultButtonClicked(e) {
        this.viewModel.makeCurrentDefault();
    },
    
    startManageButtonClicked: function tab_CustomViewsPanel$startManageButtonClicked(e) {
        this.viewModel.startManage();
    },
    
    applyManageButtonClicked: function tab_CustomViewsPanel$applyManageButtonClicked(e) {
        this.viewModel.applyManage();
    },
    
    cancelManageButtonClicked: function tab_CustomViewsPanel$cancelManageButtonClicked(e) {
        this.viewModel.cancelManage();
    },
    
    manageListItemAdvertiseButtonClicked: function tab_CustomViewsPanel$manageListItemAdvertiseButtonClicked(e, change) {
        if (!change.get_markedForDeletion()) {
            change.toggleIsPublic();
        }
    },
    
    manageListItemNameChanged: function tab_CustomViewsPanel$manageListItemNameChanged(e) {
        var change = e.data['change'];
        if (!change.get_markedForDeletion()) {
            var input = $(e.currentTarget);
            var name = input.val();
            change.changeName(name);
        }
    },
    
    manageListItemDeleteButtonClicked: function tab_CustomViewsPanel$manageListItemDeleteButtonClicked(e, change) {
        if (!change.get_markedForDeletion()) {
            change.toggleMarkForDeletion();
        }
    },
    
    manageListItemUndoButtonClicked: function tab_CustomViewsPanel$manageListItemUndoButtonClicked(e, change) {
        if (change.get_markedForDeletion()) {
            change.toggleMarkForDeletion();
        }
    },
    
    startResize: function tab_CustomViewsPanel$startResize(e) {
        if (!this.resizing) {
            this.resizing = true;
            this.resizeStartPanelWidth = this.panelWidth;
            this.resizeStartPanelHeight = this.panelHeight;
            this.resizeStartX = e.pageX;
            this.resizeStartY = e.pageY;
            this.startDrag();
            e.preventDefault();
        }
    },
    
    continueResize: function tab_CustomViewsPanel$continueResize(e) {
        if (this.resizing) {
            var deltaX = (e.pageX - this.resizeStartX);
            var deltaY = (this.viewModel.get_isTop()) ? (e.pageY - this.resizeStartY) : (this.resizeStartY - e.pageY);
            this.panelWidth = Math.max(this.resizeStartPanelWidth + deltaX, 200);
            this.panelHeight = Math.max(this.resizeStartPanelHeight + deltaY, 200);
            this.place();
            e.preventDefault();
        }
    },
    
    endResize: function tab_CustomViewsPanel$endResize(e) {
        if (this.resizing) {
            this.resizing = false;
            this.endDrag();
            e.preventDefault();
        }
    },
    
    startDrag: function tab_CustomViewsPanel$startDrag() {
    },
    
    endDrag: function tab_CustomViewsPanel$endDrag() {
    },
    
    _enableRememberButton$1: function tab_CustomViewsPanel$_enableRememberButton$1() {
        this.rememberButton.removeClass('tab-disabled');
    },
    
    _disableRememberButton$1: function tab_CustomViewsPanel$_disableRememberButton$1() {
        this.rememberButton.addClass('tab-disabled');
    },
    
    _isRememberButtonEnabled$1: function tab_CustomViewsPanel$_isRememberButtonEnabled$1() {
        return !this.rememberButton.hasClass('tab-disabled');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CustomViewsViewModel

tab.CustomViewsViewModel = function tab_CustomViewsViewModel(session, isTop) {
    this._mode = tab.CustomViewsViewModel.modeSelect;
    this._myCustomViews = [];
    this._otherCustomViews = [];
    this._changes = [];
    this._changesByName = {};
    this._subscriptions = [];
    this._session = session;
    this._isTop = isTop;
    this._isToolbarButtonVisible = tsConfig.allow_custom_views;
    if (tsConfig.allow_custom_views) {
        tab.StartupUtils.callAfterBootstrap(ss.Delegate.create(this, function() {
            this._loadCustomizedViews();
        }));
        this._subscriptions.add(dojo.subscribe('modifiedSheetsChanged', ss.Delegate.create(this, function(eventData) {
            var modifiedSheets = eventData;
            this._updateDirty(modifiedSheets.length > 0);
        })));
    }
}
tab.CustomViewsViewModel._compareCustomizedViews = function tab_CustomViewsViewModel$_compareCustomizedViews(left, right) {
    return String.compare((left).name, (right).name);
}
tab.CustomViewsViewModel.prototype = {
    _session: null,
    _isTop: false,
    _isPanelVisible: false,
    _isToolbarButtonVisible: false,
    _currentCustomView: null,
    _defaultCustomViewId: null,
    _changeDifferences: 0,
    _invalidChangesExist: false,
    _changesInProgress: 0,
    _destroyInProgress: false,
    _dirty: false,
    
    add_panelVisbilityChanged: function tab_CustomViewsViewModel$add_panelVisbilityChanged(value) {
        this.__panelVisbilityChanged = ss.Delegate.combine(this.__panelVisbilityChanged, value);
    },
    remove_panelVisbilityChanged: function tab_CustomViewsViewModel$remove_panelVisbilityChanged(value) {
        this.__panelVisbilityChanged = ss.Delegate.remove(this.__panelVisbilityChanged, value);
    },
    
    __panelVisbilityChanged: null,
    
    add_modeChanged: function tab_CustomViewsViewModel$add_modeChanged(value) {
        this.__modeChanged = ss.Delegate.combine(this.__modeChanged, value);
    },
    remove_modeChanged: function tab_CustomViewsViewModel$remove_modeChanged(value) {
        this.__modeChanged = ss.Delegate.remove(this.__modeChanged, value);
    },
    
    __modeChanged: null,
    
    add_customViewListChanged: function tab_CustomViewsViewModel$add_customViewListChanged(value) {
        this.__customViewListChanged = ss.Delegate.combine(this.__customViewListChanged, value);
    },
    remove_customViewListChanged: function tab_CustomViewsViewModel$remove_customViewListChanged(value) {
        this.__customViewListChanged = ss.Delegate.remove(this.__customViewListChanged, value);
    },
    
    __customViewListChanged: null,
    
    add_defaultCustomViewChanged: function tab_CustomViewsViewModel$add_defaultCustomViewChanged(value) {
        this.__defaultCustomViewChanged = ss.Delegate.combine(this.__defaultCustomViewChanged, value);
    },
    remove_defaultCustomViewChanged: function tab_CustomViewsViewModel$remove_defaultCustomViewChanged(value) {
        this.__defaultCustomViewChanged = ss.Delegate.remove(this.__defaultCustomViewChanged, value);
    },
    
    __defaultCustomViewChanged: null,
    
    add_customViewDestroyed: function tab_CustomViewsViewModel$add_customViewDestroyed(value) {
        this.__customViewDestroyed = ss.Delegate.combine(this.__customViewDestroyed, value);
    },
    remove_customViewDestroyed: function tab_CustomViewsViewModel$remove_customViewDestroyed(value) {
        this.__customViewDestroyed = ss.Delegate.remove(this.__customViewDestroyed, value);
    },
    
    __customViewDestroyed: null,
    
    add_startManageEnabledChanged: function tab_CustomViewsViewModel$add_startManageEnabledChanged(value) {
        this.__startManageEnabledChanged = ss.Delegate.combine(this.__startManageEnabledChanged, value);
    },
    remove_startManageEnabledChanged: function tab_CustomViewsViewModel$remove_startManageEnabledChanged(value) {
        this.__startManageEnabledChanged = ss.Delegate.remove(this.__startManageEnabledChanged, value);
    },
    
    __startManageEnabledChanged: null,
    
    add_applyManageEnabledChanged: function tab_CustomViewsViewModel$add_applyManageEnabledChanged(value) {
        this.__applyManageEnabledChanged = ss.Delegate.combine(this.__applyManageEnabledChanged, value);
    },
    remove_applyManageEnabledChanged: function tab_CustomViewsViewModel$remove_applyManageEnabledChanged(value) {
        this.__applyManageEnabledChanged = ss.Delegate.remove(this.__applyManageEnabledChanged, value);
    },
    
    __applyManageEnabledChanged: null,
    
    add_manageListItemsChanged: function tab_CustomViewsViewModel$add_manageListItemsChanged(value) {
        this.__manageListItemsChanged = ss.Delegate.combine(this.__manageListItemsChanged, value);
    },
    remove_manageListItemsChanged: function tab_CustomViewsViewModel$remove_manageListItemsChanged(value) {
        this.__manageListItemsChanged = ss.Delegate.remove(this.__manageListItemsChanged, value);
    },
    
    __manageListItemsChanged: null,
    
    add_dirtyChanged: function tab_CustomViewsViewModel$add_dirtyChanged(value) {
        this.__dirtyChanged = ss.Delegate.combine(this.__dirtyChanged, value);
    },
    remove_dirtyChanged: function tab_CustomViewsViewModel$remove_dirtyChanged(value) {
        this.__dirtyChanged = ss.Delegate.remove(this.__dirtyChanged, value);
    },
    
    __dirtyChanged: null,
    
    get_isTop: function tab_CustomViewsViewModel$get_isTop() {
        return this._isTop;
    },
    
    get_isToolbarButtonVisible: function tab_CustomViewsViewModel$get_isToolbarButtonVisible() {
        return this._isToolbarButtonVisible;
    },
    
    get_isPanelVisible: function tab_CustomViewsViewModel$get_isPanelVisible() {
        return this._isPanelVisible;
    },
    
    get_mode: function tab_CustomViewsViewModel$get_mode() {
        return this._mode;
    },
    
    get_myCustomViews: function tab_CustomViewsViewModel$get_myCustomViews() {
        return this._myCustomViews;
    },
    
    get_otherCustomViews: function tab_CustomViewsViewModel$get_otherCustomViews() {
        return this._otherCustomViews;
    },
    
    get_currentCustomView: function tab_CustomViewsViewModel$get_currentCustomView() {
        return this._currentCustomView;
    },
    
    get_defaultCustomViewId: function tab_CustomViewsViewModel$get_defaultCustomViewId() {
        return this._defaultCustomViewId;
    },
    
    get_changes: function tab_CustomViewsViewModel$get_changes() {
        return this._changes;
    },
    
    get_startManageEnabled: function tab_CustomViewsViewModel$get_startManageEnabled() {
        return tsConfig.allow_custom_view_save && this._myCustomViews.length > 0 && !this._changesInProgress;
    },
    
    get_applyManageEnabled: function tab_CustomViewsViewModel$get_applyManageEnabled() {
        return this._changeDifferences > 0 && !this._invalidChangesExist;
    },
    
    get_dirty: function tab_CustomViewsViewModel$get_dirty() {
        return this._dirty;
    },
    
    dispose: function tab_CustomViewsViewModel$dispose() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._subscriptions);
        while ($enum1.moveNext()) {
            var subscription = $enum1.current;
            dojo.unsubscribe(subscription);
        }
        this._subscriptions.clear();
    },
    
    isDefault: function tab_CustomViewsViewModel$isDefault(cv) {
        if (tsConfig.allow_custom_view_default) {
            if (ss.isValue(cv)) {
                return ss.isValue(this._defaultCustomViewId) && this._defaultCustomViewId === cv.id;
            }
            else {
                return ss.isNullOrUndefined(this._defaultCustomViewId);
            }
        }
        else {
            return false;
        }
    },
    
    show: function tab_CustomViewsViewModel$show() {
        tab.CustomViewsViewModel._log.debug('Show');
        if (!this._isPanelVisible) {
            this._loadCustomizedViews();
            this._isPanelVisible = true;
            this._onPanelVisbilityChanged();
        }
    },
    
    hide: function tab_CustomViewsViewModel$hide() {
        tab.CustomViewsViewModel._log.debug('Hide');
        if (this._isPanelVisible) {
            this._isPanelVisible = false;
            this._onPanelVisbilityChanged();
        }
    },
    
    save: function tab_CustomViewsViewModel$save(name, onSuccess, onError) {
        tab.CustomViewsViewModel._log.debug('Save: %s', name);
        var saveMe = null;
        var $enum1 = ss.IEnumerator.getEnumerator(this._myCustomViews);
        while ($enum1.moveNext()) {
            var cv = $enum1.current;
            if (cv.name === name) {
                saveMe = cv;
            }
        }
        if (!ss.isValue(saveMe)) {
            saveMe = new tab.CustomizedView();
            saveMe.name = name;
        }
        this._session.saveCustomizedView(saveMe, ss.Delegate.create(this, function(cv) {
            this._saveCustomizedViewSuccess(cv);
            if (ss.isValue(onSuccess)) {
                onSuccess(cv);
            }
        }), ss.Delegate.create(this, function(msg) {
            this._saveCustomizedViewFailure(msg);
            if (ss.isValue(onError)) {
                onError(msg);
            }
        }));
    },
    
    select: function tab_CustomViewsViewModel$select(cv) {
        if (ss.isValue(cv)) {
            tab.CustomViewsViewModel._log.debug('Calling NavigateToCustomizedView: %o', cv);
            this._session.navigateToCustomizedView(cv);
        }
        else {
            tab.CustomViewsViewModel._log.debug('Calling NavigateToOriginalView');
            this._session.navigateToOriginalView();
        }
    },
    
    destroy: function tab_CustomViewsViewModel$destroy(cv, onSuccess, onError) {
        this._changesInProgress += 1;
        this._destroyCustomView(cv, onSuccess, onError);
    },
    
    update: function tab_CustomViewsViewModel$update(cv, onSuccess, onError) {
        this._changesInProgress += 1;
        this._updateCustomView(cv, onSuccess, onError);
    },
    
    buildUrl: function tab_CustomViewsViewModel$buildUrl(cv, removeQueryParams) {
        return tab.CustomizedViewSession.buildUrl(cv, removeQueryParams);
    },
    
    makeCurrentDefault: function tab_CustomViewsViewModel$makeCurrentDefault(onSuccess, onError) {
        tab.CustomViewsViewModel._log.debug('MakeCurrentDefault');
        this._session.setDefaultCustomizedView(this._currentCustomView, ss.Delegate.create(this, function(cv) {
            this._setDefaultCustomizedViewSuccess(cv);
            if (ss.isValue(onSuccess)) {
                onSuccess(cv);
            }
        }), ss.Delegate.create(this, function(msg) {
            this._setDefaultCustomizedViewFailure(msg);
            if (ss.isValue(onError)) {
                onError(msg);
            }
        }));
    },
    
    startManage: function tab_CustomViewsViewModel$startManage() {
        tab.CustomViewsViewModel._log.debug('StartManage');
        if (this._mode === tab.CustomViewsViewModel.modeSelect && this.get_startManageEnabled()) {
            this._resetChanges();
            var $enum1 = ss.IEnumerator.getEnumerator(this._myCustomViews);
            while ($enum1.moveNext()) {
                var cv = $enum1.current;
                var change = new tab.CustomizedViewChange(cv, ss.Delegate.create(this, this._handleIsPublicChanged), ss.Delegate.create(this, this._handleNameChanged), ss.Delegate.create(this, this._handleMarkedForDeletionChanged));
                this._changes.add(change);
                this._getChangesWithName(change.get_original().name)[change.get_original().urlId] = change;
                this._getChangesWithName(change.get_name())[change.get_original().urlId] = change;
            }
            this._switchMode(tab.CustomViewsViewModel.modeManage);
        }
    },
    
    applyManage: function tab_CustomViewsViewModel$applyManage() {
        tab.CustomViewsViewModel._log.debug('ApplyManage');
        if (this._mode === tab.CustomViewsViewModel.modeManage && this.get_applyManageEnabled()) {
            var deletes = [];
            var updates = [];
            var $enum1 = ss.IEnumerator.getEnumerator(this._changes);
            while ($enum1.moveNext()) {
                var change = $enum1.current;
                if (change.get_markedForDeletion()) {
                    deletes.add(change.get_original());
                }
                else if (change.get_isPublic() !== change.get_original().isPublic || change.get_name() !== change.get_original().name) {
                    var updated = new tab.CustomizedView();
                    updated.id = change.get_original().id;
                    updated.isPublic = change.get_isPublic();
                    updated.name = change.get_name();
                    updated.owner = change.get_original().owner;
                    updated.startViewId = change.get_original().startViewId;
                    updated.urlId = change.get_original().urlId;
                    updates.add(updated);
                }
            }
            this._resetChanges();
            this._changesInProgress = deletes.length + updates.length;
            tab.CustomViewsViewModel._log.debug('changes in progress = %d', this._changesInProgress);
            var $enum2 = ss.IEnumerator.getEnumerator(deletes);
            while ($enum2.moveNext()) {
                var cv = $enum2.current;
                this._destroyCustomView(cv);
            }
            var $enum3 = ss.IEnumerator.getEnumerator(updates);
            while ($enum3.moveNext()) {
                var cv = $enum3.current;
                this._updateCustomView(cv);
            }
            this._switchMode(tab.CustomViewsViewModel.modeSelect);
        }
    },
    
    cancelManage: function tab_CustomViewsViewModel$cancelManage() {
        tab.CustomViewsViewModel._log.debug('CancelManage');
        if (this._mode === tab.CustomViewsViewModel.modeManage) {
            this._resetChanges();
            this._switchMode(tab.CustomViewsViewModel.modeSelect);
        }
    },
    
    updateCustomizedViews: function tab_CustomViewsViewModel$updateCustomizedViews(onSuccess, onError) {
        this._loadCustomizedViews(onSuccess, onError);
    },
    
    isChangeValid: function tab_CustomViewsViewModel$isChangeValid(change) {
        return change.get_name().length > 0 && Object.getKeyCount(this._getChangesWithName(change.get_name())) <= 1;
    },
    
    _destroyCustomView: function tab_CustomViewsViewModel$_destroyCustomView(cv, onSuccess, onError) {
        tab.CustomViewsViewModel._log.debug('Calling DestroyCustomizedView: %o', cv);
        this._destroyInProgress = true;
        this._session.destroyCustomizedView(cv, ss.Delegate.create(this, function() {
            this._destroyCustomizedViewSuccess();
            if (ss.isValue(onSuccess)) {
                onSuccess();
            }
        }), ss.Delegate.create(this, function(msg) {
            this._updateCustomizedViewFailure(msg);
            if (ss.isValue(onError)) {
                onError(msg);
            }
        }));
    },
    
    _updateCustomView: function tab_CustomViewsViewModel$_updateCustomView(v, onSuccess, onError) {
        tab.CustomViewsViewModel._log.debug('Calling UpdateCustomizedView: %o', v);
        this._session.updateCustomizedView(v, ss.Delegate.create(this, function(cv) {
            this._updateCustomizedViewSuccess(cv);
            if (ss.isValue(onSuccess)) {
                onSuccess(cv);
            }
        }), ss.Delegate.create(this, function(msg) {
            this._updateCustomizedViewFailure(msg);
            if (ss.isValue(onError)) {
                onError(msg);
            }
        }));
    },
    
    _switchMode: function tab_CustomViewsViewModel$_switchMode(newMode) {
        this._mode = newMode;
        this._onModeChanged();
    },
    
    _resetChanges: function tab_CustomViewsViewModel$_resetChanges() {
        this._changes.clear();
        this._changeDifferences = 0;
        Object.clearKeys(this._changesByName);
        this._invalidChangesExist = false;
    },
    
    _getChangesWithName: function tab_CustomViewsViewModel$_getChangesWithName(name) {
        var changesWithName = this._changesByName[name];
        if (ss.isNullOrUndefined(changesWithName)) {
            changesWithName = {};
            this._changesByName[name] = changesWithName;
        }
        return changesWithName;
    },
    
    _updateDirty: function tab_CustomViewsViewModel$_updateDirty(newDirty) {
        tab.CustomViewsViewModel._log.debug('UpdateDirty: %b', newDirty);
        if (this._dirty !== newDirty) {
            this._dirty = newDirty;
            this._onDirtyChanged();
        }
    },
    
    _loadCustomizedViews: function tab_CustomViewsViewModel$_loadCustomizedViews(onSuccess, onError) {
        this._session.getCustomizedViews(ss.Delegate.create(this, function(cvs, defaultId) {
            this._getCustomizedViewsSuccess(cvs, defaultId);
            if (ss.isValue(onSuccess)) {
                onSuccess(cvs, defaultId);
            }
        }), ss.Delegate.create(this, function(msg) {
            this._getCustomizedViewsFailure(msg);
            if (ss.isValue(onError)) {
                onError(msg);
            }
        }));
    },
    
    _saveCustomizedViewSuccess: function tab_CustomViewsViewModel$_saveCustomizedViewSuccess(cv) {
        tab.CustomViewsViewModel._log.debug('SaveCustomizedViewSuccess: %o', cv);
        if (tabBootstrap.Utility.get_embedMode() === 'embeddedNotInWg' || (ss.isValue(this._currentCustomView) && this._currentCustomView.id === cv.id)) {
            this.hide();
            this._dirty = false;
            if (tabBootstrap.Utility.get_embedMode() === 'embeddedNotInWg') {
                var i;
                if (ss.isValue(cv.owner) && cv.owner.id === tsConfig.current_user_id) {
                    for (i = 0; i < this._myCustomViews.length; i++) {
                        if (this._myCustomViews[i].name === cv.name) {
                            this._myCustomViews[i] = cv;
                            break;
                        }
                    }
                    if (i >= this._myCustomViews.length) {
                        this._myCustomViews.add(cv);
                        this._myCustomViews.sort(tab.CustomViewsViewModel._compareCustomizedViews);
                    }
                }
                else {
                    for (i = 0; i < this._otherCustomViews.length; i++) {
                        if (this._otherCustomViews[i].name === cv.name) {
                            this._otherCustomViews[i] = cv;
                            break;
                        }
                    }
                    if (i >= this._otherCustomViews.length) {
                        this._otherCustomViews.add(cv);
                        this._otherCustomViews.sort(tab.CustomViewsViewModel._compareCustomizedViews);
                    }
                }
            }
            this._currentCustomView = cv;
            this._onDirtyChanged();
        }
        else {
            this._session.navigateToCustomizedView(cv);
        }
    },
    
    _saveCustomizedViewFailure: function tab_CustomViewsViewModel$_saveCustomizedViewFailure(msg) {
        tab.CustomViewsViewModel._log.debug('SaveCustomizedViewFailure: %s', msg);
        this._onPanelVisbilityChanged();
    },
    
    _setDefaultCustomizedViewSuccess: function tab_CustomViewsViewModel$_setDefaultCustomizedViewSuccess(cv) {
        tab.CustomViewsViewModel._log.debug('SetDefaultCustomizedViewSuccess: %o', cv);
        this._defaultCustomViewId = ((ss.isValue(cv)) ? cv.id : null);
        this._onDefaultCustomViewChanged();
    },
    
    _setDefaultCustomizedViewFailure: function tab_CustomViewsViewModel$_setDefaultCustomizedViewFailure(msg) {
        tab.CustomViewsViewModel._log.debug('SetDefaultCustomizedViewFailure: %s', msg);
    },
    
    _getCustomizedViewsSuccess: function tab_CustomViewsViewModel$_getCustomizedViewsSuccess(cvs, defaultId) {
        tab.CustomViewsViewModel._log.debug('GetCustomizedViewsSuccess: cvs=%o defaultId=%o', cvs, defaultId);
        this._myCustomViews.clear();
        this._otherCustomViews.clear();
        this._currentCustomView = null;
        var $enum1 = ss.IEnumerator.getEnumerator(cvs);
        while ($enum1.moveNext()) {
            var cv = $enum1.current;
            if (ss.isValue(cv.owner) && cv.owner.id === tsConfig.current_user_id) {
                this._myCustomViews.add(cv);
            }
            else {
                this._otherCustomViews.add(cv);
            }
            if (ss.isValue(tsConfig.current_custom_view_id) && tsConfig.current_custom_view_id === cv.id) {
                this._currentCustomView = cv;
            }
        }
        this._myCustomViews.sort(tab.CustomViewsViewModel._compareCustomizedViews);
        this._otherCustomViews.sort(tab.CustomViewsViewModel._compareCustomizedViews);
        this._defaultCustomViewId = defaultId;
        this._onCustomViewListChanged();
    },
    
    _getCustomizedViewsFailure: function tab_CustomViewsViewModel$_getCustomizedViewsFailure(msg) {
        tab.CustomViewsViewModel._log.debug('GetCustomizedViewsFailure: %s', msg);
    },
    
    _destroyCustomizedViewSuccess: function tab_CustomViewsViewModel$_destroyCustomizedViewSuccess() {
        tab.CustomViewsViewModel._log.debug('DestroyCustomizedViewSuccess: %d', this._changesInProgress);
        this._decrementChangesInProgress();
    },
    
    _destroyCustomizedViewFailure: function tab_CustomViewsViewModel$_destroyCustomizedViewFailure(msg) {
        tab.CustomViewsViewModel._log.debug('DestroyCustomizedViewFailure: %d %s', this._changesInProgress, msg);
        this._decrementChangesInProgress();
    },
    
    _updateCustomizedViewSuccess: function tab_CustomViewsViewModel$_updateCustomizedViewSuccess(cv) {
        tab.CustomViewsViewModel._log.debug('UpdateCustomizedViewSuccess: %d %o', this._changesInProgress, cv);
        this._decrementChangesInProgress();
    },
    
    _updateCustomizedViewFailure: function tab_CustomViewsViewModel$_updateCustomizedViewFailure(msg) {
        tab.CustomViewsViewModel._log.debug('UpdateCustomizedViewFailure: %d %s', this._changesInProgress, msg);
        this._decrementChangesInProgress();
    },
    
    _handleIsPublicChanged: function tab_CustomViewsViewModel$_handleIsPublicChanged(change) {
        if (change.get_isPublic() !== change.get_original().isPublic) {
            this._incrementChangeDifferences();
        }
        else {
            this._decrementChangeDifferences();
        }
        this._onManageListItemsChanged();
    },
    
    _handleNameChanged: function tab_CustomViewsViewModel$_handleNameChanged(change, nameBeforeChange) {
        var changesBefore = this._getChangesWithName(nameBeforeChange);
        var changesAfter = this._getChangesWithName(change.get_name());
        var changesOriginal = this._getChangesWithName(change.get_original().name);
        if (changesBefore !== changesOriginal) {
            delete changesBefore[change.get_original().urlId];
        }
        changesAfter[change.get_original().urlId] = change;
        if (nameBeforeChange === change.get_original().name) {
            this._incrementChangeDifferences();
        }
        else if (change.get_name() === change.get_original().name) {
            this._decrementChangeDifferences();
        }
        this._updateInvalidChangesExist();
        this._onManageListItemsChanged();
    },
    
    _handleMarkedForDeletionChanged: function tab_CustomViewsViewModel$_handleMarkedForDeletionChanged(change) {
        var changesCurrent = this._getChangesWithName(change.get_name());
        var changesOriginal = this._getChangesWithName(change.get_original().name);
        if (change.get_markedForDeletion()) {
            if (changesCurrent !== changesOriginal) {
                delete changesCurrent[change.get_original().urlId];
            }
            this._incrementChangeDifferences();
        }
        else {
            changesCurrent[change.get_original().urlId] = change;
            this._decrementChangeDifferences();
        }
        this._updateInvalidChangesExist();
        this._onManageListItemsChanged();
    },
    
    _areAnyChangesInvalid: function tab_CustomViewsViewModel$_areAnyChangesInvalid() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._changes);
        while ($enum1.moveNext()) {
            var change = $enum1.current;
            if (!this.isChangeValid(change)) {
                return true;
            }
        }
        return false;
    },
    
    _updateInvalidChangesExist: function tab_CustomViewsViewModel$_updateInvalidChangesExist() {
        var newValue = this._areAnyChangesInvalid();
        if (this._invalidChangesExist !== newValue) {
            this._invalidChangesExist = newValue;
            this._onApplyManageEnabledChanged();
        }
    },
    
    _incrementChangeDifferences: function tab_CustomViewsViewModel$_incrementChangeDifferences() {
        this._changeDifferences += 1;
        if (this._changeDifferences === 1) {
            this._onApplyManageEnabledChanged();
        }
    },
    
    _decrementChangeDifferences: function tab_CustomViewsViewModel$_decrementChangeDifferences() {
        this._changeDifferences -= 1;
        if (!this._changeDifferences) {
            this._onApplyManageEnabledChanged();
        }
    },
    
    _decrementChangesInProgress: function tab_CustomViewsViewModel$_decrementChangesInProgress() {
        this._changesInProgress -= 1;
        if (!this._changesInProgress) {
            this._onStartManageEnabledChanged();
            this._loadCustomizedViews();
        }
    },
    
    _onPanelVisbilityChanged: function tab_CustomViewsViewModel$_onPanelVisbilityChanged() {
        if (ss.isValue(this.__panelVisbilityChanged)) {
            this.__panelVisbilityChanged(this, ss.EventArgs.Empty);
        }
    },
    
    _onModeChanged: function tab_CustomViewsViewModel$_onModeChanged() {
        if (ss.isValue(this.__modeChanged)) {
            this.__modeChanged(this, ss.EventArgs.Empty);
        }
    },
    
    _onCustomViewListChanged: function tab_CustomViewsViewModel$_onCustomViewListChanged() {
        if (ss.isValue(this.__customViewListChanged)) {
            this.__customViewListChanged(this, ss.EventArgs.Empty);
        }
        if (this._destroyInProgress) {
            this._onCustomViewDestroyed();
            this._destroyInProgress = false;
        }
    },
    
    _onDefaultCustomViewChanged: function tab_CustomViewsViewModel$_onDefaultCustomViewChanged() {
        if (ss.isValue(this.__defaultCustomViewChanged)) {
            this.__defaultCustomViewChanged(this, ss.EventArgs.Empty);
        }
    },
    
    _onCustomViewDestroyed: function tab_CustomViewsViewModel$_onCustomViewDestroyed() {
        if (ss.isValue(this.__customViewDestroyed)) {
            this.__customViewDestroyed(this, ss.EventArgs.Empty);
        }
    },
    
    _onStartManageEnabledChanged: function tab_CustomViewsViewModel$_onStartManageEnabledChanged() {
        if (ss.isValue(this.__startManageEnabledChanged)) {
            this.__startManageEnabledChanged(this, ss.EventArgs.Empty);
        }
    },
    
    _onApplyManageEnabledChanged: function tab_CustomViewsViewModel$_onApplyManageEnabledChanged() {
        if (ss.isValue(this.__applyManageEnabledChanged)) {
            this.__applyManageEnabledChanged(this, ss.EventArgs.Empty);
        }
    },
    
    _onManageListItemsChanged: function tab_CustomViewsViewModel$_onManageListItemsChanged() {
        if (ss.isValue(this.__manageListItemsChanged)) {
            this.__manageListItemsChanged(this, ss.EventArgs.Empty);
        }
    },
    
    _onDirtyChanged: function tab_CustomViewsViewModel$_onDirtyChanged() {
        if (ss.isValue(this.__dirtyChanged)) {
            this.__dirtyChanged(this, ss.EventArgs.Empty);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CustomizedViewChange

tab.CustomizedViewChange = function tab_CustomizedViewChange(cv, isPublicAction, nameAction, markedForDeletionAction) {
    this._original = cv;
    this._isPublicChanged = isPublicAction;
    this._nameChanged = nameAction;
    this._markedForDeletionChanged = markedForDeletionAction;
    this._isPublic = cv.isPublic;
    this._name = cv.name;
    this._markedForDeletion = false;
}
tab.CustomizedViewChange.prototype = {
    _original: null,
    _isPublicChanged: null,
    _nameChanged: null,
    _markedForDeletionChanged: null,
    _isPublic: false,
    _name: null,
    _markedForDeletion: false,
    
    get_original: function tab_CustomizedViewChange$get_original() {
        return this._original;
    },
    
    get_isPublic: function tab_CustomizedViewChange$get_isPublic() {
        return this._isPublic;
    },
    
    get_name: function tab_CustomizedViewChange$get_name() {
        return this._name;
    },
    
    get_markedForDeletion: function tab_CustomizedViewChange$get_markedForDeletion() {
        return this._markedForDeletion;
    },
    
    toggleIsPublic: function tab_CustomizedViewChange$toggleIsPublic() {
        this._isPublic = !this._isPublic;
        this._isPublicChanged(this);
    },
    
    changeName: function tab_CustomizedViewChange$changeName(newName) {
        if (newName !== this._name) {
            var nameBeforeChange = this._name;
            this._name = newName;
            this._nameChanged(this, nameBeforeChange);
        }
    },
    
    toggleMarkForDeletion: function tab_CustomizedViewChange$toggleMarkForDeletion() {
        this._markedForDeletion = !this._markedForDeletion;
        this._markedForDeletionChanged(this);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DateFilterWidget

tab.DateFilterWidget = function tab_DateFilterWidget() {
    this.lowestAllowedDate = new Date(1753, 0, 1);
    this.highestAllowedDate = new Date(9999, 11, 31);
    tab.DateFilterWidget.initializeBase(this);
}
tab.DateFilterWidget.prototype = {
    firstPeriod: 0,
    lastPeriod: 0,
    isFutureIncluded: true,
    periodType: null,
    anchorDateTime: null,
    fy: 0,
    startOfWeek: 1,
    _applyTimer: null,
    domPreview: null,
    textLast: null,
    textCurr: null,
    textNext: null,
    textLastn1: null,
    textLastn2: null,
    textNextn1: null,
    textNextn2: null,
    textTodate: null,
    rangeType: null,
    radioTodate: null,
    rangeN: 0,
    UPDATE_DELAY: 800,
    inputLastn: null,
    
    setRangeType: function tab_DateFilterWidget$setRangeType(rangeTypeArg, n) {
        var firstPrd, lastPrd;
        var isFuture;
        switch (rangeTypeArg) {
            case 'curr':
                firstPrd = 0;
                lastPrd = 0;
                isFuture = true;
                break;
            case 'todate':
                firstPrd = 0;
                lastPrd = 0;
                isFuture = false;
                break;
            case 'last':
                firstPrd = -1;
                lastPrd = -1;
                isFuture = true;
                break;
            case 'next':
                firstPrd = 1;
                lastPrd = 1;
                isFuture = true;
                break;
            case 'lastn':
                firstPrd = (1 - n);
                lastPrd = 0;
                isFuture = true;
                break;
            case 'nextn':
                firstPrd = 0;
                lastPrd = (n - 1);
                isFuture = true;
                break;
            default:
                return;
        }
        this.firstPeriod = firstPrd;
        this.lastPeriod = lastPrd;
        this.isFutureIncluded = isFuture;
    },
    
    getRangeType: function tab_DateFilterWidget$getRangeType() {
        var isFuture = this.isFutureIncluded;
        var firstPrd = this.firstPeriod;
        var lastPrd = this.lastPeriod;
        var range;
        if (!firstPrd && !lastPrd && isFuture) {
            range = 'curr';
        }
        else if (!firstPrd && !lastPrd && !isFuture) {
            range = 'todate';
        }
        else if (firstPrd === -1 && lastPrd === -1 && isFuture) {
            range = 'last';
        }
        else if (firstPrd === 1 && lastPrd === 1 && isFuture) {
            range = 'next';
        }
        else if (firstPrd < 0 && !lastPrd && isFuture) {
            range = 'lastn';
        }
        else if (!firstPrd && lastPrd > 0 && isFuture) {
            range = 'nextn';
        }
        else if (firstPrd > 0 && lastPrd > 0 && !isFuture) {
            range = 'invalid';
        }
        else if (firstPrd > lastPrd) {
            range = 'invalid';
        }
        else if (firstPrd === lastPrd) {
            range = 'other';
        }
        else {
            range = 'othern';
        }
        return range;
    },
    
    adjustLastDate: function tab_DateFilterWidget$adjustLastDate(d) {
        var outDate = null;
        switch (this.periodType) {
            case 'year':
            case 'quarter':
            case 'month':
            case 'week':
            case 'day':
                outDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
                outDate = new Date(outDate.getTime() - tab.DateUtil.oneSecond);
                break;
            case 'hour':
            case 'minute':
            case 'second':
                outDate = new Date(d.getTime() - tab.DateUtil.oneSecond);
                break;
        }
        return outDate;
    },
    
    getPeriods: function tab_DateFilterWidget$getPeriods() {
        return this.lastPeriod - this.firstPeriod + 1;
    },
    
    roundToPeriod: function tab_DateFilterWidget$roundToPeriod(d, fiscalYearStart, calendarStartOfWeek) {
        var month = d.getMonth();
        var year = d.getFullYear();
        switch (this.periodType) {
            case 'year':
                if (month < fiscalYearStart) {
                    year -= 1;
                }
                return new Date(year, fiscalYearStart, 1, 12);
            case 'quarter':
                var quarters;
                if (month >= fiscalYearStart) {
                    quarters = Math.floor((month - fiscalYearStart) / 3);
                    month = fiscalYearStart + (quarters * 3);
                }
                else {
                    quarters = Math.floor((month + 12 - fiscalYearStart) / 3);
                    var newmonth = (fiscalYearStart + (quarters * 3)) % 12;
                    if (!newmonth) {
                        newmonth = 12;
                    }
                    if (newmonth > month) {
                        --year;
                    }
                    month = newmonth;
                }
                return new Date(year, month, 1, 12);
            case 'month':
                return new Date(year, month, 1, 12);
            case 'week':
                var daysSinceStartOfWeek = (7 + (1 + d.getDay()) - calendarStartOfWeek) % 7;
                var ret = new Date(year, month, d.getDate(), 12);
                return new Date(ret.getTime() - (daysSinceStartOfWeek * tab.DateUtil.oneDay));
            case 'day':
                return new Date(year, month, d.getDate(), 12);
            case 'hour':
                return new Date(year, month, d.getDate(), d.getHours());
            case 'minute':
                return new Date(year, month, d.getDate(), d.getHours(), d.getMinutes());
            case 'second':
                return new Date(year, month, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
        }
        return null;
    },
    
    getEffectiveAnchor: function tab_DateFilterWidget$getEffectiveAnchor() {
        return (this.anchorDateTime == null) ? new Date() : this.anchorDateTime;
    },
    
    getAnchorPeriod: function tab_DateFilterWidget$getAnchorPeriod(anchor) {
        return this.roundToPeriod(anchor, this.fy, this.startOfWeek);
    },
    
    evaluateFirstDate: function tab_DateFilterWidget$evaluateFirstDate(anchorPeriod) {
        return tab.DateUtil.adjustDateByPeriod(anchorPeriod, this.periodType, this.firstPeriod);
    },
    
    evaluateLastDate: function tab_DateFilterWidget$evaluateLastDate(anchor, anchorPeriod) {
        var outOfRange = tab.DateUtil.adjustDateByPeriod(anchorPeriod, this.periodType, this.lastPeriod + 1);
        var endRange = this.adjustLastDate(outOfRange);
        if (!this.isFutureIncluded) {
            endRange = new Date(Math.min(anchor.getTime(), endRange.getTime()));
        }
        return endRange;
    },
    
    setPYear: function tab_DateFilterWidget$setPYear() {
        this.setPeriod('year');
    },
    
    setPQuarter: function tab_DateFilterWidget$setPQuarter() {
        this.setPeriod('quarter');
    },
    
    setPMonth: function tab_DateFilterWidget$setPMonth() {
        this.setPeriod('month');
    },
    
    setPWeek: function tab_DateFilterWidget$setPWeek() {
        this.setPeriod('week');
    },
    
    setPDay: function tab_DateFilterWidget$setPDay() {
        this.setPeriod('day');
    },
    
    setPHour: function tab_DateFilterWidget$setPHour() {
        this.setPeriod('hour');
    },
    
    setPMinute: function tab_DateFilterWidget$setPMinute() {
        this.setPeriod('minute');
    },
    
    setPSecond: function tab_DateFilterWidget$setPSecond() {
        this.setPeriod('second');
    },
    
    setRange: function tab_DateFilterWidget$setRange(range, n) {
        n = (n || 0);
        if (ss.isValue(this._applyTimer)) {
            window.clearTimeout(this._applyTimer);
            this._applyTimer = null;
        }
        if (range !== this.rangeType) {
            this.rangeType = range;
            this.setRangeType(range, n);
            this._applyTimer = window.setTimeout(ss.Delegate.create(this, this.applyChanges), this.UPDATE_DELAY);
        }
        this.setRangeUI(range, n);
        this.setPreviewUI();
    },
    
    setPeriod: function tab_DateFilterWidget$setPeriod(periodTypeArg) {
        if (ss.isValue(this._applyTimer)) {
            window.clearTimeout(this._applyTimer);
            this._applyTimer = null;
        }
        this.setPeriodUI(periodTypeArg);
        if (periodTypeArg !== this.periodType) {
            if (this.oFilter.noTime && periodTypeArg === 'day') {
                dojo.style(this.radioTodate, 'display', 'none');
                dojo.style(this.textTodate, 'display', 'none');
            }
            else {
                dojo.style(this.radioTodate, 'display', '');
                dojo.style(this.textTodate, 'display', '');
            }
            this.periodType = periodTypeArg;
            this.setPreviewUI();
            this._applyTimer = window.setTimeout(ss.Delegate.create(this, this.applyChanges), this.UPDATE_DELAY * 2);
        }
    },
    
    onTyping: function tab_DateFilterWidget$onTyping(inputElem) {
        if (ss.isValue(this._applyTimer)) {
            window.clearTimeout(this._applyTimer);
            this._applyTimer = null;
        }
        inputElem.value = inputElem.value.replace(new RegExp('/[^0-9]/g'), '');
        if (inputElem.value.length > 0 && inputElem.value !== this.oFilter.rangeN) {
            this.rangeN = inputElem.value;
            this.rangeType = (inputElem === this.inputLastn) ? 'lastn' : 'nextn';
            this.setRangeType(this.rangeType, this.rangeN);
            this._applyTimer = window.setTimeout(ss.Delegate.create(this, this.applyChanges), this.UPDATE_DELAY);
        }
        this.setPreviewUI();
    },
    
    setPeriodUI: function tab_DateFilterWidget$setPeriodUI(periodTypeArg) {
        var width1;
        var width2;
        var descriptions;
        this.updateRangeButtons(periodTypeArg);
        if (this.anchorDateTime == null) {
            descriptions = tab.RelativeDateFilter.get_nonAnchoredDescriptions()[periodTypeArg];
        }
        else {
            descriptions = tab.RelativeDateFilter.get_anchoredDescriptions()[periodTypeArg];
        }
        this.textLast.innerHTML = descriptions['last'];
        this.textCurr.innerHTML = descriptions['curr'];
        this.textNext.innerHTML = descriptions['next'];
        var lastn = descriptions['lastn'].split('%');
        this.textLastn1.innerHTML = lastn[0];
        this.textLastn2.innerHTML = lastn[1];
        var nextn = descriptions['nextn'].split('%');
        this.textNextn1.innerHTML = nextn[0];
        this.textNextn2.innerHTML = nextn[1];
        this.textTodate.innerHTML = descriptions['todate'];
        width1 = dojo.style(this.textLastn1, 'width');
        width2 = dojo.style(this.textNextn1, 'width');
        if (width1 > width2) {
            dojo.style(this.textNextn1, 'width', width1 + 'px');
        }
        else if (width1 < width2) {
            dojo.style(this.textLastn1, 'width', width2 + 'px');
        }
    },
    
    _getDefaultDateFormat$2: function tab_DateFilterWidget$_getDefaultDateFormat$2() {
        var f = null;
        if (ss.isValue(this.oFilter) && ss.isValue(this.oFilter.default_format)) {
            f = this.oFilter.default_format;
        }
        return (ss.isValue(f) && f.length === 3) ? f[0] : '*M/d/yyyy';
    },
    
    _getDefaultTimeFormat$2: function tab_DateFilterWidget$_getDefaultTimeFormat$2() {
        var f = null;
        if (ss.isValue(this.oFilter) && ss.isValue(this.oFilter.default_format)) {
            f = this.oFilter.default_format;
        }
        return (ss.isValue(f) && f.length === 3) ? f[1].substr(1) : 'hh:nn:ss ampm';
    },
    
    _getLocale$2: function tab_DateFilterWidget$_getLocale$2() {
        var f = null;
        if (ss.isValue(this.oFilter) && ss.isValue(this.oFilter.default_format)) {
            f = this.oFilter.default_format;
        }
        return (ss.isValue(f) && f.length === 3) ? f[2] : 'en_US';
    },
    
    setPreviewUI: function tab_DateFilterWidget$setPreviewUI() {
        this.domPreview.innerHTML = this.getPreviewMessage();
    },
    
    getPreviewMessage: function tab_DateFilterWidget$getPreviewMessage() {
        var anchor = this.getEffectiveAnchor();
        var formatDateOnly = this._getDefaultDateFormat$2();
        var locale = this._getLocale$2();
        var formatTimeOnly = this._getDefaultTimeFormat$2();
        var str;
        var anchorPeriod = this.getAnchorPeriod(anchor);
        var firstDate = this.evaluateFirstDate(anchorPeriod);
        var formatDateTime = formatDateOnly + ' ' + formatTimeOnly;
        var lastDate = this.evaluateLastDate(anchor, anchorPeriod);
        if (this.isRangeValid(firstDate, lastDate)) {
            var firstDateNoTimeZone = new Date(Date.UTC(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), firstDate.getHours(), firstDate.getMinutes(), firstDate.getSeconds()));
            var lastDateNoTimeZone = new Date(Date.UTC(lastDate.getFullYear(), lastDate.getMonth(), lastDate.getDate(), lastDate.getHours(), lastDate.getMinutes(), lastDate.getSeconds()));
            var firstStr = tableau.format.formatCustomJSDateTime(firstDateNoTimeZone, formatDateOnly, tab.DateTimeAutoFormatMode.showDateOnly, null, locale, null, null, null);
            var lastStr = tableau.format.formatCustomJSDateTime(lastDateNoTimeZone, formatDateOnly, tab.DateTimeAutoFormatMode.showDateOnly, null, locale, null, null, null);
            if (this.periodType === 'hour' || this.periodType === 'minute' || this.periodType === 'second' || (this.periodType === 'day' && !this.isFutureIncluded)) {
                var formatFirst = formatDateTime;
                var formatLast = (firstStr === lastStr) ? formatTimeOnly : formatDateTime;
                firstStr = tableau.format.formatCustomJSDateTime(firstDateNoTimeZone, formatFirst, tab.DateTimeAutoFormatMode.showDateOnly, null, locale, null, null, null);
                lastStr = tableau.format.formatCustomJSDateTime(lastDateNoTimeZone, formatLast, tab.DateTimeAutoFormatMode.showDateOnly, null, locale, null, null, null);
            }
            str = firstStr + ' to ' + lastStr;
        }
        else {
            str = 'Invalid relative date';
            if (ss.isValue(this._applyTimer)) {
                window.clearTimeout(this._applyTimer);
                this._applyTimer = null;
            }
        }
        return str;
    },
    
    isRangeValid: function tab_DateFilterWidget$isRangeValid(firstDate, lastDate) {
        var isValid = true;
        if (isNaN(firstDate.getTime()) || isNaN(lastDate.getTime())) {
            isValid = false;
        }
        else if (this.firstPeriod > this.lastPeriod || (this.firstPeriod > 0 && !this.isFutureIncluded)) {
            isValid = false;
        }
        else if (!!!firstDate || !!!lastDate) {
            isValid = false;
        }
        else if (firstDate < this.lowestAllowedDate || lastDate > this.highestAllowedDate) {
            isValid = false;
        }
        return isValid;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DatePicker

tab.DatePicker = function tab_DatePicker(settings) {
    tab.DatePicker.initializeBase(this, [ $('<span>') ]);
    this._firstDayOfWeek$1 = settings.firstDayOfWeek;
    this._shortDayOfWeekNames$1 = settings.shortDayOfWeekNames;
    this._todayFormatTemplate$1 = settings.todayFormatTemplate;
    this._monthYearFormatter$1 = settings.monthYearFormatter;
    this._fullDateFormatter$1 = settings.fullDateFormatter;
    this._usingMaxHeight$1 = false;
    var now = new Date();
    this._currentMonth$1 = tab.DatePicker._monthOf$1((tab.DatePicker._asLocalDate(settings.monthToShow) || now));
    this._selectedDate$1 = tab.DatePicker._asLocalDate(settings.dateToSelect);
    this.setDateRange(settings.minDate, settings.maxDate);
    this.get_element().addClass('tab-datepicker');
    this._makeHeader$1().appendTo(this.get_element());
    var tableWrapper = $('<div>').addClass('tab-datepicker-month-table-wrapper').append($('<div>').addClass('tab-datepicker-week-shade')).append(this._makeMonthTable$1());
    tableWrapper.appendTo(this.get_element());
    this._makeFooter$1().appendTo(this.get_element());
    this.get_element().mousedown(function(e) {
        e.preventDefault();
        e.stopPropagation();
    });
    this._update$1();
}
tab.DatePicker._asLocalDate = function tab_DatePicker$_asLocalDate(utcDate) {
    return (!!utcDate) ? new Date(utcDate.getUTCFullYear(), utcDate.getUTCMonth(), utcDate.getUTCDate()) : null;
}
tab.DatePicker._asUTCDate$1 = function tab_DatePicker$_asUTCDate$1(localDate) {
    return (!!localDate) ? new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate())) : null;
}
tab.DatePicker._monthOf$1 = function tab_DatePicker$_monthOf$1(date) {
    return (!!date) ? new Date(date.getFullYear(), date.getMonth(), 1) : null;
}
tab.DatePicker._adjustForWindow$1 = function tab_DatePicker$_adjustForWindow$1(calendarPosition, calendarSize, windowMin, windowMax) {
    if (calendarPosition + calendarSize > windowMax) {
        calendarPosition = windowMax - calendarSize;
        if (calendarPosition < windowMin) {
            calendarPosition += Math.ceil((windowMin - calendarPosition) / 2);
        }
    }
    return calendarPosition;
}
tab.DatePicker._addDayOfWeek$1 = function tab_DatePicker$_addDayOfWeek$1(dayOfWeek, days) {
    return (dayOfWeek + days + 14) % 7;
}
tab.DatePicker._sameDay$1 = function tab_DatePicker$_sameDay$1(date1, date2) {
    return (date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate());
}
tab.DatePicker.prototype = {
    _firstDayOfWeek$1: 0,
    _shortDayOfWeekNames$1: null,
    _monthYearFormatter$1: null,
    _fullDateFormatter$1: null,
    _currentMonth$1: null,
    _selectedDate$1: null,
    _minDate$1: null,
    _minMonth$1: null,
    _maxDate$1: null,
    _maxMonth$1: null,
    _monthYearBox$1: null,
    _prevMonthButton$1: null,
    _nextMonthButton$1: null,
    _monthTable$1: null,
    _todayReadout$1: null,
    _todayFormatTemplate$1: null,
    _usingMaxHeight$1: false,
    
    setDateRange: function tab_DatePicker$setDateRange(newMinDate, newMaxDate) {
        this._minDate$1 = tab.DatePicker._asLocalDate(newMinDate);
        this._maxDate$1 = tab.DatePicker._asLocalDate(newMaxDate);
        this._minMonth$1 = tab.DatePicker._monthOf$1(this._minDate$1);
        this._maxMonth$1 = tab.DatePicker._monthOf$1(this._maxDate$1);
    },
    
    show: function tab_DatePicker$show(newMonthToShow, newSelectedDate) {
        if (ss.isValue(newMonthToShow)) {
            this._currentMonth$1 = tab.DatePicker._monthOf$1(tab.DatePicker._asLocalDate(newMonthToShow));
            this._selectedDate$1 = tab.DatePicker._asLocalDate((newSelectedDate || newMonthToShow));
        }
        this._update$1();
        return this.get_element().show().width(this.get_element().width());
    },
    
    hide: function tab_DatePicker$hide() {
        this._usingMaxHeight$1 = false;
        this.get_element().height('auto');
        return this.get_element().hide();
    },
    
    positionCalendarByElement: function tab_DatePicker$positionCalendarByElement(element) {
        tab.BrowserViewport.getViewport(ss.Delegate.create(this, function(browserViewport) {
            var calendarOffset = element.offset();
            var calendarWidth = this.get_element().outerWidth();
            var calendarMaxHeight = this.getMaxHeight();
            var elementHeight = element.outerHeight();
            calendarOffset = this._findBestPositionForCalendar$1(browserViewport, elementHeight, calendarOffset, calendarWidth, calendarMaxHeight);
            this.get_element().offset(calendarOffset);
        }));
    },
    
    _findBestPositionForCalendar$1: function tab_DatePicker$_findBestPositionForCalendar$1(browserViewport, elementHeight, calendarOffset, calendarWidth, calendarMaxHeight) {
        var viewport = browserViewport.getDocumentViewport(tab.$create_Point(calendarOffset['left'], calendarOffset['top']));
        var viewportRight = viewport.l + viewport.w;
        var viewportBottom = viewport.t + viewport.h;
        if (calendarOffset['top'] + elementHeight - 1 + calendarMaxHeight <= viewportBottom) {
            calendarOffset['top'] += elementHeight - 1;
            calendarOffset['left'] = tab.DatePicker._adjustForWindow$1(calendarOffset['left'], calendarWidth, viewport.l, viewportRight);
        }
        else if (calendarOffset['top'] - (calendarMaxHeight - 1) > viewport.t) {
            this.useMaxHeight();
            calendarOffset['top'] -= (calendarMaxHeight - 1);
            calendarOffset['left'] = tab.DatePicker._adjustForWindow$1(calendarOffset['left'], calendarWidth, viewport.l, viewportRight);
        }
        else if (calendarOffset['left'] - (calendarWidth - 1) > viewport.l) {
            calendarOffset['left'] -= (calendarWidth - 1);
            calendarOffset['top'] = tab.DatePicker._adjustForWindow$1(calendarOffset['top'], calendarMaxHeight, viewport.t, viewportBottom);
        }
        else {
            var inputEdge = calendarOffset['left'];
            calendarOffset['left'] = viewport.l;
            calendarOffset['left'] = tab.DatePicker._adjustForWindow$1(calendarOffset['left'], calendarWidth, viewport.l, inputEdge);
            calendarOffset['top'] = tab.DatePicker._adjustForWindow$1(calendarOffset['top'], calendarMaxHeight, viewport.t, viewportBottom);
        }
        return calendarOffset;
    },
    
    getMaxHeight: function tab_DatePicker$getMaxHeight() {
        var rows = this.get_element().find('.tab-datepicker-month-table tbody tr');
        return this.get_element().outerHeight() + Math.round(rows.outerHeight() * (6 - rows.length));
    },
    
    useMaxHeight: function tab_DatePicker$useMaxHeight() {
        if (!this._usingMaxHeight$1) {
            this._usingMaxHeight$1 = true;
            this._update$1();
            this.get_element().height(this.get_element().height());
        }
    },
    
    _makeHeader$1: function tab_DatePicker$_makeHeader$1() {
        var header = $('<div>').addClass('tab-datepicker-header');
        this._monthYearBox$1 = $('<span>').addClass('tab-datepicker-header-text').appendTo(header);
        this._prevMonthButton$1 = $('<span>').addClass('tab-datepicker-header-button').addClass('tab-datepicker-prev-month-button').appendTo(header).click(ss.Delegate.create(this, this._showPrevMonth$1));
        this._nextMonthButton$1 = $('<span>').addClass('tab-datepicker-header-button').addClass('tab-datepicker-next-month-button').appendTo(header).click(ss.Delegate.create(this, this._showNextMonth$1));
        return header;
    },
    
    _makeFooter$1: function tab_DatePicker$_makeFooter$1() {
        var footer = $('<div>').addClass('tab-datepicker-footer');
        $('<span>').addClass('tab-datepicker-today-label').html(String.format(this._todayFormatTemplate$1, "<span class='tab-datepicker-today-date'></span>")).appendTo(footer);
        this._todayReadout$1 = $('.tab-datepicker-today-date', footer).click(ss.Delegate.create(this, this._chooseToday$1));
        return footer;
    },
    
    _makeMonthTable$1: function tab_DatePicker$_makeMonthTable$1() {
        this._monthTable$1 = $('<table>').addClass('tab-datepicker-month-table');
        this._monthTable$1.on('click', '.tab-datepicker-day-cell', ss.Delegate.create(this, this._dayCellClicked$1));
        return this._monthTable$1;
    },
    
    _dayCellClicked$1: function tab_DatePicker$_dayCellClicked$1(evt) {
        var cell = $(evt.target);
        if (!cell.hasClass('tab-disabled')) {
            this._selectDay$1(cell);
        }
    },
    
    _selectDay$1: function tab_DatePicker$_selectDay$1(cell) {
        this._monthTable$1.find('.tab-datepicker-day-cell-selected').removeClass('tab-datepicker-day-cell-selected');
        cell.addClass('tab-datepicker-day-cell-selected');
        var dateData = cell.data();
        this._selectedDate$1 = new Date(dateData['year'], dateData['month'], dateData['dayOfMonth']);
        var selectedDateTimezoneless = new Date(Date.UTC(dateData['year'], dateData['month'], dateData['dayOfMonth']));
        this._triggerDateSelected$1(selectedDateTimezoneless);
    },
    
    _triggerDateSelected$1: function tab_DatePicker$_triggerDateSelected$1(dt) {
        this.get_element().trigger('dateSelected', [dt]);
    },
    
    _showPrevMonth$1: function tab_DatePicker$_showPrevMonth$1(ignored) {
        if (this._previousMonthEnabled$1()) {
            if (!this._currentMonth$1.getMonth()) {
                if (this._currentMonth$1.getFullYear() > 1) {
                    this._currentMonth$1.setMonth(11);
                    this._currentMonth$1.setFullYear(this._currentMonth$1.getFullYear() - 1);
                }
            }
            else {
                this._currentMonth$1.setMonth(this._currentMonth$1.getMonth() - 1);
            }
            this._update$1();
        }
    },
    
    _showNextMonth$1: function tab_DatePicker$_showNextMonth$1(ignored) {
        if (this._nextMonthEnabled$1()) {
            if (this._currentMonth$1.getMonth() === 11) {
                this._currentMonth$1.setMonth(0);
                this._currentMonth$1.setFullYear(this._currentMonth$1.getFullYear() + 1);
            }
            else {
                this._currentMonth$1.setMonth(this._currentMonth$1.getMonth() + 1);
            }
            this._update$1();
        }
    },
    
    _previousMonthEnabled$1: function tab_DatePicker$_previousMonthEnabled$1() {
        return ss.isNullOrUndefined(this._minMonth$1) || this._currentMonth$1 > this._minMonth$1;
    },
    
    _nextMonthEnabled$1: function tab_DatePicker$_nextMonthEnabled$1() {
        return ss.isNullOrUndefined(this._maxMonth$1) || this._currentMonth$1 < this._maxMonth$1;
    },
    
    _chooseToday$1: function tab_DatePicker$_chooseToday$1(ignored) {
        var now = tab.DatePicker._asUTCDate$1(new Date());
        if (!this._isInvalidDate$1(now)) {
            this._triggerDateSelected$1(now);
        }
    },
    
    _update$1: function tab_DatePicker$_update$1() {
        this._updateHeader$1();
        this._updateMonthTable$1();
        this._updateFooter$1();
        this.get_element().prop('unselectable', 'on');
        this.get_element().find('*').prop('unselectable', 'on');
        this.get_element().trigger('calendarUpdated');
    },
    
    _updateHeader$1: function tab_DatePicker$_updateHeader$1() {
        this._monthYearBox$1.text(this._monthYearFormatter$1(tab.DatePicker._asUTCDate$1(this._currentMonth$1)));
        this._prevMonthButton$1.toggleClass('tab-disabled', !this._previousMonthEnabled$1());
        this._nextMonthButton$1.toggleClass('tab-disabled', !this._nextMonthEnabled$1());
    },
    
    _updateFooter$1: function tab_DatePicker$_updateFooter$1() {
        this._todayReadout$1.text(this._fullDateFormatter$1(tab.DatePicker._asUTCDate$1(new Date())));
        this._todayReadout$1.toggleClass('tab-disabled', this._isInvalidDate$1(tab.DatePicker._asUTCDate$1(new Date())));
    },
    
    _makeDayCell$1: function tab_DatePicker$_makeDayCell$1(date) {
        return $('<td>').addClass('tab-datepicker-day-cell').text(date.getDate().toString()).data({ year: date.getFullYear(), month: date.getMonth(), dayOfMonth: date.getDate() }).toggleClass('tab-datepicker-day-cell-today', tab.DatePicker._sameDay$1(date, new Date())).toggleClass('tab-datepicker-day-cell-selected', !!this._selectedDate$1 && tab.DatePicker._sameDay$1(date, this._selectedDate$1)).toggleClass('tab-datepicker-day-cell-othermonth', date.getMonth() !== this._currentMonth$1.getMonth()).toggleClass('tab-disabled', this._isInvalidDate$1(date));
    },
    
    _isInvalidDate$1: function tab_DatePicker$_isInvalidDate$1(date) {
        return (ss.isValue(this._minDate$1) && date < this._minDate$1) || (ss.isValue(this._maxDate$1) && date > this._maxDate$1);
    },
    
    _isInvalidMonth$1: function tab_DatePicker$_isInvalidMonth$1(month) {
        return (ss.isValue(this._minMonth$1) && month < this._minMonth$1) || (ss.isValue(this._maxMonth$1) && month > this._maxMonth$1);
    },
    
    _updateMonthTable$1: function tab_DatePicker$_updateMonthTable$1() {
        var startDayOfWeek = new Date(this._currentMonth$1.getFullYear(), this._currentMonth$1.getMonth(), 1).getDay();
        var dayOfWeek;
        var date, untilDate;
        var thead, tbody, tr;
        this._monthTable$1.html('');
        thead = $('<thead>').appendTo(this._monthTable$1);
        tr = $('<tr>').appendTo(thead);
        dayOfWeek = this._firstDayOfWeek$1;
        do {
            $('<th>').addClass('tab-datepicker-header-cell').text(this._shortDayOfWeekNames$1[dayOfWeek]).appendTo(tr);
            dayOfWeek = tab.DatePicker._addDayOfWeek$1(dayOfWeek, 1);
        } while (dayOfWeek !== this._firstDayOfWeek$1);
        tbody = $('<tbody>').appendTo(this._monthTable$1);
        tr = $('<tr>').appendTo(tbody);
        date = new Date(this._currentMonth$1.getFullYear(), this._currentMonth$1.getMonth(), 1);
        date.setDate(date.getDate() - tab.DatePicker._addDayOfWeek$1(startDayOfWeek, -this._firstDayOfWeek$1));
        untilDate = new Date(this._currentMonth$1.getFullYear(), this._currentMonth$1.getMonth() + 1, 1);
        untilDate.setDate(untilDate.getDate() + tab.DatePicker._addDayOfWeek$1(this._firstDayOfWeek$1, -untilDate.getDay()));
        while (!tab.DatePicker._sameDay$1(date, untilDate)) {
            this._makeDayCell$1(date).appendTo(tr);
            date.setDate(date.getDate() + 1);
            if (date.getDay() === this._firstDayOfWeek$1 && !tab.DatePicker._sameDay$1(date, untilDate)) {
                tr = $('<tr>').appendTo(tbody);
            }
        }
        if (this._usingMaxHeight$1) {
            var rows = tbody.find('tr');
            if (rows.length < 6) {
                var rowHeight = rows.height();
                for (var r = rows.length; r < 6; ++r) {
                    $("<tr><td class='tab-datepicker-day-cell'></td></tr>").height(rowHeight).insertAfter(rows.last());
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DatePickerSettings

tab.DatePickerSettings = function tab_DatePickerSettings(initialMonthToShow, initialDateToSelect, minDate, maxDate, initialFirstDayOfWeek, initialShortDayOfWeekNames, initialTodayFormatTemplate, initialMonthYearFormatter, initialFullDateFormatter) {
    this.monthToShow = (ss.isNullOrUndefined(initialMonthToShow)) ? null : new Date(initialMonthToShow.getTime());
    this.dateToSelect = (ss.isNullOrUndefined(initialDateToSelect)) ? null : new Date(initialDateToSelect.getTime());
    this.minDate = (ss.isNullOrUndefined(minDate)) ? null : new Date(minDate.getTime());
    this.maxDate = (ss.isNullOrUndefined(maxDate)) ? null : new Date(maxDate.getTime());
    this.firstDayOfWeek = (ss.isNullOrUndefined(initialFirstDayOfWeek)) ? 0 : initialFirstDayOfWeek;
    this.shortDayOfWeekNames = (ss.isNullOrUndefined(initialShortDayOfWeekNames)) ? [ 'S', 'M', 'T', 'W', 'T', 'F', 'S' ] : initialShortDayOfWeekNames.clone();
    this.todayFormatTemplate = (ss.isNullOrUndefined(initialTodayFormatTemplate)) ? 'Today: {0}' : initialTodayFormatTemplate;
    this.monthYearFormatter = (ss.isNullOrUndefined(initialMonthYearFormatter)) ? function(utcDate) {
        return tab.DatePicker._asLocalDate(utcDate).localeFormat('MMMM yyyy');
    } : initialMonthYearFormatter;
    this.fullDateFormatter = (ss.isNullOrUndefined(initialFullDateFormatter)) ? function(utcDate) {
        return tab.DatePicker._asLocalDate(utcDate).localeFormat('MMMM d, yyyy');
    } : initialFullDateFormatter;
}
tab.DatePickerSettings.prototype = {
    monthToShow: null,
    dateToSelect: null,
    minDate: null,
    maxDate: null,
    firstDayOfWeek: 0,
    shortDayOfWeekNames: null,
    todayFormatTemplate: null,
    monthYearFormatter: null,
    fullDateFormatter: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.DojoWidgets

tab.DojoWidgets = function tab_DojoWidgets() {
}


////////////////////////////////////////////////////////////////////////////////
// tableau.FilterItem

tableau.FilterItem = function tableau_FilterItem() {
}
tableau.FilterItem.getSearchResultHtml = function tableau_FilterItem$getSearchResultHtml(filter, tuple, itemName, itemIndex) {
    switch (filter.get_mode()) {
        case 'checklist':
        case 'checkdropdown':
        case 'typeinlist':
            return tableau.FilterItem.formatChecklistFilterItemHtml(filter, tuple, itemName, itemIndex);
        case 'radiolist':
            return tableau.FilterItem.formatRadiolistFilterItemHtml(filter, tuple, itemName, itemIndex);
        case 'dropdown':
            return tableau.FilterItem.formatDropdownListFilterItemHtml(filter, tuple, itemName, itemIndex);
    }
    return '';
}
tableau.FilterItem.formatChecklistFilterItemHtml = function tableau_FilterItem$formatChecklistFilterItemHtml(filter, tuple, itemName, itemIndex) {
    var id = tab.FilterItemUtil.getItemId(itemName, itemIndex);
    var isChecked = tab.FilterItemUtil.shouldCheckFilterItemMultiValue(tuple, filter);
    var dname = tableau.format.formatTupleDisplayName(tuple, true, filter.get_oFilter().role);
    var facet = tableau.format.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
    var showFacets = tab.FilterItemUtil.showFacets(filter);
    var isPending = filter.get_viewModel().get_filterType() !== 'Hierarchical' && ss.isValue(filter.get_modeContents().pendingManager) && filter.get_modeContents().pendingManager.isPending(tuple, itemIndex);
    return tableau.FilterItem.getCheckHtml(id, dname, isChecked, facet, showFacets, isPending);
}
tableau.FilterItem.getCheckHtml = function tableau_FilterItem$getCheckHtml(id, dname, isChecked, facet, showFacets, isPending) {
    var arr = [ '<div class="', '', '" id="', '', '"><div class="facet">', '', '</div><div class="facetOverflow"><input type="checkbox" class="FICheckRadio" name="', '', '" ', '', '><a class="FIText" title="', '', '">', '', '</a></div></div>' ];
    var c = (isPending) ? 'FIItem FIPending' : 'FIItem';
    arr[1] = c;
    arr[3] = arr[7] = tableau.format.escapeHTML(id);
    arr[9] = '';
    arr[11] = arr[13] = tableau.format.escapeHTML(dname);
    arr[5] = (showFacets) ? facet : '';
    if ((isChecked && !isPending) || (!isChecked && isPending)) {
        arr[1] += ' FIChecked';
        arr[9] += ' checked="checked" ';
    }
    return arr.join('');
}
tableau.FilterItem.formatRadiolistFilterItemHtml = function tableau_FilterItem$formatRadiolistFilterItemHtml(filter, tuple, itemName, itemIndex) {
    var id = tab.FilterItemUtil.getItemId(itemName, itemIndex);
    var isChecked = tab.FilterItemUtil.shouldCheckFilterItemSingleValue(tuple, filter);
    var dname = tableau.format.formatTupleDisplayName(tuple, true, filter.get_oFilter().role);
    var facet = tableau.format.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
    var showFacets = tab.FilterItemUtil.showFacets(filter);
    return tableau.FilterItem.getRadioHtml(id, itemName, dname, isChecked, facet, showFacets);
}
tableau.FilterItem.getRadioHtml = function tableau_FilterItem$getRadioHtml(id, name, dname, isChecked, facet, showFacets) {
    var arr = [ '<div class="', '', '" id="', '', '"><div class="facet">', '', '</div><div class="facetOverflow"><input type="radio" class="FICheckRadio" name="', '', '" ', '', '><a class="FIText" title="', '', '">', '', '</a></div></div>' ];
    arr[1] = 'FIItem';
    arr[3] = tableau.format.escapeHTML(id);
    arr[7] = tableau.format.escapeHTML(name);
    arr[9] = '';
    arr[11] = arr[13] = tableau.format.escapeHTML(dname);
    arr[5] = (showFacets) ? facet : '';
    if (isChecked) {
        arr[1] += ' FIChecked';
        arr[9] += ' checked="checked" ';
    }
    return arr.join('');
}
tableau.FilterItem.formatDropdownListFilterItemHtml = function tableau_FilterItem$formatDropdownListFilterItemHtml(filter, tuple, itemName, itemIndex) {
    var id = tab.FilterItemUtil.getItemId(itemName, itemIndex);
    var dname = tableau.format.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
    var facet = tableau.format.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
    var showFacets = tab.FilterItemUtil.showFacets(filter);
    return tableau.FilterItem.getDropdownHtml(id, dname, facet, showFacets);
}
tableau.FilterItem.getDropdownHtml = function tableau_FilterItem$getDropdownHtml(id, dname, facet, showFacets) {
    var template = [ '<div class="', '', '" id="', '', '"><div class="facet">', '', '</div><div class="facetOverflow"><a title="', '', '">', '', '</a></div></div>' ];
    template[1] = 'FIItem FISimpleDropdownItem';
    template[3] = id;
    template[7] = template[9] = dname;
    template[5] = (showFacets) ? facet : '';
    return template.join('');
}
tableau.FilterItem.getTypeInHtml = function tableau_FilterItem$getTypeInHtml(id, dname) {
    var arr = [ '<div tabindex="0" class="FIItem FITypeInItem FIChecked" id="', '', '" title="', '', '">', '', '</div>' ];
    arr[1] = tableau.format.escapeHTML(id);
    arr[3] = arr[5] = tableau.format.escapeHTML(dname);
    return arr.join('');
}
tableau.FilterItem.getSelectHtml = function tableau_FilterItem$getSelectHtml(id, dname, isChecked, isAll) {
    var arr = [ '<option value="', '', '" ', '', '>', '', '</option>' ];
    arr[1] = tableau.format.escapeHTML(id);
    arr[3] = (isChecked && !isAll) ? 'SELECTED' : '';
    arr[5] = tableau.format.escapeHTML(dname);
    return arr.join('');
}
tableau.FilterItem.getCssNode = function tableau_FilterItem$getCssNode(node) {
    return tab.FilterItemUtil.getClassElement(node, 'FIItem');
}
tableau.FilterItem.isPending = function tableau_FilterItem$isPending(node) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    return ss.isValue(cssNode) && dojo.hasClass(cssNode, 'FIPending');
}
tableau.FilterItem.togglePendingState = function tableau_FilterItem$togglePendingState(node) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    $(cssNode).toggleClass('FIPending');
}
tableau.FilterItem.setChecked = function tableau_FilterItem$setChecked(node, isChecked, tuple) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    if (ss.isValue(cssNode)) {
        if (isChecked) {
            dojo.addClass(cssNode, 'FIChecked');
        }
        else {
            dojo.removeClass(cssNode, 'FIChecked');
        }
    }
    var checkBoxOrRadio = tableau.FilterItem.getCheckboxOrRadio(node);
    if (ss.isValue(checkBoxOrRadio)) {
        checkBoxOrRadio.checked = !!isChecked;
    }
    if (ss.isValue(tuple)) {
        tuple.s = (!!isChecked);
    }
    return tuple;
}
tableau.FilterItem.isChecked = function tableau_FilterItem$isChecked(node) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    return ss.isValue(cssNode) && dojo.hasClass(cssNode, 'FIChecked');
}
tableau.FilterItem.syncCssToCheckState = function tableau_FilterItem$syncCssToCheckState(node) {
    var checkBoxOrRadio = tableau.FilterItem.getCheckboxOrRadio(node);
    if (ss.isValue(checkBoxOrRadio)) {
        tableau.FilterItem.setChecked(node, checkBoxOrRadio.checked, null);
    }
}
tableau.FilterItem.setSelected = function tableau_FilterItem$setSelected(node, selected) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    if (selected) {
        dojo.addClass(cssNode, 'FISelected');
    }
    else {
        dojo.removeClass(cssNode, 'FISelected');
    }
}
tableau.FilterItem.isSelected = function tableau_FilterItem$isSelected(node) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    return ss.isValue(cssNode) && dojo.hasClass(cssNode, 'FISelected');
}
tableau.FilterItem.isTiled = function tableau_FilterItem$isTiled(node) {
    var tileNode = node.parentNode;
    if (ss.isValue(tileNode)) {
        return dojo.hasClass(tileNode, 'tile');
    }
    return false;
}
tableau.FilterItem.getNodeFromEvent = function tableau_FilterItem$getNodeFromEvent(evt) {
    if (ss.isNullOrUndefined(evt) || ss.isNullOrUndefined(evt.target)) {
        return null;
    }
    var node = evt.target;
    while (ss.isValue(node) && node.tagName !== 'OPTION' && !dojo.hasClass(node, 'FIItem')) {
        node = node.parentNode;
    }
    return node;
}
tableau.FilterItem.getIndex = function tableau_FilterItem$getIndex(node) {
    return tab.FilterItemUtil.getIndexFromId(node.id);
}
tableau.FilterItem.isTypeInListItem = function tableau_FilterItem$isTypeInListItem(node) {
    var cssNode = tableau.FilterItem.getCssNode(node);
    return ss.isValue(cssNode) && dojo.hasClass(cssNode, 'FITypeInItem');
}
tableau.FilterItem.isAllItem = function tableau_FilterItem$isAllItem(node) {
    if (ss.isNullOrUndefined(node) || tableau.FilterItem.isTypeInListItem(node)) {
        return false;
    }
    return tab.FilterItemUtil.isAllItemId(node.id);
}
tableau.FilterItem.getCheckboxOrRadio = function tableau_FilterItem$getCheckboxOrRadio(node) {
    var checkboxNode = tableau.util.findElementByTagName(node, 'input', { type: 'checkbox' });
    if (ss.isValue(checkboxNode)) {
        return checkboxNode;
    }
    return tableau.util.findElementByTagName(node, 'input', { type: 'radio' });
}


////////////////////////////////////////////////////////////////////////////////
// tab.FilterItemUtil

tab.FilterItemUtil = function tab_FilterItemUtil() {
}
tab.FilterItemUtil.getBaseItemName = function tab_FilterItemUtil$getBaseItemName(filter, prefix) {
    var itemName = prefix + '_' + filter.get_oFilter().name;
    if (ss.isValue(filter.get_session())) {
        itemName += filter.get_session().get_viewId();
    }
    return itemName;
}
tab.FilterItemUtil.getItemId = function tab_FilterItemUtil$getItemId(itemName, itemIndex) {
    return tableau.format.escapeHTML(itemName + '_' + ((itemIndex === tab.FilterItemUtil.allItemIndex) ? tab.FilterItemUtil._ALL : itemIndex.toString()));
}
tab.FilterItemUtil.getIndexFromId = function tab_FilterItemUtil$getIndexFromId(id) {
    var indexString = tab.FilterItemUtil._getIndexString(id);
    var index = parseInt(indexString, 10);
    if (isNaN(index)) {
        if (indexString === tab.FilterItemUtil._ALL) {
            return tab.FilterItemUtil.allItemIndex;
        }
        else {
            return tab.FilterItemUtil.unknownItemIndex;
        }
    }
    return index;
}
tab.FilterItemUtil.isAllItemId = function tab_FilterItemUtil$isAllItemId(id) {
    return tab.FilterItemUtil._getIndexString(id) === tab.FilterItemUtil._ALL;
}
tab.FilterItemUtil.getAllItemTuple = function tab_FilterItemUtil$getAllItemTuple(allFacet, isChecked) {
    var tuple = tab.$create_TupleStruct(tab.FilterItemUtil._ALL, isChecked, null);
    tuple.f = [ tab.$create_DataValueStruct(tableau.types.DataType.DT_INTEGER, allFacet) ];
    return tuple;
}
tab.FilterItemUtil.getAllItemHtml = function tab_FilterItemUtil$getAllItemHtml(filter, itemName, allFacet, isChecked, formatter) {
    return formatter(filter, tab.FilterItemUtil.getAllItemTuple(allFacet, isChecked), itemName, tab.FilterItemUtil.allItemIndex);
}
tab.FilterItemUtil.isAllOrAllChecked = function tab_FilterItemUtil$isAllOrAllChecked(filter) {
    return filter.get_oFilter().all || filter.get_oFilter().allChecked;
}
tab.FilterItemUtil.isAllMode = function tab_FilterItemUtil$isAllMode(filter) {
    return filter.get_oFilter().all;
}
tab.FilterItemUtil.shouldCheckFilterItemSingleValue = function tab_FilterItemUtil$shouldCheckFilterItemSingleValue(tuple, filter) {
    return tuple.s && !(filter.get_oFilter().exclude && tab.FilterItemUtil.isAllOrAllChecked(filter));
}
tab.FilterItemUtil.shouldCheckFilterItemMultiValue = function tab_FilterItemUtil$shouldCheckFilterItemMultiValue(tuple, filter) {
    return tuple.s || (!filter.get_oFilter().exclude && tab.FilterItemUtil.isAllMode(filter));
}
tab.FilterItemUtil.showFacets = function tab_FilterItemUtil$showFacets(filter) {
    return filter.get_oFilter().showFacets && filter.get_modeContents().get_width() > 100;
}
tab.FilterItemUtil.resetPendingFilterItems = function tab_FilterItemUtil$resetPendingFilterItems(items, updateCheckState) {
    var $enum1 = ss.IEnumerator.getEnumerator(items);
    while ($enum1.moveNext()) {
        var checkbox = $enum1.current;
        if (tableau.FilterItem.isPending(checkbox)) {
            tableau.FilterItem.togglePendingState(checkbox);
            if (updateCheckState) {
                tableau.FilterItem.setChecked(checkbox, !tableau.FilterItem.isChecked(checkbox));
            }
        }
    }
}
tab.FilterItemUtil.toggleClassState = function tab_FilterItemUtil$toggleClassState(item, className) {
    var newState = !dojo.hasClass(item, className);
    dojo.toggleClass(item, className, newState);
    return newState;
}
tab.FilterItemUtil.getClassElement = function tab_FilterItemUtil$getClassElement(node, className) {
    for (var i = 0; ss.isValue(node) && i < 5; i++, node = node.parentNode) {
        if (dojo.hasClass(node, className)) {
            return node;
        }
    }
    return null;
}
tab.FilterItemUtil._getIndexString = function tab_FilterItemUtil$_getIndexString(id) {
    var splitVal = id.split('_');
    return splitVal[splitVal.length - 1];
}


////////////////////////////////////////////////////////////////////////////////
// tab.FilterPanel

tab.FilterPanel = function tab_FilterPanel(oProps) {
    this.templateString = "<div class='FilterPanel' dojoAttachPoint='containerNode' dojoAttachEvent='onmousedown:onMouseDown'>" + '</div>';
    this.format = {};
    this.attributes = {};
    tab.FilterPanel.initializeBase(this);
    this._subscriptions$2 = [];
    this._disposables$2 = new tab.DisposableHolder();
}
tab.FilterPanel.prototype = {
    session: null,
    field: '',
    filter: null,
    width: 0,
    metricsOnly: false,
    layoutSession: null,
    zid: 0,
    quickFilterDisplayViewModel: null,
    _disposables$2: null,
    _subscriptions$2: null,
    requestSetAttributes: null,
    titleHTML: null,
    _titleH$2: 0,
    _titleW$2: 0,
    _lastKnownPanelCoords$2: null,
    textStyle: null,
    backgroundColor: null,
    
    get__quickFilterDisplayModel$2: function tab_FilterPanel$get__quickFilterDisplayModel$2() {
        return this.quickFilterDisplayViewModel.get_quickFilterDisplayModel();
    },
    
    get_getFilterModeMatrix: function tab_FilterPanel$get_getFilterModeMatrix() {
        if (ss.isValue(this.get__quickFilterDisplayModel$2()) && ss.isValue(this.get__quickFilterDisplayModel$2().get_quickFilterModeMatrix())) {
            return this.get__quickFilterDisplayModel$2().get_quickFilterModeMatrix();
        }
        else {
            return null;
        }
    },
    
    postCreate: function tab_FilterPanel$postCreate() {
        if (this.metricsOnly) {
            return;
        }
    },
    
    dispose: function tab_FilterPanel$dispose() {
        this.requestSetAttributes = null;
        this._disposables$2.dispose();
    },
    
    updateFilterProperties: function tab_FilterPanel$updateFilterProperties(oProps) {
        this.titleHTML = oProps.titleHTML;
        this.attributes = oProps.attributes;
        this.format = oProps.format;
        this.layoutSession = oProps.layoutSession;
        this.width = oProps.width;
        this.textStyle = oProps.textStyle;
        this.backgroundColor = oProps.backgroundColor;
    },
    
    destroy: function tab_FilterPanel$destroy() {
        dojo.forEach(this._subscriptions$2, dojo.unsubscribe);
        this.dispose();
        this.inherited(arguments);
    },
    
    makeQuantitativeFilter: function tab_FilterPanel$makeQuantitativeFilter(filterProps) {
        return new tableau.base.widget.QuantitativeFilter(filterProps);
    },
    
    makeQuantitativeDateFilter: function tab_FilterPanel$makeQuantitativeDateFilter(filterProps) {
        return new tableau.base.widget.QuantitativeDateFilter(filterProps);
    },
    
    makeHierarchicalFilter: function tab_FilterPanel$makeHierarchicalFilter(filterProps) {
        return new tableau.base.widget.HierarchicalFilter(filterProps);
    },
    
    makeCategoricalFilter: function tab_FilterPanel$makeCategoricalFilter(filterProps) {
        return new tableau.base.widget.CategoricalFilter(filterProps);
    },
    
    makeRelativeDateFilter: function tab_FilterPanel$makeRelativeDateFilter(filterProps) {
        return new tableau.base.widget.RelativeDateFilter(filterProps);
    },
    
    makeRelativeDatePickFilter: function tab_FilterPanel$makeRelativeDatePickFilter(filterProps) {
        return new tableau.base.widget.RelativeDatePickFilter(filterProps);
    },
    
    setupEventHandlers: function tab_FilterPanel$setupEventHandlers() {
        var filterWidgetDomNodeJQuery = $(this.filter.domNode);
        this._disposables$2.add(spiff.EventUtil.bindWithDispose(filterWidgetDomNodeJQuery, 'mouseenter', ss.Delegate.create(this, this._showControls$2)));
        this._disposables$2.add(spiff.EventUtil.bindWithDispose(filterWidgetDomNodeJQuery, 'mouseleave', ss.Delegate.create(this, this._onMouseOut$2)));
    },
    
    _createFilterProps$2: function tab_FilterPanel$_createFilterProps$2(filterState) {
        var filterProps = {};
        filterProps.presModel = this.get__quickFilterDisplayModel$2().get_quickFilterDisplayPresModel();
        if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) {
            filterProps.backgroundColor = tab.ColorModel.fromColorCode(this.get__quickFilterDisplayModel$2().get_zone().styledBox.fillColor).toRgb();
        }
        else {
            filterProps.backgroundColor = this.get__quickFilterDisplayModel$2().get_zone().styledBox.fillColor;
        }
        filterProps.textStyle = this.textStyle;
        filterProps.field = this.field;
        filterProps.oFilter = filterState;
        filterProps.filterViewModel = this.quickFilterDisplayViewModel.get_filterTypeViewModel();
        filterProps.layoutSession = this.layoutSession;
        filterProps.zid = this.zid;
        filterProps.format = this.format;
        filterProps.attributes = this.attributes || {};
        filterProps.requestSetAttributes = this.requestSetAttributes;
        filterProps.titleH = this._titleH$2;
        filterProps.titleW = this._titleW$2;
        filterProps.titleHTML = this.titleHTML;
        filterProps.width = this.width;
        filterProps.getContextMenuCommands = ss.Delegate.create(this, function() {
            return this.getContextMenuCommands();
        });
        filterProps.showContextMenu = ss.Delegate.create(this, function(domNode) {
            if (this.get_getFilterModeMatrix() == null) {
                this.showContextMenu(domNode);
            }
            else {
                this.showFilterPicker();
            }
        });
        if (this.session != null) {
            filterProps.session = this.session;
        }
        else {
            filterProps.metricsOnly = true;
        }
        return filterProps;
    },
    
    updateFilterState: function tab_FilterPanel$updateFilterState(filterState) {
        if (this.field !== tableau.format.formatQualifiedName(filterState.name)) {
            return;
        }
        if (!!this.filter && ((this.filter.oFilter.type !== filterState.type) || (filterState.type === 'RD' && filterState.showRelDatePick !== this.filter.oFilter.showRelDatePick) || (filterState.type === 'C' && filterState.mode !== this.filter.oFilter.mode))) {
            this.filter.destroy(false);
            this.filter = null;
        }
        this.textStyle = this.quickFilterDisplayViewModel.get_quickFilterDisplayPresModel().textStyle;
        var filterProps = this._createFilterProps$2(filterState);
        if (ss.isNullOrUndefined(this.filter)) {
            this.createFilterWidget(filterState, filterProps);
        }
        else {
            this.filter.attributes = (ss.isNullOrUndefined(this.attributes)) ? {} : this.attributes;
            this.filter.oFilter = filterState;
            this.filter.setTitleSize(this._titleH$2, this._titleW$2);
            this.filter.initFromState();
            this._applyStyles$2();
        }
    },
    
    createFilterWidget: function tab_FilterPanel$createFilterWidget(filterState, filterProps) {
        if (ss.isNullOrUndefined(filterProps)) {
            filterProps = this._createFilterProps$2(filterState);
        }
        switch (filterState.type) {
            case 'Q':
                if (tab.FilterModel.isQuantitativeDateFilter(filterState)) {
                    this.filter = this.makeQuantitativeDateFilter(filterProps);
                }
                else {
                    this.filter = this.makeQuantitativeFilter(filterProps);
                }
                break;
            case 'H':
                this.filter = this.makeHierarchicalFilter(filterProps);
                break;
            case 'C':
                this.filter = this.makeCategoricalFilter(filterProps);
                break;
            case 'RD':
                if (filterState.showRelDatePick) {
                    this.filter = this.makeRelativeDatePickFilter(filterProps);
                }
                else {
                    this.filter = this.makeRelativeDateFilter(filterProps);
                }
                break;
            default:
                dojo.style(this.domNode, 'display', 'none');
                return;
        }
        this.addChild(this.filter);
        this.setupEventHandlers();
        this._applyStyles$2();
        this.hideControls();
    },
    
    _applyStyles$2: function tab_FilterPanel$_applyStyles$2() {
        var lineHeight = this.get__quickFilterDisplayModel$2().get_quickFilterDisplayPresModel().lineHeight;
        if (this.session != null) {
            dojo.marginBox(this.filter.domNode, dojo.contentBox(this.domNode));
        }
        tab.WidgetStyle.applyFormatting(this.domNode, this.textStyle, this.backgroundColor, lineHeight);
        this.filter.layout();
    },
    
    _showControls$2: function tab_FilterPanel$_showControls$2(e) {
        dojo.removeClass(this.filter.domControls, 'HideControls');
    },
    
    hideControls: function tab_FilterPanel$hideControls() {
        dojo.addClass(this.filter.domControls, 'HideControls');
    },
    
    _onMouseOut$2: function tab_FilterPanel$_onMouseOut$2(e) {
        var c = dojo.coords(this.filter.domNode, true);
        if (c.x > e.pageX || (c.x + c.w) <= e.pageX || c.y > e.pageY || (c.y + c.h) <= e.pageY) {
            this.hideControls();
        }
    },
    
    _onMouseDown$2: function tab_FilterPanel$_onMouseDown$2() {
    },
    
    setTitleSize: function tab_FilterPanel$setTitleSize(newH, newW) {
        this._titleH$2 = newH;
        this._titleW$2 = newW;
    },
    
    resize: function tab_FilterPanel$resize(changeSize, resultSize) {
        this._lastKnownPanelCoords$2 = dojo.marginBox(this.domNode);
        this.inherited(arguments);
    },
    
    layout: function tab_FilterPanel$layout() {
        if (!!this.filter) {
            var panelCoords = dojo.marginBox(this.domNode);
            var sameSizeAndPosition = _.isEqual(this._lastKnownPanelCoords$2, panelCoords);
            if (!sameSizeAndPosition) {
                dojo.marginBox(this.filter.domNode, dojo.contentBox(this.domNode));
                this.filter.setTitleSize(this._titleH$2, this._titleW$2);
                this.filter.layout();
            }
        }
    },
    
    updateAttributes: function tab_FilterPanel$updateAttributes(attributes) {
        this.attributes = (ss.isNullOrUndefined(attributes)) ? {} : attributes;
    },
    
    updateSubWidget: function tab_FilterPanel$updateSubWidget(filterState) {
        if (ss.isValue(this.filter)) {
            var props = this._createFilterProps$2(filterState);
            this.filter.setTitleSize(props.titleH, props.titleW);
            this.filter.updateFilterProperties(props);
        }
    },
    
    _getMetrics$2: function tab_FilterPanel$_getMetrics$2(metricsState) {
        this.updateFilterState(metricsState);
        if (this.filter == null) {
            var result = { fixed: { w: 0, h: 0 }, item: { w: 0, h: 0 } };
            return result;
        }
        else {
            return this.filter.getMetrics();
        }
    },
    
    getContextMenuCommands: function tab_FilterPanel$getContextMenuCommands() {
        if (ss.isValue(this.get__quickFilterDisplayModel$2()) && ss.isValue(this.get__quickFilterDisplayModel$2().get_quickFilterCommands())) {
            return this.get__quickFilterDisplayModel$2().get_quickFilterCommands();
        }
        else {
            return {};
        }
    },
    
    showContextMenu: function tab_FilterPanel$showContextMenu(domNode) {
        var commands = this.getContextMenuCommands();
        var menuItems = [];
        tab.WidgetUtil.newMenuItemsFromCommands(menuItems, commands, function(command) {
            return function() {
                var commandWrapper = tab.CommandItemWrapper.create(command);
                var cmd = tab.CommandSerializer.deserialize(commandWrapper.get_command());
                tab.ServerCommands.executeServerCommand(cmd, 'immediately');
            };
        });
        var menuCommand = function(mi) {
            var a = mi.get_data();
            a();
        };
        var menuViewModel = spiff.MenuViewModel.createForMenu(new spiff.Menu(menuItems), menuCommand);
        var smO = new spiff.ShowMenuOptions($(domNode), false, 0);
        menuViewModel.show(smO);
    },
    
    showFilterPicker: function tab_FilterPanel$showFilterPicker() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FilterWidget

tab.FilterWidget = function tab_FilterWidget() {
    this.format = {};
    tab.FilterWidget.initializeBase(this);
}
tab.FilterWidget.prototype = {
    titleHTML: null,
    backgroundColor: null,
    textStyle: null,
    domTitleBar: null,
    oFilter: null,
    
    updateFilterProperties: function tab_FilterWidget$updateFilterProperties(props) {
        this.titleHTML = props.titleHTML;
        this.format = props.format;
        this.backgroundColor = props.backgroundColor;
    },
    
    hideEmptyTitlebar: function tab_FilterWidget$hideEmptyTitlebar() {
        return String.isNullOrEmpty(tableau.format.formatColumnDisplayName(this.oFilter, false));
    },
    
    updateTitleBar: function tab_FilterWidget$updateTitleBar() {
        if (this.hideEmptyTitlebar()) {
            dojo.style(this.domTitleBar, 'display', 'none');
            dojo.marginBox(this.domTitleBar, { h: 0 });
        }
        else {
            this.domTitleBar.innerHTML = this.titleHTML;
            tab.FormattingConverters.cleanUpFontFamilyStyles($(this.domTitleBar));
        }
    },
    
    resetTitleSize: function tab_FilterWidget$resetTitleSize() {
        if (this.domTitleBar != null) {
            $(this.domTitleBar).css({ height: 'auto', width: 'auto' });
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FloatingZoomToolbar

tab.FloatingZoomToolbar = function tab_FloatingZoomToolbar(containerDiv, zoomFuncs, useAllButtons, addMapsSearchOffset) {
    tab.FloatingZoomToolbar.initializeBase(this, [ $("<div class='FloatingZoomToolbar'></div>") ]);
    this.parent = $(containerDiv);
    this.api = zoomFuncs;
    this.isFullToolbar = useAllButtons;
    this.canZoomHome = false;
    if (addMapsSearchOffset) {
        this.get_element().addClass('FloatingZoomToolbar-MapsSearchOffset');
    }
}
tab.FloatingZoomToolbar.prototype = {
    parent: null,
    buttonContainer: null,
    flyOutContainer: null,
    flyOutButtons: null,
    zoomInBtn: null,
    zoomOutBtn: null,
    zoomHomeBtn: null,
    flyOutBtn: null,
    zoomAreaBtn: null,
    rectSelectBtn: null,
    radialSelectBtn: null,
    lassoSelectBtn: null,
    panBtn: null,
    api: null,
    isFullToolbar: false,
    canZoomHome: false,
    _currentToolMode$1: null,
    acceptingInteraction: true,
    
    get_currentToolMode: function tab_FloatingZoomToolbar$get_currentToolMode() {
        return this._currentToolMode$1;
    },
    set_currentToolMode: function tab_FloatingZoomToolbar$set_currentToolMode(value) {
        if (value !== this._currentToolMode$1) {
            var oldMode = this._currentToolMode$1;
            this._currentToolMode$1 = value;
            this.toolModeChanged(oldMode);
        }
        else if (value === this.api.defaultPointerToolMode()) {
            this.updateFlyOutVisibility(false);
            this.updateButtonState(value, true);
        }
        return value;
    },
    
    dispose: function tab_FloatingZoomToolbar$dispose() {
        try {
            this.disposables.dispose();
        }
        catch ($e1) {
            tab.Log.get(this).warn('fzt dismantle dom fail');
        }
        if (ss.isValue(this.buttonContainer)) {
            this.buttonContainer.remove();
        }
        if (ss.isValue(this.flyOutButtons)) {
            this.flyOutButtons.remove();
        }
        if (ss.isValue(this.flyOutContainer)) {
            this.flyOutContainer.remove();
        }
        this.api = null;
        this.buttonContainer = null;
        this.flyOutButtons = null;
        this.flyOutContainer = null;
        this.zoomInBtn = null;
        this.zoomOutBtn = null;
        this.zoomAreaBtn = null;
        this.zoomHomeBtn = null;
        this.flyOutBtn = null;
        this.rectSelectBtn = null;
        this.radialSelectBtn = null;
        this.lassoSelectBtn = null;
        this.panBtn = null;
        tab.FloatingZoomToolbar.callBaseMethod(this, 'dispose');
    },
    
    setZoomHomePossibility: function tab_FloatingZoomToolbar$setZoomHomePossibility(state) {
        this.canZoomHome = state;
        if (!this.isFullToolbar) {
            this.setActiveState(this.canZoomHome);
        }
    },
    
    setActiveState: function tab_FloatingZoomToolbar$setActiveState(isVisible) {
        if (!this.isFullToolbar && !this.canZoomHome) {
            this.get_element().css('display', 'none');
        }
        else {
            this.get_element().css('display', (isVisible) ? '' : 'none');
        }
        if (!isVisible) {
            this.updateFlyOutVisibility(false);
        }
    },
    
    resetPointerToolMode: function tab_FloatingZoomToolbar$resetPointerToolMode() {
        this.set_currentToolMode(this.api.defaultPointerToolMode());
        this.api.setPointerToolMode(this.get_currentToolMode(), false);
        this.updateFlyOutVisibility(false);
    },
    
    resetVisualState: function tab_FloatingZoomToolbar$resetVisualState() {
        this.updateFlyOutVisibility(false);
    },
    
    enableUserInteraction: function tab_FloatingZoomToolbar$enableUserInteraction(enable) {
        this.get_element().css('pointer-events', (enable) ? 'auto' : 'none');
        this.acceptingInteraction = enable;
    },
    
    init: function tab_FloatingZoomToolbar$init() {
        this.createButtons();
        this.resetPointerToolMode();
        this.setActiveState(false);
    },
    
    setupEventHandling: function tab_FloatingZoomToolbar$setupEventHandling() {
        if (this.rectSelectBtn != null) {
            this.disposables.add(this.rectSelectBtn.onClick(ss.Delegate.create(this, function() {
                this.setToolMode('rectSelect', false);
            })));
            this.disposables.add(this.rectSelectBtn.onShiftClick(ss.Delegate.create(this, function() {
                this.setToolMode('rectSelect', true);
            })));
        }
        if (this.panBtn != null) {
            this.disposables.add(this.panBtn.onClick(ss.Delegate.create(this, function() {
                this.setToolMode('pan', false);
            })));
            this.disposables.add(this.panBtn.onShiftClick(ss.Delegate.create(this, function() {
                this.setToolMode('pan', true);
            })));
        }
        if (this.radialSelectBtn != null) {
            this.disposables.add(this.radialSelectBtn.onClick(ss.Delegate.create(this, function() {
                this.setToolMode('radialSelect', false);
            })));
            this.disposables.add(this.radialSelectBtn.onShiftClick(ss.Delegate.create(this, function() {
                this.setToolMode('radialSelect', true);
            })));
        }
        if (this.lassoSelectBtn != null) {
            this.disposables.add(this.lassoSelectBtn.onClick(ss.Delegate.create(this, function() {
                this.setToolMode('lassoSelect', false);
            })));
            this.disposables.add(this.lassoSelectBtn.onShiftClick(ss.Delegate.create(this, function() {
                this.setToolMode('lassoSelect', true);
            })));
        }
        this.disposables.add(this.zoomHomeBtn.onClick(ss.Delegate.create(this, function() {
            this.clickZoomHome();
        })));
    },
    
    updateFlyOutVisibility: function tab_FloatingZoomToolbar$updateFlyOutVisibility(isVisible) {
        if (this.flyOutContainer != null) {
            this.flyOutContainer.css('display', (isVisible) ? '' : 'none');
        }
    },
    
    oldCreateButtons: function tab_FloatingZoomToolbar$oldCreateButtons() {
        if (this.isFullToolbar) {
            this.zoomInBtn = this.addButton(this.get_element(), 'oldbuttonZoomIn', tab.Strings.PanZoomSelectToolsZoomInTooltip);
            this.zoomOutBtn = this.addButton(this.get_element(), 'oldbuttonZoomOut', tab.Strings.PanZoomSelectToolsZoomOutTooltip);
            this.zoomAreaBtn = this.addToggleButton(this.get_element(), 'oldbuttonZoomMode', tab.Strings.PanZoomSelectToolsZoomHomeTooltip);
            this.zoomHomeBtn = this.addButton(this.get_element(), 'oldbuttonZoomHome', '');
        }
        else {
            this.zoomHomeBtn = this.addButton(this.get_element(), 'oldbuttonZoomOnlyHome', tab.Strings.PanZoomSelectToolsZoomHomeTooltip);
        }
        if (this.parent != null) {
            this.parent.append(this.get_element());
        }
    },
    
    showFlyout: function tab_FloatingZoomToolbar$showFlyout() {
        if (!this.acceptingInteraction) {
            return;
        }
        var pos = this.flyOutBtn.get_element().position();
        var width = this.flyOutBtn.get_element().width();
        var top = pos.top.toString() + 'px';
        var left = width.toString() + 'px';
        this.flyOutContainer.css('top', top);
        this.flyOutContainer.css('left', left);
        this.updateFlyOutVisibility(true);
    },
    
    addButton: function tab_FloatingZoomToolbar$addButton(container, klass, tooltipLabel) {
        var btn = new spiff.Button($(document.createElement('div')));
        btn.set_hoverTooltipText(tooltipLabel);
        this._appendButton$1(container, btn, klass);
        return btn;
    },
    
    addToggleButton: function tab_FloatingZoomToolbar$addToggleButton(container, klass, tooltipLabel) {
        var btn = new spiff.ToggleButton($(document.createElement('span')));
        btn.set_hoverTooltipText(tooltipLabel);
        btn.get_element().css('display', 'inline-block');
        this._appendButton$1(container, btn, klass);
        return btn;
    },
    
    addSpacer: function tab_FloatingZoomToolbar$addSpacer() {
        var div = $(document.createElement('div'));
        div.addClass('fztSpacer');
        this.buttonContainer.append(div);
    },
    
    _appendButton$1: function tab_FloatingZoomToolbar$_appendButton$1(container, btn, klass) {
        var inner = $(document.createElement('div'));
        inner.addClass(klass);
        btn.get_element().append(inner);
        btn.get_element().addClass('fztButton');
        container.append(btn.get_element());
        this.disposables.add(btn);
    },
    
    setToolMode: function tab_FloatingZoomToolbar$setToolMode(mode, isLocked) {
        if (mode === this.get_currentToolMode()) {
            this.set_currentToolMode(this.api.defaultPointerToolMode());
        }
        else {
            this.set_currentToolMode(mode);
        }
        this.api.setPointerToolMode(this.get_currentToolMode(), isLocked);
    },
    
    clickZoomHome: function tab_FloatingZoomToolbar$clickZoomHome() {
        if (this.canZoomHome) {
            this.api.zoomHome();
        }
    },
    
    createButtonContainer: function tab_FloatingZoomToolbar$createButtonContainer() {
        this.buttonContainer = $("<div class='fztButtonContainer'/>");
        this.get_element().append(this.buttonContainer);
        if (this.parent != null) {
            this.parent.append(this.get_element());
        }
    },
    
    createButtonFlyOut: function tab_FloatingZoomToolbar$createButtonFlyOut() {
        this.flyOutContainer = $("<div class='fztFlyOutContainer'/>");
        this.updateFlyOutVisibility(false);
        this.get_element().append(this.flyOutContainer);
        this.flyOutButtons = $("<div class='fztFlyOutButtons'/>");
        this.flyOutContainer.append(this.flyOutButtons);
    },
    
    updateButtonState: function tab_FloatingZoomToolbar$updateButtonState(mode, isSelected) {
        switch (mode) {
            case 'zoom':
                this.selectButton(this.zoomAreaBtn, isSelected);
                break;
            case 'pan':
                if (this.panBtn != null) {
                    this.selectButton(this.panBtn, isSelected);
                }
                break;
            case 'rectSelect':
                if (this.rectSelectBtn != null) {
                    this.selectButton(this.rectSelectBtn, isSelected);
                }
                break;
            case 'radialSelect':
                this.selectButton(this.radialSelectBtn, isSelected);
                break;
            case 'lassoSelect':
                this.selectButton(this.lassoSelectBtn, isSelected);
                break;
            default:
                break;
        }
    },
    
    selectButton: function tab_FloatingZoomToolbar$selectButton(btn, isSelected) {
        var toggleBtn = Type.safeCast(btn, spiff.ToggleButton);
        if (toggleBtn != null) {
            toggleBtn.set_selected(isSelected);
        }
    },
    
    toolModeChanged: function tab_FloatingZoomToolbar$toolModeChanged(oldMode) {
        this.updateButtonState(oldMode, false);
        this.updateButtonState(this.get_currentToolMode(), true);
        this.updateFlyOutVisibility(false);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.IteratorButtons

tab.IteratorButtons = function tab_IteratorButtons(scrollContents, horizontal, buttonSize) {
    this._disposables = new tab.DisposableHolder();
    this._scrollContent = scrollContents;
    if (horizontal) {
        this._template = new tab.HorizontalIteratorButtonTemplate();
    }
    else {
        this._template = new tab.VerticalIteratorButtonTemplate();
    }
    this._scrollIncrement = 100;
    this._isHorizontal = horizontal;
    this._template._setArrows();
    this._template.nextButton.width(buttonSize).height(buttonSize).css('line-height', buttonSize + 'px');
    this._template.prevButton.width(buttonSize).height(buttonSize).css('line-height', buttonSize + 'px');
    this._disposables.add(spiff.EventUtil.bindWithDispose(this._template.nextButton, 'click', ss.Delegate.create(this, this._scrollNext)));
    this._disposables.add(spiff.EventUtil.bindWithDispose(this._template.prevButton, 'click', ss.Delegate.create(this, this._scrollPrev)));
    this.updateButtonState();
}
tab.IteratorButtons.prototype = {
    _scrollContent: null,
    _template: null,
    _isHorizontal: false,
    _scrollIncrement: 0,
    
    get_domRoot: function tab_IteratorButtons$get_domRoot() {
        return this._template.get_domRoot();
    },
    
    get_scrollIncrement: function tab_IteratorButtons$get_scrollIncrement() {
        return this._scrollIncrement;
    },
    set_scrollIncrement: function tab_IteratorButtons$set_scrollIncrement(value) {
        this._scrollIncrement = value;
        return value;
    },
    
    get__scrollOffset: function tab_IteratorButtons$get__scrollOffset() {
        return (this._isHorizontal) ? this._scrollContent.scrollLeft() : this._scrollContent.scrollTop();
    },
    set__scrollOffset: function tab_IteratorButtons$set__scrollOffset(value) {
        if (this._isHorizontal) {
            this._scrollContent.scrollLeft(value);
        }
        else {
            this._scrollContent.scrollTop(value);
        }
        return value;
    },
    
    get__maxScroll: function tab_IteratorButtons$get__maxScroll() {
        if (this._isHorizontal) {
            return this._scrollContent.children()[0].scrollWidth - this._scrollContent.width();
        }
        else {
            return this._scrollContent.children()[0].scrollHeight - this._scrollContent.height();
        }
    },
    
    reset: function tab_IteratorButtons$reset() {
        if (this._isHorizontal) {
            this._scrollContent.scrollLeft(0);
        }
        else {
            this._scrollContent.scrollTop(0);
        }
        this.updateButtonState();
    },
    
    dispose: function tab_IteratorButtons$dispose() {
        this._template.dispose();
        this._disposables.dispose();
    },
    
    _scrollPrev: function tab_IteratorButtons$_scrollPrev(evt) {
        this.set__scrollOffset(Math.max(0, this.get__scrollOffset() - this._scrollIncrement));
        this.updateButtonState();
    },
    
    _scrollNext: function tab_IteratorButtons$_scrollNext(evt) {
        this.set__scrollOffset(Math.min(this.get__maxScroll(), this.get__scrollOffset() + this._scrollIncrement));
        this.updateButtonState();
    },
    
    updateButtonState: function tab_IteratorButtons$updateButtonState() {
        this._setButtonEnabledState(this._template.prevButton, this._canScrollPrev());
        this._setButtonEnabledState(this._template.nextButton, this._canScrollNext());
    },
    
    _canScrollPrev: function tab_IteratorButtons$_canScrollPrev() {
        return this.get__scrollOffset() > 0;
    },
    
    _canScrollNext: function tab_IteratorButtons$_canScrollNext() {
        return this.get__scrollOffset() < this.get__maxScroll();
    },
    
    _setButtonEnabledState: function tab_IteratorButtons$_setButtonEnabledState(button, enable) {
        (button).toggleClass('tabIterButtonDisabled', !enable);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.IteratorButtonTemplate

tab.IteratorButtonTemplate = function tab_IteratorButtonTemplate(htmlTemplate) {
    tab.IteratorButtonTemplate.initializeBase(this, [ $(htmlTemplate) ]);
    this.prevButton = this.getElementBySelector('.tabCatLegendScrollPrev');
    this.nextButton = this.getElementBySelector('.tabCatLegendScrollNext');
}
tab.IteratorButtonTemplate.prototype = {
    prevButton: null,
    nextButton: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.HorizontalIteratorButtonTemplate

tab.HorizontalIteratorButtonTemplate = function tab_HorizontalIteratorButtonTemplate() {
    tab.HorizontalIteratorButtonTemplate.initializeBase(this, [ tab.HorizontalIteratorButtonTemplate._htmlTemplate$2 ]);
}
tab.HorizontalIteratorButtonTemplate.prototype = {
    
    _setArrows: function tab_HorizontalIteratorButtonTemplate$_setArrows() {
        this.prevButton.addClass('tabCatLegendScrollLeft');
        this.nextButton.addClass('tabCatLegendScrollRight');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.VerticalIteratorButtonTemplate

tab.VerticalIteratorButtonTemplate = function tab_VerticalIteratorButtonTemplate() {
    tab.VerticalIteratorButtonTemplate.initializeBase(this, [ tab.VerticalIteratorButtonTemplate._htmlTemplate$2 ]);
}
tab.VerticalIteratorButtonTemplate.prototype = {
    
    _setArrows: function tab_VerticalIteratorButtonTemplate$_setArrows() {
        this.prevButton.addClass('tabCatLegendScrollUp');
        this.nextButton.addClass('tabCatLegendScrollDown');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.IDropDownSelect

tab.IDropDownSelect = function tab_IDropDownSelect() {
    tab.IDropDownSelect.initializeBase(this);
}
tab.IDropDownSelect.prototype = {
    
    _getMenuItemForOption: function tab_IDropDownSelect$_getMenuItemForOption(option) {
        if (String.isNullOrEmpty(option.value)) {
            return new dijit.MenuSeparator();
        }
        else {
            var click = ss.Delegate.create(this, function() {
                this._setValueAttr(option);
            });
            var menuItemParams = {};
            menuItemParams.option = option;
            menuItemParams.label = option.label;
            menuItemParams.onClick = click;
            menuItemParams.disabled = (option.disabled || false);
            return new tableau.base.widget.ui.iMenuItem(menuItemParams);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DownloadQueue

tab.DownloadQueue = function tab_DownloadQueue() {
    this._workers = [];
    this._imageQueue = [];
}
tab.DownloadQueue.prototype = {
    _workers: null,
    _runningWorkers: 0,
    _imageQueue: null,
    
    add_complete: function tab_DownloadQueue$add_complete(value) {
        this.__complete = ss.Delegate.combine(this.__complete, value);
    },
    remove_complete: function tab_DownloadQueue$remove_complete(value) {
        this.__complete = ss.Delegate.remove(this.__complete, value);
    },
    
    __complete: null,
    
    add_imageLoaded: function tab_DownloadQueue$add_imageLoaded(value) {
        this.__imageLoaded = ss.Delegate.combine(this.__imageLoaded, value);
    },
    remove_imageLoaded: function tab_DownloadQueue$remove_imageLoaded(value) {
        this.__imageLoaded = ss.Delegate.remove(this.__imageLoaded, value);
    },
    
    __imageLoaded: null,
    
    add_imageTimedOut: function tab_DownloadQueue$add_imageTimedOut(value) {
        this.__imageTimedOut = ss.Delegate.combine(this.__imageTimedOut, value);
    },
    remove_imageTimedOut: function tab_DownloadQueue$remove_imageTimedOut(value) {
        this.__imageTimedOut = ss.Delegate.remove(this.__imageTimedOut, value);
    },
    
    __imageTimedOut: null,
    
    addImage: function tab_DownloadQueue$addImage(image) {
        if (!ss.isValue(image)) {
            return;
        }
        for (var i = 0, len = this._workers.length; i < len; i++) {
            if (!this._workers[i].get_busy()) {
                this._runningWorkers++;
                this._workers[i].start(image);
                return;
            }
        }
        if (this._workers.length < 2) {
            var worker = new tab._downloadWorker(this._workers.length);
            worker.add_done(ss.Delegate.create(this, this.onWorkerFinished));
            worker.add_timedOut(ss.Delegate.create(this, this.onWorkerTimedOut));
            this._workers.add(worker);
            this._runningWorkers++;
            worker.start(image);
        }
        else {
            this._imageQueue.enqueue(image);
        }
    },
    
    clear: function tab_DownloadQueue$clear() {
        this._imageQueue.clear();
    },
    
    destroy: function tab_DownloadQueue$destroy() {
        var $enum1 = ss.IEnumerator.getEnumerator(this._workers);
        while ($enum1.moveNext()) {
            var worker = $enum1.current;
            worker.destroy();
        }
        this._imageQueue.clear();
        this.__imageLoaded = null;
        this.__imageTimedOut = null;
        this.__complete = null;
    },
    
    onWorkerFinished: function tab_DownloadQueue$onWorkerFinished(sender, e) {
        if (ss.isValue(this.__imageLoaded)) {
            this.__imageLoaded(this, new tab.ImageLoadedEventArgs(e.get_image()));
        }
        this._handleWorkerIdled(e.get_workerID());
    },
    
    onWorkerTimedOut: function tab_DownloadQueue$onWorkerTimedOut(sender, e) {
        if (ss.isValue(this.__imageTimedOut)) {
            this.__imageTimedOut(this, ss.EventArgs.Empty);
        }
        this._handleWorkerIdled(e.get_workerID());
    },
    
    _handleWorkerIdled: function tab_DownloadQueue$_handleWorkerIdled(workerID) {
        this._runningWorkers--;
        if (!this._imageQueue.length) {
            if (!this._runningWorkers) {
                if (ss.isValue(this.__complete)) {
                    this.__complete(this, ss.EventArgs.Empty);
                }
            }
        }
        else {
            this._workers[workerID].start(this._imageQueue.dequeue());
            this._runningWorkers++;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._downloadWorker

tab._downloadWorker = function tab__downloadWorker(id) {
    this._timeoutID = -1;
    this._id = id;
    this._timeoutID = -1;
    this._completed = true;
}
tab._downloadWorker.prototype = {
    _id: 0,
    _imageData: null,
    _completed: true,
    
    add_done: function tab__downloadWorker$add_done(value) {
        this.__done = ss.Delegate.combine(this.__done, value);
    },
    remove_done: function tab__downloadWorker$remove_done(value) {
        this.__done = ss.Delegate.remove(this.__done, value);
    },
    
    __done: null,
    
    add_timedOut: function tab__downloadWorker$add_timedOut(value) {
        this.__timedOut = ss.Delegate.combine(this.__timedOut, value);
    },
    remove_timedOut: function tab__downloadWorker$remove_timedOut(value) {
        this.__timedOut = ss.Delegate.remove(this.__timedOut, value);
    },
    
    __timedOut: null,
    
    get_busy: function tab__downloadWorker$get_busy() {
        return !this._completed;
    },
    
    destroy: function tab__downloadWorker$destroy() {
        this._clearHandlers();
    },
    
    start: function tab__downloadWorker$start(image) {
        if (ss.isNullOrUndefined(image)) {
            this._sendDone();
            return;
        }
        if (this._timeoutID !== -1) {
            window.clearTimeout(this._timeoutID);
            this._timeoutID = -1;
        }
        this._imageData = image;
        this._completed = false;
        this._clearHandlers();
        var setBounds = true;
        var imgElement = image.get_imageNode();
        var imgObj = $(imgElement);
        if (ss.isNullOrUndefined(imgElement)) {
            imgElement = image.set_imageNode(document.createElement('img'));
            imgObj = $(imgElement);
        }
        else {
            setBounds = imgObj.width() !== image.get_bounds().w || imgObj.height() !== image.get_bounds().h;
        }
        if (setBounds) {
            $(imgElement).css({ left: image.get_bounds().l + 'px', top: image.get_bounds().t + 'px' });
        }
        imgObj.bind('load', ss.Delegate.create(this, this._onImageCompleted));
        imgObj.bind('error', ss.Delegate.create(this, this._onImageCompleted));
        imgObj.bind('abort', ss.Delegate.create(this, this._onImageCompleted));
        this._timeoutID = window.setTimeout(ss.Delegate.create(this, function() {
            this._onTimeout();
        }), 600000);
        var oldSrc = imgObj.attr('src');
        if (!tab.BrowserSupport.get_imageLoadIsSynchronous()) {
            imgObj.attr('src', image.get_src());
        }
        else {
            window.setTimeout(function() {
                imgObj.attr('src', image.get_src());
            }, 0);
        }
        if (image.get_src() === oldSrc && !tab.BrowserSupport.get_raisesEventOnImageReassignment()) {
            window.setTimeout(ss.Delegate.create(this, function() {
                this._onImageCompleted(null);
            }), 0);
        }
    },
    
    _clearHandlers: function tab__downloadWorker$_clearHandlers() {
        if (ss.isValue(this._imageData) && ss.isValue(this._imageData.get_imageNode())) {
            var imgObj = $(this._imageData.get_imageNode());
            if (ss.isValue(imgObj)) {
                imgObj.unbind('load', ss.Delegate.create(this, this._onImageCompleted));
                imgObj.unbind('error', ss.Delegate.create(this, this._onImageCompleted));
                imgObj.unbind('abort', ss.Delegate.create(this, this._onImageCompleted));
            }
        }
    },
    
    _onImageCompleted: function tab__downloadWorker$_onImageCompleted(evt) {
        window.clearTimeout(this._timeoutID);
        this._timeoutID = -1;
        if (this._completed) {
            return;
        }
        this._completed = true;
        this._sendDone();
    },
    
    _onTimeout: function tab__downloadWorker$_onTimeout() {
        this._completed = true;
        this._timeoutID = -1;
        this._clearHandlers();
        this._sendTimedOut();
    },
    
    _sendDone: function tab__downloadWorker$_sendDone() {
        if (ss.isValue(this.__done)) {
            this.__done(this, new tab.WorkerDoneEventArgs(this._id, this._imageData));
        }
    },
    
    _sendTimedOut: function tab__downloadWorker$_sendTimedOut() {
        if (ss.isValue(this.__timedOut)) {
            this.__timedOut(this, new tab.WorkerTimeoutEventArgs(this._id));
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ImageDownloaderImageData

tab.ImageDownloaderImageData = function tab_ImageDownloaderImageData(imgNode, idx, src, bounds, version) {
    this._imgNode = imgNode;
    this._idx = idx;
    this._src = src;
    this._bounds = bounds;
    this._version = version;
}
tab.ImageDownloaderImageData.prototype = {
    _imgNode: null,
    _idx: 0,
    _src: null,
    _bounds: null,
    _version: 0,
    
    get_imageNode: function tab_ImageDownloaderImageData$get_imageNode() {
        return this._imgNode;
    },
    set_imageNode: function tab_ImageDownloaderImageData$set_imageNode(value) {
        this._imgNode = value;
        return value;
    },
    
    get_index: function tab_ImageDownloaderImageData$get_index() {
        return this._idx;
    },
    
    get_src: function tab_ImageDownloaderImageData$get_src() {
        return this._src;
    },
    
    get_bounds: function tab_ImageDownloaderImageData$get_bounds() {
        return this._bounds;
    },
    
    get_version: function tab_ImageDownloaderImageData$get_version() {
        return this._version;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ImageLoadedEventArgs

tab.ImageLoadedEventArgs = function tab_ImageLoadedEventArgs(image) {
    tab.ImageLoadedEventArgs.initializeBase(this);
    this._image$1 = image;
}
tab.ImageLoadedEventArgs.prototype = {
    _image$1: null,
    
    get_image: function tab_ImageLoadedEventArgs$get_image() {
        return this._image$1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WorkerDoneEventArgs

tab.WorkerDoneEventArgs = function tab_WorkerDoneEventArgs(id, image) {
    tab.WorkerDoneEventArgs.initializeBase(this);
    this._workerID$1 = id;
    this._image$1 = image;
}
tab.WorkerDoneEventArgs.prototype = {
    _workerID$1: 0,
    _image$1: null,
    
    get_workerID: function tab_WorkerDoneEventArgs$get_workerID() {
        return this._workerID$1;
    },
    
    get_image: function tab_WorkerDoneEventArgs$get_image() {
        return this._image$1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WorkerTimeoutEventArgs

tab.WorkerTimeoutEventArgs = function tab_WorkerTimeoutEventArgs(id) {
    tab.WorkerTimeoutEventArgs.initializeBase(this);
    this._workerID$1 = id;
}
tab.WorkerTimeoutEventArgs.prototype = {
    _workerID$1: 0,
    
    get_workerID: function tab_WorkerTimeoutEventArgs$get_workerID() {
        return this._workerID$1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LeafletMapControl

tab.LeafletMapControl = function tab_LeafletMapControl() {
}
tab.LeafletMapControl._buildConstantColorDataUrl = function tab_LeafletMapControl$_buildConstantColorDataUrl(colorCode) {
    var Size = 256;
    var canvas = document.createElement('canvas');
    canvas.width = Size;
    canvas.height = Size;
    var context = tab.CanvasRenderer.getRenderContext(canvas);
    context.set_shapeFillStyle(colorCode);
    context.fillRect(0, 0, Size, Size);
    var toRet = canvas.toDataURL('png');
    return toRet;
}
tab.LeafletMapControl._latLngFromTuple = function tab_LeafletMapControl$_latLngFromTuple(tuple) {
    return new L.LatLng(tuple.first, tuple.second);
}
tab.LeafletMapControl._getVisiblePixelWidth = function tab_LeafletMapControl$_getVisiblePixelWidth(zoom, numWorlds, tilePixelSize) {
    var oneWorldSize = Math.pow(2, zoom) * tilePixelSize;
    var pixelWidth = Math.floor(numWorlds * oneWorldSize);
    return pixelWidth;
}
tab.LeafletMapControl.prototype = {
    _map: null,
    _marksOverlay: null,
    _mapData: null,
    _backgroundWaitTileLayer: null,
    _mapTileLayer: null,
    _template: null,
    _touchAnimationFrame: 0,
    _pinching: false,
    _deltaAlreadyAccoundtedFor: null,
    
    get_enabled: function tab_LeafletMapControl$get_enabled() {
        return ss.isValue(this._map) && this._mapData.get_useFastMaps();
    },
    
    get__centerFromModel: function tab_LeafletMapControl$get__centerFromModel() {
        return new L.LatLng(this._mapData.get_centerLatitude(), this._mapData.get_centerLongitude());
    },
    
    _zoomHome: function tab_LeafletMapControl$_zoomHome() {
        if (this.get_enabled()) {
            var zoomLevel = this._mapData.get_zoom();
            var centerLatLng = this.get__centerFromModel();
            _.defer(ss.Delegate.create(this, function() {
                this._setView(centerLatLng, zoomLevel, true);
            }));
        }
    },
    
    zoomOnPoint: function tab_LeafletMapControl$zoomOnPoint(zoomCenter, zoomDir) {
        if (this.get_enabled()) {
            var zoomLevel = tab.ZoomComputer.incrementZoom(this._mapData.get_zoom(), zoomDir);
            var destLatLong = this._map.containerPointToLatLng(new L.Point(zoomCenter.x, zoomCenter.y));
            _.defer(ss.Delegate.create(this, function() {
                this._setView(destLatLong, zoomLevel, true);
            }));
        }
    },
    
    zoomRect: function tab_LeafletMapControl$zoomRect(rect) {
        if (this.get_enabled()) {
            var southwestPoint = new L.Point(rect.x, rect.y + rect.h);
            var northeastPoint = new L.Point(rect.x + rect.w, rect.y);
            var leafBounds = new L.LatLngBounds(this._map.containerPointToLatLng(southwestPoint), this._map.containerPointToLatLng(northeastPoint));
            var rectCenter = new L.Point(rect.x + (rect.w / 2), rect.y + (rect.h / 2));
            var destLatLong = this._map.containerPointToLatLng(rectCenter);
            this._panZoomToBounds(leafBounds, destLatLong, true);
        }
    },
    
    moveToBounds: function tab_LeafletMapControl$moveToBounds(bounds) {
        if (this.get_enabled()) {
            var leafBounds = new L.LatLngBounds(new L.LatLng(bounds.minLatitude, bounds.minLongitude), new L.LatLng(bounds.maxLatitude, bounds.maxLongitude));
            var destLatLong = new L.LatLng((bounds.maxLatitude + bounds.minLatitude) * 0.5, (bounds.maxLongitude + bounds.minLongitude) * 0.5);
            var animated = this._panZoomToBounds(leafBounds, destLatLong, true);
            if (!animated) {
                this.removeMarkOverlay();
            }
        }
    },
    
    _panZoomToBounds: function tab_LeafletMapControl$_panZoomToBounds(leafBounds, destLatLong, animate) {
        var desiredZoomLevel = this._map.getBoundsZoom(leafBounds, true);
        var newZoomLevel = tab.ZoomComputer.resolveDesiredZoom(this._mapData.get_mapServerPresModel(), desiredZoomLevel);
        animate = animate && Math.abs(this._map.getZoom() - newZoomLevel) <= 2;
        _.defer(ss.Delegate.create(this, function() {
            this._setView(destLatLong, newZoomLevel, animate);
        }));
        return animate;
    },
    
    panTo: function tab_LeafletMapControl$panTo(panXCenter, panYCenter) {
        if (this.get_enabled()) {
            var currentCenter = this._map.latLngToContainerPoint(this.get__centerFromModel());
            var newCenter = new L.Point(currentCenter.x - panXCenter, currentCenter.y - panYCenter);
            var destLatLong = this._map.containerPointToLatLng(newCenter);
            var panOps = {};
            panOps.animate = false;
            this._map.panTo(destLatLong, panOps);
        }
    },
    
    touchMove: function tab_LeafletMapControl$touchMove(deltaX, deltaY, scale) {
        if (isNaN(scale) || isNaN(deltaY) || isNaN(deltaX)) {
            return;
        }
        if (tab.FloatUtil.isEqual(scale, 1) && !this._pinching) {
            this.panTo(deltaX, deltaY);
            return;
        }
        if (!this._pinching) {
            $(this._map.getPanes().mapPane).addClass('leaflet-touching');
            $(this._map.getPanes().overlayPane).addClass('leaflet-touching');
            this._deltaAlreadyAccoundtedFor = new L.Point(deltaX, deltaY);
        }
        this._pinching = true;
        tab.WindowHelper.cancelAnimationFrame(this._touchAnimationFrame);
        this._touchAnimationFrame = tab.WindowHelper.requestAnimationFrame(ss.Delegate.create(this, function() {
            var zoom = tab.ZoomComputer.combineTileZoomAndStretch(this._mapData.get_zoom(), scale);
            this._animateZoom(zoom, scale, deltaX, deltaY);
        }));
    },
    
    touchEnd: function tab_LeafletMapControl$touchEnd(deltaX, deltaY, scale) {
        if (this.get_enabled()) {
            this._resumeTileFetchingFromMobilePinch();
            if (this._pinching) {
                var desiredZoom = tab.ZoomComputer.combineTileZoomAndStretch(this._mapData.get_zoom(), scale);
                var zoom = tab.ZoomComputer.resolveDesiredZoom(this._mapData.get_mapServerPresModel(), desiredZoom);
                scale = Math.pow(2, zoom - this._mapData.get_zoom());
                this._animateZoom(zoom, scale, deltaX, deltaY);
            }
            this._pinching = false;
        }
    },
    
    splatOverlayToMapForTransition: function tab_LeafletMapControl$splatOverlayToMapForTransition(canvas) {
        if (ss.isValue(this._map) && ss.isNullOrUndefined(this._marksOverlay)) {
            var mc = tabBootstrap.MetricsController.get_instance().createContext('Leaflet Marks Splat', tabBootstrap.MetricsSuites.debug);
            var pixelRatio = tab.RenderUtil.calculatePixelRatio(true);
            if (!tab.CanvasUtil.canvasDensified(canvas)) {
                pixelRatio = 1;
            }
            tab.Log.get(this).debug('Splat canvas pixel ratio: %d', pixelRatio);
            var borderSize = 2 * parseInt(pixelRatio);
            var copyArea = tab.$create_RectXY(borderSize, borderSize, canvas.width - (2 * borderSize), canvas.height - (2 * borderSize));
            var topPointY = (this._map.latLngToContainerPoint(tab.LeafletMapControl._latLngFromTuple(tab.LeafletMapControl._northPole)).y * pixelRatio);
            var bottomPointY = (this._map.latLngToContainerPoint(tab.LeafletMapControl._latLngFromTuple(tab.LeafletMapControl._southPole)).y * pixelRatio);
            if (bottomPointY < canvas.height) {
                copyArea.h = bottomPointY;
            }
            if (topPointY > 0) {
                copyArea.y += topPointY;
                copyArea.h -= topPointY;
            }
            var coo = {};
            coo.pixelRatio = pixelRatio;
            this._marksOverlay = new L.CanvasOverlay(this._map.getBounds(), coo);
            this._map.addLayer(this._marksOverlay);
            var overlayCanvas = this._marksOverlay.getCanvas();
            var overlayContext = tab.CanvasRenderer.getRenderContext(overlayCanvas);
            var pasteArea = tab.$create_RectXY(borderSize + tab.LeafletMapControl._alignmentCorrect.x, borderSize + tab.LeafletMapControl._alignmentCorrect.y, copyArea.w, copyArea.h);
            overlayContext.drawImage5(canvas, copyArea.x, copyArea.y, copyArea.w, copyArea.h, pasteArea.x, pasteArea.y, pasteArea.w, pasteArea.h);
            canvas.width = canvas.width;
            mc.close();
        }
    },
    
    _createMap: function tab_LeafletMapControl$_createMap(mapDiv, ms) {
        this._mapData = ms;
        ss.Debug.assert(!this.get_enabled(), 'There should not already be a map if we are creating one');
        this._destroyMap();
        var mapOps = this._createMapOptions();
        var tlops = this._createTileLayerOptions();
        this._template = new tab._leafletMapTemplate();
        this._template.get_domRoot().appendTo(mapDiv);
        this._map = new L.Map(this._template.get__mapHolderElement(), mapOps);
        var backgroundColorDataUrl = tab.LeafletMapControl._buildConstantColorDataUrl(this._mapData.get_waitTileFillColor());
        this._backgroundWaitTileLayer = new L.TileLayer(backgroundColorDataUrl, tlops);
        this._map.addLayer(this._backgroundWaitTileLayer);
        this._mapTileLayer = new L.TileLayer(this._mapData.get_tileUrl(), tlops);
        this._updateMapVisibilityIfNoValidLayer();
        this._map.addLayer(this._mapTileLayer);
        this._mapData.add_newMapServerInfo(ss.Delegate.create(this, this._handleNewMapData));
        if (this._mapData.get_hasWashout()) {
            var washoutColorModel = this._mapData.get_washoutColor();
            var washoutColorDataUrl = tab.LeafletMapControl._buildConstantColorDataUrl(washoutColorModel.toRgb());
            tlops = this._createTileLayerOptions();
            tlops.opacity = washoutColorModel.get_a();
            this._map.addLayer(new L.TileLayer(washoutColorDataUrl, tlops));
        }
        this._template._setBackgroundFillColor(this._mapData.get_mapBGFillColor());
        this._adjustBarnDoors(this._mapData.get_zoom(), false);
    },
    
    _updateMapVisibilityIfNoValidLayer: function tab_LeafletMapControl$_updateMapVisibilityIfNoValidLayer() {
        var tileLayerOpacity = (this._mapData.get_hasValidTileLayer()) ? 1 : 0;
        this._mapTileLayer.setOpacity(tileLayerOpacity);
        this._backgroundWaitTileLayer.setOpacity(tileLayerOpacity);
    },
    
    _destroyMap: function tab_LeafletMapControl$_destroyMap() {
        if (ss.isValue(this._map)) {
            this._map.remove();
            this._map = null;
            if (ss.isValue(this._mapData)) {
                this._mapData.remove_newMapServerInfo(ss.Delegate.create(this, this._handleNewMapData));
            }
            this._mapData = null;
            this._template.dispose();
            this._template = null;
        }
    },
    
    _handleNewMapData: function tab_LeafletMapControl$_handleNewMapData() {
        if (this.get_enabled()) {
            if (this._map._animatingZoom) {
                window.setTimeout(ss.Delegate.create(this, this._handleNewMapData), 10);
            }
            else {
                this._updateMapVisibilityIfNoValidLayer();
                var centerLatLng = this.get__centerFromModel();
                var localCenter = this._map.latLngToContainerPoint(this._map.getCenter());
                var serverCenter = this._map.latLngToContainerPoint(centerLatLng);
                var zoomDiff = Math.abs(this._map.getZoom() - this._mapData.get_zoom());
                tab.Log.get(this).debug('Map local-server diff: zoom %s, lat %s, long %s', this._map.getZoom() - this._mapData.get_zoom(), this._map.getCenter().lat - centerLatLng.lat, this._map.getCenter().lng - centerLatLng.lng);
                tab.Log.get(this).debug('Map local-server center diff: x %s, y %s', localCenter.x - serverCenter.x, localCenter.y - serverCenter.y);
                if (zoomDiff > 0.001) {
                    tab.Log.get(this).debug('Local zoom %s, pmZoom %s', this._map.getZoom(), this._mapData.get_zoom());
                }
                var smallZoomDifference = zoomDiff < 0.01 && localCenter.distanceTo(serverCenter) < 8;
                this._setView(centerLatLng, this._mapData.get_zoom(), smallZoomDifference);
                this._forceLeafletAnimationToEnd();
            }
        }
    },
    
    _forceLeafletAnimationToEnd: function tab_LeafletMapControl$_forceLeafletAnimationToEnd() {
        var tilePaneNodes = $(this._map.getPanes().tilePane).find('.leaflet-tile-container');
        for (var ii = 0; ii < tilePaneNodes.length; ++ii) {
            if (!tab.MiscUtil.isNullOrEmpty(tilePaneNodes[ii].style.visibility)) {
                this._map._onZoomTransitionEnd();
                break;
            }
        }
    },
    
    _resize: function tab_LeafletMapControl$_resize(width, height) {
        if (this.get_enabled()) {
            tab.DomUtil.setMarginBox(this._map.getContainer(), tab.$create_Rect(-tab.LeafletMapControl._alignmentCorrect.x, -tab.LeafletMapControl._alignmentCorrect.y, width, height));
            this._map.invalidateSize(false);
            this._adjustBarnDoors(this._mapData.get_zoom(), false);
            this._template._clearAnimationClasses();
        }
    },
    
    setScrollX: function tab_LeafletMapControl$setScrollX(x) {
        if (this.get_enabled()) {
            this._map.getContainer().style.left = (-x - tab.LeafletMapControl._alignmentCorrect.x) + 'px';
        }
    },
    
    setScrollY: function tab_LeafletMapControl$setScrollY(y) {
        if (this.get_enabled()) {
            this._map.getContainer().style.top = (-y - tab.LeafletMapControl._alignmentCorrect.y) + 'px';
        }
    },
    
    removeMarkOverlay: function tab_LeafletMapControl$removeMarkOverlay() {
        if (this._marksOverlay != null) {
            this._map.removeLayer(this._marksOverlay);
            this._forceLeafletAnimationToEnd();
            this._resumeTileFetchingFromMobilePinch();
        }
        this._marksOverlay = null;
    },
    
    dispose: function tab_LeafletMapControl$dispose() {
        this._destroyMap();
    },
    
    _createMapOptions: function tab_LeafletMapControl$_createMapOptions() {
        var toRet = {};
        toRet.center = this.get__centerFromModel();
        toRet.zoom = this._mapData.get_zoom();
        toRet.zoomControl = false;
        toRet.attributionControl = false;
        return toRet;
    },
    
    _createTileLayerOptions: function tab_LeafletMapControl$_createTileLayerOptions() {
        var toRet = {};
        toRet.maxZoom = 100;
        toRet.maxNativeZoom = this._mapData.get_maxZoom();
        toRet.minZoom = this._mapData.get_minZoom();
        toRet.continuousZoom = true;
        toRet.intermediateTileLevels = ss.isValue(this._mapData.get_intermediateTileLevels()) && this._mapData.get_intermediateTileLevels() > 1;
        return toRet;
    },
    
    _setView: function tab_LeafletMapControl$_setView(center, zoom, animate) {
        var zpo = {};
        zpo.animate = animate;
        if (zoom >= 0) {
            if (this._map._animatingZoom) {
                this._forceLeafletAnimationToEnd();
            }
            this._map.setView(center, zoom, zpo);
            this._adjustBarnDoors(zoom, animate);
        }
    },
    
    _adjustBarnDoors: function tab_LeafletMapControl$_adjustBarnDoors(zoom, animate) {
        var coveredMapWidth = tab.LeafletMapControl._getVisiblePixelWidth(zoom, this._mapData.get_numWorldRepeats(), this._mapData.get_tilePixelSize());
        var availableWidth = this._template.get_domRoot().width();
        var doorSize = Math.ceil((availableWidth - coveredMapWidth) / 2);
        doorSize = Math.max(doorSize, 0);
        this._template._adjustBarnDoors(doorSize, animate);
    },
    
    _animateZoom: function tab_LeafletMapControl$_animateZoom(zoom, scale, deltaX, deltaY) {
        var delta = new L.Point(deltaX, deltaY);
        delta = delta.subtract(this._deltaAlreadyAccoundtedFor);
        var layerCenter = this._map.containerPointToLayerPoint(this._map.getSize().divideBy(2));
        var centerOffset = new L.Point(0, 0).subtract(delta).divideBy(scale);
        var origin = layerCenter.add(centerOffset);
        var center = this._map.layerPointToLatLng(origin);
        if (isNaN(center.lat) || isNaN(center.lng)) {
            return;
        }
        this._map._animateZoom(center, zoom, layerCenter, scale, delta);
        this._adjustBarnDoors(zoom, false);
    },
    
    _resumeTileFetchingFromMobilePinch: function tab_LeafletMapControl$_resumeTileFetchingFromMobilePinch() {
        $(this._map.getPanes().mapPane).removeClass('leaflet-touching');
        $(this._map.getPanes().overlayPane).removeClass('leaflet-touching');
        tab.WindowHelper.cancelAnimationFrame(this._touchAnimationFrame);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._leafletMapTemplate

tab._leafletMapTemplate = function tab__leafletMapTemplate() {
    tab._leafletMapTemplate.initializeBase(this, [ $(tab._leafletMapTemplate._htmlTemplate$1) ]);
    this._leftBarnDoor = this.getElementBySelector('.tabLeftBarnDoor');
    this._rightBarnDoor = this.getElementBySelector('.tabRightBarnDoor');
    this._mapHolder$1 = this.getElementBySelector('.tabLeafletMapHolder');
    var barnDoorDict = { position: 'absolute', top: '0px', bottom: '0px' };
    this._leftBarnDoor.css(barnDoorDict);
    this._rightBarnDoor.css(barnDoorDict);
    this._leftBarnDoor.css('left', '0px');
    this._rightBarnDoor.css('right', '0px');
}
tab._leafletMapTemplate.prototype = {
    _leftBarnDoor: null,
    _rightBarnDoor: null,
    _mapHolder$1: null,
    
    get__mapHolderElement: function tab__leafletMapTemplate$get__mapHolderElement() {
        return this._mapHolder$1.get(0);
    },
    
    _setBackgroundFillColor: function tab__leafletMapTemplate$_setBackgroundFillColor(mapBgFillColor) {
        var fillColorDict = { backgroundColor: mapBgFillColor };
        this._leftBarnDoor.css(fillColorDict);
        this._rightBarnDoor.css(fillColorDict);
        this._mapHolder$1.css(fillColorDict);
    },
    
    _adjustBarnDoors: function tab__leafletMapTemplate$_adjustBarnDoors(mapPixelWidth, animate) {
        var doorWidthDict = { width: mapPixelWidth + 'px' };
        if (animate) {
            this._leftBarnDoor.addClass('leaflet-zoom-anim').addClass('leaflet-zoom-animated');
            this._rightBarnDoor.addClass('leaflet-zoom-anim').addClass('leaflet-zoom-animated');
        }
        this._leftBarnDoor.css(doorWidthDict);
        this._rightBarnDoor.css(doorWidthDict);
    },
    
    _clearAnimationClasses: function tab__leafletMapTemplate$_clearAnimationClasses() {
        this._leftBarnDoor.removeClass('leaflet-zoom-anim').removeClass('leaflet-zoom-animated');
        this._rightBarnDoor.removeClass('leaflet-zoom-anim').removeClass('leaflet-zoom-animated');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ZoomComputer

tab.ZoomComputer = function tab_ZoomComputer() {
}
tab.ZoomComputer.resolveDesiredZoom = function tab_ZoomComputer$resolveDesiredZoom(curZoom, desiredZoomLevel) {
    var intermediateLevels = (curZoom.mapIntermediateLevels || 1);
    var lowerLevel = Math.floor(desiredZoomLevel * intermediateLevels) / intermediateLevels;
    lowerLevel += (Math.log(curZoom.mapMaxStretch) / Math.LN2);
    var higherLevel = Math.ceil(desiredZoomLevel * intermediateLevels) / intermediateLevels;
    higherLevel += (Math.log(curZoom.mapMinShrink) / Math.LN2);
    var zoomLevel = (desiredZoomLevel < higherLevel) ? Math.min(lowerLevel, desiredZoomLevel) : Math.max(higherLevel, desiredZoomLevel);
    return zoomLevel;
}
tab.ZoomComputer.resolveDesiredScale = function tab_ZoomComputer$resolveDesiredScale(mapDataPM, desiredScale) {
    var desiredZoomDiff = Math.log(desiredScale) / Math.LN2;
    var finalZoom = tab.ZoomComputer.resolveDesiredZoom(mapDataPM, mapDataPM.mapRequestZoom + desiredZoomDiff);
    var actualZoomDiff = finalZoom - mapDataPM.mapRequestZoom;
    var finalScale = Math.pow(2, actualZoomDiff);
    return finalScale;
}
tab.ZoomComputer.incrementZoom = function tab_ZoomComputer$incrementZoom(currentZoom, zoomDir) {
    var zoomLevel = currentZoom + zoomDir;
    return zoomLevel;
}
tab.ZoomComputer.combineTileZoomAndStretch = function tab_ZoomComputer$combineTileZoomAndStretch(tileZoom, stretch) {
    return tileZoom + (Math.log(stretch) / Math.LN2);
}


////////////////////////////////////////////////////////////////////////////////
// tab.DialogUnderlay

tab.DialogUnderlay = function tab_DialogUnderlay() {
    tab.DialogUnderlay.initializeBase(this);
}
tab.DialogUnderlay.prototype = {
    
    layout: function tab_DialogUnderlay$layout() {
        var viewport = tabBootstrap.ViewerBootstrap.get_instance().getViewport();
        var iis = this.node.style;
        var os = this.domNode.style;
        os.top = 0 + 'px';
        os.left = 0 + 'px';
        iis.width = viewport.w + 'px';
        iis.height = viewport.h + 'px';
        var viewport2 = tabBootstrap.ViewerBootstrap.get_instance().getViewport();
        if (viewport.w !== viewport2.w) {
            iis.width = viewport2.w + 'px';
        }
        if (viewport.h !== viewport2.h) {
            iis.height = viewport2.h + 'px';
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.LegacyDialog

tab.LegacyDialog = function tab_LegacyDialog() {
    this.buttons = 'None';
    this.onYes = function () { };
    this.onNo = function () { };
    tab.LegacyDialog.initializeBase(this);
}
tab.LegacyDialog.prototype = {
    title: '',
    _yesButton$3: null,
    _noButton$3: null,
    
    postCreate: function tab_LegacyDialog$postCreate() {
        this.inherited(arguments);
        dojo.style(this.domNode, 'display', 'none');
        if (this.buttons === 'YesNo') {
            var buttonParams = {};
            buttonParams.label = tab.Strings.DialogYesButtonText;
            buttonParams.onClick = ss.Delegate.create(this, this._yesButtonClick$3);
            this._yesButton$3 = new dijit.form.Button(buttonParams);
            buttonParams.label = tab.Strings.DialogNoButtonText;
            buttonParams.onClick = ss.Delegate.create(this, this._noButtonClick$3);
            this._noButton$3 = new dijit.form.Button(buttonParams);
            var n = this.containerNode;
            n.appendChild(document.createElement('br'));
            n.appendChild(this._yesButton$3.domNode);
            n.appendChild(this._noButton$3.domNode);
        }
        var stopPropagation = function(e) {
            e.stopPropagation();
        };
        $(this.domNode).bind(this._createNamespacedEventName$3('touchstart'), stopPropagation).bind(this._createNamespacedEventName$3('touchend'), stopPropagation).bind(this._createNamespacedEventName$3('click'), stopPropagation).bind(this._createNamespacedEventName$3('mousedown'), stopPropagation);
    },
    
    destroy: function tab_LegacyDialog$destroy() {
        $(this.domNode).unbind('touchstart').unbind('touchcancel').unbind('touchend').unbind('touchmove').unbind('click').unbind('mousedown').unbind('mousemove').unbind('mouseup');
        this.inherited(arguments);
    },
    
    show: function tab_LegacyDialog$show() {
        this.inherited(arguments);
        dojo.style(this.domNode, 'display', '');
    },
    
    hide: function tab_LegacyDialog$hide() {
        this.inherited(arguments);
        dojo.style(this.domNode, 'display', 'none');
    },
    
    _setup: function tab_LegacyDialog$_setup() {
        var node = this.domNode;
        if (!!this.titleBar && this.draggable) {
            var ctorParams = {};
            ctorParams.handle = this.titleBar;
            ctorParams.timeout = 0;
            this._moveable = (dojo.isIE === 6) ? new dojo.dnd.TimedMoveable(node, ctorParams) : new dojo.dnd.Moveable(node, ctorParams);
            dojo.subscribe('/dnd/move/stop', ss.Delegate.create(this, this._endDrag));
        }
        else {
            dojo.addClass(node, 'dijitDialogFixed');
        }
        var underlayCtorParams = {};
        underlayCtorParams['id'] = this.id + '_underlay';
        underlayCtorParams['class'] = dojo.map(this._getCSSClasses$3(), function(s) {
            return s + '_underlay';
        }).join(' ');
        this._underlay = new tableau.base.widget.DialogUnderlay(underlayCtorParams);
        var underlay = this._underlay;
        var fadeArgs = {};
        fadeArgs.node = node;
        fadeArgs.duration = this.duration;
        fadeArgs.onBegin = ss.Delegate.create(underlay, underlay.show);
        this._fadeIn = dojo.fadeIn(fadeArgs);
        fadeArgs = {};
        fadeArgs.node = node;
        fadeArgs.duration = this.duration;
        fadeArgs.onEnd = function() {
            node.style.visibility = 'hidden';
            node.style.top = '-9999px';
            underlay.hide();
        };
        this._fadeOut = dojo.fadeOut(fadeArgs);
    },
    
    uninitialize: function tab_LegacyDialog$uninitialize() {
        if (!!this._yesButton$3) {
            this._yesButton$3.destroyRecursive();
        }
        if (!!this._noButton$3) {
            this._noButton$3.destroyRecursive();
        }
        this._yesButton$3 = this._noButton$3 = null;
        this.inherited(arguments);
    },
    
    _position: function tab_LegacyDialog$_position() {
        if (!dojo.hasClass(dojo.body(), 'dojoMove')) {
            var node = this.domNode;
            var viewport = tabBootstrap.ViewerBootstrap.get_instance().getViewport();
            var p = this._relativePosition;
            var mb = (ss.isValue(p)) ? null : dojo.marginBox(node);
            var leftOffset = 0;
            var topOffset = 0;
            dojo.style(node, { left: Math.floor(leftOffset + ((ss.isValue(p)) ? p.l : (viewport.w - mb.w) / 2)) + 'px', top: Math.floor(topOffset + ((ss.isValue(p)) ? p.t : (viewport.h - mb.h) / 2)) + 'px' });
        }
    },
    
    onHide: function tab_LegacyDialog$onHide() {
        this.inherited(arguments);
        window.setTimeout(ss.Delegate.create(this, this.destroyRecursive), 500);
    },
    
    _createNamespacedEventName$3: function tab_LegacyDialog$_createNamespacedEventName$3(eventName) {
        return eventName;
    },
    
    _getCSSClasses$3: function tab_LegacyDialog$_getCSSClasses$3() {
        return ((this)['class']).split(new RegExp('\\s'));
    },
    
    _yesButtonClick$3: function tab_LegacyDialog$_yesButtonClick$3(evt) {
        this._buttonClick$3(true, evt);
    },
    
    _noButtonClick$3: function tab_LegacyDialog$_noButtonClick$3(evt) {
        this._buttonClick$3(false, evt);
    },
    
    _buttonClick$3: function tab_LegacyDialog$_buttonClick$3(yesClicked, evt) {
        dojo.stopEvent(evt);
        this.hide();
        if (yesClicked) {
            if (ss.isValue(this.onYes)) {
                this.onYes();
            }
        }
        else {
            if (ss.isValue(this.onNo)) {
                this.onNo();
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FilteringSearchWidget

tab.FilteringSearchWidget = function tab_FilteringSearchWidget(r) {
    this.templateString = "<div class='Search FilteringSearch'>" + "<div class='SearchBox' dojoAttachPoint='domQuerySection'>" + "<textarea rows='1' class='QueryBox' spellcheck='false'" + "dojoAttachPoint='domQueryBox'" + "dojoAttachEvent='onkeydown:onQueryBoxKeyDown,onclick:focusQueryBox,onfocus:focusQueryBox,onblur:blurQueryBox'></textarea>" + "<span class='wcSearchX' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + '</div>' + '</div>';
    this._style$2 = 0;
    tab.FilteringSearchWidget.initializeBase(this);
}
tab.FilteringSearchWidget.prototype = {
    domQueryBox: null,
    domSearchButton: null,
    domSearchBusyImg: null,
    _searchResultsMaxRows$2: 100,
    _searchTimer$2: null,
    
    get_noMatchHtml: function tab_FilteringSearchWidget$get_noMatchHtml() {
        return this.NO_MATCHES;
    },
    
    get__qfAsFilteringQf$2: function tab_FilteringSearchWidget$get__qfAsFilteringQf$2() {
        return this.get_qf();
    },
    
    setStyle: function tab_FilteringSearchWidget$setStyle(s) {
        this._style$2 = s;
        if (this._style$2 === 1) {
            dojo.addClass(this.domNode, 'FilteringDropdown');
            dojo.addClass(this.domNode, 'SearchCleared');
        }
        else if (this._style$2 === 2) {
            dojo.addClass(this.domNode, 'FilteringInline');
        }
    },
    
    get_applyDelay: function tab_FilteringSearchWidget$get_applyDelay() {
        tab.Log.get(this).error(tab.Strings.noLoc('Bad call of ApplyDelay on FilteringSearchWidget'));
        return 0;
    },
    
    startupAndAppendTo: function tab_FilteringSearchWidget$startupAndAppendTo(container) {
        container.append(this.domNode);
        this.startupNoAppend();
    },
    
    startupNoAppend: function tab_FilteringSearchWidget$startupNoAppend() {
        this.startup();
    },
    
    layout: function tab_FilteringSearchWidget$layout(listHeight) {
    },
    
    hideUI: function tab_FilteringSearchWidget$hideUI() {
        dojo.style(this.domNode, 'display', 'none');
        tab.FilteringSearchWidget.callBaseMethod(this, 'hideUI');
    },
    
    showUI: function tab_FilteringSearchWidget$showUI() {
        tab.FilteringSearchWidget.callBaseMethod(this, 'showUI');
        this.focusQueryBox();
    },
    
    focusQueryBox: function tab_FilteringSearchWidget$focusQueryBox() {
        this.domQueryBox.focus();
    },
    
    blurQueryBox: function tab_FilteringSearchWidget$blurQueryBox() {
        this.domQueryBox.blur();
    },
    
    getQuery: function tab_FilteringSearchWidget$getQuery() {
        return this.domQueryBox.value;
    },
    
    setQuery: function tab_FilteringSearchWidget$setQuery(value) {
        this.domQueryBox.value = value;
    },
    
    onXButtonClick: function tab_FilteringSearchWidget$onXButtonClick(evt) {
        if (this._style$2 === 1) {
            this.clearSearch();
            dojo.removeClass(this.get_domXButton(), 'Hover');
        }
        else {
            tab.FilteringSearchWidget.callBaseMethod(this, 'onXButtonClick', [ evt ]);
        }
    },
    
    updateSearch: function tab_FilteringSearchWidget$updateSearch() {
        if (this.get_isVisible()) {
            this.searchWithQuery(this.getQuery());
        }
    },
    
    searchWithQuery: function tab_FilteringSearchWidget$searchWithQuery(query) {
        if (query.length <= 0) {
            this.clearSearch();
        }
        else if (this.get_qf().get_oFilter().isTiled) {
            this.doRemoteSearch(query, true);
        }
        else {
            this._handleSearchResults$2(this.doCategoricalSearch(query));
        }
    },
    
    doRemoteSearch: function tab_FilteringSearchWidget$doRemoteSearch(query, shouldGetIndex) {
        this.doAjaxRemoteSearch(query, this._searchResultsMaxRows$2, shouldGetIndex, ss.Delegate.create(this, this._handleSearchResults$2), ss.Delegate.create(this, this._handleSearchResultsError$2));
    },
    
    getOnQueryBoxKeyDownBehavior: function tab_FilteringSearchWidget$getOnQueryBoxKeyDownBehavior(keyEvent) {
        var result;
        result = this.inherited(arguments);
        switch (keyEvent.keyCode) {
            case dojo.keys.ESCAPE:
                if (dojo.isFF) {
                    result.functionToCall = ss.Delegate.create(this, this.onXButtonClick);
                }
                break;
            case dojo.keys.ENTER:
                result.stopEvent = true;
                result.functionToCall = ss.Delegate.create(this, this._handleEnter$2);
                break;
        }
        return result;
    },
    
    clearSearch: function tab_FilteringSearchWidget$clearSearch(preserveQueryBoxText, noFocus) {
        if (this.resultCount === tab.SearchWidgetBase.noSearchPerformed) {
            return;
        }
        dojo.addClass(this.domNode, 'SearchCleared');
        tab.FilteringSearchWidget.callBaseMethod(this, 'clearSearch', [ preserveQueryBoxText, noFocus ]);
        this.get__qfAsFilteringQf$2().filterBySearchResults(null);
        this.resultCount = tab.SearchWidgetBase.noSearchPerformed;
    },
    
    handleNonCommandKeyDown: function tab_FilteringSearchWidget$handleNonCommandKeyDown(evt) {
        var delay = 500;
        dojo.removeClass(this.domNode, 'SearchCleared');
        tab.FilteringSearchWidget.callBaseMethod(this, 'handleNonCommandKeyDown', [ evt ]);
        switch (this.domQueryBox.value.length) {
            case 1:
                delay = Math.round(delay * 1.5);
                break;
            case 2:
                delay = Math.round(delay * 1.25);
                break;
        }
        if (!!this._searchTimer$2) {
            window.clearTimeout(this._searchTimer$2);
            this._searchTimer$2 = null;
        }
        this._searchTimer$2 = window.setTimeout(ss.Delegate.create(this, this.updateSearch), delay);
    },
    
    _handleEnter$2: function tab_FilteringSearchWidget$_handleEnter$2(evt) {
        this.updateSearch();
    },
    
    _handleSearchResults$2: function tab_FilteringSearchWidget$_handleSearchResults$2(data) {
        if (ss.isValue(data.length)) {
            this.resultCount = data.length;
        }
        else if (ss.isValue(data.tuples)) {
            this.resultCount = data.tuples.length;
            data = this._processRemoteResults$2(data);
        }
        this.get__qfAsFilteringQf$2().filterBySearchResults(data);
    },
    
    _processRemoteResults$2: function tab_FilteringSearchWidget$_processRemoteResults$2(data) {
        var itemName = this.makeUniqueSearchItemIdPrefix();
        var tuples = data.tuples;
        var indices = data.indices;
        var results = [];
        for (var i = 0; i < tuples.length; i++) {
            results.push(tableau.FilterItem.getSearchResultHtml(this.get_qf(), tuples[i], itemName, indices[i]));
        }
        return results;
    },
    
    _handleSearchResultsError$2: function tab_FilteringSearchWidget$_handleSearchResultsError$2(response) {
        tab.Log.get(this).debug('Search results error: ' + response.toString());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.OverlayImage

tab.OverlayImage = function tab_OverlayImage(parent, imageSource) {
    tab.OverlayImage.initializeBase(this, [ $("<img class='tab-overlayImage'/>") ]);
    this._parent$1 = $(parent);
    this.get_element().bind('load', ss.Delegate.create(this, function() {
        this._updateOverlayImageLocation$1();
    }));
    this.get_element().attr('src', imageSource);
}
tab.OverlayImage.prototype = {
    _parent$1: null,
    _location$1: null,
    
    get_location: function tab_OverlayImage$get_location() {
        return tab.$create_Point(parseInt(this._location$1.x), parseInt(this._location$1.y));
    },
    set_location: function tab_OverlayImage$set_location(value) {
        this._location$1 = tab.$create_PointF(value.x, value.y);
        this._updateOverlayImageLocation$1();
        return value;
    },
    
    clone: function tab_OverlayImage$clone() {
        return new tab.OverlayImage(this._parent$1.get(0), this.get_element().attr('src'));
    },
    
    show: function tab_OverlayImage$show(showLocation) {
        this._location$1 = showLocation;
        this._updateOverlayImageLocation$1();
    },
    
    hide: function tab_OverlayImage$hide() {
        this.get_element().detach();
    },
    
    _updateOverlayImageLocation$1: function tab_OverlayImage$_updateOverlayImageLocation$1() {
        if (this.get_element().parent()[0] !== this._parent$1[0]) {
            this._parent$1.append(this.get_element());
        }
        if (this._location$1 == null) {
            return;
        }
        var top = this._location$1.y;
        var left = this._location$1.x;
        tab.Log.get(this).debug('Positioning overlay image: top=%d, left=%d, parent=%o', top, left, this._parent$1);
        this.get_element().css({ top: top + 'px', left: left + 'px' });
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.OverlayPanel

tab.OverlayPanel = function tab_OverlayPanel(parentElt, isVisibleToUser) {
    tab.OverlayPanel.initializeBase(this, [ $('<div class="tab-overlay-panel"></div>') ]);
    if (ss.isValue(parentElt)) {
        this._parentElement$1 = parentElt;
        this.get_element().css('position', 'absolute');
    }
    else {
        this.get_element().css('position', 'fixed');
    }
    this._opacityWhenShown$1 = (isVisibleToUser) ? 0.5 : 0.01;
}
tab.OverlayPanel.prototype = {
    _parentElement$1: null,
    _opacityWhenShown$1: 0,
    
    show: function tab_OverlayPanel$show() {
        if (ss.isNullOrUndefined(this._parentElement$1)) {
            this.get_element().appendTo(document.body);
        }
        else {
            this.get_element().appendTo(this._parentElement$1);
        }
        this.get_element().css({ opacity: '0.01', filter: 'alpha(opacity=01)', display: '' });
        this.get_element().fadeTo('fast', this._opacityWhenShown$1);
    },
    
    hide: function tab_OverlayPanel$hide() {
        this.get_element().fadeOut('fast', ss.Delegate.create(this, this._remove$1));
    },
    
    bind: function tab_OverlayPanel$bind(eventName, handler) {
        this.get_element().bind(eventName, handler);
    },
    
    _remove$1: function tab_OverlayPanel$_remove$1() {
        this.get_element().remove();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParameterControl

tab.ParameterControl = function tab_ParameterControl(oProps) {
    this.format = {};
    this._attributes$1 = {};
    tab.ParameterControl.initializeBase(this);
    this.session = oProps.session;
    this._field$1 = oProps.field;
    this._titleH$1 = oProps.titleH;
    this._titleW$1 = oProps.titleW;
    this._titleHTML$1 = oProps.titleHTML;
    this.format = oProps.format;
    this.backgroundColor = oProps.backgroundColor;
    this._attributes$1 = oProps.attributes;
    this._viewModel$1 = oProps.viewModel;
}
tab.ParameterControl.prototype = {
    _widgetsInTemplate$1: true,
    domBox: null,
    domControls: null,
    getSID: null,
    session: null,
    _field$1: '',
    stateId: 0,
    _viewModel$1: null,
    _ui$1: null,
    domTitleBar: null,
    domContent: null,
    _subscriptions$1: null,
    _titleH$1: 0,
    _titleW$1: 0,
    _titleHTML$1: null,
    backgroundColor: null,
    
    get_model: function tab_ParameterControl$get_model() {
        return this._viewModel$1.get_parameterCtrlModel().get_parameterCtrlPresModel();
    },
    
    get_domBoxElement: function tab_ParameterControl$get_domBoxElement() {
        return this.domBox;
    },
    
    get_backgroundColor: function tab_ParameterControl$get_backgroundColor() {
        return this.backgroundColor;
    },
    
    postCreate: function tab_ParameterControl$postCreate() {
        this.getSID = ss.Delegate.create(this, function() {
            return this.stateId;
        });
        this._subscriptions$1 = [];
        this._initFromState$1();
    },
    
    destroy: function tab_ParameterControl$destroy(preserveDom) {
        dojo.forEach(this._subscriptions$1, dojo.unsubscribe);
        if (ss.isValue(this._ui$1)) {
            this._ui$1.destroy();
        }
        this.domContent.innerHTML = '';
        this.inherited(arguments);
    },
    
    getTypeInParamClass: function tab_ParameterControl$getTypeInParamClass() {
        return tableau.base.widget.paramui.TypeIn;
    },
    
    getTypeInDateFieldParamClass: function tab_ParameterControl$getTypeInDateFieldParamClass() {
        return tableau.base.widget.paramui.TypeInDateField;
    },
    
    getCompactParamClass: function tab_ParameterControl$getCompactParamClass() {
        return tableau.base.widget.paramui.Compact;
    },
    
    getListParamClass: function tab_ParameterControl$getListParamClass() {
        return tableau.base.widget.paramui.List;
    },
    
    getSliderParamClass: function tab_ParameterControl$getSliderParamClass() {
        return tableau.base.widget.paramui.Slider;
    },
    
    _initFromState$1: function tab_ParameterControl$_initFromState$1() {
        var newUI = null;
        if (ss.isNullOrUndefined(this.get_model()) || ss.isNullOrUndefined(this.get_model().legacyPresModel) || ss.isNullOrUndefined(this._attributes$1)) {
            return;
        }
        dojo.attr(this.domTitleBar, 'title', (this.get_model().legacyPresModel).title);
        switch (this._mode$1()) {
            case 'type_in':
                newUI = this.getTypeInParamClass();
                break;
            case 'compact':
                newUI = this.getCompactParamClass();
                break;
            case 'list':
                newUI = this.getListParamClass();
                break;
            case 'slider':
                newUI = this.getSliderParamClass();
                break;
            case 'datetime':
                newUI = this.getTypeInDateFieldParamClass();
                break;
        }
        if (newUI == null) {
            return;
        }
        if (ss.isValue(this._ui$1)) {
            this._ui$1.destroy();
            this._ui$1 = null;
        }
        this._ui$1 = new newUI(this, this.domContent, this._field$1, this._attributes$1, this._viewModel$1);
        this._ui$1.instantiate(false);
        this._setTitle$1();
        tab.WidgetStyle.applyFormatting(this.domNode, this.get_model().textStyle, this.get_backgroundColor(), this.get_model().lineHeight);
    },
    
    _setTitle$1: function tab_ParameterControl$_setTitle$1() {
        this.domTitleBar.innerHTML = this._titleHTML$1;
        tab.FormattingConverters.cleanUpFontFamilyStyles($(this.domTitleBar));
        $(this.domTitleBar).find('div').css({ 'text-overflow': 'ellipsis', overflow: 'hidden' });
    },
    
    updateProperties: function tab_ParameterControl$updateProperties(oProps) {
        this.session = oProps.session;
        this._field$1 = oProps.field;
        this._titleH$1 = oProps.titleH;
        this._titleW$1 = oProps.titleW;
        this._titleHTML$1 = oProps.titleHTML;
        this.format = oProps.format;
        this.backgroundColor = oProps.backgroundColor;
        this._attributes$1 = oProps.attributes;
        this._setTitle$1();
        this._refreshFormatting$1();
        this._refreshState$1();
        this.layout();
    },
    
    _refreshFormatting$1: function tab_ParameterControl$_refreshFormatting$1() {
        tab.WidgetStyle.applyFormatting(this.domNode, this.get_model().textStyle, this.get_backgroundColor(), this.get_model().lineHeight);
    },
    
    _refreshState$1: function tab_ParameterControl$_refreshState$1() {
        if (ss.isValue(this._ui$1)) {
            this._ui$1.refreshState(this._attributes$1);
        }
    },
    
    _mode$1: function tab_ParameterControl$_mode$1() {
        return this._attributes$1['mode'];
    },
    
    _hideEmptyTitlebar$1: function tab_ParameterControl$_hideEmptyTitlebar$1() {
        return false;
    },
    
    getTitleOffset: function tab_ParameterControl$getTitleOffset() {
        return (dojo.hasClass(this.domNode, 'PCInlineTitle')) ? 0 : dojo.marginBox(this.domTitleBar).h;
    },
    
    layout: function tab_ParameterControl$layout() {
        if (ss.isNullOrUndefined(this.domNode.parentNode) || ss.isNullOrUndefined(this._ui$1)) {
            return;
        }
        dojo.removeClass(this.domNode, 'PCInlineTitle');
        var oTitleBar = tab.$create_DojoCoords();
        if (this._titleH$1 > 0) {
            oTitleBar.h = this._titleH$1;
            dojo.marginBox(this.domTitleBar, { h: oTitleBar.h });
        }
        if (this._titleW$1 > 0) {
            oTitleBar.w = this._titleW$1;
            dojo.marginBox(this.domTitleBar, { w: oTitleBar.w });
        }
        tableau.util.setupTitleEllipsis($(this.domTitleBar));
        var oZoneSize = dojo.contentBox(this.domNode);
        var notTitleSize = tab.$create_Size(oZoneSize.w, oZoneSize.h);
        if (!this._hideEmptyTitlebar$1()) {
            if (this._titleW$1 > 0) {
                notTitleSize.w = oZoneSize.w - oTitleBar.w;
                dojo.style(this.domTitleBar, 'float', 'left');
                dojo.style(this.domContent, 'float', 'left');
                dojo.addClass(this.domNode, 'PCInlineTitle');
            }
            else {
                notTitleSize.h = oZoneSize.h - oTitleBar.h;
                dojo.style(this.domTitleBar, 'float', 'none');
                dojo.style(this.domContent, 'float', 'none');
            }
        }
        this._ui$1.layout(notTitleSize);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParamUIBase

tab.ParamUIBase = function tab_ParamUIBase(parent, div, field, attrs, viewModel) {
    tab.ParamUIBase.initializeBase(this);
    this.disposables = new tab.DisposableHolder();
    this.parent = parent;
    this.div = div;
    this.field = field;
    this.attributes = attrs;
    this.parameterViewModel = viewModel;
    this.newValInFlight = null;
}
tab.ParamUIBase.prototype = {
    disposables: null,
    parameterViewModel: null,
    parent: null,
    field: null,
    newValInFlight: null,
    div: null,
    attributes: null,
    
    get_legacyModel: function tab_ParamUIBase$get_legacyModel() {
        return this.parameterViewModel.get_parameterCtrlModel().get_parameterCtrlJsonPresModel();
    },
    
    get_model: function tab_ParamUIBase$get_model() {
        return this.parameterViewModel.get_parameterCtrlModel().get_parameterCtrlPresModel();
    },
    
    refreshState: function tab_ParamUIBase$refreshState(attrs) {
        this.attributes = attrs;
        this.setNewState();
    },
    
    dispose: function tab_ParamUIBase$dispose() {
        this.disposables.dispose();
    },
    
    destroy: function tab_ParamUIBase$destroy(preserveDom) {
        this.dispose();
        this.div.innerHTML = '';
    },
    
    layout: function tab_ParamUIBase$layout(contentSize) {
        dojo.marginBox(this.div, contentSize);
    },
    
    formatTuple: function tab_ParamUIBase$formatTuple(tuple) {
        return tableau.format.formatTupleDisplayName(tuple, true, null);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParamUITypeIn

tab.ParamUITypeIn = function tab_ParamUITypeIn(parent, div, field, attrs, parameterViewModel) {
    tab.ParamUITypeIn.initializeBase(this, [ parent, div, field, attrs, parameterViewModel ]);
}
tab.ParamUITypeIn.prototype = {
    widget: null,
    
    getWidgetClass: function tab_ParamUITypeIn$getWidgetClass() {
        return tableau.base.widget.ui.TypeIn;
    },
    
    instantiate: function tab_ParamUITypeIn$instantiate(isUpdate) {
        var widgetClass = this.getWidgetClass();
        this.widget = new widgetClass(this.div, ss.Delegate.create(this, this._doChange$2), 'TypeIn');
        this.widget.instantiate(this.get_legacyModel().alias, this.field, this.get_legacyModel().value, this.get_legacyModel().min, this.get_legacyModel().max, this.get_legacyModel().format, this.get_legacyModel().date_format, this.get_legacyModel().editing_format, this.get_model().firstDayOfWeek);
        if (this.get_legacyModel().is_list_domain) {
            this.widget._initializeAutocomplete(this.get_legacyModel().domain, ss.Delegate.create(this.parent.session, this.parent.session.getAutocompleteInfo));
        }
    },
    
    setNewState: function tab_ParamUITypeIn$setNewState() {
        this.widget.setNewState(this.get_legacyModel().alias, this.get_legacyModel().domain, this.get_legacyModel().value, this.get_legacyModel().min, this.get_legacyModel().max);
    },
    
    destroy: function tab_ParamUITypeIn$destroy() {
        if (ss.isValue(this.widget)) {
            this.widget.destroy();
        }
        this.inherited(arguments);
    },
    
    layout: function tab_ParamUITypeIn$layout(contentSize) {
        this.inherited(arguments);
        this.widget.layout();
    },
    
    _doChange$2: function tab_ParamUITypeIn$_doChange$2(newVal) {
        if (this.newValInFlight === newVal) {
            return;
        }
        this.newValInFlight = newVal;
        tab.ParameterServerCommands.setParameterValue(this.field, newVal, false, ss.Delegate.create(this, this._successCallback$2), ss.Delegate.create(this, this._errorCallback$2));
    },
    
    _errorCallback$2: function tab_ParamUITypeIn$_errorCallback$2(e) {
        this.widget.queryBox.value = this.get_legacyModel().alias;
        this.newValInFlight = null;
        this.setNewState();
    },
    
    _successCallback$2: function tab_ParamUITypeIn$_successCallback$2(data) {
        this.newValInFlight = null;
        _.defer(ss.Delegate.create(this, this.setNewState));
    },
    
    updateCallback: function tab_ParamUITypeIn$updateCallback(data) {
        if (!!data.success) {
            if (ss.isValue(data.newval)) {
                this.widget.queryBox.value = data.newval;
                this.get_legacyModel().alias = data.newval;
                this.widget._pattern = data.newval;
                if (ss.isValue(data.newdatavalue)) {
                    this.get_legacyModel().value = data.newdatavalue;
                    this.widget._dataValue = data.newdatavalue;
                }
            }
        }
        else {
            this.widget.queryBox.value = this.get_legacyModel().alias;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParamUITypeInDateField

tab.ParamUITypeInDateField = function tab_ParamUITypeInDateField(parent, div, field, attrs, parameterViewModel) {
    tab.ParamUITypeInDateField.initializeBase(this, [ parent, div, field, attrs, parameterViewModel ]);
}
tab.ParamUITypeInDateField.prototype = {
    
    getWidgetClass: function tab_ParamUITypeInDateField$getWidgetClass() {
        return tableau.base.widget.ui.TypeInDateField;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParamUICompact

tab.ParamUICompact = function tab_ParamUICompact(parent, div, field, attrs, parameterViewModel) {
    tab.ParamUICompact.initializeBase(this, [ parent, div, field, attrs, parameterViewModel ]);
    this._viewModel$2 = new tab.ComboBoxViewModel();
    this._viewModel$2.set_menuTheme(1);
    this._viewModel$2.set_formattingStyle(new tab.FormattingStyleInfo(this.parent.get_model().textStyle, this.parent.get_backgroundColor(), this.parent.get_model().lineHeight));
    this._viewModel$2.set_menuStyleClass(this.parent.domNode.id + '_menu');
    this._viewModel$2.add_selectedItemChanged(ss.Delegate.create(this, this._onSelection$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this._viewModel$2.remove_selectedItemChanged(ss.Delegate.create(this, this._onSelection$2));
    })));
    var aliasedDataValues = this.get_legacyModel().domain;
    var len = aliasedDataValues.length;
    for (var i = 0; i < len; i++) {
        var item = new tab.ComboBoxItem(null, aliasedDataValues[i], i, '');
        this._viewModel$2.addItem(item);
        if (this.get_legacyModel().alias === aliasedDataValues[i]) {
            this._viewModel$2.set_selectedItem(item);
        }
    }
    this._view$2 = spiff.ObjectRegistry.newView(tab.ComboBoxView, this._viewModel$2);
    this._view$2.addToDom($(this.div));
    this.disposables.add(this._viewModel$2);
    this.disposables.add(this._view$2);
}
tab.ParamUICompact.prototype = {
    _viewModel$2: null,
    _view$2: null,
    
    instantiate: function tab_ParamUICompact$instantiate(isUpdate) {
    },
    
    setNewState: function tab_ParamUICompact$setNewState() {
        if (this.get_legacyModel().alias !== this._viewModel$2.get_selectedItem().get_name()) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._viewModel$2.get_items());
            while ($enum1.moveNext()) {
                var item = $enum1.current;
                if (item.get_name() === this.get_legacyModel().alias) {
                    this._viewModel$2.set_selectedItem(item);
                    break;
                }
            }
        }
    },
    
    _onSelection$2: function tab_ParamUICompact$_onSelection$2(item) {
        var selected_index = item.get_data();
        var aliases = this.get_legacyModel().domain;
        if (selected_index >= aliases.length || selected_index < 0 || tab.MiscUtil.isNullOrEmpty(aliases)) {
            return;
        }
        if (aliases[selected_index] === this.get_legacyModel().alias) {
            return;
        }
        var alias = aliases[selected_index];
        tab.ParameterServerCommands.setParameterValue(this.field, alias);
    },
    
    layout: function tab_ParamUICompact$layout(contentSize) {
        this.inherited(arguments);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParamUIList

tab.ParamUIList = function tab_ParamUIList(parent, div, field, attrs, parameterViewModel) {
    tab.ParamUIList.initializeBase(this, [ parent, div, field, attrs, parameterViewModel ]);
}
tab.ParamUIList.prototype = {
    
    instantiate: function tab_ParamUIList$instantiate(isUpdate) {
        var getter = tableau.FilterItem.getRadioHtml;
        var locField = this.field;
        var current = this.get_legacyModel().alias;
        var itemHTML = [];
        var aliasedDataValues = this.get_legacyModel().domain;
        var len = aliasedDataValues.length;
        for (var i = 0; i < len; i++) {
            var id = ([ locField, '_', i.toString() ]).join('');
            itemHTML.add(getter(id, locField, aliasedDataValues[i], current === aliasedDataValues[i]));
        }
        this.div.innerHTML = itemHTML.join('');
        $(this.div).addClass('tab-ctrl-formatted-text');
        if (!isUpdate) {
            this.disposables.add(spiff.EventUtil.bindWithDispose($(this.div), 'click', ss.Delegate.create(this, this._onSelection$2)));
        }
    },
    
    setNewState: function tab_ParamUIList$setNewState() {
        this.instantiate(true);
    },
    
    _onSelection$2: function tab_ParamUIList$_onSelection$2(e) {
        var tagname = e.target.tagName.toLowerCase();
        if (tagname !== 'input') {
            return;
        }
        var target = $(e.target);
        var filterItem = target.parents('.FIItem');
        if (filterItem.length > 0) {
            var targetIndex = tableau.FilterItem.getIndex(filterItem.get(0));
            var newAlias = this.get_legacyModel().domain[targetIndex];
            tab.ParameterServerCommands.setParameterValue(this.field, newAlias);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ParamUISlider

tab.ParamUISlider = function tab_ParamUISlider(parent, div, field, attrs, parameterViewModel) {
    tab.ParamUISlider.initializeBase(this, [ parent, div, field, attrs, parameterViewModel ]);
}
tab.ParamUISlider.prototype = {
    slider: null,
    
    instantiate: function tab_ParamUISlider$instantiate(isUpdate) {
        var locModel = this.get_legacyModel();
        var d = this.get_legacyModel().domain;
        var current = this.get_legacyModel().alias;
        var numValues = 1;
        var currentValue = 1;
        this.slider = new tableau.base.widget.ui.Slider(this.div, this.attributes, false, ss.Delegate.create(this, this.doUpdateViz), ss.Delegate.create(this.parent, this.parent.getTitleOffset), ss.Delegate.create(this, this.getCurrentText), null, null, false);
        if (locModel.fake_continuous) {
            this.attributes['show-step-btns'] = 'false';
            this.attributes['show-ticks'] = 'false';
        }
        var iflist = ss.Delegate.create(this, function() {
            this.slider.instantiateFromDomain(d, current);
        });
        var ifcontinuous = ss.Delegate.create(this, function() {
            numValues = Number.POSITIVE_INFINITY;
            currentValue = this.percentageOfRange(this.modelValueOrRangeMin()) * 100;
            this.attributes['show-step-btns'] = 'false';
            this.slider.instantiate(numValues, currentValue, current);
        });
        var ifdiscreteDate = ss.Delegate.create(this, function() {
            numValues = this.numPeriods();
            currentValue = this.indexInDateRange(this.modelValueOrRangeMin());
            current = this.formatValue(this.modelValueOrRangeMin());
            this.slider.instantiate(numValues, currentValue, current);
        });
        var ifdiscreteOther = ss.Delegate.create(this, function() {
            numValues = this.sizeOfDiscreteRange();
            currentValue = this.indexInRange(this.modelValueOrRangeMin());
            this.slider.instantiate(numValues, currentValue, current);
        });
        this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther);
    },
    
    behaviorPicker: function tab_ParamUISlider$behaviorPicker(list, continuousRange, discreteDateRange, discreteOtherRange) {
        if (this._domainIsList$2()) {
            return list();
        }
        else if (this._domainIsRange$2()) {
            if (this._rangeIsContinuous$2()) {
                return continuousRange();
            }
            else {
                if (this._rangeHasDates$2()) {
                    return discreteDateRange();
                }
                else {
                    return discreteOtherRange();
                }
            }
        }
        return null;
    },
    
    setNewState: function tab_ParamUISlider$setNewState() {
        var d = this.get_legacyModel().domain;
        var current = this.get_legacyModel().alias;
        var iflist = function() {
            var len = d.length;
            for (var i = 0; i < len; i++) {
                if (d[i] === current) {
                    return new ss.Tuple(current, i);
                }
            }
            return null;
        };
        var ifcontinuous = ss.Delegate.create(this, function() {
            return new ss.Tuple(current, (this.percentageOfRange(this.modelValueOrRangeMin()) * 100));
        });
        var ifdiscreteDate = ss.Delegate.create(this, function() {
            return new ss.Tuple(this.formatValue(this.modelValueOrRangeMin()), this.indexInDateRange(this.modelValueOrRangeMin()));
        });
        var ifdiscreteOther = ss.Delegate.create(this, function() {
            return new ss.Tuple(current, this.indexInRange(this.modelValueOrRangeMin()));
        });
        var result = this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther);
        this.slider.setNewState(result.second);
        this.slider.updateReadout(result.first);
    },
    
    refreshSliderMarksForIE: function tab_ParamUISlider$refreshSliderMarksForIE() {
        this.slider.refreshSliderMarksForIE();
    },
    
    doUpdateViz: function tab_ParamUISlider$doUpdateViz(indexVal) {
        var iflist = ss.Delegate.create(this, function() {
            return new ss.Tuple(this.get_legacyModel().domain[indexVal], null);
        });
        var ifcontinuous = ss.Delegate.create(this, function() {
            return new ss.Tuple(null, this._makeDataValue$2(this._valueFromPercent$2(indexVal)));
        });
        var ifdiscreteDate = ss.Delegate.create(this, function() {
            return new ss.Tuple(null, this._makeDataValue$2(this._valueFromDateIndex$2(indexVal)));
        });
        var ifdiscreteOther = ss.Delegate.create(this, function() {
            return new ss.Tuple(null, this._makeDataValue$2(this._valueFromIndex$2(indexVal)));
        });
        var result = this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther);
        var stringValue = null;
        if (ss.isValue(result.first)) {
            stringValue = result.first;
        }
        else if (ss.isValue(result.second)) {
            stringValue = tableau.format.formatDataValue(result.second);
        }
        tab.ParameterServerCommands.setParameterValue(this.field, stringValue, true);
    },
    
    updateCallback: function tab_ParamUISlider$updateCallback(data) {
        if (!!data.success) {
            if (ss.isValue(data.newval)) {
                this.slider.updateReadout(this.formatValue(parseFloat(data.newval)));
            }
        }
    },
    
    destroy: function tab_ParamUISlider$destroy() {
        if (ss.isValue(this.slider) && (typeof(this.slider.destroy) === 'function')) {
            this.slider.destroy();
        }
        this.inherited(arguments);
    },
    
    layout: function tab_ParamUISlider$layout(contentSize) {
        this.inherited(arguments);
        if (ss.isValue(this.slider) && (typeof(this.slider.layout) === 'function')) {
            this.slider.layout();
        }
    },
    
    getCurrentText: function tab_ParamUISlider$getCurrentText(indexVal) {
        var iflist = ss.Delegate.create(this, function() {
            return this.get_legacyModel().domain[indexVal];
        });
        var ifcontinuous = ss.Delegate.create(this, function() {
            return this.formatValue(this._valueFromPercent$2(indexVal));
        });
        var ifdiscreteDate = ss.Delegate.create(this, function() {
            return this.formatValue(this._valueFromDateIndex$2(indexVal));
        });
        var ifdiscreteOther = ss.Delegate.create(this, function() {
            return this.formatValue(this._valueFromIndex$2(indexVal));
        });
        return this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther);
    },
    
    _domainIsList$2: function tab_ParamUISlider$_domainIsList$2() {
        return ss.isValue(this.get_legacyModel().domain);
    },
    
    _domainIsRange$2: function tab_ParamUISlider$_domainIsRange$2() {
        return (ss.isValue(this.get_legacyModel().granularity) && ss.isValue(this.get_legacyModel().min) && ss.isValue(this.get_legacyModel().max));
    },
    
    _rangeIsContinuous$2: function tab_ParamUISlider$_rangeIsContinuous$2() {
        return this.get_legacyModel().granularity.s === tableau.types.DataSpecial.DS_NULL;
    },
    
    _rangeHasDates$2: function tab_ParamUISlider$_rangeHasDates$2() {
        return ss.isValue(this.get_legacyModel().date_period_type);
    },
    
    _rangeMin$2: function tab_ParamUISlider$_rangeMin$2() {
        return this.get_legacyModel().min.v;
    },
    
    _rangeMax$2: function tab_ParamUISlider$_rangeMax$2() {
        return this.get_legacyModel().max.v;
    },
    
    modelValueOrRangeMin: function tab_ParamUISlider$modelValueOrRangeMin() {
        return (ss.isValue(this.get_legacyModel().value.v)) ? this.get_legacyModel().value.v : this._rangeMin$2();
    },
    
    _granularity$2: function tab_ParamUISlider$_granularity$2() {
        return this.get_legacyModel().granularity.v;
    },
    
    _getPeriodType$2: function tab_ParamUISlider$_getPeriodType$2() {
        return this.get_legacyModel().date_period_type;
    },
    
    numPeriods: function tab_ParamUISlider$numPeriods() {
        return this.get_legacyModel().num_periods;
    },
    
    _sizeOfRange$2: function tab_ParamUISlider$_sizeOfRange$2() {
        return this._rangeMax$2() - this._rangeMin$2();
    },
    
    percentageOfRange: function tab_ParamUISlider$percentageOfRange(val) {
        return (val - this._rangeMin$2()) / this._sizeOfRange$2();
    },
    
    _valueFromPercent$2: function tab_ParamUISlider$_valueFromPercent$2(val) {
        return (val / 100 * this._sizeOfRange$2()) + this._rangeMin$2();
    },
    
    sizeOfDiscreteRange: function tab_ParamUISlider$sizeOfDiscreteRange() {
        return Math.floor(this._sizeOfRange$2() / this._granularity$2()) + 1;
    },
    
    indexInRange: function tab_ParamUISlider$indexInRange(val) {
        return Math.floor((val - this._rangeMin$2()) / this._granularity$2());
    },
    
    _valueFromIndex$2: function tab_ParamUISlider$_valueFromIndex$2(val) {
        return (val * this._granularity$2()) + this._rangeMin$2();
    },
    
    indexInDateRange: function tab_ParamUISlider$indexInDateRange(val) {
        return Math.round((val - this._rangeMin$2()) / (this._granularity$2() * this._sizeOfPeriodInDays$2()));
    },
    
    _valueFromDateIndex$2: function tab_ParamUISlider$_valueFromDateIndex$2(val) {
        val = val * this._granularity$2();
        var d = tab.DateUtil.adjustDateByPeriodInUTC(new Date(tableau.types.JsDateFromOleDate(this._rangeMin$2())), this._getPeriodType$2(), val);
        return Math.min(tableau.types.OleDateFromJsDate(d.getTime()), this._rangeMax$2());
    },
    
    _sizeOfPeriodInDays$2: function tab_ParamUISlider$_sizeOfPeriodInDays$2() {
        switch (this._getPeriodType$2()) {
            case 'year':
                return 365.25;
            case 'quarter':
                return 365.25 / 4;
            case 'month':
                return 365.25 / 12;
            case 'week':
                return 7;
            case 'day':
                return 1;
            case 'hour':
                return 1 / 24;
            case 'minute':
                return 1 / (24 * 60);
            case 'second':
                return 1 / (24 * 60 * 60);
        }
        return 0;
    },
    
    formatValue: function tab_ParamUISlider$formatValue(val) {
        var format = (this.get_legacyModel().date_format || this.get_legacyModel().format);
        return tableau.format.formatDataValue(this._makeDataValue$2(val), null, format, null, tab.DateTimeAutoFormatMode.showFullDateTime);
    },
    
    _makeDataValue$2: function tab_ParamUISlider$_makeDataValue$2(val) {
        return tab.$create_DataValueStruct(this.get_legacyModel().min.t, val.toString());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PendingChangesManager

tab.PendingChangesManager = function tab_PendingChangesManager(parent, domainActualSize, exclusive, isAll) {
    this.parent = parent;
    this.domainActualSize = domainActualSize;
    this._exclusive = exclusive;
    this._allMode = isAll;
    this.resetPendingChanges();
}
tab.PendingChangesManager.prototype = {
    domainActualSize: 0,
    _exclusive: false,
    _allMode: false,
    _pendingChangelist: null,
    _useRangePendingIndexes: false,
    _rangePendingState: false,
    _individualPendingIndexes: null,
    _allItemCheckState: null,
    parent: null,
    
    add_onPendingChanges: function tab_PendingChangesManager$add_onPendingChanges(value) {
        this.__onPendingChanges = ss.Delegate.combine(this.__onPendingChanges, value);
    },
    remove_onPendingChanges: function tab_PendingChangesManager$remove_onPendingChanges(value) {
        this.__onPendingChanges = ss.Delegate.remove(this.__onPendingChanges, value);
    },
    
    __onPendingChanges: null,
    
    add_onNoPendingChanges: function tab_PendingChangesManager$add_onNoPendingChanges(value) {
        this.__onNoPendingChanges = ss.Delegate.combine(this.__onNoPendingChanges, value);
    },
    remove_onNoPendingChanges: function tab_PendingChangesManager$remove_onNoPendingChanges(value) {
        this.__onNoPendingChanges = ss.Delegate.remove(this.__onNoPendingChanges, value);
    },
    
    __onNoPendingChanges: null,
    
    get_allItemCheckState: function tab_PendingChangesManager$get_allItemCheckState() {
        return this._allItemCheckState;
    },
    set_allItemCheckState: function tab_PendingChangesManager$set_allItemCheckState(value) {
        this._allItemCheckState = value;
        return value;
    },
    
    get_pendingChangelist: function tab_PendingChangesManager$get_pendingChangelist() {
        return this._pendingChangelist;
    },
    set_pendingChangelist: function tab_PendingChangesManager$set_pendingChangelist(value) {
        this._pendingChangelist = value;
        return value;
    },
    
    resetFilterInfo: function tab_PendingChangesManager$resetFilterInfo(domainSize, exclude, isAll) {
        this.domainActualSize = domainSize;
        this._exclusive = exclude;
        this._allMode = isAll;
    },
    
    resetPendingChanges: function tab_PendingChangesManager$resetPendingChanges() {
        this._pendingChangelist = new tab.Changelist();
        this._individualPendingIndexes = [];
        this._useRangePendingIndexes = false;
        this._rangePendingState = false;
        this._allItemCheckState = null;
        this._raiseOnNoPendingChanges();
    },
    
    processChanges: function tab_PendingChangesManager$processChanges(changelist) {
        this.get_pendingChangelist().appendChangelist(changelist);
        this._raiseEvents();
    },
    
    processAll: function tab_PendingChangesManager$processAll(select) {
        this._individualPendingIndexes = [];
        this._useRangePendingIndexes = true;
        this._rangePendingState = (this._exclusive) ? !select : select;
        this._pendingChangelist = new tab.Changelist();
        var change = new tab.RawChange();
        change.setRange(new tab.IntegerRange(0, this.domainActualSize), this._rangePendingState);
        this.get_pendingChangelist().addChange(change);
        this._raiseEvents();
    },
    
    isSelectAll: function tab_PendingChangesManager$isSelectAll() {
        return this._useRangePendingIndexes && !this._individualPendingIndexes.length && ((this._exclusive) ? !this._rangePendingState : this._rangePendingState);
    },
    
    isDeSelectAll: function tab_PendingChangesManager$isDeSelectAll() {
        return this._useRangePendingIndexes && !this._individualPendingIndexes.length && ((this._exclusive) ? this._rangePendingState : !this._rangePendingState);
    },
    
    handleAllItemClicked: function tab_PendingChangesManager$handleAllItemClicked(isChecked) {
        var selectAll = (this._exclusive) ? !isChecked : isChecked;
        this.set_allItemCheckState(isChecked);
        var i = 0;
        while (this.hasItemAtIndex(i)) {
            if (selectAll) {
                if (!this.isChecked(i)) {
                    this.togglePendingCss(i);
                }
                this.setChecked(i, true);
            }
            else {
                if (this.isChecked(i)) {
                    this.togglePendingCss(i);
                }
                this.setChecked(i, false);
            }
            i++;
        }
        this._useRangePendingIndexes = true;
        this._rangePendingState = selectAll;
        this._individualPendingIndexes = [];
    },
    
    handleItemClicked: function tab_PendingChangesManager$handleItemClicked(index, node) {
        if (index === -1) {
            this.handleAllItemClicked(this.isChecked(index));
            return;
        }
        if (!this.isChecked(index, node)) {
            if (this.parent.shouldUseAllItem()) {
                this.set_allItemCheckState(false);
                if (this.hasAllItem()) {
                    this.setAllItemChecked(false);
                    if (this._exclusive) {
                        var allNotChecked = true;
                        var i = 0;
                        while (allNotChecked && this.hasItemAtIndex(i)) {
                            if (this.isChecked(i)) {
                                allNotChecked = false;
                            }
                            i++;
                        }
                        this.setAllItemChecked(allNotChecked);
                    }
                }
            }
        }
        else {
            if (this.hasAllItem()) {
                var allChecked = true;
                var i = 0;
                while (allChecked && this.hasItemAtIndex(i)) {
                    if (!this.isChecked(i)) {
                        allChecked = false;
                    }
                    i++;
                }
                this.setAllItemChecked(allChecked);
            }
        }
        this.togglePendingCss(index, node);
        this._toggleIndexPendingState(index);
    },
    
    hasAllItem: function tab_PendingChangesManager$hasAllItem() {
        var all = this.parent.fetchAllItem();
        return ss.isValue(all) && tableau.FilterItem.isAllItem(all);
    },
    
    hasItemAtIndex: function tab_PendingChangesManager$hasItemAtIndex(index) {
        return index < this.domainActualSize && ss.isValue(this.parent.fetchChildNodeByIndex(index));
    },
    
    setAllItemChecked: function tab_PendingChangesManager$setAllItemChecked(isChecked) {
        var all = this.parent.fetchAllItem();
        if (ss.isValue(all)) {
            tableau.FilterItem.setChecked(all, isChecked);
            this.set_allItemCheckState(isChecked);
        }
    },
    
    togglePendingCss: function tab_PendingChangesManager$togglePendingCss(index, node) {
        var item = (ss.isValue(node)) ? node : this.parent.fetchChildNodeByIndex(index);
        if (ss.isValue(item)) {
            tableau.FilterItem.togglePendingState(item);
        }
    },
    
    setChecked: function tab_PendingChangesManager$setChecked(index, isChecked) {
        var item = this.parent.fetchChildNodeByIndex(index);
        if (ss.isValue(item)) {
            tableau.FilterItem.setChecked(item, isChecked);
        }
    },
    
    isChecked: function tab_PendingChangesManager$isChecked(index, node) {
        var item;
        if (index === -1) {
            item = this.parent.fetchAllItem();
        }
        else {
            item = (ss.isValue(node)) ? node : this.parent.fetchChildNodeByIndex(index);
        }
        return tableau.FilterItem.isChecked(item);
    },
    
    isPending: function tab_PendingChangesManager$isPending(t, index) {
        if (this._useRangePendingIndexes) {
            var originalCheckState = (this._allMode && !this._exclusive) ? true : t.s;
            if (this._individualPendingIndexes.contains(index)) {
                return originalCheckState === this._rangePendingState;
            }
            else {
                return originalCheckState !== this._rangePendingState;
            }
        }
        else {
            return this._individualPendingIndexes.contains(index);
        }
    },
    
    _raiseEvents: function tab_PendingChangesManager$_raiseEvents() {
        if (this._useRangePendingIndexes || this._individualPendingIndexes.length > 0) {
            this._raiseOnPendingChanges();
        }
        else {
            this._raiseOnNoPendingChanges();
        }
    },
    
    _raiseOnPendingChanges: function tab_PendingChangesManager$_raiseOnPendingChanges() {
        if (ss.isValue(this.__onPendingChanges)) {
            this.__onPendingChanges();
        }
    },
    
    _raiseOnNoPendingChanges: function tab_PendingChangesManager$_raiseOnNoPendingChanges() {
        if (ss.isValue(this.__onNoPendingChanges)) {
            this.__onNoPendingChanges();
        }
    },
    
    _toggleIndexPendingState: function tab_PendingChangesManager$_toggleIndexPendingState(index) {
        if (this._individualPendingIndexes.contains(index)) {
            this._individualPendingIndexes.remove(index);
        }
        else {
            this._individualPendingIndexes.add(index);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RelativeDateFilter

tab.RelativeDateFilter = function tab_RelativeDateFilter(props) {
    this.templateString = "<div class='RelativeDateFilter'>" + "<div class='RelativeDateFilterBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<div class='FilterTitle' dojoAttachPoint='domTitleBar'></div>" + "<div dojoType='dijit.form.Button' class='RDFButton RDFMenuButton' name='type' dojoAttachPoint='menuButton'" + "dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'></div></div>" + "<div dojoType='dijit.form.DropDownButton' dojoAttachPoint='domDropdownButton'>" + "<span class='RDText'>date description</span>" + "<div dojoType='dijit.TooltipDialog' dojoAttachPoint='domTooltipDialog'>" + "<div class='RelativeDateFilterDialog' dojoAttachPoint='domDialog'>" + "<div class='RangeButtonsBar'>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPYear'" + "dojoAttachPoint='buttonYear' name='year'>Years</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPQuarter'" + "dojoAttachPoint='buttonQuarter' name='quarter'>Quarters</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPMonth'" + "dojoAttachPoint='buttonMonth' name='month'>Months</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPWeek'" + "dojoAttachPoint='buttonWeek' name='week'>Weeks</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPDay'" + "dojoAttachPoint='buttonDay' name='day'>Days</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPHour'" + "dojoAttachPoint='buttonHour' name='hour'>Hours</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPMinute'" + "dojoAttachPoint='buttonMinute' name='minute'>Minutes</div>" + '</div>' + "<div class='vertSpacer topHR'></div>" + "<div class='radioLine'>" + "<div class='column1'>" + "<input class='rradio' type='radio' name='radio-${field}' value='last'" + "dojoAttachPoint='radioLast' dojoAttachEvent='onclick:setRLast'></input>" + "<span class='rlabel' dojoAttachPoint='textLast' dojoAttachEvent='onclick:setRLast'></span>" + '</div>' + "<div class='column2'>" + "<input class='rradio' type='radio' name='radio-${field}' value='lastn'" + "dojoAttachPoint='radioLastn' dojoAttachEvent='onclick:setRLastn'></input>" + "<span class='rlabel alignLN' dojoAttachPoint='textLastn1' dojoAttachEvent='onclick:setRLastn'></span>" + "<input class='rtext' type='text' size='2' dojoAttachPoint='inputLastn' value='3'" + "dojoAttachEvent='onkeyup:onTypingLast'></input>" + "<span class='spinner' dojoAttachPoint='lastSpinner'>" + "<div class='spinnerElement spinnerUp' dojoAttachPoint='lastUp'" + "dojoAttachEvent='onmouseover:overLastUp,onmouseout:outLastUp,onclick:upLast'></div>" + "<div class='spinnerElement spinnerDown' dojoAttachPoint='lastDown'" + "dojoAttachEvent='onmouseover:overLastDown,onmouseout:outLastDown,onclick:downLast'></div>" + '</span>' + "<span class='rlabel' dojoAttachPoint='textLastn2' dojoAttachEvent='onclick:setRLastn'></span>" + '</div>' + '</div>' + "<div class='radioLine'>" + "<div class='column1'>" + "<input class='rradio' type='radio' name='radio-${field}' value='curr'" + "dojoAttachPoint='radioCurr' dojoAttachEvent='onclick:setRCurr'></input>" + "<span class='rlabel' dojoAttachPoint='textCurr' dojoAttachEvent='onclick:setRCurr'></span>" + '</div>' + "<div class='column2'>" + "<input class='rradio' type='radio' name='radio-${field}' value='nextn'" + "dojoAttachPoint='radioNextn' dojoAttachEvent='onclick:setRNextn'></input>" + "<span class='rlabel alignLN' dojoAttachPoint='textNextn1' dojoAttachEvent='onclick:setRNextn'></span>" + "<input class='rtext' type='text' size='2' dojoAttachPoint='inputNextn' value='3'" + "dojoAttachEvent='onkeyup:onTypingNext'></input>" + "<span class='spinner' dojoAttachPoint='nextSpinner'>" + "<div class='spinnerElement spinnerUp' dojoAttachPoint='nextUp'" + "dojoAttachEvent='onmouseover:overNextUp,onmouseout:outNextUp,onclick:upNext'></div>" + "<div class='spinnerElement spinnerDown' dojoAttachPoint='nextDown'" + "dojoAttachEvent='onmouseover:overNextDown,onmouseout:outNextDown,onclick:downNext'></div>" + '</span>' + "<span class='rlabel' dojoAttachPoint='textNextn2' dojoAttachEvent='onclick:setRNextn'></span>" + '</div>' + '</div>' + "<div class='radioline'>" + "<div class='column1'>" + "<input class='rradio' type='radio' name='radio-${field}' value='next'" + "dojoAttachPoint='radioNext' dojoAttachEvent='onclick:setRNext'></input>" + "<span class='rlabel' dojoAttachPoint='textNext' dojoAttachEvent='onclick:setRNext'></span>" + '</div>' + "<div class='column2'>" + "<input class='rradio' type='radio' name='radio-${field}' value='todate'" + "dojoAttachPoint='radioTodate' dojoAttachEvent='onclick:setRTodate'></input>" + "<span class='rlabel' dojoAttachPoint='textTodate' dojoAttachEvent='onclick:setRTodate'></span>" + '</div>' + '</div>' + "<div class='vertSpacer bottomHR'></div>" + "<div class='preview'>" + "<span dojoAttachPoint='domPreview'></span>" + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>';
    this._periodInputs$3 = new Array(0);
    this._rangeButtons$3 = [];
    this._disposables$3 = new tab.DisposableHolder();
    tab.RelativeDateFilter.initializeBase(this);
}
tab.RelativeDateFilter.get_anchoredDescriptions = function tab_RelativeDateFilter$get_anchoredDescriptions() {
    if (ss.isNullOrUndefined(tab.RelativeDateFilter._anchoredDescriptions$3)) {
        tab.RelativeDateFilter._createDescriptions$3();
    }
    return tab.RelativeDateFilter._anchoredDescriptions$3;
}
tab.RelativeDateFilter.get_nonAnchoredDescriptions = function tab_RelativeDateFilter$get_nonAnchoredDescriptions() {
    if (ss.isNullOrUndefined(tab.RelativeDateFilter._nonAnchoredDescriptions$3)) {
        tab.RelativeDateFilter._createDescriptions$3();
    }
    return tab.RelativeDateFilter._nonAnchoredDescriptions$3;
}
tab.RelativeDateFilter._createDescriptions$3 = function tab_RelativeDateFilter$_createDescriptions$3() {
    tab.RelativeDateFilter._anchoredDescriptions$3 = {};
    tab.RelativeDateFilter._nonAnchoredDescriptions$3 = {};
    var strings = tab.Strings;
    var periodTypes = tab.RelativeDateFilterPeriodType;
    var rangeTypes = tab.RelativeDateFilterRangeType;
    var $dict1 = periodTypes;
    for (var $key2 in $dict1) {
        var period = { key: $key2, value: $dict1[$key2] };
        var anchoredRangeStrings = {};
        var nonAnchoredRangeStrings = {};
        var $dict3 = rangeTypes;
        for (var $key4 in $dict3) {
            var range = { key: $key4, value: $dict3[$key4] };
            var stringKey = String.format('RelDateAnchored_{0}_{1}', range.key, period.key);
            anchoredRangeStrings[range.key] = strings[stringKey];
            stringKey = String.format('RelDate_{0}_{1}', range.key, period.key);
            nonAnchoredRangeStrings[range.key] = strings[stringKey];
        }
        tab.RelativeDateFilter._anchoredDescriptions$3[period.key] = anchoredRangeStrings;
        tab.RelativeDateFilter._nonAnchoredDescriptions$3[period.key] = nonAnchoredRangeStrings;
    }
}
tab.RelativeDateFilter.prototype = {
    widgetsInTemplate: true,
    session: null,
    field: '',
    filterViewModel: null,
    stateId: 0,
    rid: 0,
    timestamp: 0,
    titleH: 0,
    titleW: 0,
    layoutSession: null,
    getContextMenuCommands: null,
    showContextMenu: null,
    zid: 0,
    domText: null,
    domDropdownButton: null,
    domDialog: null,
    buttonYear: null,
    buttonQuarter: null,
    buttonMonth: null,
    buttonWeek: null,
    buttonDay: null,
    buttonHour: null,
    buttonMinute: null,
    radioLast: null,
    radioCurr: null,
    radioNext: null,
    radioLastn: null,
    radioNextn: null,
    inputNextn: null,
    lastSpinner: null,
    nextSpinner: null,
    lastUp: null,
    lastDown: null,
    nextUp: null,
    nextDown: null,
    domNode: null,
    domTooltipDialog: null,
    menuButton: null,
    _classButtonR$3: 'RDFButtonR',
    _classButtonHide$3: 'RDFButtonHide',
    getSID: null,
    attributes: null,
    requestSetAttributes: null,
    
    get_filterViewModel: function tab_RelativeDateFilter$get_filterViewModel() {
        return this.filterViewModel;
    },
    
    postCreate: function tab_RelativeDateFilter$postCreate() {
        if (this.filterViewModel.get_filterType() !== 'RelativeDate') {
            tab.Log.get(this).warn('Incompatible filter view model type for RelativeDateFilter: %s', this.filterViewModel.get_filterType());
        }
        var buttonCount = 0;
        this._localize$3();
        this.getSID = ss.Delegate.create(this, function() {
            return this.stateId;
        });
        if (ss.isValue(this.oFilter.fy)) {
            this.fy = this.oFilter.fy - 1;
        }
        if (ss.isValue(this.oFilter.start_of_week)) {
            this.startOfWeek = this.oFilter.start_of_week;
        }
        this.timestamp = new Date().getTime();
        this._rangeButtons$3 = [this.buttonYear, this.buttonQuarter, this.buttonMonth, this.buttonWeek, this.buttonDay];
        if (this.oFilter.noTime) {
            dojo.style(this.buttonHour.domNode, 'display', 'none');
            dojo.style(this.buttonMinute.domNode, 'display', 'none');
        }
        else {
            this._rangeButtons$3.push(this.buttonHour);
            this._rangeButtons$3.push(this.buttonMinute);
        }
        this.connect(this.domTooltipDialog, 'onOpen', ss.Delegate.create(this, this._openDialog$3));
        this.initFromState();
        var processButton = ss.Delegate.create(this, function(button, hide) {
            if (hide) {
                dojo.addClass(button.domNode, this._classButtonHide$3);
            }
            else {
                buttonCount += 1;
                dojo.addClass(button.domNode, this._classButtonR$3 + buttonCount);
            }
        });
        processButton(this.menuButton, this.shouldHideContextMenu());
        $(this.menuButton.domNode).css('background-color', this.backgroundColor);
    },
    
    shouldHideContextMenu: function tab_RelativeDateFilter$shouldHideContextMenu() {
        var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
        return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || !commandsWrapper.get_commandItems().length;
    },
    
    shouldHideDomainButton: function tab_RelativeDateFilter$shouldHideDomainButton() {
        return true;
    },
    
    setTitleSize: function tab_RelativeDateFilter$setTitleSize(newH, newW) {
        this.titleH = newH;
        this.titleW = newW;
    },
    
    dispose: function tab_RelativeDateFilter$dispose() {
        this._disposables$3.dispose();
        this.showContextMenu = null;
    },
    
    destroy: function tab_RelativeDateFilter$destroy(preserveDom) {
        this.dispose();
        if (ss.isValue(this.domText)) {
            this.domText.innerHTML = '';
        }
        this.inherited(arguments);
    },
    
    layout: function tab_RelativeDateFilter$layout() {
        this.updateTitleBar();
        dojo.removeClass(this.domNode, 'RDFHorizontal');
        var oDiagSize = dojo.marginBox(this.domDialog);
        if (!ss.isValue(oDiagSize) || !ss.isValue(oDiagSize.w) || !oDiagSize.w) {
            return;
        }
        var oTitleBar = dojo.marginBox(this.domTitleBar);
        this.resetTitleSize();
        if (this.titleH > 0) {
            oTitleBar.h = this.titleH;
            dojo.marginBox(this.domTitleBar, { h: oTitleBar.h });
        }
        if (this.titleW > 0) {
            oTitleBar.w = this.titleW;
            dojo.marginBox(this.domTitleBar, { w: oTitleBar.w });
        }
        tableau.util.setupTitleEllipsis($(this.domTitleBar));
        var oZoneSize = dojo.contentBox(this.domNode);
        var width = oZoneSize.w - 4;
        dojo.query('.dijitButtonNode', this.domDropdownButton.domNode).addClass('tab-ctrl-formatted-widget');
        dojo.query('.dijitButtonNode', this.domDropdownButton.domNode).addClass('tab-ctrl-formatted-darker-border-hover');
        dojo.query('.dijitButtonText', this.domDropdownButton.domNode).addClass('tab-ctrl-formatted-fixedsize');
        if (!this.hideEmptyTitlebar() && this.titleW > 0) {
            dojo.addClass(this.domNode, 'RDFHorizontal');
            dojo.style(this.domTitleBar, 'float', 'left');
            dojo.style(this.domDropdownButton.domNode, 'float', 'left');
            width = oZoneSize.w - oTitleBar.w - 6;
        }
        else {
            dojo.style(this.domTitleBar, 'float', 'none');
            dojo.style(this.domDropdownButton.domNode, 'float', 'none');
        }
        if (width > 29) {
            dojo.style(this.domDropdownButton.domNode, 'width', width + 'px');
            dojo.style(this.domDropdownButton.domNode.firstChild, 'width', (width - 4) + 'px');
            width = width - 25;
            var text = this.domDropdownButton.domNode.firstChild.firstChild.firstChild.childNodes[1];
            if (ss.isValue(text)) {
                dojo.style(text, 'width', width + 'px');
            }
        }
        var labelSize = Math.floor((oDiagSize.w - 10) / this._rangeButtons$3.length);
        var $enum1 = ss.IEnumerator.getEnumerator(this._rangeButtons$3);
        while ($enum1.moveNext()) {
            var n = $enum1.current;
            dojo.style(n.titleNode, 'width', (labelSize - 5) + 'px');
        }
    },
    
    getMetrics: function tab_RelativeDateFilter$getMetrics() {
        var oSize = dojo.marginBox(this.domNode);
        return { fixed: { w: 0, h: oSize.h } };
    },
    
    initFromState: function tab_RelativeDateFilter$initFromState() {
        this.domDropdownButton.attr('label', this.oFilter.text);
        this.updateCurrentStateOfData();
        this.setRangeType(this.rangeType, this.rangeN);
        this.setTitle();
        this.updateTitleBar();
    },
    
    updateCurrentStateOfData: function tab_RelativeDateFilter$updateCurrentStateOfData() {
        var f = this.oFilter.table;
        this.periodType = f.periodType;
        this.rangeType = f.rangeType;
        this.rangeN = f.rangeN;
        if (!ss.isUndefined(f.anchor)) {
            var a = f.anchor;
            this.anchorDateTime = new Date(a.year, a.month - 1, a.day, a.hour, a.minute, a.second);
        }
    },
    
    setTitle: function tab_RelativeDateFilter$setTitle() {
        var title = tableau.format.formatColumnDisplayName(this.oFilter, false);
        dojo.attr(this.domTitleBar, 'title', title);
    },
    
    applyChanges: function tab_RelativeDateFilter$applyChanges() {
        var data = {};
        data.periodType = this.periodType;
        data.rangeType = this.rangeType;
        data.rangeN = this.rangeN;
        this.stateId += 1;
        var node = tableau.util.findDirectParentByClassName(this.domDialog, 'dijitPopup', dojo.body());
        if (!ss.isNullOrUndefined(node)) {
            dojo.style(node, 'zIndex', '980');
        }
        tab.FilterClientCommands.doRelativeDateQuickFilter(this.session.get_visualId(), this.field, this.periodType, this.rangeType, this.rangeN);
    },
    
    doMenu: function tab_RelativeDateFilter$doMenu() {
        this.showContextMenu(this.menuButton.domNode);
    },
    
    _openDialog$3: function tab_RelativeDateFilter$_openDialog$3() {
        this.setPeriodUI(this.periodType);
        this.setRangeUI(this.rangeType, this.rangeN);
        this.setPreviewUI();
    },
    
    onTypingLast: function tab_RelativeDateFilter$onTypingLast() {
        this.onTyping(this.inputLastn);
    },
    
    onTypingNext: function tab_RelativeDateFilter$onTypingNext() {
        this.onTyping(this.inputNextn);
    },
    
    setRLast: function tab_RelativeDateFilter$setRLast() {
        this.setRange('last');
    },
    
    setRCurr: function tab_RelativeDateFilter$setRCurr() {
        this.setRange('curr');
    },
    
    setRNext: function tab_RelativeDateFilter$setRNext() {
        this.setRange('next');
    },
    
    setRLastn: function tab_RelativeDateFilter$setRLastn() {
        this.setRange('lastn', this.inputLastn.value);
    },
    
    setRNextn: function tab_RelativeDateFilter$setRNextn() {
        this.setRange('nextn', this.inputNextn.value);
    },
    
    setRTodate: function tab_RelativeDateFilter$setRTodate() {
        this.setRange('todate');
    },
    
    setRangeUI: function tab_RelativeDateFilter$setRangeUI(range, n) {
        this.inputLastn.disabled = true;
        this.inputNextn.disabled = true;
        dojo.style(this.lastSpinner, 'display', 'none');
        dojo.removeClass(this.radioLastn, 'spinnerBugFix');
        dojo.style(this.nextSpinner, 'display', 'none');
        dojo.removeClass(this.radioNextn, 'spinnerBugFix');
        switch (range) {
            case 'last':
                this.radioLast.checked = true;
                break;
            case 'curr':
                this.radioCurr.checked = true;
                break;
            case 'next':
                this.radioNext.checked = true;
                break;
            case 'lastn':
                this.radioLastn.checked = true;
                this.rangeN = n;
                this.inputLastn.value = this.rangeN.toString();
                this.inputLastn.disabled = false;
                dojo.style(this.lastSpinner, 'display', '');
                dojo.addClass(this.radioLastn, 'spinnerBugFix');
                break;
            case 'nextn':
                this.radioNextn.checked = true;
                this.rangeN = n;
                this.inputNextn.value = this.rangeN.toString();
                this.inputNextn.disabled = false;
                dojo.style(this.nextSpinner, 'display', '');
                dojo.addClass(this.radioNextn, 'spinnerBugFix');
                break;
            case 'todate':
                this.radioTodate.checked = true;
                break;
        }
    },
    
    updateRangeButtons: function tab_RelativeDateFilter$updateRangeButtons(newPeriodType) {
        var len = this._rangeButtons$3.length;
        for (var i = 0; i < len; i++) {
            this._rangeButtons$3[i].attr('checked', this._rangeButtons$3[i].name === newPeriodType);
        }
    },
    
    overLastUp: function tab_RelativeDateFilter$overLastUp() {
        dojo.addClass(this.lastUp, 'hover');
    },
    
    outLastUp: function tab_RelativeDateFilter$outLastUp() {
        dojo.removeClass(this.lastUp, 'hover');
    },
    
    overLastDown: function tab_RelativeDateFilter$overLastDown() {
        dojo.addClass(this.lastDown, 'hover');
    },
    
    outLastDown: function tab_RelativeDateFilter$outLastDown() {
        dojo.removeClass(this.lastDown, 'hover');
    },
    
    overNextUp: function tab_RelativeDateFilter$overNextUp() {
        dojo.addClass(this.nextUp, 'hover');
    },
    
    outNextUp: function tab_RelativeDateFilter$outNextUp() {
        dojo.removeClass(this.nextUp, 'hover');
    },
    
    overNextDown: function tab_RelativeDateFilter$overNextDown() {
        dojo.addClass(this.nextDown, 'hover');
    },
    
    outNextDown: function tab_RelativeDateFilter$outNextDown() {
        dojo.removeClass(this.nextDown, 'hover');
    },
    
    _spin$3: function tab_RelativeDateFilter$_spin$3(elem, up) {
        var newValue = parseInt(elem.value, 10) + ((up) ? 1 : -1);
        if (newValue < 1) {
            return;
        }
        elem.value = newValue.toString();
        this.onTyping(elem);
    },
    
    upLast: function tab_RelativeDateFilter$upLast() {
        this._spin$3(this.inputLastn, true);
    },
    
    downLast: function tab_RelativeDateFilter$downLast() {
        this._spin$3(this.inputLastn, false);
    },
    
    upNext: function tab_RelativeDateFilter$upNext() {
        this._spin$3(this.inputNextn, true);
    },
    
    downNext: function tab_RelativeDateFilter$downNext() {
        this._spin$3(this.inputNextn, false);
    },
    
    _localize$3: function tab_RelativeDateFilter$_localize$3() {
        tableau.util.localizeDojoLabeledControls([ new ss.Tuple(this.buttonYear, 'RelDateFilterYears'), new ss.Tuple(this.buttonQuarter, 'RelDateFilterQuarters'), new ss.Tuple(this.buttonMonth, 'RelDateFilterMonths'), new ss.Tuple(this.buttonWeek, 'RelDateFilterWeeks'), new ss.Tuple(this.buttonDay, 'RelDateFilterDays'), new ss.Tuple(this.buttonHour, 'RelDateFilterHours'), new ss.Tuple(this.buttonMinute, 'RelDateFilterMinutes') ]);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RelativeDatePickFilter

tab.RelativeDatePickFilter = function tab_RelativeDatePickFilter(oProps) {
    this.templateString = "<div class='RelativeDatePickFilter'>" + "<div dojoAttachPoint='domBox' class='RelativeDatePickFilterBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<div class='FilterTitle' dojoAttachPoint='domTitleBar'></div>" + "<div dojoType='dijit.form.Button' class='RDFButton RDFMenuButton' name='type' dojoAttachPoint='menuButton'" + "dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'></div>" + "<div class='PicklistContentDiv tab-ctrl-formatted-coloronly' dojoAttachPoint='domPicker'></div>" + '</div>' + '</div>' + '</div>';
    tab.RelativeDatePickFilter.initializeBase(this);
}
tab.RelativeDatePickFilter.prototype = {
    widgetsInTemplate: true,
    session: null,
    field: '',
    stateId: 0,
    rid: 0,
    timestamp: 0,
    currentRange: null,
    _titleH$2: 0,
    _titleW$2: 0,
    layoutSession: null,
    zid: 0,
    filterViewModel: null,
    currentAbbrev: null,
    showContextMenu: null,
    disposables: null,
    getContextMenuCommands: null,
    periodType: null,
    rangeType: null,
    rangeN: 0,
    domPicker: null,
    getSID: null,
    _currentDiv$2: null,
    menuButton: null,
    
    get_filterViewModel: function tab_RelativeDatePickFilter$get_filterViewModel() {
        return this.filterViewModel;
    },
    
    postCreate: function tab_RelativeDatePickFilter$postCreate() {
        if (this.filterViewModel.get_filterType() !== 'RelativeDatePick') {
            tab.Log.get(this).warn('Incompatible filter view model type for RelativeDatePickFilter: %s', this.filterViewModel.get_filterType());
        }
        var buttonCount = 0;
        this.disposables = new tab.DisposableHolder();
        this.getSID = ss.Delegate.create(this, function() {
            return this.stateId;
        });
        this.timestamp = new Date().getMilliseconds();
        this.initFromState();
        var processButton = function(button, hide) {
            if (hide) {
                dojo.addClass(button.domNode, 'RDFButtonHide');
            }
            else {
                buttonCount += 1;
                dojo.addClass(button.domNode, 'RDFButtonR' + buttonCount);
            }
        };
        processButton(this.menuButton, this.shouldHideContextMenu());
        $(this.menuButton.domNode).css('background-color', this.backgroundColor);
    },
    
    shouldHideDomainButton: function tab_RelativeDatePickFilter$shouldHideDomainButton() {
        return true;
    },
    
    shouldHideContextMenu: function tab_RelativeDatePickFilter$shouldHideContextMenu() {
        var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
        return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || !commandsWrapper.get_commandItems().length;
    },
    
    dispose: function tab_RelativeDatePickFilter$dispose() {
        this.disposables.dispose();
        this.showContextMenu = null;
    },
    
    destroy: function tab_RelativeDatePickFilter$destroy(preserveDom) {
        this.dispose();
        this.domPicker.innerHTML = '';
        this.inherited(arguments);
    },
    
    getMetrics: function tab_RelativeDatePickFilter$getMetrics() {
        var oSize = dojo.marginBox(this.domNode);
        return { fixed: tab.$create_Size(0, oSize.h) };
    },
    
    initFromState: function tab_RelativeDatePickFilter$initFromState() {
        this.currentRange = this.oFilter.table;
        this.currentAbbrev = this.toAbbrev(this.currentRange);
        this.domPicker.innerHTML = '';
        var title = tableau.format.formatColumnDisplayName(this.oFilter, false);
        dojo.attr(this.domTitleBar, 'title', title);
        this.updateTitleBar();
        _.each(tab.RelativeDatePickFilter.pickerStrings, ss.Delegate.create(this, function(pickerStr, i) {
            var div = document.createElement('div');
            div.innerHTML = tableau.format.escapeHTML(pickerStr);
            dojo.addClass(div, 'PickLabel');
            dojo.addClass(div, 'tab-ctrl-formatted-border-hover');
            this.domPicker.appendChild(div);
            var jqueryDiv = $(div);
            var clickHandler = ss.Delegate.create(this, function(evt) {
                this.onClick(i, evt);
            });
            this.disposables.add(spiff.EventUtil.bindWithDispose(jqueryDiv, 'click', clickHandler));
            if (this.currentAbbrev === tab.RelativeDatePickFilter.pickerDurations[i]) {
                this._selectPick$2(div);
                this._currentDiv$2 = div;
            }
        }));
        this.layout();
    },
    
    _selectPick$2: function tab_RelativeDatePickFilter$_selectPick$2(div) {
        dojo.addClass(div, 'Selected');
        dojo.addClass(div, 'tab-ctrl-formatted-widget');
        dojo.removeClass(div, 'tab-ctrl-formatted-border-hover');
        dojo.addClass(div, 'tab-ctrl-formatted-darker-border-hover');
    },
    
    _unselectPick$2: function tab_RelativeDatePickFilter$_unselectPick$2(div) {
        dojo.removeClass(div, 'Selected');
        dojo.removeClass(div, 'tab-ctrl-formatted-widget');
        dojo.addClass(div, 'tab-ctrl-formatted-border-hover');
        dojo.removeClass(div, 'tab-ctrl-formatted-darker-border-hover');
    },
    
    formatTuple: function tab_RelativeDatePickFilter$formatTuple(tuple) {
        return tableau.format.formatTupleDisplayName(tuple, true, this.oFilter.role);
    },
    
    toAbbrev: function tab_RelativeDatePickFilter$toAbbrev(rangeHash) {
        var n = rangeHash.rangeN.toString();
        var s = '';
        switch (rangeHash.rangeType) {
            case 'curr':
                s = '0';
                break;
            case 'lastn':
                s = '-' + n;
                break;
            case 'nextn':
                s = n;
                break;
            default:
                return '';
        }
        switch (rangeHash.periodType) {
            case 'year':
                s += 'y';
                break;
            case 'quarter':
                s += 'q';
                break;
            case 'month':
                s += 'm';
                break;
            case 'week':
                s += 'w';
                break;
            case 'day':
                s += 'd';
                break;
            case 'hour':
                s += 'h';
                break;
            default:
                return '';
        }
        return s;
    },
    
    onClick: function tab_RelativeDatePickFilter$onClick(pickedIndex, e) {
        var numberOfDays = tab.RelativeDatePickFilter.pickerDurationsInteger[pickedIndex];
        if (e.target !== this._currentDiv$2) {
            if (ss.isValue(this._currentDiv$2)) {
                this._unselectPick$2(this._currentDiv$2);
            }
            this._selectPick$2(e.target);
            tab.FilterClientCommands.doRelativeDateQuickFilter(this.session.get_visualId(), this.field, 'day', 'lastn', numberOfDays);
        }
    },
    
    hideEmptyTitlebar: function tab_RelativeDatePickFilter$hideEmptyTitlebar() {
        return String.isNullOrEmpty(tableau.format.formatColumnDisplayName(this.oFilter, false));
    },
    
    doMenu: function tab_RelativeDatePickFilter$doMenu() {
        this.showContextMenu(this.menuButton.domNode);
    },
    
    setTitleSize: function tab_RelativeDatePickFilter$setTitleSize(newH, newW) {
        this._titleH$2 = newH;
        this._titleW$2 = newW;
    },
    
    adjustLabelPickWidth: function tab_RelativeDatePickFilter$adjustLabelPickWidth(totalWidth) {
        var labelSize = Math.floor((totalWidth - 1) / tab.RelativeDatePickFilter.pickerDurations.length);
        dojo.forEach(this.domPicker.childNodes, function(node) {
            dojo.style(node, 'width', (labelSize - 3) + 'px');
        });
    },
    
    layout: function tab_RelativeDatePickFilter$layout() {
        var width;
        dojo.removeClass(this.domNode, 'RDPFHorizontal');
        this.updateTitleBar();
        var oPickSize = dojo.marginBox(this.domPicker);
        if (!ss.isValue(oPickSize) || !ss.isValue(oPickSize.w) || !oPickSize.w) {
            return;
        }
        var oTitleBar = dojo.marginBox(this.domTitleBar);
        this.resetTitleSize();
        if (this._titleH$2 > 0) {
            oTitleBar.h = this._titleH$2;
            dojo.marginBox(this.domTitleBar, { h: oTitleBar.h });
        }
        if (this._titleW$2 > 0) {
            oTitleBar.w = this._titleW$2;
            dojo.marginBox(this.domTitleBar, { w: oTitleBar.w });
        }
        tableau.util.setupTitleEllipsis($(this.domTitleBar));
        var oZoneSize = dojo.contentBox(this.domNode);
        width = oZoneSize.w;
        if (!this.hideEmptyTitlebar() && this._titleW$2 > 0) {
            dojo.addClass(this.domNode, 'RDPFHorizontal');
            dojo.style(this.domTitleBar, 'float', 'left');
            dojo.style(this.domPicker, 'float', 'left');
            width = oZoneSize.w - oTitleBar.w;
        }
        else {
            dojo.style(this.domTitleBar, 'float', 'none');
            dojo.style(this.domPicker, 'float', 'none');
        }
        dojo.contentBox(this.domPicker, { w: width });
        this.adjustLabelPickWidth(width);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SearchWidgetBase

tab.SearchWidgetBase = function tab_SearchWidgetBase() {
    this.CANCEL_SEARCH_TOOLTIP = tab.Strings.QuickFilterSearchCancel;
    this.SEARCH_TOOLTIP = tab.Strings.QuickFilterSearchTooltip;
    this.ADD_ITEM_CTRL_ENTER = tab.Strings.QuickFilterSearchAddItemCtrlEnter;
    this.ADD_ITEM_ENTER = tab.Strings.QuickFilterSearchAddItemEnter;
    this.XBUTTON_CLOSE_TOOLTIP = tab.Strings.QuickFilterSearchCloseTooltip;
    this.XBUTTON_CLEAR_TOOLTIP = tab.Strings.QuickFilterSearchClearTooltip;
    this.NO_MATCHES = tab.Strings.QuickFilterSearchNoMatches;
    this.resultCount = tab.SearchWidgetBase.noSearchPerformed;
    tab.SearchWidgetBase.initializeBase(this);
}
tab.SearchWidgetBase.prototype = {
    isContainer: false,
    domXButton: null,
    isVisible: false,
    qf: null,
    oResults: null,
    searchDelay: 400,
    busy_gif_url: null,
    _isTypeInList: false,
    
    get_domXButton: function tab_SearchWidgetBase$get_domXButton() {
        return this.domXButton;
    },
    
    get_isVisible: function tab_SearchWidgetBase$get_isVisible() {
        return this.isVisible;
    },
    set_isVisible: function tab_SearchWidgetBase$set_isVisible(value) {
        this.isVisible = value;
        return value;
    },
    
    get_qf: function tab_SearchWidgetBase$get_qf() {
        return this.qf;
    },
    set_qf: function tab_SearchWidgetBase$set_qf(value) {
        this.qf = value;
        return value;
    },
    
    get_dijitDomNode: function tab_SearchWidgetBase$get_dijitDomNode() {
        return this.domNode;
    },
    
    get_oResults: function tab_SearchWidgetBase$get_oResults() {
        return this.oResults;
    },
    set_oResults: function tab_SearchWidgetBase$set_oResults(value) {
        this.oResults = value;
        return value;
    },
    
    get_dijitClassName: function tab_SearchWidgetBase$get_dijitClassName() {
        return this.declaredClass;
    },
    
    postMixInProperties: function tab_SearchWidgetBase$postMixInProperties() {
        this.inherited(arguments);
        this.busy_gif_url = tableau.util.assetUrl('/images/busy.gif');
    },
    
    postCreate: function tab_SearchWidgetBase$postCreate() {
        this._isTypeInList = !!this.get_qf() && this.get_qf().get_isTypeInList();
    },
    
    resize: function tab_SearchWidgetBase$resize(marginBox) {
        dojo.marginBox(this.domNode, marginBox);
        this.layout();
    },
    
    onQueryBoxKeyDown: function tab_SearchWidgetBase$onQueryBoxKeyDown(evt) {
        var behavior = this.getOnQueryBoxKeyDownBehavior(evt);
        if (!!behavior) {
            if (behavior.stopEvent) {
                dojo.stopEvent(evt);
            }
            if (!!behavior.functionToCall) {
                window.setTimeout(behavior.functionToCall, 10);
            }
        }
    },
    
    getOnQueryBoxKeyDownBehavior: function tab_SearchWidgetBase$getOnQueryBoxKeyDownBehavior(keyEvent) {
        var result = {};
        result.functionToCall = null;
        result.stopEvent = false;
        switch (keyEvent.keyCode) {
            case dojo.keys.ENTER:
                result.stopEvent = true;
                break;
            case dojo.keys.ESCAPE:
                this.onXButtonClick(null);
                result.stopEvent = true;
                break;
            case dojo.keys.SHIFT:
                result.stopEvent = true;
                break;
            case dojo.keys.CTRL:
                result.stopEvent = true;
                break;
            default:
                result.functionToCall = ss.Delegate.create(this, this.handleNonCommandKeyDown);
                break;
        }
        return result;
    },
    
    handleNonCommandKeyDown: function tab_SearchWidgetBase$handleNonCommandKeyDown(evt) {
        this._updateXButtonTooltip$1();
    },
    
    onXButtonClick: function tab_SearchWidgetBase$onXButtonClick(evt) {
        if (!this._isTypeInList) {
            var queryStr = this.getQuery();
            this.hideUI();
            if (!!queryStr) {
                this.showUI();
            }
        }
        else {
            this.clearSearch();
        }
    },
    
    onButtonHover: function tab_SearchWidgetBase$onButtonHover(evt) {
        dojo.addClass(evt.target, 'Hover');
    },
    
    onButtonUnhover: function tab_SearchWidgetBase$onButtonUnhover(evt) {
        dojo.removeClass(evt.target, 'Hover');
    },
    
    toggleUI: function tab_SearchWidgetBase$toggleUI() {
        if (this.get_isVisible()) {
            this.hideUI();
        }
        else {
            this.showUI();
        }
    },
    
    isShowingResults: function tab_SearchWidgetBase$isShowingResults() {
        return this.isVisible && this.resultCount > 0;
    },
    
    showUI: function tab_SearchWidgetBase$showUI(noLayout) {
        if (this.get_isVisible()) {
            return;
        }
        dojo.style(this.domNode, 'display', 'block');
        this.isVisible = true;
        if (!noLayout) {
            this.get_qf().layout();
        }
        this.focusQueryBox();
    },
    
    hideUI: function tab_SearchWidgetBase$hideUI() {
        if (!this.get_isVisible()) {
            return;
        }
        this.clearSearch(false, true);
        dojo.style(this.domNode, 'display', 'none');
        this.blurQueryBox();
        this.isVisible = false;
        this.get_qf().layout();
    },
    
    clearSearch: function tab_SearchWidgetBase$clearSearch(preserveQueryBoxText, noFocus) {
        if (!preserveQueryBoxText) {
            this.setQuery('');
            this._updateXButtonTooltip$1();
        }
        this.resultCount = 0;
        this.get_qf().layout();
        if (!noFocus) {
            this.focusQueryBox();
        }
    },
    
    doCategoricalSearch: function tab_SearchWidgetBase$doCategoricalSearch(query) {
        var filter = this.get_qf().get_oFilter();
        var itemName = this.makeUniqueSearchItemIdPrefix();
        var resultsFormatter = ss.Delegate.create(this, function(t, displayName, index) {
            return tableau.FilterItem.getSearchResultHtml(this.get_qf(), t, itemName, index);
        });
        return tab.LocalSearch.findMatches(query, filter, ss.Delegate.create(this, this.formatTuple), resultsFormatter);
    },
    
    _updateXButtonTooltip$1: function tab_SearchWidgetBase$_updateXButtonTooltip$1() {
        if (String.isNullOrEmpty(this.getQuery()) && !this._isTypeInList) {
            this.get_domXButton().title = this.XBUTTON_CLOSE_TOOLTIP;
        }
        else {
            this.get_domXButton().title = this.XBUTTON_CLEAR_TOOLTIP;
        }
    },
    
    formatTuple: function tab_SearchWidgetBase$formatTuple(tuple) {
        return tableau.format.formatTupleDisplayName(tuple, true, this.get_qf().get_oFilter().role);
    },
    
    isSingleSelect: function tab_SearchWidgetBase$isSingleSelect() {
        return this.get_qf().isSingleSelect();
    },
    
    makeUniqueSearchItemIdPrefix: function tab_SearchWidgetBase$makeUniqueSearchItemIdPrefix() {
        return tab.FilterItemUtil.getBaseItemName(this.get_qf(), 'SI');
    },
    
    currentDomain: function tab_SearchWidgetBase$currentDomain() {
        var domain = tableau.types.QFDomain.QFD_ALL;
        if (!!this.get_qf().get_attributes()) {
            domain = this.get_qf().get_attributes()['values'];
        }
        return domain;
    },
    
    doAjaxRemoteSearch: function tab_SearchWidgetBase$doAjaxRemoteSearch(query, maxRows, shouldGetIndex, handleResults, handleResultsError) {
        return this.get_qf().get_session().searchFilter(this.get_qf().get_field(), query, maxRows, shouldGetIndex, this.currentDomain(), handleResults, handleResultsError);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SearchWidget

tab.SearchWidget = function tab_SearchWidget(props, dom) {
    this.templateString = "<div class='Search'>" + "<div class='SearchBox tab-ctrl-formatted-border tab-ctrl-formatted-darker-border-hover' dojoAttachPoint='domQuerySection'>" + "<textarea rows='1' class='QueryBox' spellcheck='false'" + "dojoAttachPoint='domQueryBox'" + "dojoAttachEvent='onkeydown:onQueryBoxKeyDown,onpaste:onQueryBoxPaste'></textarea>" + "<span class='wcSearchX' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<img class='searchBusyImg' title='${CANCEL_SEARCH_TOOLTIP}' src='${busy_gif_url}'" + "dojoAttachPoint='domSearchBusyImg'" + "dojoAttachEvent='onclick:onSearchBusyImgClick'></img>" + "<span class='wcIconSearch' title='${SEARCH_TOOLTIP}'" + "dojoAttachPoint='domSearchButton'" + "dojoAttachEvent='onclick:onSearchButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<span class='wcIconSearchAdd' title='${ADD_ITEM_CTRL_ENTER}'" + "dojoAttachPoint='domSearchAddButton'" + "dojoAttachEvent='onclick:onSearchAddButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + '</div>' + "<div class='SearchResults' dojoAttachPoint='domResults' dojoAttachEvent='onclick:onListItemClick'></div>" + '</div>';
    tab.SearchWidget.initializeBase(this);
    this._categoricalSelectionBehavior$2 = new tab.CategoricalSelection(this);
}
tab.SearchWidget.prototype = {
    domQuerySection: null,
    domQueryBox: null,
    domSearchAddButton: null,
    domSearchButton: null,
    domSearchBusyImg: null,
    domResults: null,
    _categoricalSelectionBehavior$2: null,
    applyDelay: 500,
    _searchResultsMaxRows$2: 100,
    _bSearching: false,
    _queryBoxPasteTimeout: null,
    _searchTimer: null,
    _isFilterSearchable: false,
    _initializedSearchResults: false,
    _domResultsPBExtents: null,
    _lastRemoteSearch: null,
    
    get_applyDelay: function tab_SearchWidget$get_applyDelay() {
        return this.applyDelay;
    },
    
    get_isPendingMode: function tab_SearchWidget$get_isPendingMode() {
        return false;
    },
    
    get_filterTable: function tab_SearchWidget$get_filterTable() {
        return (!!this.get_oResults()) ? this.get_oResults() : null;
    },
    
    get_quickFilter: function tab_SearchWidget$get_quickFilter() {
        return this.get_qf();
    },
    
    shouldDeferChanges: function tab_SearchWidget$shouldDeferChanges() {
        return false;
    },
    
    postCreate: function tab_SearchWidget$postCreate() {
        this.inherited(arguments);
        if (this._isTypeInList) {
            this.showUI(true);
        }
        this._isFilterSearchable = true;
        if (!!this.get_qf() && this._isTypeInList) {
            this._isFilterSearchable = this.get_qf().get_oFilter().is_searchable;
        }
        if (this._isFilterSearchable) {
            this.domSearchAddButton.title = this.ADD_ITEM_CTRL_ENTER;
        }
        else {
            this.domSearchAddButton.title = this.ADD_ITEM_ENTER;
        }
        this.setQueryIconsVisibility(true);
        tableau.util.disableTextSelection(this.domResults);
    },
    
    destroy: function tab_SearchWidget$destroy() {
        if (ss.isValue(this.domResults)) {
            this.domResults.innerHTML = '';
        }
        this.inherited(arguments);
    },
    
    onQueryBoxPaste: function tab_SearchWidget$onQueryBoxPaste(someEvent) {
        if (!!this._queryBoxPasteTimeout) {
            window.clearTimeout(this._queryBoxPasteTimeout);
            this._queryBoxPasteTimeout = null;
        }
        this._queryBoxPasteTimeout = window.setTimeout(ss.Delegate.create(this, this._handleQueryBoxPaste), 10);
    },
    
    _handleQueryBoxPaste: function tab_SearchWidget$_handleQueryBoxPaste() {
        var items;
        var pastedText;
        pastedText = this.getQuery();
        pastedText = pastedText.replace('/\r\n/g', '\n');
        items = pastedText.split('\n');
        if (items.length > 1) {
            this.addManualSearchItems(items);
        }
    },
    
    getOnQueryBoxKeyDownBehavior: function tab_SearchWidget$getOnQueryBoxKeyDownBehavior(keyEvent) {
        var result;
        result = this.inherited(arguments);
        switch (keyEvent.keyCode) {
            case dojo.keys.ESCAPE:
                if (dojo.isFF) {
                    result.functionToCall = ss.Delegate.create(this, this.onXButtonClick);
                }
                break;
            case dojo.keys.ENTER:
                if (this._isTypeInList) {
                    result.stopEvent = true;
                    result.functionToCall = this._getEnterKeyDownBehaviorOnTypeInList(keyEvent);
                }
                break;
        }
        return result;
    },
    
    _getEnterKeyDownBehaviorOnTypeInList: function tab_SearchWidget$_getEnterKeyDownBehaviorOnTypeInList(keyEvent) {
        if (keyEvent.ctrlKey) {
            return ss.Delegate.create(this, this.onSearchAddButtonClick);
        }
        if (this._isFilterSearchable) {
            return ss.Delegate.create(this, this.onSearchButtonClick);
        }
        return ss.Delegate.create(this, this.onSearchAddButtonClick);
    },
    
    handleNonCommandKeyDown: function tab_SearchWidget$handleNonCommandKeyDown(evt) {
        this.inherited(arguments);
        if (this._isTypeInList) {
            this.clearSearch(true);
        }
        if (!this._isTypeInList) {
            this._startSearchTimer$2();
        }
    },
    
    onSearchAddButtonClick: function tab_SearchWidget$onSearchAddButtonClick(evt) {
        this.addManualSearchItems(null);
    },
    
    onSearchButtonClick: function tab_SearchWidget$onSearchButtonClick(evt) {
        this.doSearch();
    },
    
    onSearchBusyImgClick: function tab_SearchWidget$onSearchBusyImgClick(evt) {
        this._cancelRemoteSearch$2();
    },
    
    focusQueryBox: function tab_SearchWidget$focusQueryBox() {
        this.domQueryBox.focus();
    },
    
    blurQueryBox: function tab_SearchWidget$blurQueryBox() {
        this.domQueryBox.blur();
    },
    
    getQuery: function tab_SearchWidget$getQuery() {
        return this.domQueryBox.value;
    },
    
    setQuery: function tab_SearchWidget$setQuery(value) {
        this.domQueryBox.value = value;
    },
    
    showUI: function tab_SearchWidget$showUI(noLayout) {
        if (this.get_isVisible()) {
            return;
        }
        if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.CategoricalFilter' && !this.get_qf().get_oFilter().table.tuples.length && !this._isTypeInList) {
            return;
        }
        this.inherited(arguments);
    },
    
    clearSearch: function tab_SearchWidget$clearSearch(preserveQueryBoxText, noFocus) {
        dojo.style(this.domResults, 'display', 'none');
        this.domResults.innerHTML = '';
        this.clearRangeAnchorAndSelection();
        this._cancelRemoteSearch$2();
        this.inherited(arguments);
    },
    
    setQueryIconsVisibility: function tab_SearchWidget$setQueryIconsVisibility(initialLoad) {
        var isTypeIn = this._isTypeInList;
        var resultsVisible = (!!initialLoad && initialLoad) ? false : tableau.util.isElementVisible(this.domResults);
        var typeInSearchButtonsVisible = (!String.isNullOrEmpty(this.getQuery()) && isTypeIn && !resultsVisible);
        var addButtonVisible = typeInSearchButtonsVisible;
        var searchButtonsVisible = (typeInSearchButtonsVisible && this._isFilterSearchable);
        dojo.style(this.domSearchBusyImg, 'display', (searchButtonsVisible && this._bSearching) ? 'block' : 'none');
        dojo.style(this.domSearchButton, 'display', (searchButtonsVisible && !this._bSearching) ? 'block' : 'none');
        dojo.style(this.domSearchAddButton, 'display', (addButtonVisible) ? 'block' : 'none');
        var xButtonDisplay = (isTypeIn && !resultsVisible) ? 'none' : 'block';
        dojo.style(this.get_domXButton(), 'display', xButtonDisplay);
        this.fixQueryWidth();
    },
    
    fetchChildNodeByIndex: function tab_SearchWidget$fetchChildNodeByIndex(index) {
        var items = this.domResults.childNodes;
        for (var i = 0, len = items.length; i < len; i++) {
            if (tableau.FilterItem.getIndex(items[i]) === index) {
                return items[i];
            }
        }
        return null;
    },
    
    layout: function tab_SearchWidget$layout(listHeight) {
        this.setQueryIconsVisibility();
        var itemHeight = this._getItemHeight$2();
        if (this._isTypeInList || this.get_qf().get_mode() === 'checkdropdown') {
            this._positionTypeInListSearchResults$2(itemHeight);
        }
        else if (!!itemHeight) {
            this._setIntegralHeight$2(listHeight / itemHeight, itemHeight);
        }
    },
    
    fixQueryWidth: function tab_SearchWidget$fixQueryWidth() {
        var xButtonVisible = tableau.util.isElementVisible(this.get_domXButton());
        var addButtonVisible = tableau.util.isElementVisible(this.domSearchAddButton);
        var searchButtonVisible = tableau.util.isElementVisible(this.domSearchButton);
        var spinnerVisible = tableau.util.isElementVisible(this.domSearchBusyImg);
        var iconsWidth = 0;
        if (xButtonVisible) {
            iconsWidth += dojo.marginBox(this.get_domXButton()).w;
        }
        if (addButtonVisible) {
            iconsWidth += dojo.marginBox(this.domSearchAddButton).w;
        }
        if (searchButtonVisible) {
            iconsWidth += dojo.marginBox(this.domSearchButton).w;
        }
        if (spinnerVisible) {
            iconsWidth += dojo.marginBox(this.domSearchBusyImg).w;
        }
        dojo.marginBox(this.domQueryBox, { w: dojo.contentBox(this.domQuerySection).w - iconsWidth - 1 });
    },
    
    _positionTypeInListSearchResults$2: function tab_SearchWidget$_positionTypeInListSearchResults$2(itemHeight) {
        var vizContainer = dojo.query('.tab-dashboard')[0];
        if (!this._initializedSearchResults) {
            this._initializedSearchResults = true;
            vizContainer.appendChild(this.domResults);
            dojo.style(this.domResults, { position: 'absolute', zIndex: '987' });
            this._domResultsPBExtents = dojo._getPadBorderExtents(this.domResults);
        }
        var querySectionBox = dojo.coords(this.domQuerySection);
        var offset = $(this.domQuerySection).offset();
        var vizOffset = $(vizContainer).offset();
        var querySectionTop = offset.top - vizOffset.top;
        var querySectionBottom = querySectionTop + querySectionBox.h;
        var viewport = dojo.coords(vizContainer);
        var viewportBottom = viewport.t + viewport.h;
        var minHeight = itemHeight + this._domResultsPBExtents.h;
        var optimalHeight = (this.domResults.childNodes.length * itemHeight) + this._domResultsPBExtents.h;
        var availableBelow = viewportBottom - querySectionBottom;
        var availableAbove = querySectionTop - viewport.t;
        var popupBelow = true;
        var height = Math.min(optimalHeight, availableBelow);
        if (height < minHeight && availableAbove > availableBelow) {
            height = Math.min(optimalHeight, availableAbove);
            popupBelow = false;
        }
        height = Math.max(height, minHeight);
        dojo.marginBox(this.domResults, { w: querySectionBox.w, h: height });
        var top = (popupBelow) ? querySectionBottom : querySectionTop - height;
        var left = offset.left - vizOffset.left;
        dojo.style(this.domResults, { top: top.toString() + 'px', left: left.toString() + 'px', borderTopWidth: (popupBelow) ? '0' : '1px', borderBottomWidth: (popupBelow) ? '1px' : '0' });
    },
    
    _setIntegralHeight$2: function tab_SearchWidget$_setIntegralHeight$2(totalLines, itemHeight) {
        var minLines = Math.max(this.domResults.childNodes.length, 1);
        var linesForResults = Math.min(minLines, Math.floor(totalLines / 2));
        dojo.style(this.domResults, 'height', (linesForResults * itemHeight).toString() + 'px');
    },
    
    _getItemHeight$2: function tab_SearchWidget$_getItemHeight$2() {
        if (!!this.domResults.firstChild) {
            if (!!this.domResults.firstChild.offsetHeight && !!this.domResults.firstChild.offsetHeight) {
                return this.domResults.firstChild.offsetHeight;
            }
            else {
                return 15;
            }
        }
        return 0;
    },
    
    _startSearchTimer$2: function tab_SearchWidget$_startSearchTimer$2() {
        if (!!this._searchTimer) {
            window.clearTimeout(this._searchTimer);
            this._searchTimer = null;
        }
        this._searchTimer = window.setTimeout(ss.Delegate.create(this, this.doSearch), this.searchDelay);
    },
    
    showSearchSpinner: function tab_SearchWidget$showSearchSpinner(show) {
        this._bSearching = show;
        this.setQueryIconsVisibility();
    },
    
    addManualSearchItems: function tab_SearchWidget$addManualSearchItems(items) {
        if (this.get_qf().get_dijitDeclaredClass() !== 'tableau.base.widget.CategoricalFilter') {
            return;
        }
        if (tab.MiscUtil.isNullOrUndefined(items)) {
            items = this.getQuery().split('\n');
        }
        if (tab.MiscUtil.isNullOrEmpty(items)) {
            return;
        }
        var newTuples = [];
        for (var i = 0, length = items.length; i < length; i++) {
            var item = items[i];
            if (!tab.MiscUtil.isNullOrEmpty(item)) {
                newTuples.push(tab.$create_TupleStruct(item, true, [ tab.$create_DataValueStruct('s', item) ]));
            }
        }
        var changed = {};
        changed.schema = this.get_qf().get_oFilter().table.schema;
        changed.tuples = newTuples;
        this.notifyParentFilterOfChanged(changed, true);
        this.clearSearch();
    },
    
    doSearch: function tab_SearchWidget$doSearch() {
        this.searchWithQuery(this.getQuery());
    },
    
    updateSearch: function tab_SearchWidget$updateSearch() {
        if (this.get_isVisible() && this.resultCount > 0) {
            this.searchWithQuery(this.getQuery());
        }
    },
    
    searchWithQuery: function tab_SearchWidget$searchWithQuery(query) {
        if (query.length <= 0) {
            this.clearSearch();
        }
        else if (this.get_qf().get_dijitDeclaredClass().indexOf('CategoricalFilter') > -1 && !this._isTypeInList) {
            if (this.get_qf().get_oFilter().isTiled) {
                this.doRemoteSearch(query, true);
            }
            else {
                this.handleSearchResults(this.doCategoricalSearch(query));
            }
        }
        else {
            this.doRemoteSearch(query, false);
        }
    },
    
    doRemoteSearch: function tab_SearchWidget$doRemoteSearch(query, shouldGetIndex) {
        this.showSearchSpinner(this._isTypeInList);
        this._lastRemoteSearch = this.doAjaxRemoteSearch(query, this._searchResultsMaxRows$2, shouldGetIndex, ss.Delegate.create(this, this.handleSearchResults), ss.Delegate.create(this, this.handleSearchResultsError));
    },
    
    _cancelRemoteSearch$2: function tab_SearchWidget$_cancelRemoteSearch$2() {
        if (!!this._lastRemoteSearch) {
            this._lastRemoteSearch.abort();
            this._lastRemoteSearch = null;
        }
        this.showSearchSpinner(false);
    },
    
    _addNotShownCountDiv$2: function tab_SearchWidget$_addNotShownCountDiv$2(html, shownCount, actualCount) {
        var esc = tableau.format.escapeHTML;
        if (!ss.isNullOrUndefined(actualCount) && shownCount < actualCount) {
            var notShownCount = actualCount - shownCount;
            html.push('<div class="searchResultsRemaining">');
            if (!notShownCount) {
                html.push(esc(tab.Strings.QuickFilterSearchResultsNotShownZero));
            }
            else if (notShownCount === 1) {
                html.push(esc(tab.Strings.QuickFilterSearchResultsNotShownSingular));
            }
            else {
                var notShownCountFormatted = tableau.format.formatIntAuto(notShownCount, 't', ',', '3;0');
                html.push(esc(tab.Strings.QuickFilterSearchResultsNotShownPlural(notShownCountFormatted)));
            }
            html.push('</div>');
        }
    },
    
    _searchResultsToHtml$2: function tab_SearchWidget$_searchResultsToHtml$2(data) {
        if (data.length <= 0) {
            return ([]);
        }
        this.set_oResults(data);
        var t = this.get_oResults().tuples;
        var ti = this.get_oResults().indices;
        var resultsHtml = [];
        var itemName = this.makeUniqueSearchItemIdPrefix();
        for (var i = 0, len = t.length; i < len; i++) {
            var index = (!!ti) ? ti[i] : i;
            var itemHtml = tableau.FilterItem.getSearchResultHtml(this.get_qf(), t[i], itemName, index);
            resultsHtml.push(itemHtml);
        }
        this._addNotShownCountDiv$2(resultsHtml, t.length, data.actual_size);
        return resultsHtml;
    },
    
    handleSearchResults: function tab_SearchWidget$handleSearchResults(data) {
        var esc = tableau.format.escapeHTML;
        var noMatchHTML = tab.Strings.QuickFilterSearchNoMatches;
        this.showSearchSpinner(false);
        if (!!data && data.dojoType === 'cancel') {
            return;
        }
        this.domResults.innerHTML = '';
        if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.HierarchicalFilter' || this._isTypeInList || this.get_qf().get_oFilter().isTiled) {
            if (!!data.schema[0].collation && !data.schema[0].collation.f) {
                noMatchHTML = '<div>' + esc(noMatchHTML) + '<br/>' + esc(tab.Strings.QuickFilterSearchDataIsCaseSensitive) + '</div>';
            }
            data = this._searchResultsToHtml$2(data);
        }
        this.resultCount = data.length;
        this.domResults.innerHTML = (this.resultCount > 0) ? data.join('') : noMatchHTML;
        dojo.style(this.domResults, 'display', (this.domResults.innerHTML.length > 0) ? 'block' : 'none');
        this.setQueryIconsVisibility();
        this.get_qf().layout();
        this._categoricalSelectionBehavior$2.refreshRangeAnchorAndSelection();
    },
    
    handleSearchResultsError: function tab_SearchWidget$handleSearchResultsError(response) {
        this.showSearchSpinner(false);
        this.domResults.innerHTML = '';
        this.resultCount = 0;
    },
    
    applyChanges: function tab_SearchWidget$applyChanges() {
        var changed = null;
        if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.CategoricalFilter' && !this._isTypeInList) {
            changed = this.applyChangesCat();
        }
        else {
            changed = this.applyChangesHierOrTypeIn();
        }
        this.notifyParentFilterOfChanged(changed);
    },
    
    applyChangesByChangelist: function tab_SearchWidget$applyChangesByChangelist(changelist) {
        if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.CategoricalFilter' && !this._isTypeInList) {
            this.get_qf().applyChangesByChangelist(changelist);
        }
        else {
            this.applyChanges();
        }
    },
    
    notifyParentFilterOfChanged: function tab_SearchWidget$notifyParentFilterOfChanged(changed, manualAdd, noServerCall) {
        if (!changed.tuples.length) {
            return;
        }
        this.get_qf().updateStateFromSearch(changed);
        if (noServerCall) {
            return;
        }
        this.get_qf().set_stateId(this.get_qf().get_stateId() + 1);
        if (manualAdd) {
            var handler = ss.Delegate.create(this, this.onManualAddSuccess);
            this.get_qf().get_session().addManualFilterItems(changed, this.get_qf(), handler);
        }
        else {
            var isTypeInAll = this._isTypeInList && this.get_qf().get_oFilter().all;
            var replaceFilter = (isTypeInAll || this.get_qf().isSingleSelect());
            if (replaceFilter) {
                if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.HierarchicalFilter') {
                    this._doModifyHierarchialFilter(replaceFilter, changed);
                }
                else {
                    this.doSetCategoricalFilter(isTypeInAll, changed);
                }
            }
            else {
                if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.HierarchicalFilter') {
                    this._doModifyHierarchialFilter(false, changed);
                }
                else {
                    this.doModifyCategoricalFilter(changed);
                }
            }
        }
    },
    
    doSetCategoricalFilter: function tab_SearchWidget$doSetCategoricalFilter(isTypeInAll, changed) {
        var alias;
        var aliases = [];
        var count = changed.tuples.length;
        if (isTypeInAll) {
            for (var i = 0; i < count; i++) {
                alias = (changed.tuples[i].d || changed.tuples[i].t[0].v);
                if (changed.tuples[i].s) {
                    aliases.push(alias);
                }
            }
        }
        else {
            alias = (changed.tuples[0].d || changed.tuples[0].t[0].v);
            aliases.push(alias);
        }
        tab.FilterClientCommands.setCategoricalFilterValues(this.get_qf().get_session().get_visualId(), this.get_qf().get_field(), 'filter-replace', aliases);
    },
    
    doModifyCategoricalFilter: function tab_SearchWidget$doModifyCategoricalFilter(changed) {
        var addAliases = [];
        var removeAliases = [];
        var count = changed.tuples.length;
        for (var i = 0; i < count; i++) {
            var alias = (changed.tuples[i].d || changed.tuples[i].t[0].v);
            if (changed.tuples[i].s) {
                addAliases.push(alias);
            }
            else {
                removeAliases.push(alias);
            }
        }
        tab.FilterClientCommands.modifyCategoricalFilterValues(this.get_qf().get_session().get_visualId(), this.get_qf().get_field(), addAliases, removeAliases);
    },
    
    _doModifyHierarchialFilter: function tab_SearchWidget$_doModifyHierarchialFilter(replaceFilter, changed) {
        var addAliases = [];
        var removeAliases = [];
        var updateMode = (replaceFilter) ? 'filter-replace' : 'filter-delta';
        var selectionCount = changed.tuples.length;
        var tuples = changed.tuples;
        for (var i = 0; i < selectionCount; i++) {
            var keyCount = tuples[i].t.length;
            var alias = '';
            for (var j = 0; j < keyCount; ++j) {
                var key = tuples[i].t[j];
                if (!!key.v) {
                    alias = key.v;
                }
            }
            if (tuples[i].s) {
                addAliases.push(alias);
            }
            else {
                removeAliases.push(alias);
            }
        }
        tab.FilterClientCommands.doMemberHierarchialFilter(this.get_qf().get_session().get_visualId(), this.get_qf().get_field(), addAliases, removeAliases, updateMode);
    },
    
    applyChangesCat: function tab_SearchWidget$applyChangesCat() {
        var currentState = {};
        currentState.schema = this.get_qf().get_oFilter().table.schema;
        currentState.tuples = [];
        var item = this.domResults.firstChild;
        var length = this.domResults.childNodes.length;
        var listIndex;
        var tuples = this.get_qf().get_oFilter().table.tuples;
        if (this.get_qf().isSingleSelect()) {
            for (var i = 0; i < length; i++, item = item.nextSibling) {
                if (tableau.FilterItem.isChecked(item)) {
                    listIndex = tableau.FilterItem.getIndex(item);
                    this.recordCheckedChanges(currentState, item, tuples[listIndex]);
                    for (var j = 0; j < tuples.length; ++j) {
                        if (j !== listIndex) {
                            tuples[j].s = false;
                        }
                    }
                    break;
                }
            }
        }
        else {
            var indexes = [];
            for (var i = 0; i < length; i++, item = item.nextSibling) {
                listIndex = tableau.FilterItem.getIndex(item);
                this.recordCheckedChanges(currentState, item, tuples[listIndex]);
                indexes[listIndex] = 1;
            }
            item = this.get_qf().get_domContent().firstChild;
            if (tableau.FilterItem.isAllItem(item)) {
                item = item.nextSibling;
            }
            var len = tuples.length;
            for (var i = 0; i < len; i++, item = item.nextSibling) {
                if (!indexes[i]) {
                    this.recordCheckedChanges(currentState, item, tuples[i]);
                }
            }
        }
        return currentState;
    },
    
    applyChangesHierOrTypeIn: function tab_SearchWidget$applyChangesHierOrTypeIn() {
        var currentState = {};
        currentState.schema = this.get_oResults().schema;
        currentState.tuples = [];
        var item = this.domResults.firstChild;
        var tuples = this.get_oResults().tuples;
        for (var i = 0, length = tuples.length; i < length; i++, item = item.nextSibling) {
            this.recordCheckedChanges(currentState, item, tuples[i]);
        }
        return currentState;
    },
    
    onManualAddSuccess: function tab_SearchWidget$onManualAddSuccess(response) {
        var esc = tableau.format.escapeHTML;
        var invalidTuples = response.invalidTuples;
        var length = invalidTuples.length;
        if (ss.isNullOrUndefined(response) || ss.isNullOrUndefined(response.invalidTuples) || ss.isNullOrUndefined(response.totalTuples)) {
            return false;
        }
        if (length > 0) {
            var alertHTML = [];
            if (length === 1) {
                alertHTML.push(esc(tab.Strings.QuickFilterSearchInvalidDataMemberSingular(invalidTuples[0].t[0].v)));
                alertHTML.push('<br/>');
            }
            else {
                alertHTML.push(esc(tab.Strings.QuickFilterSearchInvalidDataMembersPlural));
                alertHTML.push('<br/>');
                for (var i = 0; i < length; i++) {
                    alertHTML.push('&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;');
                    alertHTML.push(invalidTuples[i].t[0].v);
                    alertHTML.push('<br/>');
                }
            }
            tableau.util.showAlertDialog(alertHTML.join(''), tab.Strings.QuickFilterSearchInvalidDataMembersDialogTitle, true);
            var newTuples = [];
            for (var i = 0; i < length; i++) {
                var value = invalidTuples[i].t[0].v;
                newTuples.push(tab.$create_TupleStruct(value, false, invalidTuples[i].t));
            }
            var changed = {};
            changed.schema = this.get_qf().get_oFilter().table.schema;
            changed.tuples = newTuples;
            this.notifyParentFilterOfChanged(changed, true, true);
        }
        return response.totalTuples > length;
    },
    
    updateStateIfNeeded: function tab_SearchWidget$updateStateIfNeeded() {
    },
    
    handleClickIfPending: function tab_SearchWidget$handleClickIfPending(node) {
    },
    
    clearRangeAnchorAndSelection: function tab_SearchWidget$clearRangeAnchorAndSelection() {
        this._categoricalSelectionBehavior$2.clearRangeAnchorAndSelection();
    },
    
    forEachSelected: function tab_SearchWidget$forEachSelected(itemCallback) {
        this._categoricalSelectionBehavior$2.forEachSelected(itemCallback);
    },
    
    onListItemClick: function tab_SearchWidget$onListItemClick(evt) {
        this._categoricalSelectionBehavior$2.onListItemClick(evt);
    },
    
    handleItemClick: function tab_SearchWidget$handleItemClick(node) {
    },
    
    recordCheckedChanges: function tab_SearchWidget$recordCheckedChanges(changedList, item, tuple) {
        if (tableau.FilterItem.isChecked(item) && !tuple.s) {
            changedList.tuples.push(tableau.FilterItem.setChecked(item, true, tuple));
        }
        else if (!tableau.FilterItem.isChecked(item) && tuple.s) {
            changedList.tuples.push(tableau.FilterItem.setChecked(item, false, tuple));
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShareDialog

tab.ShareDialog = function tab_ShareDialog(dialogParams) {
    this.templateString = "<div class='dijitDialog dijitContentPane'>" + "<div dojoAttachPoint='titleBar' class='dijitDialogTitleBar'>" + "<span dojoAttachPoint='titleNode' class='dijitDialogTitle' id='${id}_title'></span>" + "<span dojoAttachPoint='closeButtonNode' class='dijitDialogCloseIcon' dojoAttachEvent='onclick: onCancel' title='${buttonCancel}'>" + "<span dojoAttachPoint='closeText' class='closeText' title='${buttonCancel}'>x</span>" + '</span>' + '</div>' + "<div dojoattachpoint='containerNode' class='dijitDialogPaneContent'>" + "<div class='shareVizTable'>" + "<div class='shareVizHeader'>" + "<span class='shareVizTitle'>${_locDialogTitle}</span>" + tab.ShareDialog._shareVizHeaderLink$4 + '</div>' + "<table class='shareInnerTable'>" + '<tr>' + "<td align='right'>" + "<div class='displayOptions'>" + "<span id='displayOptionsHeader' class='closed' href='/' onclick='tab.ShareDialogUtil.showPopup(); return false;'  onfocus='blur();' tabindex='-1'></span>" + "<span id='superimposedText' class='closed' href='/' onclick='tab.ShareDialogUtil.showPopup(); return false;'>${_locDisplayOptions}</span>" + "<div id='optionsPopup'>" + "<form action='' id='optionsPopupForm' class='selectShareVizOptions'><fieldset style='border:none; margin:0; padding:5px;'><table width='135' border='0' cellspacing='0' cellpadding='0'>" + '<tr>' + "<td><label for='share_width'>${_locWidth}</label></td>" + "<td><input id='share_width' size='5' " + "class='' type='text' name='share_width' title='width' value='425' alt='width' " + "constraints=\"{min:1,max:9999,places:0,pattern:'###0.##'}\" " + "promptMessage= '${_locEnterValueBetween}' " + "required= 'true' " + "tooltipPosition = ['TL':'BL'] " + "invalidMessage= '${_locInvalidWidth}' " + "onkeyup=\"tab.ShareDialogUtil.validateReasonableDimension('share_width', false);\" " + "onblur=\"tab.ShareDialogUtil.validateReasonableDimension('share_width', true);\" " + '/>' + '</td>' + '</tr>' + '<tr>' + "<td><label for='share_height'>${_locHeight}</label></td>" + "<td><input id='share_height' size='5' " + "class='' type='height' name='share_height' title='height' value='350' alt='height' " + "constraints=\"{min:1,max:9999,places:0,pattern:'###0.##'}\" " + "promptMessage= '${_locEnterValueBetween}' " + "required= 'true' " + "tooltipPosition = ['TL':'BL'] " + "invalidMessage= '${_locInvalidHeight}' " + "onkeyup=\"tab.ShareDialogUtil.validateReasonableDimension('share_height', false);\" " + "onblur=\"tab.ShareDialogUtil.validateReasonableDimension('share_height', true);\" " + '/></td>' + '</tr>' + "<tr id='shareShowToolbar'>" + "<td colspan='2'>" + "<label for='share_toolbar' id='share_toolbar_label' class=''>${_locShowToolbar}</label>" + "<input type='checkbox' id='share_toolbar' " + "name='share_toolbar' class='' value='' alt='${_locShowToolbar}' " + "onclick='tab.ShareDialogUtil.doUpdateGenerated();'" + '/></td>' + '</tr>' + "<tr id='shareShowTabs'>" + "<td colspan='2' style='padding-bottom:10px;'>" + "<label id='show_tabs_label' for='show_tabs' class=''>${_locShowTabs}</label>" + "<input type='checkbox' id='show_tabs' " + "name='show_tabs' class='' value='' alt='${_locShowTabs}' " + "onclick='tab.ShareDialogUtil.doUpdateGenerated();'" + '/></td>' + '</tr>' + "<tr id='share_rss_blog_row'>" + "<td colspan='2'>" + "<label style='font-family:Arial, Helvetica, sans-serif; font-weight:normal;' for='share_blog'>${_locUrlForRssLinks}</label><br" + "/><input style='outline:none; margin-bottom:0; width:119px;  font-weight:normal;' id='share_blog' class='' type='text' name='share_blog' title='${_locUrlForRssLinks}' value='' alt='${_locUrlForRssLinks}' promptMessage= '${_locEnterUriForBlogEntry}' required= 'optional' maxLength='255' maxlength='255' onblur='tab.ShareDialogUtil.doUpdateGenerated();'" + '/></td>' + '</tr>' + '</table>' + '</fieldset>' + '</form>' + '</div>' + '</div>' + '</td>' + '</tr>' + "<tr class='share_mobile_only' style='display:none'>" + '<td>' + "<div class='shareVizOption'>${_locLink}</div>" + "<table class='shareVizHelpText'>" + '<tr>' + '<td>' + "<a href='mailto:' id='share_mailto_a' class='tableau wcIconMail'></a>" + '</td><td>' + '${_locShareMobileEmailText}' + '</td>' + '</tr><tr>' + '<td>' + "<a target='_blank' id='share_link_a' class='tableau wcIconLink'></a>" + '</td><td>' + '${_locShareMobileLinkText}' + '</td>' + '</tr>' + '</table>' + '</td>' + '</tr>' + "<tr class='share_web_only'>" + '<td>' + "<span class='shareVizOption'>${_locEmail}</span>" + "<br /><span class='shareVizHelpText'>${_locEmailHelp}</span>" + "<br/><input id='share_link_textbox' class='emailVizURL' readonly='readonly' onclick='this.focus();this.select();return false;'/>" + '</td>' + '</tr>' + '<tr>' + '<td>' + "<span class='shareVizOption'>${_locEmbed}</span>" + "<br /><span class='shareVizHelpText'>${_locEmbedHelp}</span>" + "<br/><input id='share_embed_textbox' class='embedViz' readonly='readonly' onclick='this.focus();this.select();return false;'/>" + '</td>' + '</tr>' + '<tr>' + '<td>' + "<div style='white-space: nowrap;'>" + "<button class='tab-styledButton' onclick='tab.ShareDialogUtil.hideShareDialog(); return false;'>" + "<span class='tab-styledButtonLeft'></span>" + "<span class='tab-styledButtonMiddle'>${_locDone}</span>" + "<span class='tab-styledButtonRight'></span>" + '</button>' + "<span id='dimension_warning' style='font-family:Arial, Helvetica, sans-serif; font-size:10px; font-weight:normal; visibility:hidden; color:red; margin-left:10px;'>${_locPleaseEnterIntegerBetween}</span>" + '</div>' + '</td>' + '</tr>' + '</table>' + '</div><!-- end shareVizTable -->' + '</div>' + '</div>';
    tab.ShareDialog.initializeBase(this);
    this._loadLocalizedStrings();
}
tab.ShareDialog.prototype = {
    _locDialogTitle: null,
    _locDisplayOptions: null,
    _locWidth: null,
    _locHeight: null,
    _locInvalidWidth: null,
    _locInvalidHeight: null,
    _locEnterValueBetween: null,
    _locShowToolbar: null,
    _locShowTabs: null,
    _locUrlForRssLinks: null,
    _locEnterUriForBlogEntry: null,
    _locShareMobileLinkText: null,
    _locShareMobileEmailText: null,
    _locLink: null,
    _locEmail: null,
    _locEmailHelp: null,
    _locEmbed: null,
    _locEmbedHelp: null,
    _locDone: null,
    _locPleaseEnterIntegerBetween: null,
    
    _position: function tab_ShareDialog$_position() {
        var shareButton = $('.wcShareButton');
        if (!$('body').hasClass('Dojo.Ove') && shareButton.length > 0) {
            dijit.placeOnScreenAroundElement(this.domNode, shareButton.get(0), { TL: 'BL', BL: 'TL' });
        }
    },
    
    _loadLocalizedStrings: function tab_ShareDialog$_loadLocalizedStrings() {
        var esc = tableau.format.escapeHTML;
        this._locDialogTitle = esc(tab.Strings.ShareDialogTitle);
        this._locDisplayOptions = esc(tab.Strings.ShareDialogDisplayOptions);
        this._locWidth = esc(tab.Strings.ShareDialogWidth);
        this._locHeight = esc(tab.Strings.ShareDialogHeight);
        this._locInvalidWidth = esc(tab.Strings.ShareDialogInvalidWidth);
        this._locInvalidHeight = esc(tab.Strings.ShareDialogInvalidHeight);
        this._locEnterValueBetween = esc(tab.Strings.ShareDialogEnterValueBetween(1, 10000));
        this._locShowToolbar = esc(tab.Strings.ShareDialogShowToolbar);
        this._locShowTabs = esc(tab.Strings.ShareDialogShowTabs);
        this._locUrlForRssLinks = esc(tab.Strings.ShareDialogUrlForRssLinks);
        this._locEnterUriForBlogEntry = esc(tab.Strings.ShareDialogEnterUriForBlogEntry);
        if (tab.BrowserSupport.get_isAndroid()) {
            this._locShareMobileLinkText = esc(tab.Strings.ShareDialogAndroidLinkText);
        }
        else {
            this._locShareMobileLinkText = esc(tab.Strings.ShareDialogMobileLinkText);
        }
        this._locShareMobileEmailText = esc(tab.Strings.ShareDialogMobileEmailText);
        this._locLink = esc(tab.Strings.ShareDialogLink);
        this._locEmail = esc(tab.Strings.ShareDialogEmail);
        this._locEmailHelp = esc(tab.Strings.ShareDialogEmailHelp);
        this._locEmbed = esc(tab.Strings.ShareDialogEmbed);
        this._locEmbedHelp = esc(tab.Strings.ShareDialogEmbedHelp);
        this._locDone = esc(tab.Strings.ShareDialogDoneButton);
        this._locPleaseEnterIntegerBetween = esc(tab.Strings.ShareDialogPleaseEnterIntegerBetween(1, 10000));
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShareDialogUtil

tab.ShareDialogUtil = function tab_ShareDialogUtil() {
}
tab.ShareDialogUtil.get__baseLocation = function tab_ShareDialogUtil$get__baseLocation() {
    return (!!tsConfig.single_frame) ? window.location : window.parent.location;
}
tab.ShareDialogUtil._postMessageShareUrl = function tab_ShareDialogUtil$_postMessageShareUrl(shareUrl) {
    if (!!window.parent && tab.BrowserSupport.get_postMessage()) {
        var message = { tableau: { shareUrl: shareUrl } };
        window.parent.postMessage(dojo.toJson(message), '*');
    }
}
tab.ShareDialogUtil._fixURIParam = function tab_ShareDialogUtil$_fixURIParam(requestURI, isNewSetting, isDefaultSetting, paramRegexStr, newParamStr) {
    var isDifferentFromDefault;
    var newRequestURI = requestURI;
    isDifferentFromDefault = (isNewSetting !== isDefaultSetting);
    var regex = new RegExp(paramRegexStr);
    if (!!newRequestURI.match(regex)) {
        if (isDifferentFromDefault) {
            newRequestURI = newRequestURI.replace(regex, newParamStr);
        }
        else {
            newRequestURI = newRequestURI.replace(regex, '');
            newRequestURI = newRequestURI.replace(new RegExp('&&'), '&');
            newRequestURI = newRequestURI.replace(new RegExp('\\?&'), '?');
            newRequestURI = newRequestURI.replace(new RegExp('&$'), '');
            newRequestURI = newRequestURI.replace(new RegExp('\\?$'), '');
        }
    }
    else {
        if (isDifferentFromDefault) {
            if (!!newRequestURI.match(new RegExp('[?]'))) {
                newRequestURI = newRequestURI + '&' + newParamStr;
            }
            else {
                newRequestURI = newRequestURI + '?' + newParamStr;
            }
        }
    }
    return newRequestURI;
}
tab.ShareDialogUtil.getShareUrl = function tab_ShareDialogUtil$getShareUrl(uri, vizParameterInfo) {
    var p = vizParameterInfo;
    var show_tabs_str = ':tabs=' + ((p.show_tabs) ? 'yes' : 'no');
    var show_tabs_parm = ':tabs=[^&]+';
    var show_view_count_str = ':display_count=' + ((p.show_view_count) ? 'yes' : 'no');
    var show_view_count_parm = ':display_count=[^&]+';
    var toolbar_str = ':toolbar=' + ((p.toolbar) ? 'yes' : 'no');
    var toolbar_parm = ':toolbar=[^&]+';
    uri = tab.ShareDialogUtil._fixURIParam(uri, p.toolbar, p.toolbar_default, toolbar_parm, toolbar_str);
    uri = tab.ShareDialogUtil._fixURIParam(uri, p.show_tabs, p.show_tabs_default, show_tabs_parm, show_tabs_str);
    uri = tab.ShareDialogUtil._fixURIParam(uri, p.show_view_count, p.show_view_count_default, show_view_count_parm, show_view_count_str);
    if (!tsConfig.showVizHome) {
        uri = uri + '&:showVizHome=no';
    }
    return uri;
}
tab.ShareDialogUtil.doUpdateGeneratedInner = function tab_ShareDialogUtil$doUpdateGeneratedInner() {
    var adjusted_height;
    var adjusted_width;
    var esc = tableau.format.escapeHTML;
    var results = tab.$create_LinkBlurbPair();
    var s = tab.ShareDialogUtil.share_settings;
    var blog_uri = s.share_blog.value;
    var viz_uri = s.requestURI;
    var embedded_width = s.share_width.value;
    var embedded_height = s.share_height.value;
    var title = s.title;
    var static_image = s.static_image;
    var beaker = s.beaker;
    var search = s.search;
    var controller_id = s.controller_id;
    var is_stateful_url = s.is_stateful_url;
    var api_url = s.api_url;
    var site_root = s.site_root;
    var request = viz_uri;
    var p = s.vizParameterInfo;
    p.toolbar = s.share_toolbar.checked;
    p.show_tabs = s.show_tabs.checked;
    results.http_link = tab.ShareDialogUtil.getShareUrl(request, s.vizParameterInfo);
    adjusted_width = parseInt(embedded_width, 10);
    adjusted_height = parseInt(embedded_height, 10);
    adjusted_width += 4;
    adjusted_height += 4;
    if (p.toolbar || beaker) {
        adjusted_height += 32;
    }
    if (p.show_tabs) {
        adjusted_height += 26;
    }
    if (beaker) {
        adjusted_height += 33;
    }
    if (api_url.indexOf('http://') === -1 && api_url.indexOf('https://') === -1) {
        api_url = tab.ShareDialogUtil.get__baseLocation().protocol + '//' + tab.ShareDialogUtil.get__baseLocation().host + api_url;
    }
    var dimstr = "width='" + adjusted_width + "' height='" + adjusted_height + "'";
    var scrstr = "<script type='text/javascript' src='" + api_url + "'></script>";
    var objstr = "<object class='tableauViz' " + dimstr + " style='display:none;'>";
    var ignoreParams = {};
    ignoreParams['embed'] = 1;
    ignoreParams['toolbar'] = 1;
    ignoreParams['preview'] = 1;
    ignoreParams['show_tabs'] = 1;
    ignoreParams['tabs'] = 1;
    ignoreParams['host_url'] = 1;
    ignoreParams['loadOrderID'] = 1;
    ignoreParams['bootstrapWhenNotified'] = 1;
    ignoreParams['apiID'] = 1;
    ignoreParams['openAuthoringInTopWindow'] = 1;
    ignoreParams['browserBackButtonUndo'] = 1;
    objstr += "<param name='host_url' value='" + esc(encodeURIComponent((tab.ShareDialogUtil.get__baseLocation().protocol + '//' + tab.ShareDialogUtil.get__baseLocation().host + '/'))) + "' /> ";
    if (!is_stateful_url) {
        objstr += "<param name='site_root' value='" + esc(site_root) + "' />";
        ignoreParams['site_root'] = 1;
        objstr += "<param name='name' value='" + esc(controller_id) + "' />";
        ignoreParams['name'] = 1;
    }
    if (is_stateful_url) {
        var noParamsLink = results.http_link.split('?')[0];
        objstr += "<param name='path' value='" + esc(noParamsLink.replaceAll(tab.ShareDialogUtil.get__baseLocation().protocol + '//' + tab.ShareDialogUtil.get__baseLocation().host + '/', '')) + "' /> ";
        ignoreParams['path'] = 1;
    }
    if (!is_stateful_url) {
        objstr += "<param name='tabs' value='" + ((p.show_tabs) ? 'yes' : 'no') + "' />";
    }
    objstr += "<param name='toolbar' value='" + ((p.toolbar) ? 'yes' : 'no') + "' />";
    if (beaker) {
        if (!tab.MiscUtil.isNullOrEmpty(static_image)) {
            var noRssStaticImage = static_image.replaceAll('_rss.png', '.png');
            objstr += "<param name='static_image' value='" + esc(noRssStaticImage) + "' /> ";
        }
        objstr += "<param name='animate_transition' value='yes' />";
        objstr += "<param name='display_static_image' value='yes' />";
        objstr += "<param name='display_spinner' value='yes' />";
        objstr += "<param name='display_overlay' value='yes' />";
        objstr += "<param name='display_count' value='yes' />";
        ignoreParams['animate_transition'] = 1;
        ignoreParams['display_static_image'] = 1;
        ignoreParams['display_spinner'] = 1;
        ignoreParams['display_overlay'] = 1;
        ignoreParams['display_count'] = 1;
    }
    if (search.length > 0) {
        var vizargs = search.substr(1).split('&');
        for (var i = 0; i < vizargs.length; i++) {
            var args = vizargs[i].match(new RegExp('^(?::|%3[aA])([^=]+)=(.+)'));
            var name;
            var value;
            if (!!args && args.length === 3) {
                name = args[1];
                value = args[2];
            }
            else {
                name = 'filter';
                value = vizargs[i];
            }
            if (!tab.MiscUtil.isNullOrEmpty(name) && ignoreParams[name] !== 1) {
                objstr += "<param name='" + esc(name) + "' value='" + esc(value) + "' />";
            }
        }
    }
    objstr += '</object>';
    var lnktar = blog_uri || '#';
    var imgstr = '';
    if (!tab.MiscUtil.isNullOrEmpty(static_image)) {
        imgstr = "<noscript><a href='" + esc(lnktar) + "'>" + "<img alt='" + esc(title) + " ' src='" + esc(static_image) + "' style='border: none' /></a></noscript>";
    }
    var back_ref = viz_uri.split('?')[0];
    var placeholder_str = String.format("<div class='tableauPlaceholder' style='width: {0}px; height: {1}px;'>{2}{3}</div>", adjusted_width, adjusted_height, imgstr, objstr);
    var tabstr = String.format("<div style='width:{0}px;height:22px;padding:0px 10px 0px 0px;" + "color:black;font:normal 8pt verdana,helvetica,arial,sans-serif;'>" + "<div style='float:right; padding-right:8px;'>" + "<a href='{1}?ref={2}' target='_blank'>{3}</a></div></div>", adjusted_width, tsConfig.embedCodeTableauLink, back_ref, esc(tab.Strings.ShareDialogEmbedCodeTableauText));
    results.html_blurb = scrstr + placeholder_str;
    if (beaker) {
        results.html_blurb += tabstr;
    }
    if (is_stateful_url && (0 === viz_uri.length)) {
        results.http_link = tab.ShareDialogUtil._waitingLinkMessage;
        results.html_blurb = tab.ShareDialogUtil._waitingEmbedMessage;
    }
    if (is_stateful_url && viz_uri.length > 0 && tab.ShareDialogUtil.share_settings.lastShareUrl !== results.http_link) {
        tab.ShareDialogUtil.share_settings.lastShareUrl = results.http_link;
        tab.ShareDialogUtil._postMessageShareUrl(results.http_link);
    }
    return results;
}
tab.ShareDialogUtil.doUpdateGenerated = function tab_ShareDialogUtil$doUpdateGenerated() {
    var s = tab.ShareDialogUtil.share_settings;
    var results = tab.ShareDialogUtil.doUpdateGeneratedInner();
    s.share_mailto_a.href = 'mailto:?body=' + encodeURIComponent(results.http_link);
    s.share_link_a.href = results.http_link;
    s.share_link_textbox.value = results.http_link;
    if (tsConfig.isPublic) {
        var shareVM = new tab.ShareViewModel(null);
        shareVM.set_shouldShareOriginalView(true);
        s.share_embed_textbox.value = shareVM.generateEmbedUrl();
    }
    else {
        s.share_embed_textbox.value = results.html_blurb;
    }
    if (tsConfig.is_mobile) {
        s.share_mobile_only.style('display', '');
        s.share_web_only.style('display', 'none');
        s.share_embed_textbox.removeAttribute('readonly');
    }
    s.width = s.share_width.value;
    s.height = s.share_height.value;
    s.blog = s.share_blog.value;
}
tab.ShareDialogUtil.setupShareDialogCommon = function tab_ShareDialogUtil$setupShareDialogCommon(opts) {
    var s = tab.ShareDialogUtil.share_settings;
    s.share_width.value = opts.width;
    s.share_height.value = opts.height;
    s.requestURI = opts.request;
    s.share_blog.value = (!ss.isUndefined(opts.blog)) ? opts.blog : '';
    s.title = opts.title;
    s.beaker = opts.beaker;
    s.search = opts.search;
    s.static_image = opts.static_image;
    s.controller_id = opts.controller_id;
    s.watermark_link = opts.watermark_link;
    s.toolbar_bottom = opts.toolbar_bottom;
    s.watermark_image = opts.watermark_image;
    if (tsConfig.isPublic) {
        s.share_header_link.title = opts.server_name;
        s.share_header_logo.src = opts.server_logo;
    }
    s.is_stateful_url = opts.is_stateful_url;
    s.api_url = opts.api_url;
    s.site_root = opts.site_root;
    s.vizParameterInfo = opts.vizParameterInfo;
    s.share_toolbar.checked = s.vizParameterInfo.toolbar;
    s.show_tabs.checked = s.vizParameterInfo.show_tabs;
    if (!opts.tabs_allowed) {
        s.show_tabs_label.style.visibility = 'hidden';
        s.show_tabs.style.visibility = 'hidden';
    }
    if (!!!opts.static_image || String.isNullOrEmpty(opts.static_image)) {
        s.share_rss_blog_row.style.display = 'none';
    }
    if (opts.is_stateful_url) {
        s.show_tabs_label.style.display = 'none';
        s.show_tabs.style.display = 'none';
    }
    tab.ShareDialogUtil.doUpdateGenerated();
}
tab.ShareDialogUtil._isInteger = function tab_ShareDialogUtil$_isInteger(s) {
    if (!s.length) {
        return false;
    }
    for (var i = 0; i < s.length; i++) {
        var c = s.charAt(i);
        if ((c > '9') || (c < '0')) {
            return false;
        }
    }
    return true;
}
tab.ShareDialogUtil._checkParent = function tab_ShareDialogUtil$_checkParent(t) {
    while (!!t.parentNode) {
        if (t === tab.ShareDialogUtil._popup) {
            return false;
        }
        t = t.parentNode;
    }
    return true;
}
tab.ShareDialogUtil.pushShareFieldsToParent = function tab_ShareDialogUtil$pushShareFieldsToParent() {
    try {
        if (tsConfig.isPublic && !!window.parent && ('beaker' in window.parent) && (typeof(window.parent.beaker.setupShareFields) === 'function')) {
            window.parent.beaker.setupShareFields({ embed: tab.ShareDialogUtil.share_settings.share_embed_textbox.value, link: tab.ShareDialogUtil.share_settings.share_link_textbox.value });
        }
    }
    catch ($e1) {
    }
}
tab.ShareDialogUtil.setupShareDialog = function tab_ShareDialogUtil$setupShareDialog(options) {
    var s = tab.ShareDialogUtil.share_settings;
    var domShareDialog = dojo.byId('share_dialog');
    s.share_width = dojo.byId('share_width');
    s.share_height = dojo.byId('share_height');
    s.share_toolbar = dojo.byId('share_toolbar');
    s.share_mailto_a = dojo.byId('share_mailto_a');
    s.share_mobile_only = dojo.query('.share_mobile_only', domShareDialog);
    s.share_web_only = dojo.query('.share_web_only', domShareDialog);
    s.share_link_textbox = dojo.byId('share_link_textbox');
    s.share_link_a = dojo.byId('share_link_a');
    s.share_embed_textbox = dojo.byId('share_embed_textbox');
    s.share_blog = dojo.byId('share_blog');
    s.dimension_warning = dojo.byId('dimension_warning');
    s.share_header_link = dojo.byId('share_header_link');
    s.share_header_logo = dojo.byId('share_header_logo');
    s.share_rss_blog_row = dojo.byId('share_rss_blog_row');
    s.show_tabs = dojo.byId('show_tabs');
    s.show_tabs_label = dojo.byId('show_tabs_label');
    s.show_toolbar = dojo.byId('share_toolbar');
    s.show_toolbar_label = dojo.byId('share_toolbar_label');
    tab.ShareDialogUtil.setupShareDialogCommon(options);
    tab.ShareDialogUtil.pushShareFieldsToParent();
}
tab.ShareDialogUtil.validateReasonableDimension = function tab_ShareDialogUtil$validateReasonableDimension(elementName, doupdate) {
    var failed = false;
    var t = ((tab.ShareDialogUtil.share_settings)[elementName]).value;
    if (tab.ShareDialogUtil._isInteger(t)) {
        var i = parseInt(t, 10);
        if (i < 10000 && i > 0) {
            ((tab.ShareDialogUtil.share_settings)[elementName]).style.color = 'black';
            tab.ShareDialogUtil.share_settings.dimension_warning.style.visibility = 'hidden';
            if (doupdate) {
                tab.ShareDialogUtil.doUpdateGenerated();
            }
            return;
        }
        else {
            failed = true;
        }
    }
    else {
        failed = true;
    }
    if (failed) {
        ((tab.ShareDialogUtil.share_settings)[elementName]).style.color = 'red';
        tab.ShareDialogUtil.share_settings.dimension_warning.style.visibility = '';
    }
}
tab.ShareDialogUtil.toggleMobileClientVizDisplay = function tab_ShareDialogUtil$toggleMobileClientVizDisplay(show) {
    dojo.query("[id^='tableau_mobile_MobileClient']", dojo.doc).forEach(function(node, index) {
        var client = dijit.byNode(node);
        if (!!client) {
            if (show) {
                client.enableBodyTouchHandler();
            }
            else {
                client.disableBodyTouchHandler();
            }
            dojo.style(client.domScroll, 'display', (show) ? '' : 'none');
        }
    });
}
tab.ShareDialogUtil.hideShareDialog = function tab_ShareDialogUtil$hideShareDialog() {
    tab.ShareDialogUtil.toggleMobileClientVizDisplay(true);
    (dijit.byId('share_dialog')).hide();
}
tab.ShareDialogUtil.showPopup = function tab_ShareDialogUtil$showPopup() {
    if (!!tab.ShareDialogUtil._popup) {
        tab.ShareDialogUtil._popup.style.visibility = 'hidden';
        document.getElementById('displayOptionsHeader').className = 'closed';
        tab.ShareDialogUtil._popup = null;
        return;
    }
    var activePopup = document.getElementById('optionsPopup');
    activePopup.style.visibility = 'visible';
    document.getElementById('displayOptionsHeader').className = 'open';
    tab.ShareDialogUtil._popup = activePopup;
    tab.ShareDialogUtil._justSetPopup = 'true';
}
tab.ShareDialogUtil.hideActivePopup = function tab_ShareDialogUtil$hideActivePopup(e) {
    var parent;
    var target = (!!e && !!e.target) ? e.target : (event && event.srcElement);
    if (!!!tab.ShareDialogUtil._popup) {
        return;
    }
    if (tab.ShareDialogUtil._justSetPopup === 'true') {
        tab.ShareDialogUtil._justSetPopup = 'false';
        return;
    }
    parent = tab.ShareDialogUtil._checkParent(target);
    if (parent) {
        tab.ShareDialogUtil._popup.style.visibility = 'hidden';
        document.getElementById('displayOptionsHeader').className = 'closed';
        tab.ShareDialogUtil._popup = null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShownEventArgs

tab.ShownEventArgs = function tab_ShownEventArgs() {
    tab.ShownEventArgs.initializeBase(this);
}
tab.ShownEventArgs.areShownArgsSame = function tab_ShownEventArgs$areShownArgsSame(args1, args2) {
    if (ss.isNullOrUndefined(args1) && ss.isNullOrUndefined(args2)) {
        return true;
    }
    if ((ss.isNullOrUndefined(args1) && ss.isValue(args2)) || (ss.isValue(args1) && ss.isNullOrUndefined(args2))) {
        return false;
    }
    var areSame;
    areSame = args1.origX === args2.origX;
    areSame = areSame && args1.origY === args2.origY;
    areSame = areSame && args1.shownX === args2.shownX;
    areSame = areSame && args1.shownY === args2.shownY;
    areSame = areSame && args1.position === args2.position;
    areSame = areSame && tab.RectUtil.isEqual(args1.viewport.get_dimensions(), args2.viewport.get_dimensions());
    return areSame;
}
tab.ShownEventArgs.prototype = {
    shownX: 0,
    shownY: 0,
    origX: 0,
    origY: 0,
    position: null,
    viewport: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.Slider

tab.Slider = function tab_Slider(targetDiv, attrs, isAll, doUpdateFunc, getTitleOffsetFunc, getCurrentTextFunc, onIntermediateChangeFunc, getCurrentFacetFunc, showFacets) {
    this._timer = -1;
    this._ATTRREADOUT = [ 'show-readout', 'hide-readout' ];
    this._ATTRSLIDER = [ 'show-slider', 'hide-slider' ];
    this._ATTRARROWS = [ 'show-step-btns', 'hide-buttons' ];
    this._ATTRTICKS = [ 'show-ticks', 'hide-ticks' ];
    this.div = targetDiv;
    this._attributes = attrs;
    this._isAll = isAll;
    this._doUpdate = doUpdateFunc;
    this._getTitleOffset = getTitleOffsetFunc;
    this._getCurrentText = getCurrentTextFunc;
    this._onIntermediateChange = onIntermediateChangeFunc;
    this._getCurrentFacet = getCurrentFacetFunc;
    this._showFacets = showFacets;
    dojo.addClass(this.div, 'tableauWidgetUiSlider');
    this._disposables = new tab.DisposableHolder();
    this.currentlySelected = -1;
}
tab.Slider.prototype = {
    _disposables: null,
    styleid: 0,
    _sliderRules: null,
    div: null,
    _attributes: null,
    currentlySelected: 0,
    numValues: 0,
    _startSub: null,
    _stopSub: null,
    slider: null,
    readout: null,
    _isContinuous: false,
    _textDiv: null,
    _facetDiv: null,
    _tooltipDiv: null,
    _leftButton: null,
    _rightButton: null,
    _isDragging: false,
    _getTitleOffset: null,
    _tooltipTimer: null,
    _shouldShowTooltip: false,
    _getCurrentText: null,
    _isAll: false,
    _doUpdate: null,
    _onIntermediateChange: null,
    _currentIndex: null,
    _showFacets: false,
    _oneline: false,
    _getCurrentFacet: null,
    _tooltip: null,
    
    get_oneLineLayout: function tab_Slider$get_oneLineLayout() {
        return this._oneline;
    },
    
    _shouldShow: function tab_Slider$_shouldShow(attrName) {
        return (this._attributes[attrName[0]] !== 'false' && this._attributes[attrName[1]] !== 'true');
    },
    
    calculateStyleid: function tab_Slider$calculateStyleid() {
        this.styleid = 0;
        if (!this._shouldShow(this._ATTRREADOUT)) {
            this.styleid += 4;
        }
        if (!this._shouldShow(this._ATTRSLIDER)) {
            this.styleid += 2;
        }
        if (!this._shouldShow(this._ATTRARROWS)) {
            this.styleid += 1;
        }
        if (this.styleid > 5) {
            this.styleid = 3;
        }
    },
    
    dispose: function tab_Slider$dispose() {
        this._disposables.dispose();
    },
    
    destroy: function tab_Slider$destroy() {
        dojo.unsubscribe(this._startSub);
        dojo.unsubscribe(this._stopSub);
        this._killTimer();
        this.dispose();
        if (ss.isValue(this._tooltip)) {
            this._tooltip.domNode.parentNode.removeChild(this._tooltip.domNode);
            this._tooltip = null;
        }
        if (ss.isValue(this.slider) && (typeof(this.slider.destroy) === 'function')) {
            this.slider.destroy();
        }
        if (ss.isValue(this._sliderRules) && (typeof(this._sliderRules.destroy) === 'function')) {
            this._sliderRules.destroy();
        }
    },
    
    instantiateFromDomain: function tab_Slider$instantiateFromDomain(domain, current) {
        var tuples = [];
        var len = domain.length;
        for (var i = 0; i < len; i++) {
            tuples[i] = tab.$create_TupleStruct(domain[i], current === domain[i], new Array(0));
        }
        this.instantiateFromTuples(tuples, null);
    },
    
    instantiateFromTuples: function tab_Slider$instantiateFromTuples(t, text) {
        var currentlySelectedLoc = -1;
        var initialText = tab.Strings.QuickFilterUnknown;
        var facet = null;
        if (t.length > 0) {
            var len = t.length;
            for (var i = 0; i < len; i++) {
                if (!!t[i].s && !this._isAll) {
                    if (currentlySelectedLoc > -1) {
                        initialText = tab.Strings.QuickFilterMultipleValues;
                    }
                    else {
                        currentlySelectedLoc = i;
                        initialText = this._getCurrentText(i);
                    }
                }
            }
        }
        if (currentlySelectedLoc < 0) {
            currentlySelectedLoc = 0;
            if (ss.isValue(text)) {
                initialText = text;
            }
        }
        if (this._showFacets) {
            facet = this._getCurrentFacet(currentlySelectedLoc);
        }
        this.instantiate(t.length, currentlySelectedLoc, initialText, facet);
    },
    
    instantiate: function tab_Slider$instantiate(numValues, currentlySelectedArg, initialText, facet) {
        var rulesNode = null;
        this.currentlySelected = currentlySelectedArg;
        this.calculateStyleid();
        if (this._shouldShow(this._ATTRREADOUT)) {
            this.readout = document.createElement('div');
            dojo.addClass(this.readout, 'sliderTextReadout');
            dojo.addClass(this.readout, 'tab-ctrl-formatted-widget');
            dojo.addClass(this.readout, 'tab-ctrl-formatted-fixedsize');
            this._textDiv = document.createElement('div');
            dojo.addClass(this._textDiv, 'sliderText');
            this._textDiv.innerHTML = tableau.format.escapeHTML(initialText);
            if (this._showFacets) {
                this._facetDiv = document.createElement('div');
                dojo.addClass(this._facetDiv, 'facet');
                this._facetDiv.innerHTML = tableau.format.escapeHTML(facet);
                this.readout.appendChild(this._facetDiv);
            }
            this.readout.appendChild(this._textDiv);
            this.div.appendChild(this.readout);
        }
        if (this.styleid === 3) {
            return;
        }
        var sliderDiv = document.createElement('div');
        if (this._shouldShow(this._ATTRSLIDER)) {
            rulesNode = document.createElement('div');
            sliderDiv.appendChild(rulesNode);
        }
        this.div.appendChild(sliderDiv);
        if (numValues < 1) {
            numValues = 1;
        }
        this._isContinuous = (!isFinite(numValues));
        if (this._shouldShow(this._ATTRSLIDER) && numValues < 1200 && this._shouldShow(this._ATTRTICKS)) {
            var rulesParams = { count: numValues };
            this._sliderRules = new dijit.form.HorizontalRule(rulesParams, rulesNode);
        }
        var sliderParams = tab.$create_SliderParams();
        sliderParams.templateString = tab.Slider.tableauSliderTemplate;
        sliderParams.onChange = ss.Delegate.create(this, this._applyChanges);
        sliderParams.value = this.currentlySelected;
        sliderParams.slideDuration = 0;
        sliderParams.intermediateChanges = true;
        sliderParams.showButtons = this._shouldShow(this._ATTRARROWS);
        sliderParams.pageIncrement = 1;
        if (isFinite(numValues)) {
            sliderParams.minimum = 0;
            sliderParams.maximum = numValues - 1;
            sliderParams.discreteValues = numValues;
        }
        this.slider = new dijit.form.HorizontalSlider(sliderParams, sliderDiv);
        this._startSub = dojo.subscribe('/dnd/move/start', ss.Delegate.create(this, this.startDrag));
        this._stopSub = dojo.subscribe('/dnd/move/stop', ss.Delegate.create(this, this.stopDrag));
        this.slider.startup();
        if (ss.isValue(this._sliderRules)) {
            this._sliderRules.startup();
        }
        this._shouldShowTooltip = false;
        if (!this._shouldShow(this._ATTRREADOUT)) {
            this._tooltipDiv = document.createElement('div');
            this.slider.sliderHandle.appendChild(this._tooltipDiv);
            var tooltipProto = (dijit._MasterTooltip).prototype;
            tooltipProto['templateString'] = tab.Slider._simpleTooltipTemplate;
            this._tooltip = new dijit._MasterTooltip();
            this._tooltip.dojoOrient = this._tooltip.orient;
            this._tooltip.orient = ss.Delegate.create(this, function(node, aroundCorner, tooltipCorner, overflow) {
                this._tooltip.dojoOrient(node, aroundCorner, tooltipCorner, overflow);
                dojo.addClass(this._tooltip.domNode, 'sliderThumbTooltip');
            });
            var sliderHandle = $(this.slider.sliderHandle);
            this._disposables.add(spiff.EventUtil.bindWithDispose(sliderHandle, 'mouseenter', ss.Delegate.create(this, this._onOverThumb)));
            this._disposables.add(spiff.EventUtil.bindWithDispose(sliderHandle, 'mouseleave', ss.Delegate.create(this, this._onOutThumb)));
        }
        this._leftButton = this.slider.decrementButton.childNodes[0];
        this._rightButton = this.slider.incrementButton.childNodes[0];
        this._updateButtons();
        this._initialLayout();
    },
    
    _updateButtons: function tab_Slider$_updateButtons() {
        this._setButtonState(this._leftButton, 'Left', !this.currentlySelected);
        this._setButtonState(this._rightButton, 'Right', this.currentlySelected === this.slider.maximum);
    },
    
    _setButtonState: function tab_Slider$_setButtonState(button, pos, state) {
        dojo.removeClass(button, 'cp' + pos + 'Arrow' + ((state) ? 'Black' : 'Grey'));
        dojo.addClass(button, 'cp' + pos + 'Arrow' + ((state) ? 'Grey' : 'Black'));
    },
    
    refreshSliderMarksForIE: function tab_Slider$refreshSliderMarksForIE() {
        if (dojo.isIE <= 7) {
            if (ss.isValue(this._sliderRules)) {
                this._sliderRules.domNode.className = this._sliderRules.domNode.className + ' ';
            }
        }
    },
    
    setNewState: function tab_Slider$setNewState(newSelected) {
        this.currentlySelected = newSelected;
        this.slider._setValueAttr(this.currentlySelected);
        this.refreshSliderMarksForIE();
    },
    
    startDrag: function tab_Slider$startDrag(mover) {
        if (ss.isValue(mover) && mover.node === this.slider.sliderHandle) {
            this._isDragging = true;
            if (this._timer > 0) {
                this._killTimer();
            }
        }
    },
    
    stopDrag: function tab_Slider$stopDrag(mover) {
        if (ss.isValue(mover) && mover.node === this.slider.sliderHandle) {
            this._isDragging = false;
            if (this._timer > 0) {
                this._killTimer();
            }
            this._setTimer();
            this._doThumbTooltip();
        }
    },
    
    _onOverThumb: function tab_Slider$_onOverThumb(e) {
        if (!this._shouldShow(this._ATTRREADOUT)) {
            if (ss.isValue(this._tooltipTimer)) {
                window.clearTimeout(this._tooltipTimer);
                this._tooltipTimer = null;
            }
            this._shouldShowTooltip = true;
            this._tooltipTimer = window.setTimeout(ss.Delegate.create(this, this._doThumbTooltip), 50);
        }
    },
    
    _onOutThumb: function tab_Slider$_onOutThumb(e) {
        if (ss.isValue(this._tooltipTimer)) {
            window.clearTimeout(this._tooltipTimer);
            this._tooltipTimer = null;
        }
        if (ss.isValue(this._tooltip)) {
            this._tooltip.hide(this._tooltipDiv);
        }
        this._shouldShowTooltip = false;
    },
    
    _doThumbTooltip: function tab_Slider$_doThumbTooltip() {
        if (!this._shouldShow(this._ATTRREADOUT)) {
            this._tooltip.hide(this._tooltipDiv);
            if (this._shouldShowTooltip || this._isDragging) {
                var index = this._currentIndex || parseInt(this.currentlySelected);
                var text = this._getCurrentText(index);
                this._tooltip.show(text, this._tooltipDiv, [ 'above', 'below' ]);
            }
        }
    },
    
    _getRealIndex: function tab_Slider$_getRealIndex(index) {
        var realIndex;
        if (ss.isUndefined(index) || isNaN(index)) {
            return 0;
        }
        if (this._isContinuous) {
            realIndex = index;
        }
        else {
            realIndex = parseInt(index.toString(), 10);
        }
        if (realIndex < 0) {
            realIndex = 0;
        }
        return realIndex;
    },
    
    _updateViz: function tab_Slider$_updateViz() {
        if (ss.isNullOrUndefined(this._currentIndex) || ss.isNullOrUndefined(this.currentlySelected) || this._currentIndex === this.currentlySelected) {
            return;
        }
        var realIndex = this._getRealIndex(this._currentIndex);
        if (ss.isValue(this._doUpdate)) {
            this._doUpdate(realIndex);
        }
        this._currentIndex = realIndex;
        this.currentlySelected = realIndex;
        this._updateButtons();
    },
    
    updateReadout: function tab_Slider$updateReadout(text, facet) {
        if (this.styleid < 4) {
            this._textDiv.innerHTML = text;
            if (this._showFacets) {
                this._facetDiv.innerHTML = facet;
            }
        }
    },
    
    _applyChanges: function tab_Slider$_applyChanges(index) {
        if (isNaN(index)) {
            return;
        }
        var facet = (this._showFacets) ? this._getCurrentFacet(index) : null;
        this.updateReadout(this._getCurrentText(index), facet);
        this._currentIndex = index;
        if (ss.isValue(this._onIntermediateChange)) {
            this._onIntermediateChange();
        }
        if (!this._isDragging) {
            if (this._timer > 0) {
                this._killTimer();
            }
            this._setTimer();
        }
        else {
            if (this._timer > 0) {
                this._killTimer();
            }
        }
        this._doThumbTooltip();
    },
    
    _initialLayout: function tab_Slider$_initialLayout() {
        if (!this._shouldShow(this._ATTRARROWS)) {
            dojo.addClass(this.div, 'HideArrows');
        }
        if (!this._shouldShow(this._ATTRSLIDER)) {
            dojo.addClass(this.div, 'HideSlider');
        }
        if (this.styleid > 3) {
            dojo.style(this.div, 'height', '15px');
        }
    },
    
    _setTimer: function tab_Slider$_setTimer() {
        this._timer = window.setTimeout(ss.Delegate.create(this, this._timerCallback), 500);
    },
    
    _killTimer: function tab_Slider$_killTimer() {
        if (this._timer > 0) {
            window.clearTimeout(this._timer);
            this._timer = -1;
        }
    },
    
    _timerCallback: function tab_Slider$_timerCallback() {
        this._updateViz();
    },
    
    layout: function tab_Slider$layout() {
        var arrowOffset = 0;
        var arrow_width = 34;
        this._oneline = false;
        dojo.style(this.div, 'overflow', 'hidden');
        var overall_height = dojo.marginBox(this.div).h;
        var overall_width = parseInt(dojo.style(this.div, 'width')) - 5;
        dojo.style(this.div, 'overflow', '');
        if (overall_width < arrow_width) {
            return;
        }
        if (ss.isValue(this.readout)) {
            dojo.style(this.readout, 'width', '');
            dojo.style(this.readout, 'float', 'none');
        }
        if (ss.isValue(this.slider)) {
            dojo.style(this.slider.tableauSlider, 'width', '');
            dojo.style(this.slider.tableauSlider, 'float', 'none');
        }
        if (ss.isValue(this._sliderRules) && (this._sliderRules.count * 4 > overall_width)) {
            dojo.style(this._sliderRules.domNode, 'display', 'none');
        }
        if (overall_height < 38 && this.styleid <= 1) {
            var split = (!this.styleid) ? (overall_width - arrow_width) : overall_width;
            split = Math.floor((split - 14) / 2);
            dojo.style(this.readout, 'width', split + 'px');
            dojo.style(this.slider.tableauSlider, 'width', split + 'px');
            dojo.style(this.readout, 'float', 'left');
            dojo.style(this.slider.tableauSlider, 'float', 'left');
            this._oneline = true;
        }
        else if (!this.styleid || this.styleid === 4) {
            dojo.style(this.slider.tableauSlider, 'width', overall_width - arrow_width + 'px');
        }
        else if (this.styleid === 1 || this.styleid === 5) {
            dojo.style(this.slider.tableauSlider, 'width', overall_width + 'px');
        }
        else if (this.styleid === 2) {
            dojo.style(this.readout, 'width', overall_width - arrow_width - 4 + 'px');
        }
        if (this._shouldShow(this._ATTRARROWS)) {
            if (this.styleid === 2 || this.styleid === 4) {
                arrowOffset = 2;
            }
            if (!this.styleid) {
                arrowOffset = (this._oneline) ? 2 : 21;
            }
            arrowOffset += this._getTitleOffset();
            dojo.style(this.slider.incrementButton, 'top', arrowOffset + 'px');
            dojo.style(this.slider.decrementButton, 'top', arrowOffset + 'px');
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SmallSearchWidget

tab.SmallSearchWidget = function tab_SmallSearchWidget(r, dom) {
    this.templateString = "<div class='SmallSearch'>" + "<div class='SmallSearchBox' dojoAttachPoint='domSearchBox'>" + "<div class='Autocompleter' dojoAttachPoint='domAutocompleter'></div>" + "<div class='wcSearchX dijitInlineTable' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></div>" + '</div>' + '</div>';
    tab.SmallSearchWidget.initializeBase(this);
}
tab.SmallSearchWidget.prototype = {
    domSearchBox: null,
    domAutocompleter: null,
    autocompleter: null,
    
    get_applyDelay: function tab_SmallSearchWidget$get_applyDelay() {
        alert(tab.Strings.noLoc('Bad call of ApplyDelay on SmallSearchWidget'));
        return 0;
    },
    
    startup: function tab_SmallSearchWidget$startup() {
        this.inherited(arguments);
        var options = {};
        options.store = null;
        options.autoComplete = false;
        options.hasDownArrow = false;
        options.highlightMatch = 'none';
        options.searchDelay = this.searchDelay;
        options.onChange = ss.Delegate.create(this, this.applyChanges);
        options.onKeyDown = ss.Delegate.create(this, this.onQueryBoxKeyDown);
        this.autocompleter = new dijit.form.ComboBox(options, this.domAutocompleter);
        this.autocompleter.startup();
        this.autocompleter._getQueryString = function(text) {
            var len = text.length;
            if (len < 1) {
                return '';
            }
            if (text.charAt(0) === '"' && text.charAt(len - 1) === '"') {
                return text.substr(1, len - 2);
            }
            var query = text;
            if (query.length > 1 && query.charAt(0) === '\\' && query.charAt(1) === '*') {
                query = '*' + query.substr(2);
            }
            if (query.length > 1 && query.charAt(query.length - 2) === '\\' && query.charAt(query.length - 1) === '*') {
                query = query.substr(0, query.length - 2) + '*';
            }
            if (query.charAt(0) !== '*' && query.charAt(query.length - 1) !== '*') {
                query = '*' + query + '*';
            }
            return query;
        };
        var noMatchesTooltip = this.NO_MATCHES;
        this.autocompleter.DOJO_openResultList = this.autocompleter._openResultList;
        this.autocompleter._openResultList = ss.Delegate.create(this, function(results, dataObject) {
            this.resultCount = results.length;
            this.autocompleter.DOJO_openResultList(results, dataObject);
            if (!!!results.length) {
                this.autocompleter.tooltipPosition = [ 'above', 'below' ];
                this.autocompleter.displayMessage(noMatchesTooltip);
            }
            else {
                dijit.hideTooltip(this.autocompleter.domNode);
            }
        });
    },
    
    getDataStore: function tab_SmallSearchWidget$getDataStore() {
        var i;
        var items = [];
        var len;
        var t = this.get_qf().get_oFilter().table.tuples;
        for (i = 0, len = t.length; i < len; i++) {
            items.add({ name: this.formatTuple(t[i]) });
        }
        return new dojo.data.ItemFileWriteStore({ data: { items: items } });
    },
    
    destroy: function tab_SmallSearchWidget$destroy(preserveDom) {
        this.domSearchBox.innerHTML = '';
        this.autocompleter.destroy();
        this.autocompleter = null;
        this.inherited(arguments);
    },
    
    focusQueryBox: function tab_SmallSearchWidget$focusQueryBox() {
        this.autocompleter.focus();
    },
    
    blurQueryBox: function tab_SmallSearchWidget$blurQueryBox() {
        this.autocompleter._onBlur();
    },
    
    getQuery: function tab_SmallSearchWidget$getQuery() {
        return this.autocompleter.attr('value');
    },
    
    setQuery: function tab_SmallSearchWidget$setQuery(value) {
        this.autocompleter.attr('value', value);
    },
    
    fixQueryWidth: function tab_SmallSearchWidget$fixQueryWidth() {
        var boxWidth = dojo.marginBox(this.domNode).w;
        if (boxWidth > 25) {
            var remainingWidth = { w: boxWidth - 25 };
            dojo.marginBox(this.autocompleter.comboNode, remainingWidth);
            dojo.marginBox(this.autocompleter.comboNode.firstChild, remainingWidth);
            dojo.marginBox(this.autocompleter.textbox, remainingWidth);
        }
        dojo.style(this.autocompleter.comboNode, 'float', 'left');
    },
    
    showUI: function tab_SmallSearchWidget$showUI(noLayout) {
        if (this.get_isVisible()) {
            return;
        }
        tab.SmallSearchWidget.callBaseMethod(this, 'showUI', [ noLayout ]);
        this.get_qf().get_modeContents().onSmallSearchUI(true, this.domNode);
    },
    
    hideUI: function tab_SmallSearchWidget$hideUI() {
        if (!this.get_isVisible()) {
            return;
        }
        tab.SmallSearchWidget.callBaseMethod(this, 'hideUI');
        this.get_qf().get_modeContents().onSmallSearchUI(false, this.domNode);
    },
    
    layout: function tab_SmallSearchWidget$layout() {
        this.fixQueryWidth();
    },
    
    updateSearch: function tab_SmallSearchWidget$updateSearch() {
        this.autocompleter.store = this.getDataStore();
        this.get_qf().get_modeContents().onSmallSearchUI(this.get_isVisible(), this.domNode);
    },
    
    applyChanges: function tab_SmallSearchWidget$applyChanges(text) {
        if (!!!text) {
            return;
        }
        var tuples = [];
        var t = this.get_qf().get_oFilter().table.tuples;
        for (var i = 0, len = t.length; i < len; i++) {
            if (text === this.formatTuple(t[i])) {
                tuples.add(t[i]);
                t[i].s = true;
            }
            else if (t[i].s) {
                delete t[i].s;
            }
        }
        if (!!tuples.length) {
            this.get_qf().updateStateFromSearch(null);
            var alias = (tuples[0].d || tuples[0].t[0].v);
            var aliases = [ alias ];
            tab.FilterClientCommands.setCategoricalFilterValues(this.get_qf().get_session().get_visualId(), this.get_qf().get_field(), 'filter-replace', aliases);
            this.clearSearch(false, true);
            this.onXButtonClick(null);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Social

tab.Social = function tab_Social() {
}
tab.Social.twitterPopup = function tab_Social$twitterPopup(vizLink, tweetText) {
    var twitterEl = $('#twitter_creator');
    var handle = (ss.isValue(twitterEl)) ? twitterEl.attr('content') : null;
    if (!String.isNullOrEmpty(handle)) {
        handle = ' ' + handle;
    }
    tweetText += handle;
    var queryParams = {};
    queryParams['url'] = vizLink;
    queryParams['via'] = 'tableau';
    queryParams['text'] = tweetText;
    queryParams['related'] = 'tableau';
    var twitterShareUrl = 'https://twitter.com/share?' + dojo.objectToQuery(queryParams);
    var windowTitle = null;
    var popupOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes,width=680,height=350';
    window.open(twitterShareUrl, windowTitle, popupOptions);
}
tab.Social.facebookPopup = function tab_Social$facebookPopup(appid, vizLink, thumbnailUrl, name, description, redirectUri) {
    var queryParams = {};
    queryParams['app_id'] = appid;
    queryParams['link'] = vizLink;
    queryParams['picture'] = thumbnailUrl;
    queryParams['name'] = name;
    queryParams['description'] = description;
    if (!!redirectUri && redirectUri.length > 0) {
        queryParams['redirect_uri'] = redirectUri;
    }
    var facebookShareUrl = 'http://www.facebook.com/dialog/feed?' + dojo.objectToQuery(queryParams);
    var windowTitle = null;
    var popupOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=no,width=1000,height=565';
    var newWin = window.open(facebookShareUrl, windowTitle, popupOptions);
    if ((typeof(newWin.focus) === 'function')) {
        newWin.focus();
    }
}
tab.Social.mailTo = function tab_Social$mailTo(shareUrl, description) {
    var queryParams = { body: shareUrl };
    if (!!description) {
        queryParams['subject'] = description;
    }
    var mailtoStr = 'mailto:?' + dojo.objectToQuery(queryParams);
    window.location.href = mailtoStr;
}


////////////////////////////////////////////////////////////////////////////////
// tab.StepperControlView

tab.StepperControlView = function tab_StepperControlView(viewModel, template) {
    tab.StepperControlView.initializeBase(this, [ viewModel, template ]);
    this.dom = template;
    this.set_stepperViewModel(viewModel);
    this.dom.valueText.addClass(this.get_stepperViewModel().textClass);
    this.dom.valueText.val(viewModel.get_value().toString());
    this.dom.valueText.keydown(tableau.util.preventNonNumericInput);
    this.dom.valueText.keyup(ss.Delegate.create(this, this._keyUpHandler$2)).blur(ss.Delegate.create(this, function() {
        this.commitStepValueText();
    }));
    this.disposables.add(spiff.ClickHandler.targetAndClick(this.dom.incrementButton, ss.Delegate.create(this, function(e) {
        this._incrementDecrementHandler$2(this.get_stepperViewModel().get_step());
    })));
    this.disposables.add(spiff.ClickHandler.targetAndClick(this.dom.decrementButton, ss.Delegate.create(this, function(e) {
        this._incrementDecrementHandler$2(-this.get_stepperViewModel().get_step());
    })));
    this._debouncedUpdate$2 = _.debounce(ss.Delegate.create(this, function(i) {
        this._stepperViewModel$2.set_value(i);
        this.dom.valueText.val(this.get_stepperViewModel().get_value().toString());
    }), 1000);
    this._updateEnabledState$2();
    this.dom.incrementButton.toggleClass('tabDisabled', !this.get_stepperViewModel().get_isIncrementEnabled());
    this.dom.decrementButton.toggleClass('tabDisabled', !this.get_stepperViewModel().get_isDecrementEnabled());
}
tab.StepperControlView.prototype = {
    _debouncedUpdate$2: null,
    _stepperViewModel$2: null,
    dom: null,
    
    get_stepperViewModel: function tab_StepperControlView$get_stepperViewModel() {
        return this._stepperViewModel$2;
    },
    set_stepperViewModel: function tab_StepperControlView$set_stepperViewModel(value) {
        this._stepperViewModel$2 = value;
        return value;
    },
    
    _incrementDecrementHandler$2: function tab_StepperControlView$_incrementDecrementHandler$2(diff) {
        if (!this.get_stepperViewModel().get_isEnabled()) {
            return;
        }
        var textValue = parseInt(this.dom.valueText.val());
        if (ss.isValue(textValue) && !isNaN(textValue)) {
            var newValue = textValue + diff;
            if (this.get_stepperViewModel().isValueWithinRange(newValue)) {
                this.dom.valueText.val(newValue.toString());
                this._debouncedUpdate$2(newValue);
            }
        }
    },
    
    commitStepValueText: function tab_StepperControlView$commitStepValueText() {
        if (!this.get_stepperViewModel().get_isEnabled()) {
            return;
        }
        var textValue = parseInt(this.dom.valueText.val());
        if (this.get_stepperViewModel().get_value() === textValue) {
            return;
        }
        else if (ss.isValue(textValue) && !isNaN(textValue)) {
            this.get_stepperViewModel().set_value(textValue);
        }
    },
    
    _keyUpHandler$2: function tab_StepperControlView$_keyUpHandler$2(e) {
        if (!this.get_stepperViewModel().get_isEnabled()) {
            return;
        }
        if (e.which === 13) {
            this.commitStepValueText();
        }
    },
    
    _updateEnabledState$2: function tab_StepperControlView$_updateEnabledState$2() {
        if (this.get_stepperViewModel().get_isEnabled()) {
            this.dom.valueText.removeAttr('disabled');
        }
        else {
            this.dom.valueText.attr('disabled', 'disabled');
        }
    },
    
    onViewModelPropertyChanged: function tab_StepperControlView$onViewModelPropertyChanged(sender, e) {
        tab.StepperControlView.callBaseMethod(this, 'onViewModelPropertyChanged', [ sender, e ]);
        if (e.get_propertyName() === 'Value') {
            this.dom.valueText.val(this.get_stepperViewModel().get_value().toString());
        }
        else if (e.get_propertyName() === 'IsEnabled') {
            this._updateEnabledState$2();
        }
        else if (e.get_propertyName() === 'IsIncrementEnabled') {
            this.dom.incrementButton.toggleClass('tabDisabled', !this.get_stepperViewModel().get_isIncrementEnabled());
        }
        else if (e.get_propertyName() === 'IsDecrementEnabled') {
            this.dom.decrementButton.toggleClass('tabDisabled', !this.get_stepperViewModel().get_isDecrementEnabled());
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.StepperControlTemplate

tab.StepperControlTemplate = function tab_StepperControlTemplate(template) {
    tab.StepperControlTemplate.initializeBase(this, [ $(template) ]);
}
tab.StepperControlTemplate.prototype = {
    decrementButton: null,
    incrementButton: null,
    valueText: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.TabbedNavigation

tab.TabbedNavigation = function tab_TabbedNavigation(paramaters, srcNodeRef) {
    this.templateString = "<div style='width:${innerWidth};' class='tabbedNavigationOuterWrapper'>" + "<div id='container' dojoType='dijit.layout.LayoutContainer' style='width:100%; height:100%;' dojoAttachPoint='_innerWrapper'>" + "<button dojoType='dijit.form.Button' class='tabsMenuBtn' layoutAlign='left' id='menuBtn' dojoAttachPoint='_menuBtn' style='display:none;'></button>" + "<button dojoType='dijit.form.Button' class='tabsLeftBtn' layoutAlign='left' dojoAttachPoint='_leftBtn' style='display:none;'></button>" + "<button dojoType='dijit.form.Button' class='tabsRightBtn' layoutAlign='right' dojoAttachPoint='_rightBtn' style='display:none;'></button>" + "<div dojoType='dijit.layout.LayoutContainer' layoutAlign='client' dojoAttachPoint='_containerNode'>" + "<div class='dijitTabContainerTop-tabs' dojoAttachPoint='_scrollNode'></div>" + '</div>' + '</div>' + '</div>';
    tab.TabbedNavigation.initializeBase(this);
    this._tabNames$2 = [];
    this._dijitTabs$2 = [];
    this._subscriptions$2 = [];
    this._tabNames$2 = tsConfig.visible_sheets || this._tabNames$2;
    var tabIdx = this._indexOf(this._tabNames$2, tsConfig.current_sheet_name);
    this.currentTabIndex = (!!tabIdx) ? tabIdx : this.currentTabIndex;
    this.innerWidth = (paramaters['innerWidth'] || this.innerWidth);
}
tab.TabbedNavigation.prototype = {
    baseClass: 'tableauTabbedNavigation',
    widgetsInTemplate: true,
    innerWidth: '100%',
    currentTabIndex: 0,
    _tabNames$2: null,
    _dijitTabs$2: null,
    _subscriptions$2: null,
    currentTab: null,
    _scrollNode: null,
    _leftBtn: null,
    _rightBtn: null,
    _menuBtn: null,
    _containerNode: null,
    _innerWrapper: null,
    _tabsMenu$2: null,
    _tabsMenuViewModel$2: null,
    _anim: null,
    _buttons: null,
    
    startup: function tab_TabbedNavigation$startup() {
        dojo.query('button', this._leftBtn.domNode).addClass('tnLeftButton');
        dojo.query('button', this._rightBtn.domNode).addClass('tnRightButton');
        dojo.query('button', this._menuBtn.domNode).addClass('tnMenuButton');
        this.containerNode = this.domNode;
        this.inherited(arguments);
    },
    
    destroy: function tab_TabbedNavigation$destroy() {
        dojo.forEach(this._subscriptions$2, dojo.unsubscribe);
        this._tabsMenu$2.dispose();
        this._tabsMenuViewModel$2.dispose();
    },
    
    layout: function tab_TabbedNavigation$layout() {
        if (!this._tabNames$2.length) {
            return;
        }
        var contentBox = dojo.contentBox(this._containerNode.domNode);
        var shown = this._shouldShowBtns$2(contentBox.w);
        this._buttons.style('display', (shown) ? '' : 'none');
        this._innerWrapper.layout();
        dojo.style(this._containerNode.domNode, 'top', '-1px');
        if (!shown) {
            this._containerNode.domNode.scrollLeft = 0;
        }
        this._onMenuItemSelected$2(this.currentTab);
        this._setupScrollBtns$2();
        if (tabBootstrap.ViewerBootstrap.get_instance().shouldShowTabs()) {
            $('.tabbedNavigationWrapper').css('visibility', 'visible');
            $('.tabbedNavigationOuterWrapper').css('display', '');
        }
        else {
            $('.tabbedNavigationOuterWrapper').css('display', 'none');
        }
    },
    
    redimMenu: function tab_TabbedNavigation$redimMenu(data) {
        this._tabsMenu$2.get_element().css('max-height', Math.min(600, Math.floor(data.h * 0.9)) + 'px');
    },
    
    postCreate: function tab_TabbedNavigation$postCreate() {
        this._subscriptions$2.push(dojo.subscribe(tab.EventMap.refreshLayoutModel, ss.Delegate.create(this, this._onRefreshLayoutModel$2)));
        this._subscriptions$2.push(dojo.subscribe(tab.EventMap.onBootstrapSuccess, ss.Delegate.create(this, this._onBootStrapSuccess$2)));
        this._subscriptions$2.push(dojo.subscribe(tab.EventMap.onTabSelect, ss.Delegate.create(this, this._onSelectTab$2)));
        this._subscriptions$2.push(dojo.subscribe(tab.EventMap.newLayoutId, ss.Delegate.create(this, this._onNewLayout$2)));
        this.inherited(arguments);
        this._attachHandlers$2();
        var items = [];
        for (var i = 0; i < this._tabNames$2.length; i++) {
            var tabName = this._tabNames$2[i];
            this.addTab(tabName, i, tsConfig.repository_urls[i]);
            this.addToMenu(items, tabName);
        }
        this._tabsMenuViewModel$2 = new spiff.MenuViewModel();
        this._tabsMenuViewModel$2.set_menu(new spiff.Menu(items));
        this._tabsMenuViewModel$2.add_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
        this._tabsMenu$2 = spiff.ObjectRegistry.newView(spiff.MenuView, this._tabsMenuViewModel$2);
        this._buttons = dojo.query('.dijitButton', this.domNode);
        this.layout();
    },
    
    chooseTabByName: function tab_TabbedNavigation$chooseTabByName(str) {
        if (ss.isNullOrUndefined(str)) {
            return;
        }
        var tabElement = this._findTabForName$2(str);
        if (ss.isValue(tabElement)) {
            this.chooseTab(tabElement);
        }
    },
    
    chooseTab: function tab_TabbedNavigation$chooseTab(selected) {
        if (ss.isNullOrUndefined(selected)) {
            return;
        }
        this._changeTab$2(selected);
    },
    
    addTab: function tab_TabbedNavigation$addTab(tabElement, index, repo) {
        var refNode = dojo.doc.createElement('span');
        this._scrollNode.appendChild(refNode);
        var tabId = this.baseClass + '_tab_' + index;
        var buttonParams = {};
        buttonParams.id = tabId;
        buttonParams.label = tableau.format.escapeHTML(tabElement);
        buttonParams.value = tabElement;
        buttonParams.showLabel = true;
        buttonParams.repository_url = repo;
        buttonParams.onClick = ss.Delegate.create(this, function() {
            var selected = dijit.byId(tabId);
            this.chooseTab(selected);
        });
        var button = new dijit.layout._TabButton(buttonParams, refNode);
        this._dijitTabs$2.push(button);
    },
    
    addToMenu: function tab_TabbedNavigation$addToMenu(items, tabElement) {
        var item = spiff.MenuItem.newActionItem(tabElement, ss.Delegate.create(this, function() {
            this.chooseTabByName(tabElement);
        }));
        items.add(item);
    },
    
    _onUpdateTab$2: function tab_TabbedNavigation$_onUpdateTab$2(sheetName) {
        var tabElement = this._findTabForName$2(sheetName);
        this._onMenuItemSelected$2(tabElement);
    },
    
    _onSelectTab$2: function tab_TabbedNavigation$_onSelectTab$2(data) {
        this._onUpdateTab$2(data.sheetName);
    },
    
    _onNewLayout$2: function tab_TabbedNavigation$_onNewLayout$2(layoutPresModel) {
        this._onUpdateTab$2(layoutPresModel.sheetName);
    },
    
    _findTabForName$2: function tab_TabbedNavigation$_findTabForName$2(str) {
        for (var i = 0; i < this._dijitTabs$2.length; i++) {
            if (this._dijitTabs$2[i].value === str) {
                return this._dijitTabs$2[i];
            }
        }
        return null;
    },
    
    _getTabsWidth$2: function tab_TabbedNavigation$_getTabsWidth$2() {
        var locTabs = dojo.query('.dijitTab', this._scrollNode);
        if (!!locTabs.length) {
            var leftTab = locTabs[0];
            var rightTab = locTabs[locTabs.length - 1];
            return rightTab.offsetLeft + dojo.style(rightTab, 'width') - leftTab.offsetLeft;
        }
        else {
            return 0;
        }
    },
    
    _shouldShowBtns$2: function tab_TabbedNavigation$_shouldShowBtns$2(width) {
        var tabsWidth = this._getTabsWidth$2();
        return tabsWidth > 0 && width < tabsWidth;
    },
    
    _indexOf: function tab_TabbedNavigation$_indexOf(arr, obj) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === obj) {
                return i;
            }
        }
        return -1;
    },
    
    _getScrollBounds$2: function tab_TabbedNavigation$_getScrollBounds$2() {
        var locTabs = dojo.query('.dijitTab', this._scrollNode);
        var containerWidth = Math.floor(this._containerNode.domNode.offsetWidth);
        var tabsWidth = this._getTabsWidth$2();
        var toRet = tab.$create_ScrollBound();
        if (!!locTabs.length && tabsWidth > containerWidth) {
            toRet.min = 0;
            toRet.max = (locTabs[locTabs.length - 1].offsetLeft + dojo.style(locTabs[locTabs.length - 1], 'width')) + 2 - containerWidth;
        }
        else {
            toRet.min = 0;
            toRet.max = 0;
        }
        return toRet;
    },
    
    getCurrentSheetInfo: function tab_TabbedNavigation$getCurrentSheetInfo() {
        return { sheetName: this.currentTab.value, repositoryUrl: this.currentTab.repository_url };
    },
    
    _changeTab$2: function tab_TabbedNavigation$_changeTab$2(newTab) {
        if (ss.isValue(this.currentTab) && this.currentTab.value === newTab.value) {
            return;
        }
        var msg = {};
        msg.sheetName = newTab.value;
        msg.repositoryUrl = newTab.repository_url;
        msg.oldRepositoryUrl = (ss.isValue(this.currentTab)) ? this.currentTab.repository_url : null;
        dojo.publish(tab.EventMap.onTabSelect, [ msg ]);
    },
    
    _onRefreshLayoutModel$2: function tab_TabbedNavigation$_onRefreshLayoutModel$2(data) {
        this.redimMenu(data);
    },
    
    _onBootStrapSuccess$2: function tab_TabbedNavigation$_onBootStrapSuccess$2(data) {
        this.currentTabIndex = this._indexOf(this._tabNames$2, data);
        this._onMenuItemSelected$2(this.currentTab);
    },
    
    _onMenuItemSelected$2: function tab_TabbedNavigation$_onMenuItemSelected$2(tabElement) {
        if (ss.isValue(this.currentTab)) {
            this.currentTab.attr('checked', false);
        }
        else {
            tabElement = this.currentTab = this._dijitTabs$2[this.currentTabIndex];
        }
        if (ss.isNullOrUndefined(tabElement)) {
            return;
        }
        tabElement.attr('checked', true);
        this.currentTab = tabElement;
        this._scrollToTab$2(tabElement);
    },
    
    _scrollToTab$2: function tab_TabbedNavigation$_scrollToTab$2(tab) {
        var node = tab.domNode;
        var sl = this._getScroll();
        if (sl > node.offsetLeft || sl + dojo.style(this._containerNode.domNode, 'width') < node.offsetLeft + dojo.style(node, 'width')) {
            this._createSmoothScroll(tab).play();
        }
    },
    
    _getScrollForSelectedTab$2: function tab_TabbedNavigation$_getScrollForSelectedTab$2(tab) {
        var n = tab.domNode;
        var scrollNodeWidth = dojo.style(this._containerNode.domNode, 'width');
        var scrollBounds = this._getScrollBounds$2();
        var pos;
        pos = (n.offsetLeft + (dojo.style(n, 'width') / 2)) - (scrollNodeWidth / 2);
        pos = Math.min(Math.max(pos, scrollBounds.min), scrollBounds.max);
        return pos;
    },
    
    _attachHandlers$2: function tab_TabbedNavigation$_attachHandlers$2() {
        this.connect(this._rightBtn, 'onClick', ss.Delegate.create(this, function() {
            this._onScroll$2(this._rightBtn);
        }));
        this.connect(this._leftBtn, 'onClick', ss.Delegate.create(this, function() {
            this._onScroll$2(this._leftBtn);
        }));
        this.connect(this._menuBtn, 'onClick', ss.Delegate.create(this, this.toggleMenu));
        this.connect(window, 'onresize', ss.Delegate.create(this, this._repositionMenu$2));
    },
    
    _repositionMenu$2: function tab_TabbedNavigation$_repositionMenu$2() {
        var menuElement = this._tabsMenu$2.get_element().get(0);
        if (menuElement.style.display !== 'none' && menuElement.style.visibility !== 'hidden') {
            var locMenuBtn = this._menuBtn.domNode;
            var menuBtnOffset = $(locMenuBtn).offset();
            menuElement.style.top = (menuBtnOffset.top + locMenuBtn.offsetHeight) + 'px';
            menuElement.style.left = menuBtnOffset.left + 'px';
        }
    },
    
    toggleMenu: function tab_TabbedNavigation$toggleMenu() {
        if (this._tabsMenuViewModel$2.get_visible()) {
            this._tabsMenuViewModel$2.hide();
        }
        else {
            this._tabsMenuViewModel$2.show(spiff.ShowMenuOptions.create($(this._menuBtn.domNode)));
        }
    },
    
    _onScroll$2: function tab_TabbedNavigation$_onScroll$2(clicked) {
        if (clicked.dojoAttachPoint === '_leftBtn') {
            this._doSlide$2(-1);
        }
        else {
            this._doSlide$2(1);
        }
    },
    
    _doSlide$2: function tab_TabbedNavigation$_doSlide$2(direction) {
        var styleWidth = dojo.style(this._containerNode.domNode, 'width');
        var d = (styleWidth * 0.5) * direction;
        var to = this._getScroll() + d;
        this._createSmoothScroll(null, to).play();
    },
    
    _getScroll: function tab_TabbedNavigation$_getScroll() {
        return this._containerNode.domNode.scrollLeft;
    },
    
    _createSmoothScroll: function tab_TabbedNavigation$_createSmoothScroll(tab, x) {
        if (ss.isValue(tab)) {
            x = this._getScrollForSelectedTab$2(tab);
        }
        else {
            var scrollBounds = this._getScrollBounds$2();
            x = Math.min(Math.max(x, scrollBounds.min), scrollBounds.max);
        }
        if (ss.isValue(this._anim) && this._anim.status() === 'playing') {
            this._anim.stop();
        }
        var anim = null;
        var animProps = {};
        animProps.duration = 100;
        animProps.beforeBegin = ss.Delegate.create(this, function() {
            var oldS = this._containerNode.domNode.scrollLeft;
            anim.curve = new dojo._Line(oldS, x);
        });
        animProps.onAnimate = ss.Delegate.create(this, function(val) {
            this._containerNode.domNode.scrollLeft = val;
        });
        animProps.onEnd = ss.Delegate.create(this, function() {
            this._setupScrollBtns$2();
        });
        anim = new dojo._Animation(animProps);
        this._anim = anim;
        return anim;
    },
    
    _setupScrollBtns$2: function tab_TabbedNavigation$_setupScrollBtns$2() {
        var scroll = this._getScroll();
        var scrollBounds = this._getScrollBounds$2();
        var leftState;
        var rightState;
        if (scroll > scrollBounds.max) {
            this._containerNode.domNode.scrollLeft = scrollBounds.max;
        }
        rightState = scroll >= scrollBounds.max;
        leftState = scroll <= scrollBounds.min;
        this._rightBtn.setAttribute('disabled', rightState);
        this._leftBtn.setAttribute('disabled', leftState);
        dojo.query('button', this._rightBtn.domNode).toggleClass('tnRightButtonDisabled', rightState);
        dojo.query('button', this._leftBtn.domNode).toggleClass('tnLeftButtonDisabled', leftState);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TabEventArgs

tab.TabEventArgs = function tab_TabEventArgs(tabLabelElement, tabContentElement, tabIndex) {
    tab.TabEventArgs.initializeBase(this);
    this.tabLabelElement = tabLabelElement;
    this.tabContentElement = tabContentElement;
    this.tabIndex = tabIndex;
}
tab.TabEventArgs.prototype = {
    tabLabelElement: null,
    tabContentElement: null,
    tabIndex: 0
}


////////////////////////////////////////////////////////////////////////////////
// tab.TabView

tab.TabView = function tab_TabView() {
    this._tabLabels$1 = [];
    this._tabContent$1 = [];
    tab.TabView.initializeBase(this, [ $("<div class='tab-tabView'><ul class='tab-tabLabels'></ul><div class='tab-tabContent'></div></div>") ]);
    this.get_element().delegate('.tab-tabLabel', this.createNamespacedEventName('click'), ss.Delegate.create(this, this._handleTabLabelClick$1));
    this._loadingElement$1 = $("<div class='tab-tabViewLoading'>&nbsp;</div>");
    this._hoverDisposable$1 = spiff.HoverAddClassBehavior.attach(this, 'hover', '.tab-tabLabel');
}
tab.TabView.prototype = {
    _loadingElement$1: null,
    _hoverDisposable$1: null,
    _selectedIndex$1: null,
    
    add_tabShown: function tab_TabView$add_tabShown(value) {
        this.__tabShown$1 = ss.Delegate.combine(this.__tabShown$1, value);
    },
    remove_tabShown: function tab_TabView$remove_tabShown(value) {
        this.__tabShown$1 = ss.Delegate.remove(this.__tabShown$1, value);
    },
    
    __tabShown$1: null,
    
    add_tabSelected: function tab_TabView$add_tabSelected(value) {
        this.__tabSelected$1 = ss.Delegate.combine(this.__tabSelected$1, value);
    },
    remove_tabSelected: function tab_TabView$remove_tabSelected(value) {
        this.__tabSelected$1 = ss.Delegate.remove(this.__tabSelected$1, value);
    },
    
    __tabSelected$1: null,
    
    add_tabContentLoaded: function tab_TabView$add_tabContentLoaded(value) {
        this.__tabContentLoaded$1 = ss.Delegate.combine(this.__tabContentLoaded$1, value);
    },
    remove_tabContentLoaded: function tab_TabView$remove_tabContentLoaded(value) {
        this.__tabContentLoaded$1 = ss.Delegate.remove(this.__tabContentLoaded$1, value);
    },
    
    __tabContentLoaded$1: null,
    
    add_tabContentFailed: function tab_TabView$add_tabContentFailed(value) {
        this.__tabContentFailed$1 = ss.Delegate.combine(this.__tabContentFailed$1, value);
    },
    remove_tabContentFailed: function tab_TabView$remove_tabContentFailed(value) {
        this.__tabContentFailed$1 = ss.Delegate.remove(this.__tabContentFailed$1, value);
    },
    
    __tabContentFailed$1: null,
    
    get_selectedIndex: function tab_TabView$get_selectedIndex() {
        return this._selectedIndex$1;
    },
    
    addUrlTab: function tab_TabView$addUrlTab(tabLabelContent, tabPaneContentUrl) {
        var index = this._tabLabels$1.length;
        var label = $("<li class='tab-tabLabel'></li>");
        label.append(tabLabelContent);
        label.data('tabIndex', index);
        this._tabLabels$1.add(label);
        var content = $('<div></div>');
        content.data('tabContentUrl', tabPaneContentUrl);
        this._tabContent$1.add(content);
        this.get_element().find('.tab-tabLabels').append(label);
        return index;
    },
    
    selectTab: function tab_TabView$selectTab(index) {
        if (ss.isNullOrUndefined(index) || index < 0 || index >= this._tabContent$1.length) {
            return;
        }
        if (ss.isValue(this._selectedIndex$1) && this._selectedIndex$1 === index) {
            return;
        }
        this.get_element().find('.tab-tabContent').children().detach();
        if (ss.isValue(this._selectedIndex$1)) {
            this._tabLabels$1[this._selectedIndex$1].removeClass('selected');
        }
        this._selectedIndex$1 = index;
        this._tabLabels$1[index].addClass('selected');
        this.get_element().find('.tab-tabContent').append(this._tabContent$1[index]);
        this._loadContent$1(index);
        this.onTabSelected(new tab.TabEventArgs(this._tabLabels$1[index], this._tabContent$1[index], index));
    },
    
    dispose: function tab_TabView$dispose() {
        this._hoverDisposable$1.dispose();
        tab.TabView.callBaseMethod(this, 'dispose');
    },
    
    onTabShown: function tab_TabView$onTabShown(args) {
        if (ss.isValue(this.__tabShown$1)) {
            this.__tabShown$1(this, args);
        }
    },
    
    onTabSelected: function tab_TabView$onTabSelected(args) {
        if (ss.isValue(this.__tabSelected$1)) {
            this.__tabSelected$1(this, args);
        }
    },
    
    onTabContentLoaded: function tab_TabView$onTabContentLoaded(args) {
        if (ss.isValue(this.__tabContentLoaded$1)) {
            this.__tabContentLoaded$1(this, args);
        }
    },
    
    onTabContentFailed: function tab_TabView$onTabContentFailed(args) {
        if (ss.isValue(this.__tabContentFailed$1)) {
            this.__tabContentFailed$1(this, args);
        }
    },
    
    _loadContent$1: function tab_TabView$_loadContent$1(index) {
        var content = this._tabContent$1[index];
        var contentUrl = content.data('tabContentUrl');
        if (ss.isNullOrUndefined(contentUrl)) {
            return;
        }
        content.removeData('tabContentUrl');
        content.append(this._loadingElement$1);
        content.load(contentUrl, null, ss.Delegate.create(this, function(result, status, request) {
            this._handleLoadCompleted$1(index, status, result);
        }));
        this.onTabShown(new tab.TabEventArgs(this._tabLabels$1[index], content, index));
    },
    
    _handleLoadCompleted$1: function tab_TabView$_handleLoadCompleted$1(tabIndex, status, result) {
        if (status === 'error') {
            this._tabContent$1[tabIndex].html($("<div class='tab-tabViewError'></div>").html(result));
            this.onTabContentFailed(new tab.TabEventArgs(this._tabLabels$1[tabIndex], this._tabContent$1[tabIndex], tabIndex));
        }
        else {
            this.onTabContentLoaded(new tab.TabEventArgs(this._tabLabels$1[tabIndex], this._tabContent$1[tabIndex], tabIndex));
        }
    },
    
    _handleTabLabelClick$1: function tab_TabView$_handleTabLabelClick$1(e) {
        var source = $(e.target);
        this.selectTab(source.data('tabIndex'));
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledViewerRegion

tab.TiledViewerRegion = function tab_TiledViewerRegion(regionPart, domNode, session, allowPanZoom, sheetID, viewModel) {
    this.backgroundMap = new tab.LeafletMapControl();
    this.disposables = new tab.DisposableHolder();
    this._regionPart = regionPart;
    this.connectNode = $(domNode);
    this.viewportBorder = this.connectNode.find('.tvViewportBorders');
    this._imagesContainer = $(domNode).find('.tvimagesContainer');
    this.viewSession = session;
    this.domPanZoomRect = new tab.RectShapeSelector();
    this._shapeSelector = new tab.RectShapeSelector();
    if (this._regionPart === 'viz') {
        if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.lassoSelection)) {
            this.set_defaultPointerToolMode('lassoSelect');
        }
        else if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.radialSelection)) {
            this.set_defaultPointerToolMode('radialSelect');
        }
        else {
            this.set_defaultPointerToolMode(this._determineDefaultToolMode(viewModel));
        }
        this.set_currentPointerToolMode(this.get_defaultPointerToolMode());
    }
    this._sheetid = sheetID;
    this.allowPanZoom = allowPanZoom;
    this.paneTableViewModel = viewModel;
    this.waitingOnPanZoomServerResponse = 'waitingOnServer';
}
tab.TiledViewerRegion.getCanvasElement = function tab_TiledViewerRegion$getCanvasElement(parent) {
    return parent.find('canvas').get(0);
}
tab.TiledViewerRegion.prototype = {
    _imagesContainer: null,
    viewSession: null,
    allowPanZoom: null,
    connectNode: null,
    domPanZoomRect: null,
    domDragImage: null,
    domDragMask: null,
    regionContent: null,
    scroller: null,
    isScrolling: false,
    wasScrolling: false,
    waitingOnPanZoomServerResponse: null,
    paneTableViewModel: null,
    viewportBorder: null,
    resetIsWaitingOnTransition: false,
    resetIsWaitingOnData: false,
    _regionPart: null,
    _sheetid: null,
    _shapeSelector: null,
    _hitTestStructure: null,
    _trendLineHitTestStructures: null,
    _defaultToolMode: null,
    _currentToolMode: null,
    _regionSize: null,
    _controlledAnimations: null,
    
    get_name: function tab_TiledViewerRegion$get_name() {
        return this.get_regionPart();
    },
    
    get_regionPart: function tab_TiledViewerRegion$get_regionPart() {
        return this._regionPart;
    },
    
    get_sheetid: function tab_TiledViewerRegion$get_sheetid() {
        return this._sheetid;
    },
    
    get_contentProvider: function tab_TiledViewerRegion$get_contentProvider() {
        return this.regionContent;
    },
    set_contentProvider: function tab_TiledViewerRegion$set_contentProvider(value) {
        if (ss.isValue(this.regionContent)) {
            this.regionContent.remove_loadComplete(ss.Delegate.create(this, this.onRegionContentLoadComplete));
        }
        this.regionContent = value;
        if (ss.isValue(this.regionContent)) {
            this.regionContent.add_loadComplete(ss.Delegate.create(this, this.onRegionContentLoadComplete));
        }
        return value;
    },
    
    get_defaultPointerToolMode: function tab_TiledViewerRegion$get_defaultPointerToolMode() {
        return this._defaultToolMode;
    },
    set_defaultPointerToolMode: function tab_TiledViewerRegion$set_defaultPointerToolMode(value) {
        this._defaultToolMode = value;
        return value;
    },
    
    get_currentPointerToolMode: function tab_TiledViewerRegion$get_currentPointerToolMode() {
        return this._currentToolMode;
    },
    set_currentPointerToolMode: function tab_TiledViewerRegion$set_currentPointerToolMode(value) {
        this._currentToolMode = value;
        return value;
    },
    
    get_sceneInfo: function tab_TiledViewerRegion$get_sceneInfo() {
        if (this._regionPart !== 'viz') {
            tab.Log.get(this).warn('The region has to be the viz for it to have a SceneInfo');
            return null;
        }
        var ptcv = Type.safeCast(this.regionContent, tab.PaneTableCanvasView);
        if (ss.isNullOrUndefined(ptcv)) {
            tab.Log.get(this).warn('The region has to be the viz and we need to be in browser rendering');
            return null;
        }
        var ptvm = ptcv.get_viewModel();
        return ptvm.get_scene();
    },
    
    get_vlvm: function tab_TiledViewerRegion$get_vlvm() {
        ss.Debug.assert(Type.canCast(this.get_contentProvider(), tab.VisualRegionCanvasView), 'We should only be in here if we are doing local rendering.');
        var visualListRegion = this.get_contentProvider();
        return visualListRegion.get_viewModel();
    },
    
    get_shapeSelector: function tab_TiledViewerRegion$get_shapeSelector() {
        return this._shapeSelector;
    },
    
    turnOnWindowLogging: function tab_TiledViewerRegion$turnOnWindowLogging() {
        if (!ss.isValue(tab.TiledViewerRegion.windowLog)) {
            tab.TiledViewerRegion.windowLog = tab.Logger.getLoggerWithName('WindowAppender');
        }
    },
    
    reset: function tab_TiledViewerRegion$reset() {
        this.backgroundMap.removeMarkOverlay();
        this.setViewportBorderVisibility(false);
    },
    
    destroy: function tab_TiledViewerRegion$destroy() {
        tab.Log.get(this).debug('Destroy');
        this.resetControlledAnimations();
        this.disposables.dispose();
        this.allowPanZoom = null;
        if (ss.isValue(this.regionContent)) {
            this.regionContent.remove_loadComplete(ss.Delegate.create(this, this.onRegionContentLoadComplete));
            this.regionContent.destroy();
        }
        this.backgroundMap._destroyMap();
        this.backgroundMap.dispose();
    },
    
    setGeometry: function tab_TiledViewerRegion$setGeometry(regionGeometry, viewSize, tileSize) {
        if (this.regionContent != null) {
            this.regionContent.set_actualViewSize(tab.$create_Size(viewSize.w, viewSize.h));
            this.regionContent.reset(regionGeometry, tileSize);
            this.backgroundMap._resize(regionGeometry.w, regionGeometry.h);
            this._regionSize = tab.$create_RectXY(0, 0, regionGeometry.w, regionGeometry.h);
        }
    },
    
    refreshImages: function tab_TiledViewerRegion$refreshImages(cacheInfo) {
        if (this.regionContent != null) {
            this.regionContent.refreshImages(cacheInfo);
        }
    },
    
    onZoomBoxMouseMove: function tab_TiledViewerRegion$onZoomBoxMouseMove(e) {
        this.onSelectorMouseMove(e, this.domPanZoomRect);
    },
    
    onMarqueeMouseMove: function tab_TiledViewerRegion$onMarqueeMouseMove(e) {
        this.onSelectorMouseMove(e, this._shapeSelector);
    },
    
    onSelectorMouseMove: function tab_TiledViewerRegion$onSelectorMouseMove(e, selector) {
        e.preventDefault();
        selector.recordScrollingOffsets(tab.$create_Point(this.scroller.get_scrollPos().x, this.scroller.get_scrollPos().y));
        var posNode = selector.get_connectNodePos();
        var vizX = e.get_gestureInfo().pageX - posNode.x;
        var vizY = e.get_gestureInfo().pageY - posNode.y;
        var outsideVizX = (vizX < 0) ? vizX : ((vizX > posNode.w) ? vizX - posNode.w : 0);
        var outsideVizY = (vizY < 0) ? vizY : ((vizY > posNode.h) ? vizY - posNode.h : 0);
        var scrollX = this.determineScrollDirection(0, outsideVizX);
        var scrollY = this.determineScrollDirection(1, outsideVizY);
        var scrollInterval = (Math.max(Math.abs(outsideVizX), Math.abs(outsideVizY)) > 15) ? 'fast' : 'slow';
        if (!!scrollX || !!scrollY) {
            this.startScrolling(scrollX, scrollY, scrollInterval);
            selector.constrainShape(e.get_gestureInfo());
        }
        else {
            this.stopScrolling();
            selector.updateAndRenderShape(e.get_gestureInfo());
        }
    },
    
    debugWindowLog: function tab_TiledViewerRegion$debugWindowLog(a) {
        if (ss.isValue(tab.TiledViewerRegion.windowLog)) {
            tab.TiledViewerRegion.windowLog.debug(a());
        }
    },
    
    toLocalCoords: function tab_TiledViewerRegion$toLocalCoords(position, doNotIncludeScroll) {
        var localOffset = tab.RecordCast.dojoCoordsAsPoint(this.getLocalOffset(doNotIncludeScroll));
        var ret = tab.$create_Point(position.x - localOffset.x, position.y - localOffset.y);
        return ret;
    },
    
    toLocalCoordsRect: function tab_TiledViewerRegion$toLocalCoordsRect(rect, doNotIncludeScroll) {
        var localOffset = tab.RecordCast.dojoCoordsAsPoint(this.getLocalOffset(doNotIncludeScroll));
        var ret = tab.$create_RectXY(rect.x - localOffset.x, rect.y - localOffset.y, rect.w, rect.h);
        return ret;
    },
    
    toLocalCoordsEvent: function tab_TiledViewerRegion$toLocalCoordsEvent(ev, doNotIncludeScroll) {
        var position = tab.$create_Point(ev.get_gestureInfo().pageX, ev.get_gestureInfo().pageY);
        return this.toLocalCoords(position, doNotIncludeScroll);
    },
    
    getLocalOffset: function tab_TiledViewerRegion$getLocalOffset(doNotIncludeScroll) {
        var posOrigin = tab.DomUtil.getDojoCoordsJQ(this.connectNode);
        if ((ss.isValue(doNotIncludeScroll) && doNotIncludeScroll) || ss.isNullOrUndefined(this.regionContent)) {
            return posOrigin;
        }
        posOrigin.x -= this.regionContent.get_scrollPos().x;
        posOrigin.y -= this.regionContent.get_scrollPos().y;
        return posOrigin;
    },
    
    getPaneDescriptorFromSelectionAnchor: function tab_TiledViewerRegion$getPaneDescriptorFromSelectionAnchor(selectionAnchor) {
        this._ensureHitTestStructure();
        var ht = new tab.HitTester(this._hitTestStructure);
        var selectionAnchorRect = tab.$create_RectXY(selectionAnchor.x, selectionAnchor.y, 1, 1);
        var paneKeys = ht.hitTestPanes(selectionAnchorRect);
        if (!paneKeys.length) {
            tab.Log.get(this).warn("HitTestPanes didn't return any panes. Selection anchor might be invalid: %s.", selectionAnchor.toString());
            return '';
        }
        var paneKey = paneKeys[0];
        var pdi = this.get_sceneInfo().getPaneDrawInfoFromKey(paneKey);
        return pdi.get_paneDescriptorKey();
    },
    
    _determineDefaultToolMode: function tab_TiledViewerRegion$_determineDefaultToolMode(viewModel) {
        if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.newSelectionTools)) {
            if (viewModel.get_mapServerModel().get_hasPresModel() || viewModel.get_visualModel().get_hasBackgroundImage()) {
                return 'pan';
            }
            return 'rectSelect';
        }
        else {
            return 'rectSelect';
        }
    },
    
    hitTestVisualPartsHelper: function tab_TiledViewerRegion$hitTestVisualPartsHelper(rect, isSingleSelect, markHits) {
        return (tab.HitTestResult.hasExactHit(markHits)) ? new Array(0) : this._hitTestVisualParts(rect, isSingleSelect);
    },
    
    _hitTestVisualParts: function tab_TiledViewerRegion$_hitTestVisualParts(rect, isSingleSelect) {
        ss.Debug.assert(tab.ApplicationModel.get_instance().get_isLocalRenderMode(), 'HitTestVisualParts should only be used in local render mode.');
        var mc = tabBootstrap.MetricsController.get_instance().createContext('HitTestVisualParts', tabBootstrap.MetricsSuites.hitTest);
        var toRet = [];
        var refLines = this.paneTableViewModel.get_refLineVisualLists();
        if (ss.isValue(refLines)) {
            var $enum1 = ss.IEnumerator.getEnumerator(refLines);
            while ($enum1.moveNext()) {
                var refLine = $enum1.current;
                var referenceLineHit = tab.VisualPartsHitTest.hitTestRefLines(refLine.drawItems, rect, isSingleSelect);
                if (!!referenceLineHit.get_hitType()) {
                    tab.Log.get(this).debug('Ref Line HIT');
                    toRet.push(referenceLineHit);
                    if (referenceLineHit.get_hitType() === 3) {
                        break;
                    }
                }
            }
        }
        var exactHitRefLine = tab.HitTestResult.hasExactHit(toRet);
        if (!exactHitRefLine) {
            this._ensureTrendLineHitTestStructure();
            var trendLineHit = tab.VisualPartsHitTest.hitTestTrendLines(this._trendLineHitTestStructures, rect, isSingleSelect);
            if (!!trendLineHit.get_hitType()) {
                tab.Log.get(this).debug('Trend Line HIT');
                var exactHitTrendLine = tab.HitTestResult.hasExactHit([ trendLineHit ]);
                if (exactHitTrendLine || !toRet.length) {
                    toRet = [];
                    toRet.push(trendLineHit);
                }
            }
        }
        mc.close();
        tab.Log.get(this).debug('HitTestVisualParts took: %d ms', mc.elapsedMS());
        return toRet;
    },
    
    hitTestMarksAgainstSelectionShape: function tab_TiledViewerRegion$hitTestMarksAgainstSelectionShape() {
        return this.hitTestMarks(null, false);
    },
    
    hitTestMarks: function tab_TiledViewerRegion$hitTestMarks(selRect, isSingleSelect) {
        ss.Debug.assert(tab.ApplicationModel.get_instance().get_isLocalRenderMode(), 'HitTestMarks should only be used in local render mode.');
        var mc = tabBootstrap.MetricsController.get_instance().createContext('HitTestMarks', tabBootstrap.MetricsSuites.hitTest);
        this._ensureHitTestStructure();
        var ht = new tab.HitTester(this._hitTestStructure);
        var selected = (selRect == null) ? this._shapeSelector.hitTest(ht, isSingleSelect, this.get_sceneInfo()) : ht.hitTest(selRect, isSingleSelect, this.get_sceneInfo());
        mc.close();
        if (selected.length > 0) {
            tab.Log.get(this).debug('HitTestMarks: %d ms', mc.elapsedMS());
            tab.Log.get(this).debug('Marks: %o)', selected.join(' '));
        }
        return selected;
    },
    
    selectNode: function tab_TiledViewerRegion$selectNode(coords, selected, action, tooltipCallback) {
        var vlvm = this.get_vlvm();
        vlvm.selectNode(coords, selected, action, tooltipCallback);
    },
    
    hitTestNodes: function tab_TiledViewerRegion$hitTestNodes(coords) {
        var vlvm = this.get_vlvm();
        var hitNode = _.find(vlvm.get_groupItemNodes(), function(model) {
            var x = (model.extentsX || 0);
            var y = (model.extentsY || 0);
            var extents = tab.$create_RectXY(x, y, model.extentsWidth, model.extentsHeight);
            return tab.RectXYUtil.inRect(extents, coords);
        });
        return hitNode;
    },
    
    doSelectFromPoint: function tab_TiledViewerRegion$doSelectFromPoint(coords, action) {
        var selRect = tab.$create_RectXY(coords.x, coords.y, 1, 1);
        var toRet = this._hitTestObjectsInRect(selRect);
        var visualId = this.paneTableViewModel.get_visualId();
        switch (toRet.second) {
            case 'mark':
                tab.SelectionClientCommands.selectMarksLocal(toRet.first, visualId, action, false);
                break;
            case 'visualparts':
                tab.SelectionClientCommands.selectRegion(this._regionPart, selRect, action, visualId);
                break;
            default:
                tab.SelectionClientCommands.clearAllSelections(visualId);
                break;
        }
        return toRet;
    },
    
    _hitTestObjectsInRect: function tab_TiledViewerRegion$_hitTestObjectsInRect(rect) {
        var toRet = new ss.Tuple();
        toRet.first = new Array(0);
        toRet.second = 'unspecified';
        var markHits = this.hitTestMarks(rect, true);
        var existExactHitOnMarks = tab.HitTestResult.hasExactHit(markHits);
        if (existExactHitOnMarks) {
            toRet.first = tab.HitTestResult.getIdsFromHitTestResults(markHits);
            toRet.second = 'mark';
        }
        else {
            var visualPartHits = this._hitTestVisualParts(rect, true);
            var hitObject = tab.HitTestResult.tieBreakHits(markHits, visualPartHits);
            switch (hitObject.get_hitObjectType()) {
                case 1:
                    toRet.first = tab.HitTestResult.getIdsFromHitTestResults(markHits);
                    toRet.second = 'mark';
                    break;
                case 2:
                case 3:
                    toRet.first = tab.HitTestResult.getIdsFromHitTestResults(visualPartHits);
                    toRet.second = 'visualparts';
                    break;
            }
        }
        return toRet;
    },
    
    doSelectMarkAndUbertipFromSelectionShape: function tab_TiledViewerRegion$doSelectMarkAndUbertipFromSelectionShape(action, tooltipCallback) {
        var objectIds = tab.HitTestResult.getIdsFromHitTestResults(this.hitTestMarksAgainstSelectionShape());
        tab.SelectionClientCommands.selectMarksLocal(objectIds, this.paneTableViewModel.get_visualId(), action, true, tooltipCallback);
        return objectIds;
    },
    
    zoomHome: function tab_TiledViewerRegion$zoomHome() {
        this.backgroundMap.splatOverlayToMapForTransition(tab.TiledViewerRegion.getCanvasElement(this.connectNode));
        this.setViewportBorderVisibility(true);
        this.backgroundMap._zoomHome();
    },
    
    moveMapToBounds: function tab_TiledViewerRegion$moveMapToBounds(bounds) {
        if (this.paneTableViewModel.get_visualModel().get_shouldUpdate()) {
            this.backgroundMap.splatOverlayToMapForTransition(tab.TiledViewerRegion.getCanvasElement(this.connectNode));
            this.setViewportBorderVisibility(true);
            this.backgroundMap.moveToBounds(bounds);
        }
    },
    
    setPointerToolMode: function tab_TiledViewerRegion$setPointerToolMode(mode) {
        if (ss.isNullOrUndefined(mode)) {
            mode = this.get_defaultPointerToolMode();
        }
        this.setMode(mode);
    },
    
    isSelectingToolActive: function tab_TiledViewerRegion$isSelectingToolActive() {
        return this.get_currentPointerToolMode() === 'rectSelect' || this.get_currentPointerToolMode() === 'lassoSelect' || this.get_currentPointerToolMode() === 'radialSelect';
    },
    
    isExistingSelection: function tab_TiledViewerRegion$isExistingSelection() {
        var visualId = this.paneTableViewModel.get_visualId();
        var tupleSelection = tab.ModelUtils.getVisualModelFromVisualId(visualId).get_selectionsModel().get_tupleSelection();
        return !!tupleSelection.get_ids().length;
    },
    
    _onSceneChanged: function tab_TiledViewerRegion$_onSceneChanged(sender, e) {
        if (e.get_propertyName() === 'scene' || e.get_propertyName() === 'vizdata') {
            this._hitTestStructure = null;
            this._trendLineHitTestStructures = null;
        }
    },
    
    _resetView: function tab_TiledViewerRegion$_resetView() {
        this.get_contentProvider().set_scrollPos(tab.$create_Point(0, 0));
    },
    
    suppressTooltips: function tab_TiledViewerRegion$suppressTooltips() {
    },
    
    zoomPoint: function tab_TiledViewerRegion$zoomPoint(paneInfo, point, scale, isDoubleClick, deferAPIforDoubleClick) {
        if (this.resetIsWaitingOnTransition) {
            return;
        }
        this.waitingOnPanZoomServerResponse = 'waitingOnServer';
        this.suppressTooltips();
        var scaleX = (paneInfo.canDragH) ? scale : 1;
        var scaleY = (paneInfo.canDragV) ? scale : 1;
        var paneResolverPoint = point;
        if (isDoubleClick) {
            this.viewSession.zoomDoubleClick(this.get_regionPart(), point, paneResolverPoint, (scale > 1), deferAPIforDoubleClick);
        }
        else if (scale > 1) {
            this.viewSession.zoomIn(this.get_regionPart(), point, paneResolverPoint);
        }
        else {
            this.viewSession.zoomOut(this.get_regionPart(), point, paneResolverPoint);
        }
        var zoomDir = (scale > 1) ? 1 : -1;
        this.backgroundMap.zoomOnPoint(point, zoomDir);
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode() || this.paneTableViewModel.get_visualModel().get_cacheUrlInfo().useUrl) {
            this.animateZoomOnPoint(paneInfo, point, scaleX, scaleY);
        }
    },
    
    makeDomDrag: function tab_TiledViewerRegion$makeDomDrag() {
        this.domPanZoomRect.createDomAndAppend(this.connectNode);
        this.domDragImage = $('<div></div>');
        this.addHiddenDiv(this.domDragImage, 'tvdrag_image', this.domPanZoomRect.get_dom());
        this.domDragMask = $('<div></div>');
        this.addHiddenDiv(this.domDragMask, 'tvdrag_mask', this.domPanZoomRect.get_dom());
    },
    
    showDomDragImage: function tab_TiledViewerRegion$showDomDragImage(paneInfo) {
        this.setViewportBorderVisibility(true);
        if (this.backgroundMap.get_enabled() && !this._controlledAnimateZoomRequired()) {
            this.backgroundMap.splatOverlayToMapForTransition(tab.TiledViewerRegion.getCanvasElement(this.connectNode));
        }
        else {
            var scrollPos = this.scroller.get_scrollPos();
            var box = tab.$create_Rect(paneInfo.x - scrollPos.x + 1, paneInfo.y - scrollPos.y + 1, paneInfo.w + 1 - (2 * 1), paneInfo.h + 1 - (2 * 1));
            var container = this._imagesContainer.clone();
            if (Type.canCast(this.regionContent, tab.VisualRegionCanvasView)) {
                var newCanvas = tab.TiledViewerRegion.getCanvasElement(container);
                var context = tab.CanvasRenderer.getRenderContext(newCanvas);
                (this.regionContent).copyContent(context);
            }
            container.removeClass();
            container.addClass('tvdrag_imageContainer');
            this.domDragImage.append(container);
            this.domDragImage.css('display', '');
            var AdditionalOffset = 2 - 1;
            tab.DomUtil.setMarginBoxJQ(container, tab.$create_Rect(-box.l - AdditionalOffset, -box.t - AdditionalOffset, container.width() - (2 * 1), container.height() - (2 * 1)));
            tab.DomUtil.setMarginBoxJQ(this.domDragImage, tab.$create_Rect(scrollPos.x + AdditionalOffset, scrollPos.y + AdditionalOffset, box.w - (2 * AdditionalOffset), box.h - (2 * AdditionalOffset)));
            this.domDragMask.css('background-color', this.getPanZoomFillColor());
            this.domDragMask.css('display', '');
            tab.DomUtil.setMarginBoxJQ(this.domPanZoomRect.get_dom(), box);
            this.domPanZoomRect.get_dom().css('display', '');
        }
    },
    
    getCenterPoint: function tab_TiledViewerRegion$getCenterPoint(rect) {
        var x = Math.floor(rect.w / 2) + rect.x;
        var y = Math.floor(rect.h / 2) + rect.y;
        return tab.$create_Point(x, y);
    },
    
    addHiddenDiv: function tab_TiledViewerRegion$addHiddenDiv(newDiv, klass, parentNode) {
        newDiv.addClass(klass);
        newDiv.css('display', 'none');
        parentNode.append(newDiv);
    },
    
    _controlledAnimateZoomRequired: function tab_TiledViewerRegion$_controlledAnimateZoomRequired() {
        return tab.BrowserSupport.get_isIE() && !this.backgroundMap.get_enabled() && (!tab.BrowserSupport.get_cssTransform() || ss.isNullOrUndefined(tab.BrowserSupport.get_cssTransitionName()));
    },
    
    animateZoomOnPoint: function tab_TiledViewerRegion$animateZoomOnPoint(paneInfo, point, scaleX, scaleY) {
        var x = (scaleX < 1) ? -1 : (scaleX > 1) ? 1 : 0;
        var y = (scaleY < 1) ? -1 : (scaleY > 1) ? 1 : 0;
        var direction = tab.$create_Point(x, y);
        var paneCenter = this.getCenterPoint(paneInfo);
        var translateX = Math.floor((paneCenter.x - point.x) * direction.x * scaleX);
        var translateY = Math.floor((paneCenter.y - point.y) * direction.y * scaleY);
        var transform = tab.$create_TransformSpec();
        transform.translateX = translateX;
        transform.translateY = translateY;
        transform.scaleX = scaleX;
        transform.scaleY = scaleY;
        transform.time = 777;
        this.showDomDragImage(paneInfo);
        if (this._controlledAnimateZoomRequired()) {
            this._controlledAnimateZoom(paneInfo, transform);
            return;
        }
        var domDragImageEl = this.domDragImage.get(0);
        this.resetIsWaitingOnData = true;
        this.resetIsWaitingOnTransition = true;
        window.setTimeout(ss.Delegate.create(this, function() {
            tableau.util.transform(domDragImageEl, transform);
            var MinTimeBeforeReset = 500;
            window.setTimeout(ss.Delegate.create(this, function() {
                this.resetIsWaitingOnTransition = false;
                if (!this.resetIsWaitingOnData) {
                    this.reset();
                }
            }), MinTimeBeforeReset);
        }), 50);
    },
    
    _controlledAnimateZoom: function tab_TiledViewerRegion$_controlledAnimateZoom(pane, transform) {
        var animationTargets;
        var scaleX = transform.scaleX;
        var scaleY = transform.scaleY;
        if (!tab.BrowserSupport.get_isIE()) {
            return;
        }
        this.resetControlledAnimations();
        var margin = tab.DomUtil.getMarginBoxJQ(this.domDragImage);
        animationTargets = {};
        var animationWidth = Math.floor(margin.w * scaleX);
        var animationHeight = Math.floor(margin.h * scaleY);
        var animationLeft = transform.translateX + Math.floor((margin.w / 2) - (animationWidth / 2));
        var animationTop = transform.translateY + Math.floor((margin.h / 2) - (animationHeight / 2));
        animationTargets['left'] = animationLeft;
        animationTargets['top'] = animationTop;
        animationTargets['width'] = animationWidth;
        animationTargets['height'] = animationHeight;
        this._controlledAnimations.add(new tab._controlledAnimation(this.domDragImage, animationTargets, 777));
        var dragImagesContainer = this.domDragImage.children().first();
        margin = tab.DomUtil.getMarginBoxJQ(dragImagesContainer);
        animationTargets = {};
        animationTargets['width'] = Math.floor(margin.w * scaleX) + pane.x;
        animationTargets['height'] = Math.floor(margin.h * scaleY) + pane.y;
        this._controlledAnimations.add(new tab._controlledAnimation(dragImagesContainer, animationTargets, 777));
        var x = (pane.x * (1 - scaleX));
        var y = (pane.y * (1 - scaleY));
        var tilePaneAdjustment = tab.$create_Point(x, y);
        dragImagesContainer.children().each(ss.Delegate.create(this, function(i, tile) {
            var tileObj = $(tile);
            margin = tab.DomUtil.getMarginBoxJQ(tileObj);
            animationTargets = {};
            animationTargets['left'] = ((margin.l * scaleX) + tilePaneAdjustment.x);
            animationTargets['top'] = ((margin.t * scaleY) + tilePaneAdjustment.y);
            animationTargets['width'] = Math.floor(margin.w * scaleX);
            animationTargets['height'] = Math.floor(margin.h * scaleY);
            this._controlledAnimations.add(new tab._controlledAnimation(tileObj, animationTargets, 777));
        }));
        this._controlledAnimations.forEach(function(animation) {
            animation._play();
        });
    },
    
    resetControlledAnimations: function tab_TiledViewerRegion$resetControlledAnimations() {
        if (!tab.BrowserSupport.get_isIE()) {
            return;
        }
        if (!ss.isValue(this._controlledAnimations)) {
            this._controlledAnimations = [];
        }
        this._controlledAnimations.forEach(function(animation) {
            animation._stop(true);
        });
        this._controlledAnimations.clear();
    },
    
    _ensureHitTestStructure: function tab_TiledViewerRegion$_ensureHitTestStructure() {
        if (ss.isNullOrUndefined(this._hitTestStructure)) {
            this._hitTestStructure = tab.HitTestStructureBuilder.buildLinearHitTestStructure(this.get_sceneInfo());
        }
    },
    
    _ensureTrendLineHitTestStructure: function tab_TiledViewerRegion$_ensureTrendLineHitTestStructure() {
        if (ss.isNullOrUndefined(this._trendLineHitTestStructures)) {
            this._trendLineHitTestStructures = [];
            var visualListRegion = this.get_contentProvider();
            var ptvm = visualListRegion.get_viewModel();
            var trendLineVLPMs = ptvm.get_trendLineVisualLists();
            if (ss.isValue(trendLineVLPMs)) {
                var $enum1 = ss.IEnumerator.getEnumerator(trendLineVLPMs);
                while ($enum1.moveNext()) {
                    var trendLineVLPM = $enum1.current;
                    var trendLines = trendLineVLPM.drawItems;
                    var lineWidth = 1;
                    var $enum2 = ss.IEnumerator.getEnumerator(trendLines);
                    while ($enum2.moveNext()) {
                        var trendLine = $enum2.current;
                        if (trendLine.type === 'draw-group') {
                            var trendLineGroup = trendLine;
                            var $enum3 = ss.IEnumerator.getEnumerator(trendLineGroup.drawItems);
                            while ($enum3.moveNext()) {
                                var part = $enum3.current;
                                switch (part.type) {
                                    case 'draw-pen':
                                        var drawPen = part;
                                        if (ss.isValue(drawPen.strokeWidth)) {
                                            lineWidth = drawPen.strokeWidth;
                                        }
                                        break;
                                    case 'draw-path':
                                        var drawPath = part;
                                        var root = tab.HitTestStructureBuilder.buildTrendLineHitTestStructure(drawPath, lineWidth, trendLineGroup.objectId);
                                        this._trendLineHitTestStructures.add(root);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    
    onRegionContentLoadComplete: function tab_TiledViewerRegion$onRegionContentLoadComplete(sender, e) {
        if (this.waitingOnPanZoomServerResponse === 'waitingOnServer') {
            this.waitingOnPanZoomServerResponse = 'normal';
        }
        if (this.get_regionPart() === 'viz') {
            if (!this.isScrolling) {
                tab.Log.get(this).debug('Hiding domDragImage');
                this.domDragMask.css('display', 'none');
                this.domDragImage.css('display', 'none');
                this.domPanZoomRect.get_dom().css('display', 'none');
                this.get_shapeSelector().get_dom().css('display', 'none');
                this.domDragImage.html('');
            }
            tableau.util.transform(this.domDragImage.get(0));
        }
    },
    
    getPanZoomFillColor: function tab_TiledViewerRegion$getPanZoomFillColor() {
        var toRet = 'rgb(255,255,255)';
        if (this._regionPart === 'viz') {
            if (this.paneTableViewModel.get_mapServerModel().get_hasPresModel()) {
                toRet = this.paneTableViewModel.get_mapServerModel().get_mapBGFillColor();
            }
            else if (ss.isValue(this.paneTableViewModel.get_scene().get_scene())) {
                toRet = this.paneTableViewModel.get_scene().get_scene().bgColor;
            }
        }
        return toRet;
    },
    
    _updateBackgroundMapVisibility: function tab_TiledViewerRegion$_updateBackgroundMapVisibility() {
        if (this._regionPart === 'viz') {
            this.setViewportBorderVisibility(false);
            var backgroundDiv = this.connectNode.find('.tvBackgroundContainer');
            var ms = this.paneTableViewModel.get_mapServerModel();
            if (ms.get_hasPresModel()) {
                if (ms.get_useFastMaps() && !this.backgroundMap.get_enabled()) {
                    this.backgroundMap._createMap(backgroundDiv, this.paneTableViewModel.get_mapServerModel());
                }
            }
            else {
                this.backgroundMap._destroyMap();
            }
            var backgroundColor = this.getPanZoomFillColor();
            backgroundDiv.css('backgroundColor', backgroundColor);
        }
    },
    
    _resetPointerToolMode: function tab_TiledViewerRegion$_resetPointerToolMode() {
        this.setPointerToolMode(this.get_defaultPointerToolMode());
    },
    
    setViewportBorderVisibility: function tab_TiledViewerRegion$setViewportBorderVisibility(visible) {
        this.viewportBorder.css('display', (visible) ? '' : 'none');
    },
    
    setMode: function tab_TiledViewerRegion$setMode(mode) {
        this._currentToolMode = mode;
        this.updateSelectorShape(mode);
    },
    
    updateSelectorShape: function tab_TiledViewerRegion$updateSelectorShape(mode) {
        if (this._shapeSelector != null) {
            this._shapeSelector.get_dom().remove();
            this._shapeSelector = null;
        }
        switch (mode) {
            case 'lassoSelect':
                this._shapeSelector = new tab.PolyShapeSelector(this._regionSize);
                break;
            case 'radialSelect':
                this._shapeSelector = new tab.CircleShapeSelector(this._regionSize);
                break;
            case 'rectSelect':
            default:
                this._shapeSelector = new tab.RectShapeSelector();
                break;
        }
        this._shapeSelector.createDomAndAppend(this.connectNode);
    },
    
    isToolDefault: function tab_TiledViewerRegion$isToolDefault(mode) {
        return mode === this.get_defaultPointerToolMode();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._controlledAnimation

tab._controlledAnimation = function tab__controlledAnimation(element, animationTargets, duration) {
    this._element = element;
    this._animationTargets = animationTargets;
    this._duration = duration;
}
tab._controlledAnimation.prototype = {
    _element: null,
    _animationTargets: null,
    _duration: 0,
    
    _play: function tab__controlledAnimation$_play() {
        this._element.animate(this._animationTargets, this._duration);
    },
    
    _stop: function tab__controlledAnimation$_stop(clearQueue) {
        this._element.stop(clearQueue);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ChecklistContentFormatter

tab.ChecklistContentFormatter = function tab_ChecklistContentFormatter(filter, itemName, itemFormatter) {
    tab.ChecklistContentFormatter.initializeBase(this, [ filter, itemName, itemFormatter ]);
}
tab.ChecklistContentFormatter.prototype = {
    
    isValid: function tab_ChecklistContentFormatter$isValid(data) {
        var tuples = Type.safeCast(data, Array);
        return ss.isValue(tuples) && !!tuples.length;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ContentFetchedEventArgs

tab.ContentFetchedEventArgs = function tab_ContentFetchedEventArgs(tileIndex, itemRange, data) {
    tab.ContentFetchedEventArgs.initializeBase(this);
    this._tileIndex$1 = tileIndex;
    this._itemRange$1 = itemRange;
    this._data$1 = data;
}
tab.ContentFetchedEventArgs.prototype = {
    _tileIndex$1: 0,
    _itemRange$1: null,
    _data$1: null,
    
    get_data: function tab_ContentFetchedEventArgs$get_data() {
        return this._data$1;
    },
    
    get_tileIndex: function tab_ContentFetchedEventArgs$get_tileIndex() {
        return this._tileIndex$1;
    },
    
    get_itemRange: function tab_ContentFetchedEventArgs$get_itemRange() {
        return this._itemRange$1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FetchInfo

tab.FetchInfo = function tab_FetchInfo(tileIndex, range, rangeType) {
    this._tileIndex = tileIndex;
    this._range = range;
    this._rangeType = rangeType;
}
tab.FetchInfo.prototype = {
    _tileIndex: 0,
    _range: null,
    _rangeType: null,
    
    get_tileIndex: function tab_FetchInfo$get_tileIndex() {
        return this._tileIndex;
    },
    
    get_range: function tab_FetchInfo$get_range() {
        return this._range;
    },
    
    get_rangeType: function tab_FetchInfo$get_rangeType() {
        return this._rangeType;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FilterContentFetcher

tab.FilterContentFetcher = function tab_FilterContentFetcher(sheetSessionRef, filterName, domain) {
    this._filterName = filterName;
    this._sheetSessionRef = sheetSessionRef;
    this._domain = domain;
    this._pendingTiles = [];
    this._priorityQueue = [];
}
tab.FilterContentFetcher.prototype = {
    _filterName: null,
    _sheetSessionRef: null,
    _domain: null,
    _pendingTiles: null,
    _priorityQueue: null,
    _maxQueueSize: 5,
    _isFetching: false,
    
    add_contentFetched: function tab_FilterContentFetcher$add_contentFetched(value) {
        this.__contentFetched = ss.Delegate.combine(this.__contentFetched, value);
    },
    remove_contentFetched: function tab_FilterContentFetcher$remove_contentFetched(value) {
        this.__contentFetched = ss.Delegate.remove(this.__contentFetched, value);
    },
    
    __contentFetched: null,
    
    destroy: function tab_FilterContentFetcher$destroy() {
    },
    
    fetch: function tab_FilterContentFetcher$fetch(fetchList) {
        for (var i = 0; i < fetchList.length; ++i) {
            var fetchInfo = fetchList[i];
            if (this._pendingTiles.contains(fetchInfo.get_tileIndex())) {
                continue;
            }
            this._pendingTiles.add(fetchInfo.get_tileIndex());
            this._priorityQueue.add(fetchInfo);
        }
        while (this._priorityQueue.length > this._maxQueueSize) {
            var oldRequest = this._priorityQueue[0];
            this._pendingTiles.remove(oldRequest.get_tileIndex());
            this._priorityQueue.remove(oldRequest);
        }
        this._tryFetchMostRecent();
    },
    
    isTilePending: function tab_FilterContentFetcher$isTilePending(tileIndex) {
        return this._pendingTiles.contains(tileIndex);
    },
    
    _getFetchFunc: function tab_FilterContentFetcher$_getFetchFunc(fetchInfo) {
        var action = ss.Delegate.create(this, function() {
            this._singleFetch(fetchInfo);
        });
        return action;
    },
    
    _singleFetch: function tab_FilterContentFetcher$_singleFetch(fetchInfo) {
        var onComplete = ss.Delegate.create(this, function(response) {
            tab.Log.get(this).debug('fetch completed: tile #%d', fetchInfo.get_tileIndex());
            this._isFetching = false;
            this._pendingTiles.remove(fetchInfo.get_tileIndex());
            var content = new tab.ContentFetchedEventArgs(fetchInfo.get_tileIndex(), fetchInfo.get_range(), response);
            this.__contentFetched(this, content);
            this._tryFetchMostRecent();
        });
        var onError = ss.Delegate.create(this, function(response) {
            this._isFetching = false;
            this._pendingTiles.remove(fetchInfo.get_tileIndex());
            this._tryFetchMostRecent();
        });
        this._sheetSessionRef.getFilterItems(this._filterName, this._domain, fetchInfo.get_range(), onComplete, onError);
    },
    
    _tryFetchMostRecent: function tab_FilterContentFetcher$_tryFetchMostRecent() {
        if (this._priorityQueue.length > 0 && !this._isFetching) {
            this._isFetching = true;
            var lastIndex = this._priorityQueue.length - 1;
            var fetchNow = this._priorityQueue[lastIndex];
            this._priorityQueue.removeAt(lastIndex);
            var fetchFunc = this._getFetchFunc(fetchNow);
            window.setTimeout(fetchFunc, 0);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.FilterListUI

tab.FilterListUI = function tab_FilterListUI(windowEl, totalHeight, tileCount) {
    this._windowNode = $(windowEl);
    this._windowNode.addClass('tiledContent');
    var tileContainerEl = document.createElement('div');
    this._tileContainerNode = $(tileContainerEl);
    this._tileContainerNode.css('left', '0px');
    this._tileContainerNode.css('position', 'relative');
    this._tileContainerNode.css('height', totalHeight + 'px');
    this._tileContainerNode.css('width', this._windowNode.css('width') + 'px');
    this._tileContainerNode.addClass('tileContainer');
    this._windowNode.append(this._tileContainerNode);
    this._windowNode.scroll(ss.Delegate.create(this, this._onScrolled));
    this._tileNodes = new Array(tileCount);
}
tab.FilterListUI.prototype = {
    _windowNode: null,
    _tileContainerNode: null,
    _tileNodes: null,
    _latestScroll: null,
    _lastScrollTime: 0,
    _lastScrollTop: 0,
    
    add_scrolled: function tab_FilterListUI$add_scrolled(value) {
        this.__scrolled = ss.Delegate.combine(this.__scrolled, value);
    },
    remove_scrolled: function tab_FilterListUI$remove_scrolled(value) {
        this.__scrolled = ss.Delegate.remove(this.__scrolled, value);
    },
    
    __scrolled: null,
    
    get_windowNode: function tab_FilterListUI$get_windowNode() {
        return this._windowNode;
    },
    
    get_tileContainerNode: function tab_FilterListUI$get_tileContainerNode() {
        return this._tileContainerNode;
    },
    
    destroy: function tab_FilterListUI$destroy() {
        this._windowNode.unbind('scroll');
        this._tileContainerNode.remove();
    },
    
    setContent: function tab_FilterListUI$setContent(tileIndex, htmlContent) {
        var tileNode = $(htmlContent);
        this._tileContainerNode.append(tileNode);
        this._tileNodes[tileIndex] = tileNode;
    },
    
    getTileElement: function tab_FilterListUI$getTileElement(index) {
        if (index < 0 || index >= this._tileNodes.length) {
            tab.Log.get(this).warn('internal error: index out of bounds');
            return null;
        }
        return this._tileNodes[index].get(0);
    },
    
    getItemElement: function tab_FilterListUI$getItemElement(tileIndex, itemIndex) {
        var targetTileEl = this.getTileElement(tileIndex);
        if (targetTileEl == null) {
            return null;
        }
        var itemEls = targetTileEl.children;
        if (itemEls.length < itemIndex || itemIndex < 0) {
            tab.Log.get(this).warn('internal error: index out of bounds');
            return null;
        }
        return itemEls[itemIndex];
    },
    
    _onScrolled: function tab_FilterListUI$_onScrolled(e) {
        var currentScrollTime = Date.get_now().getMilliseconds();
        var currentScrollTop = this._windowNode.parent().offset().top - this._tileContainerNode.offset().top;
        var scrollVelocity = 0;
        if (this._latestScroll != null) {
            var deltaTop = Math.abs(this._lastScrollTop - currentScrollTop);
            var deltaTime = currentScrollTime - this._lastScrollTime;
            scrollVelocity = deltaTop / deltaTime;
        }
        var scrolledArgs = new tab.ScrolledEventArgs(tab.$create_Point(0, currentScrollTop));
        this._lastScrollTop = currentScrollTop;
        this._lastScrollTime = currentScrollTime;
        this._latestScroll = scrolledArgs;
        var action = ss.Delegate.create(this, function() {
            if (scrolledArgs === this._latestScroll) {
                this.__scrolled(this, scrolledArgs);
            }
        });
        if (scrollVelocity > tab.FilterListUI._scrollVelocityThreshold) {
            window.setTimeout(action, 100);
        }
        else {
            action();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ListGridModel

tab.ListGridModel = function tab_ListGridModel(itemCount, itemHeight, tileSize, viewportHeight) {
    this._itemCount = itemCount;
    this._itemHeight = itemHeight;
    this._tileSize = tileSize;
    this._viewportHeight = viewportHeight;
    this._totalHeight = this._itemCount * this._itemHeight;
    this._tileCount = Math.ceil(itemCount / tileSize);
    this._grid = {};
    var y = 0;
    var tileHeight = tileSize * itemHeight;
    var remainingHeight = this._totalHeight;
    for (var i = 0; i < this._tileCount; ++i) {
        if (remainingHeight < tileHeight) {
            tileHeight = remainingHeight;
        }
        var pixelRange = new tab.IntegerRange(y, (y + tileHeight - 1));
        var itemRange = tab.IntegerRange.pixelToItemRange(pixelRange, itemHeight);
        var info = new tab._tileInfo(i, false, tab.$create_Point(0, y), itemRange, 'item');
        this._grid[i] = info;
        remainingHeight -= tileHeight;
        y += tileHeight;
    }
}
tab.ListGridModel.prototype = {
    _itemCount: 0,
    _itemHeight: 0,
    _tileSize: 0,
    _viewportHeight: 0,
    _totalHeight: 0,
    _tileCount: 0,
    _grid: null,
    
    get_totalHeight: function tab_ListGridModel$get_totalHeight() {
        return this._totalHeight;
    },
    
    get_itemHeight: function tab_ListGridModel$get_itemHeight() {
        return this._itemHeight;
    },
    
    get_tileCount: function tab_ListGridModel$get_tileCount() {
        return this._tileCount;
    },
    
    get_viewportHeight: function tab_ListGridModel$get_viewportHeight() {
        return this._viewportHeight;
    },
    
    destroy: function tab_ListGridModel$destroy() {
    },
    
    updateViewport: function tab_ListGridModel$updateViewport(width, height) {
        this._viewportHeight = height;
    },
    
    getTileStatus: function tab_ListGridModel$getTileStatus(index) {
        var info = this._grid[index];
        if (ss.isUndefined(info)) {
            tab.Log.get(this).warn('internal error: tile index out of bound');
            return false;
        }
        return info.get_hasLoaded();
    },
    
    updateTileStatus: function tab_ListGridModel$updateTileStatus(index, hasLoaded) {
        var info = this._grid[index];
        if (ss.isUndefined(info)) {
            tab.Log.get(this).warn('internal error: tile index out of bound');
            return;
        }
        this._grid[index].set_hasLoaded(hasLoaded);
    },
    
    getTilePosition: function tab_ListGridModel$getTilePosition(index) {
        var info = this._grid[index];
        if (ss.isUndefined(info)) {
            tab.Log.get(this).warn('internal error: tile index out of bound');
            return null;
        }
        return tab.$create_Point(info.get_pos().x, info.get_pos().y);
    },
    
    getTileRange: function tab_ListGridModel$getTileRange(index) {
        var info = this._grid[index];
        if (ss.isUndefined(info)) {
            tab.Log.get(this).warn('internal error: tile index out of bound');
            return null;
        }
        return new tab.IntegerRange(info.get_range().get_from(), info.get_range().get_to());
    },
    
    getTileRangeType: function tab_ListGridModel$getTileRangeType(index) {
        var info = this._grid[index];
        if (ss.isUndefined(info)) {
            tab.Log.get(this).debug('internal error: tile index out of bound');
            return 'unknown';
        }
        return info.get_rangeType();
    },
    
    pixelToTileRange: function tab_ListGridModel$pixelToTileRange(pixelRange) {
        return tab.IntegerRange.pixelToTileRange(pixelRange, this._itemHeight, this._tileSize);
    },
    
    itemToTileIndex: function tab_ListGridModel$itemToTileIndex(itemIndex) {
        var tileIndex = Math.floor(itemIndex / this._tileSize);
        return tileIndex;
    },
    
    globalToLocalItemIndex: function tab_ListGridModel$globalToLocalItemIndex(globalItemIndex) {
        return globalItemIndex % this._tileSize;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RadiolistContentFormatter

tab.RadiolistContentFormatter = function tab_RadiolistContentFormatter(filter, itemName, itemFormatter) {
    tab.RadiolistContentFormatter.initializeBase(this, [ filter, itemName, itemFormatter ]);
    this.tileHtml = '<div class="tile tab-ctrl-formatted-text" style="top: {0}px; position: absolute; width: 100%;">';
}


////////////////////////////////////////////////////////////////////////////////
// tab.ScrolledEventArgs

tab.ScrolledEventArgs = function tab_ScrolledEventArgs(newPos) {
    tab.ScrolledEventArgs.initializeBase(this);
    this._newPos$1 = newPos;
}
tab.ScrolledEventArgs.prototype = {
    _newPos$1: null,
    
    get_newPos: function tab_ScrolledEventArgs$get_newPos() {
        return this._newPos$1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SimpleListContentFormatter

tab.SimpleListContentFormatter = function tab_SimpleListContentFormatter(filter, itemName, itemFormatter) {
    this._filter = filter;
    this._itemName = itemName;
    this._itemFormatter = itemFormatter;
}
tab.SimpleListContentFormatter.prototype = {
    _filter: null,
    _itemName: null,
    _itemFormatter: null,
    tileHtml: '<div class="tile tab-ctrl-formatted-text" style="top: {0}px; left: 0; right: 0; position: absolute; width: 100%;">',
    
    destroy: function tab_SimpleListContentFormatter$destroy() {
    },
    
    format: function tab_SimpleListContentFormatter$format(data, pos, range) {
        var html = '';
        var tuples = Type.safeCast(data, Array);
        if (ss.isNullOrUndefined(pos)) {
            tab.Log.get(this).warn('internal error: pos is null');
            return html;
        }
        if (ss.isNullOrUndefined(range)) {
            tab.Log.get(this).warn('internal error: range is null');
            return html;
        }
        if (!this.isValid(tuples)) {
            tab.Log.get(this).warn('internal error: invalid data input');
            return html;
        }
        html += String.format(this.tileHtml, pos.y.toString());
        for (var i = 0, itemIndex = range.get_from(); i < tuples.length; ++i, ++itemIndex) {
            html += this._itemFormatter(this._filter, tuples[i], this._itemName, itemIndex);
        }
        html += '</div>';
        return html;
    },
    
    isValid: function tab_SimpleListContentFormatter$isValid(data) {
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledWidget

tab.TiledWidget = function tab_TiledWidget(fetcher, gridModel, ui, formatter, firstTileData, preloadEverything) {
    this._fetcher = fetcher;
    this._gridModel = gridModel;
    this._formatter = formatter;
    this._ui = ui;
    if (this._formatter.isValid(firstTileData)) {
        this._setContent(0, firstTileData);
    }
    this._fetcher.add_contentFetched(ss.Delegate.create(this, this._onContentFetched));
    if (preloadEverything) {
        this._preloadEverything();
    }
    else {
        this._ui.add_scrolled(ss.Delegate.create(this, this._onScrolled));
    }
}
tab.TiledWidget.prototype = {
    _fetcher: null,
    _gridModel: null,
    _formatter: null,
    _ui: null,
    _padding: 100,
    
    destroy: function tab_TiledWidget$destroy() {
        this._ui.remove_scrolled(ss.Delegate.create(this, this._onScrolled));
        this._ui.destroy();
        this._ui = null;
        this._fetcher.remove_contentFetched(ss.Delegate.create(this, this._onContentFetched));
        this._fetcher.destroy();
        this._fetcher = null;
        this._gridModel.destroy();
        this._gridModel = null;
        this._formatter.destroy();
        this._formatter = null;
    },
    
    updateViewport: function tab_TiledWidget$updateViewport(width, height) {
        this._gridModel.updateViewport(width, height);
    },
    
    getElement: function tab_TiledWidget$getElement(globalItemIndex) {
        var tileIndex = this._gridModel.itemToTileIndex(globalItemIndex);
        if (!this._gridModel.getTileStatus(tileIndex)) {
            return null;
        }
        else {
            var localItemIndex = this._gridModel.globalToLocalItemIndex(globalItemIndex);
            return this._ui.getItemElement(tileIndex, localItemIndex);
        }
    },
    
    _setContent: function tab_TiledWidget$_setContent(tileIndex, data) {
        var html = this._formatter.format(data, this._gridModel.getTilePosition(tileIndex), this._gridModel.getTileRange(tileIndex));
        if (!html.length) {
            return;
        }
        this._ui.setContent(tileIndex, html);
        this._gridModel.updateTileStatus(tileIndex, true);
    },
    
    _createFetchInfo: function tab_TiledWidget$_createFetchInfo(tileIndex) {
        var rangeType = this._gridModel.getTileRangeType(tileIndex);
        var range = this._gridModel.getTileRange(tileIndex);
        var fetchInfo = new tab.FetchInfo(tileIndex, range, rangeType);
        return fetchInfo;
    },
    
    _preloadEverything: function tab_TiledWidget$_preloadEverything() {
        var fetchList = [];
        var tileCount = this._gridModel.get_tileCount();
        for (var i = 1; i < tileCount; ++i) {
            var fetchInfo = this._createFetchInfo(i);
            fetchList.add(fetchInfo);
        }
        this._fetcher.fetch(fetchList);
    },
    
    _onScrolled: function tab_TiledWidget$_onScrolled(sender, e) {
        var pixelPadding = this._padding * this._gridModel.get_itemHeight();
        var pixelFrom = e.get_newPos().y - pixelPadding;
        if (pixelFrom < 0) {
            pixelFrom = 0;
        }
        var pixelTo = e.get_newPos().y + pixelPadding + this._gridModel.get_viewportHeight();
        if (pixelTo > this._gridModel.get_totalHeight() - 1) {
            pixelTo = this._gridModel.get_totalHeight() - 1;
        }
        var pixelRange = new tab.IntegerRange(pixelFrom, pixelTo);
        var tileRange = this._gridModel.pixelToTileRange(pixelRange);
        var fetchList = [];
        var from = tileRange.get_from();
        var to = tileRange.get_to();
        for (var i = from; i <= to; ++i) {
            if (this._gridModel.getTileStatus(i) || this._fetcher.isTilePending(i)) {
                continue;
            }
            var fetchInfo = this._createFetchInfo(i);
            fetchList.add(fetchInfo);
        }
        this._fetcher.fetch(fetchList);
    },
    
    _onContentFetched: function tab_TiledWidget$_onContentFetched(sender, e) {
        var tileIndex = e.get_tileIndex();
        var data = e.get_data();
        this._setContent(tileIndex, data);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledWidgetFactory

tab.TiledWidgetFactory = function tab_TiledWidgetFactory() {
}
tab.TiledWidgetFactory.createChecklist = function tab_TiledWidgetFactory$createChecklist(filter, tuples, div, filterName, lineHeight) {
    var formatter = new tab.ChecklistContentFormatter(filter, filterName, filter.get_modeContents().get_itemFormatter());
    return tab.TiledWidgetFactory.createListTiledWidget(filter, tuples, div, formatter, lineHeight);
}
tab.TiledWidgetFactory.createRadiolist = function tab_TiledWidgetFactory$createRadiolist(filter, tuples, div, filterName, lineHeight) {
    var formatter = new tab.RadiolistContentFormatter(filter, filterName, filter.get_modeContents().get_itemFormatter());
    return tab.TiledWidgetFactory.createListTiledWidget(filter, tuples, div, formatter, lineHeight);
}
tab.TiledWidgetFactory.createSimpleList = function tab_TiledWidgetFactory$createSimpleList(filter, tuples, div, filterName, lineHeight) {
    var formatter = new tab.SimpleListContentFormatter(filter, filterName, filter.get_modeContents().get_itemFormatter());
    return tab.TiledWidgetFactory.createListTiledWidget(filter, tuples, div, formatter, lineHeight);
}
tab.TiledWidgetFactory.createListTiledWidget = function tab_TiledWidgetFactory$createListTiledWidget(filter, tuples, div, formatter, lineHeight) {
    var tileCapacity = (filter.get_oFilter().isTiled && tsConfig.filterTileSize > 0) ? tsConfig.filterTileSize : filter.get_oFilter().table.actual_size;
    dojo.style(div, 'position', 'relative');
    var totalHeight = filter.get_oFilter().table.actual_size * lineHeight;
    var tileCount = (!!tileCapacity) ? Math.ceil(filter.get_oFilter().table.actual_size / tileCapacity) : 0;
    var ui = new tab.FilterListUI(div, totalHeight, tileCount);
    var box = dojo.marginBox(div);
    var gridModel = new tab.ListGridModel(filter.get_oFilter().table.actual_size, lineHeight, tileCapacity, box.h);
    var fetcher = new tab.FilterContentFetcher(filter.get_session(), filter.get_field(), filter.get_domain());
    var firstTile = tuples.slice(0, tileCapacity);
    var tiledWidget = new tab.TiledWidget(fetcher, gridModel, ui, formatter, firstTile, false);
    return tiledWidget;
}


////////////////////////////////////////////////////////////////////////////////
// tab._tileInfo

tab._tileInfo = function tab__tileInfo(tileIndex, hasLoaded, pos, range, rangeType) {
    this._tileIndex = tileIndex;
    this._hasLoaded = hasLoaded;
    this._pos = pos;
    this._range = range;
    this._rangeType = rangeType;
}
tab._tileInfo.prototype = {
    _hasLoaded: false,
    _tileIndex: 0,
    _pos: null,
    _range: null,
    _rangeType: null,
    
    get_tileIndex: function tab__tileInfo$get_tileIndex() {
        return this._tileIndex;
    },
    
    get_hasLoaded: function tab__tileInfo$get_hasLoaded() {
        return this._hasLoaded;
    },
    set_hasLoaded: function tab__tileInfo$set_hasLoaded(value) {
        this._hasLoaded = value;
        return value;
    },
    
    get_pos: function tab__tileInfo$get_pos() {
        return this._pos;
    },
    
    get_range: function tab__tileInfo$get_range() {
        return this._range;
    },
    
    get_rangeType: function tab__tileInfo$get_rangeType() {
        return this._rangeType;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TiledWindow

tab.TiledWindow = function tab_TiledWindow(domNode, session, controller, getRequestID, shouldScrollDomNode) {
    this._getRequestID = getRequestID;
    this._domNode = domNode;
    this._session = session;
    this._viewController = controller;
    this._shouldScrollDomNode = shouldScrollDomNode;
    this._geometry = tab.$create_RegionRect(0, 0, 0, 0, '');
    this._tileSize = tab.$create_Size(0, 0);
    this._downloadQueue = new tab.DownloadQueue();
    this._downloadQueue.add_imageLoaded(ss.Delegate.create(this, this._onImageLoaded));
    this._downloadQueue.add_imageTimedOut(ss.Delegate.create(this, this._onImageTimedOut));
    this._downloadQueue.add_complete(ss.Delegate.create(this, this._onQueueComplete));
    this._imageNodes = [];
    this._imageContainers = $('.tvimagesContainer', this._domNode);
}
tab.TiledWindow._ensureImageEltSize = function tab_TiledWindow$_ensureImageEltSize(imgElt, bounds) {
    var devicePixelRatio = tab.RenderUtil.calculatePixelRatio(false);
    if (tab.FloatUtil.isGreaterThan(devicePixelRatio, 1)) {
        var imgNodeJQ = $(imgElt);
        imgNodeJQ.css('width', bounds.w.toString() + 'px');
        imgNodeJQ.css('height', bounds.h.toString() + 'px');
    }
}
tab.TiledWindow.prototype = {
    _domNode: null,
    _downloadQueue: null,
    _geometry: null,
    _session: null,
    _imageContainers: null,
    _imageNodes: null,
    _tilesX: 0,
    _tilesY: 0,
    _tileSize: null,
    _cacheInfo: null,
    _tilesNeedingReload: 0,
    _getRequestID: null,
    _viewController: null,
    _topOffset: 0,
    _leftOffset: 0,
    _shouldScrollDomNode: false,
    
    add_loadComplete: function tab_TiledWindow$add_loadComplete(value) {
        this.__loadComplete = ss.Delegate.combine(this.__loadComplete, value);
    },
    remove_loadComplete: function tab_TiledWindow$remove_loadComplete(value) {
        this.__loadComplete = ss.Delegate.remove(this.__loadComplete, value);
    },
    
    __loadComplete: null,
    
    get_actualViewSize: function tab_TiledWindow$get_actualViewSize() {
        return tab.$create_Size(this._domNode.clientWidth, this._domNode.clientHeight);
    },
    set_actualViewSize: function tab_TiledWindow$set_actualViewSize(value) {
        return value;
    },
    
    get_effectiveViewSize: function tab_TiledWindow$get_effectiveViewSize() {
        return this.get_actualViewSize();
    },
    
    get_scrollPos: function tab_TiledWindow$get_scrollPos() {
        return tab.$create_Point(this.get_left(), this.get_top());
    },
    set_scrollPos: function tab_TiledWindow$set_scrollPos(value) {
        this.set_left(value.x);
        this.set_top(value.y);
        this._loadImages(false);
        return value;
    },
    
    get_canScrollX: function tab_TiledWindow$get_canScrollX() {
        return this.get_docSize().w > this.get_effectiveViewSize().w;
    },
    
    get_canScrollY: function tab_TiledWindow$get_canScrollY() {
        return this.get_docSize().h > this.get_effectiveViewSize().h;
    },
    
    get_docSize: function tab_TiledWindow$get_docSize() {
        return tab.$create_Size(this._geometry.w, this._geometry.h);
    },
    
    get_left: function tab_TiledWindow$get_left() {
        return this._leftOffset;
    },
    set_left: function tab_TiledWindow$set_left(value) {
        this._leftOffset = value;
        if (this._shouldScrollDomNode) {
            this._domNode.scrollLeft = value;
        }
        return value;
    },
    
    get_top: function tab_TiledWindow$get_top() {
        return this._topOffset;
    },
    set_top: function tab_TiledWindow$set_top(value) {
        this._topOffset = value;
        if (this._shouldScrollDomNode) {
            this._domNode.scrollTop = value;
        }
        return value;
    },
    
    destroy: function tab_TiledWindow$destroy() {
        this._downloadQueue.destroy();
        while (this._tilesNeedingReload > 0) {
            this._tilesNeedingReload--;
            this._session.decrementWait();
        }
        this._getRequestID = null;
        this._viewController = null;
    },
    
    refreshImages: function tab_TiledWindow$refreshImages(newCacheInfo) {
        if (!ss.isValue(this._geometry) || tab.SizeUtil.isEmpty(tab.RecordCast.regionRectAsSize(this._geometry))) {
            return;
        }
        if (ss.isNullOrUndefined(newCacheInfo)) {
            return;
        }
        this._cacheInfo = newCacheInfo;
        this._deferredClearAllImages();
        this._loadImages(true);
    },
    
    reset: function tab_TiledWindow$reset(newGeometry, newTileSize) {
        var oldGeometry = this._geometry;
        var oldTileSize = this._tileSize;
        this._geometry = newGeometry;
        this._tileSize = newTileSize;
        if (ss.isNullOrUndefined(this._geometry) || tab.SizeUtil.isEmpty(tab.RecordCast.regionRectAsSize(this._geometry))) {
            return;
        }
        if (ss.isValue(oldGeometry) && oldGeometry.w === this._geometry.w && oldGeometry.h === this._geometry.h && oldTileSize.w === this._tileSize.w && oldTileSize.h === this._tileSize.h) {
            return;
        }
        var oldTop = this.get_top();
        var oldLeft = this.get_left();
        this._tilesX = Math.ceil(this._geometry.w / this._tileSize.w);
        this._tilesY = Math.ceil(this._geometry.h / this._tileSize.h);
        this._imageContainers.width(this._geometry.w);
        this._imageContainers.height(this._geometry.h);
        this.set_top(Math.min(oldTop, Math.max(0, this._geometry.h - this._domNode.offsetHeight)));
        this.set_left(Math.min(oldLeft, Math.max(0, this._geometry.w - this._domNode.offsetWidth)));
    },
    
    setXPos: function tab_TiledWindow$setXPos(xPos) {
        this.set_scrollPos(tab.$create_Point(xPos, this.get_scrollPos().y));
    },
    
    setYPos: function tab_TiledWindow$setYPos(yPos) {
        this.set_scrollPos(tab.$create_Point(this.get_scrollPos().x, yPos));
    },
    
    _clearElementIfMarked: function tab_TiledWindow$_clearElementIfMarked(element) {
        var obj = $(element);
        if (obj.prop('_deferredClear')) {
            obj.prop('_deferredClear', null);
            obj.empty();
        }
    },
    
    _loadImages: function tab_TiledWindow$_loadImages(showWaitCursor) {
        if (!ss.isValue(showWaitCursor)) {
            showWaitCursor = false;
        }
        if (!ss.isValue(this._geometry) || tab.SizeUtil.isEmpty(tab.RecordCast.regionRectAsSize(this._geometry))) {
            return;
        }
        if (!ss.isValue(this._cacheInfo)) {
            return;
        }
        var left = this.get_left();
        var right = left + this._domNode.clientWidth;
        var top = this.get_top();
        var bottom = top + this._domNode.clientHeight;
        var loX = Math.max(Math.floor(left / this._tileSize.w), 0);
        var hiX = Math.min(Math.ceil(right / this._tileSize.w), this._tilesX);
        var loY = Math.max(Math.floor(top / this._tileSize.h), 0);
        var hiY = Math.min(Math.ceil(bottom / this._tileSize.h), this._tilesY);
        this._downloadQueue.clear();
        if (!ss.isValue(this._session)) {
            return;
        }
        if (!!showWaitCursor) {
            var tilesPreviouslyRemaining = this._tilesNeedingReload;
            this._tilesNeedingReload = Math.max(((hiX - loX) * (hiY - loY)), 0);
            if (tilesPreviouslyRemaining <= 0 && this._tilesNeedingReload > 0) {
                this._session.incrementWait(false);
            }
        }
        var requestID = '';
        var cacheVersion = 0;
        if (ss.isValue(this._getRequestID)) {
            requestID = this._getRequestID();
        }
        if (ss.isValue(this._viewController)) {
            cacheVersion = this._viewController.get_cacheVersion();
        }
        var requestedImages = false;
        for (var x = loX; x < hiX; x++) {
            var tileWidth = Math.min(this._tileSize.w, this._geometry.w - (x * this._tileSize.w));
            for (var y = loY; y < hiY; ++y) {
                var tileHeight = Math.min(this._tileSize.h, this._geometry.h - (y * this._tileSize.h));
                var idx = (y * this._tilesX) + x;
                var bounds = tab.$create_Rect((x * this._tileSize.w), (y * this._tileSize.h), tileWidth, tileHeight);
                var src = this._session.formatTileURL(this._cacheInfo, this._geometry.r, x, y, '', requestID);
                if (ss.isValue(this._imageNodes[idx]) && this._imageNodes[idx].isSame(src, cacheVersion)) {
                    if (showWaitCursor) {
                        this._stopWaitingForImage();
                    }
                    var imgElt = this._imageNodes[idx].get_imageElt();
                    var setBounds = imgElt.width !== bounds.w || imgElt.height !== bounds.h;
                    if (setBounds) {
                        $(imgElt).css({ left: bounds.l + 'px', top: bounds.t + 'px' });
                        tab.TiledWindow._ensureImageEltSize(imgElt, bounds);
                    }
                }
                else {
                    requestedImages = true;
                    this._imageNodes[idx] = (this._imageNodes[idx] || new tab._versionedImageElement());
                    var imgData = new tab.ImageDownloaderImageData(this._imageNodes[idx].get_imageElt(), idx, src, bounds, cacheVersion);
                    this._downloadQueue.addImage(imgData);
                }
            }
        }
        if (!requestedImages) {
            this._imageContainers.each(ss.Delegate.create(this, function(index, element) {
                this._clearElementIfMarked(element);
            }));
        }
    },
    
    _deferredClearAllImages: function tab_TiledWindow$_deferredClearAllImages() {
        this._imageNodes = new Array(this._tilesX * this._tilesY);
        this._imageContainers.prop('_deferredClear', true);
    },
    
    _stopWaitingForImage: function tab_TiledWindow$_stopWaitingForImage() {
        if (this._tilesNeedingReload > 0) {
            this._tilesNeedingReload--;
            if (!this._tilesNeedingReload) {
                this._session.decrementWait();
            }
        }
    },
    
    _onImageLoaded: function tab_TiledWindow$_onImageLoaded(sender, e) {
        this._stopWaitingForImage();
        if (ss.isValue(e.get_image().get_imageNode())) {
            var imgNode = e.get_image().get_imageNode();
            tab.TiledWindow._ensureImageEltSize(imgNode, e.get_image().get_bounds());
            var idx = e.get_image().get_index();
            var cacheVersion = this._viewController.get_cacheVersion();
            if ((!ss.isValue(this._imageNodes[idx].get_imageElt()) || $(this._imageNodes[idx].get_imageElt()).attr('src') !== $(imgNode).attr('src')) && e.get_image().get_version() === cacheVersion) {
                this._imageNodes[idx].set_imageElt(imgNode);
                this._imageNodes[idx].set_cacheVersion(cacheVersion);
                var clonedImgNode = imgNode;
                var counter = 0;
                var arrLength = this._imageContainers.length;
                this._imageContainers.each(ss.Delegate.create(this, function(index, element) {
                    this._clearElementIfMarked(element);
                    element.appendChild(clonedImgNode);
                    if (counter < arrLength - 1) {
                        clonedImgNode = clonedImgNode.cloneNode(false);
                    }
                    counter++;
                }));
            }
        }
    },
    
    _onImageTimedOut: function tab_TiledWindow$_onImageTimedOut(sender, e) {
        this._stopWaitingForImage();
    },
    
    _onQueueComplete: function tab_TiledWindow$_onQueueComplete(sender, e) {
        tab.Log.get(this).debug('LoadComplete');
        if (ss.isValue(this.__loadComplete)) {
            this.__loadComplete(this, ss.EventArgs.Empty);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._versionedImageElement

tab._versionedImageElement = function tab__versionedImageElement() {
    this._cacheVersion = -1;
}
tab._versionedImageElement.prototype = {
    _elt: null,
    _cacheVersion: 0,
    
    get_imageElt: function tab__versionedImageElement$get_imageElt() {
        return this._elt;
    },
    set_imageElt: function tab__versionedImageElement$set_imageElt(value) {
        this._elt = value;
        return value;
    },
    
    get_cacheVersion: function tab__versionedImageElement$get_cacheVersion() {
        return this._cacheVersion;
    },
    set_cacheVersion: function tab__versionedImageElement$set_cacheVersion(value) {
        this._cacheVersion = value;
        return value;
    },
    
    isSame: function tab__versionedImageElement$isSame(imgSrc, version) {
        if (!ss.isValue(this._elt)) {
            return false;
        }
        return (this._elt.getAttribute('src') === imgSrc && this._cacheVersion === version);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToggleSwitch

tab.ToggleSwitch = function tab_ToggleSwitch() {
}
tab.ToggleSwitch.createToggleControl = function tab_ToggleSwitch$createToggleControl(changeHandler, labelClass, isChecked) {
    var checkboxLabel = $(String.format("<label class='tabToggleSwitchLabel'>\n            <input type='checkbox' />\n            <span class='tabSwitch'>\n                <span class='tabSwitchOn'>{0}</span>\n                <span class='tabSwitchOff'>{1}</span>\n                <span class='tabSwitchBlock'></span>\n            </span>\n        </label>", tab.Strings.AuthOnLabel, tab.Strings.AuthOffLabel));
    var checkboxSwith = checkboxLabel.find('.tabSwitch');
    checkboxLabel.addClass(labelClass);
    var checkbox = checkboxLabel.find('input');
    if (isChecked) {
        checkbox.prop('checked', true);
        checkboxSwith.css('left', '0');
    }
    spiff.ClickHandler.targetAndPress(checkboxLabel, function(e) {
        var isOn = checkbox.prop('checked');
        checkboxSwith.css('left', (isOn) ? '-50px' : '0');
        checkbox.prop('checked', !isOn);
        changeHandler(!isOn);
    });
    return checkboxLabel;
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarButton

tab.ToolbarButton = function tab_ToolbarButton(clickAction) {
    tab.ToolbarButton.initializeBase(this, [ $('<a>').addClass('tab-toolbar-button') ]);
    this._clickAction$1 = clickAction;
    this._clickHandler$1 = new spiff.ClickHandler().onClick(ss.Delegate.create(this, this._click$1));
    this.disposables.add(this._clickHandler$1);
    this.setEnabled(true);
}
tab.ToolbarButton.prototype = {
    _clickAction$1: null,
    _clickHandler$1: null,
    
    get_clickHandler: function tab_ToolbarButton$get_clickHandler() {
        return this._clickHandler$1;
    },
    
    get_buttonElement: function tab_ToolbarButton$get_buttonElement() {
        return this.get_element();
    },
    
    setEnabled: function tab_ToolbarButton$setEnabled(enabled) {
        if (enabled) {
            this.get_buttonElement().removeClass('tab-disabled');
            this.get_buttonElement().addClass('tab-enabled');
        }
        else {
            this.get_buttonElement().removeClass('tab-enabled');
            this.get_buttonElement().addClass('tab-disabled');
        }
        return this;
    },
    
    setTooltip: function tab_ToolbarButton$setTooltip(tooltip) {
        this.get_buttonElement().prop('title', tooltip);
        return this;
    },
    
    bindEvents: function tab_ToolbarButton$bindEvents() {
        this._clickHandler$1.setTarget(this.get_buttonElement());
    },
    
    _click$1: function tab_ToolbarButton$_click$1() {
        if (this.get_buttonElement().hasClass('tab-enabled')) {
            this._clickAction$1();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarIconButton

tab.ToolbarIconButton = function tab_ToolbarIconButton(clickAction) {
    tab.ToolbarIconButton.initializeBase(this, [ clickAction ]);
}
tab.ToolbarIconButton.prototype = {
    iconElement: null,
    
    setIcon: function tab_ToolbarIconButton$setIcon(iconClass) {
        if (!ss.isValue(this.iconElement)) {
            this.iconElement = $('<span>');
            this.iconElement.appendTo(this.get_buttonElement());
        }
        this.iconElement.removeClass().addClass('tab-toolbar-button-icon').addClass(iconClass);
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ToolbarTextButton

tab.ToolbarTextButton = function tab_ToolbarTextButton(clickAction) {
    tab.ToolbarTextButton.initializeBase(this, [ clickAction ]);
    this.get_buttonElement().addClass('tab-toolbar-text-button');
}
tab.ToolbarTextButton.prototype = {
    leftIcon: null,
    textElement: null,
    rightIcon: null,
    
    get_textWidth: function tab_ToolbarTextButton$get_textWidth() {
        return this.textElement.width();
    },
    set_textWidth: function tab_ToolbarTextButton$set_textWidth(value) {
        this.textElement.width(value);
        return value;
    },
    
    removeTextWidth: function tab_ToolbarTextButton$removeTextWidth() {
        this.textElement.width('auto');
    },
    
    setText: function tab_ToolbarTextButton$setText(text) {
        if (!ss.isValue(this.textElement)) {
            this.textElement = $('<span>').addClass('tab-toolbar-button-text');
            if (ss.isValue(this.leftIcon)) {
                this.textElement.insertAfter(this.leftIcon);
            }
            else {
                this.textElement.prependTo(this.get_buttonElement());
            }
        }
        this.textElement.text(text);
        return this;
    },
    
    setLeftIcon: function tab_ToolbarTextButton$setLeftIcon(iconClass) {
        if (!ss.isValue(this.leftIcon)) {
            this.leftIcon = $('<span>');
            this.leftIcon.prependTo(this.get_buttonElement());
        }
        this.leftIcon.removeClass().addClass('tab-toolbar-button-left-icon').addClass(iconClass);
        return this;
    },
    
    setRightIcon: function tab_ToolbarTextButton$setRightIcon(iconClass) {
        if (!ss.isValue(this.rightIcon)) {
            this.rightIcon = $('<span>');
            this.rightIcon.appendTo(this.get_buttonElement());
        }
        this.rightIcon.removeClass().addClass('tab-toolbar-button-right-icon').addClass(iconClass);
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Tooltip

tab.Tooltip = function tab_Tooltip(template) {
    this._prePositionActions$1 = [];
    this._verticalOffset$1 = 16;
    this._horizontalOffset$1 = 16;
    tab.Tooltip.initializeBase(this, [ (template || tab.Tooltip._lazyGetTooltipElement$1()).get_domRoot() ]);
    this._domTemplate$1 = template || tab.Tooltip._lazyGetTooltipElement$1();
    this._closeButton$1 = spiff.LabelButton.newNativeButton();
    this._closeButton$1.set_label('close');
    this._closeButton$1.add_click(ss.Delegate.create(this, this._handleCloseClicked$1));
    this._showAbove$1 = tsConfig.is_mobile;
    if (!tsConfig.is_mobile) {
        $(window).bind(this.createNamespacedEventName('resize'), ss.Delegate.create(this, function() {
            this._verticalCutoffForAbovePositioning$1 = null;
        }));
    }
}
tab.Tooltip._lazyGetTooltipElement$1 = function tab_Tooltip$_lazyGetTooltipElement$1() {
    return tab.Tooltip._tooltipElement$1 || (tab.Tooltip._tooltipElement$1 = new tab.TooltipTemplate());
}
tab.Tooltip.prototype = {
    tupleId: null,
    interactedTupleId: null,
    _closeButton$1: null,
    _domTemplate$1: null,
    _isShown$1: false,
    _defaultShowCloseButton$1: false,
    _currentShowCloseButton$1: false,
    _showPosition$1: null,
    _showAbove$1: false,
    _lastLocation$1: null,
    _verticalCutoffForAbovePositioning$1: null,
    _suppressTooltip$1: false,
    _showTooltipAfterPositioning$1: false,
    _previousShownEventArgs$1: null,
    
    add_closed: function tab_Tooltip$add_closed(value) {
        this.__closed$1 = ss.Delegate.combine(this.__closed$1, value);
    },
    remove_closed: function tab_Tooltip$remove_closed(value) {
        this.__closed$1 = ss.Delegate.remove(this.__closed$1, value);
    },
    
    __closed$1: null,
    
    add_prePosition: function tab_Tooltip$add_prePosition(value) {
        this.__prePosition$1 = ss.Delegate.combine(this.__prePosition$1, value);
    },
    remove_prePosition: function tab_Tooltip$remove_prePosition(value) {
        this.__prePosition$1 = ss.Delegate.remove(this.__prePosition$1, value);
    },
    
    __prePosition$1: null,
    
    add_positioned: function tab_Tooltip$add_positioned(value) {
        this.__positioned$1 = ss.Delegate.combine(this.__positioned$1, value);
    },
    remove_positioned: function tab_Tooltip$remove_positioned(value) {
        this.__positioned$1 = ss.Delegate.remove(this.__positioned$1, value);
    },
    
    __positioned$1: null,
    
    add_showed: function tab_Tooltip$add_showed(value) {
        this.__showed$1 = ss.Delegate.combine(this.__showed$1, value);
    },
    remove_showed: function tab_Tooltip$remove_showed(value) {
        this.__showed$1 = ss.Delegate.remove(this.__showed$1, value);
    },
    
    __showed$1: null,
    
    get_defaultShowCloseButton: function tab_Tooltip$get_defaultShowCloseButton() {
        return this._defaultShowCloseButton$1;
    },
    set_defaultShowCloseButton: function tab_Tooltip$set_defaultShowCloseButton(value) {
        this._defaultShowCloseButton$1 = value;
        return value;
    },
    
    get_isShown: function tab_Tooltip$get_isShown() {
        return this._isShown$1;
    },
    
    get_closeButton: function tab_Tooltip$get_closeButton() {
        return this._closeButton$1;
    },
    
    get_body: function tab_Tooltip$get_body() {
        return this._domTemplate$1.get_body();
    },
    set_body: function tab_Tooltip$set_body(value) {
        this._domTemplate$1.get_body().empty().append(value);
        return value;
    },
    
    get_location: function tab_Tooltip$get_location() {
        return this._showPosition$1;
    },
    set_location: function tab_Tooltip$set_location(value) {
        this.move(value);
        return value;
    },
    
    get_horizontalOffset: function tab_Tooltip$get_horizontalOffset() {
        return this._horizontalOffset$1;
    },
    set_horizontalOffset: function tab_Tooltip$set_horizontalOffset(value) {
        this._horizontalOffset$1 = value;
        return value;
    },
    
    get_verticalOffset: function tab_Tooltip$get_verticalOffset() {
        return this._verticalOffset$1;
    },
    set_verticalOffset: function tab_Tooltip$set_verticalOffset(value) {
        this._verticalOffset$1 = value;
        return value;
    },
    
    get_lastLocation: function tab_Tooltip$get_lastLocation() {
        return this._lastLocation$1;
    },
    set_lastLocation: function tab_Tooltip$set_lastLocation(value) {
        this._lastLocation$1 = value;
        return value;
    },
    
    get_previousShownArgs: function tab_Tooltip$get_previousShownArgs() {
        return this._previousShownEventArgs$1;
    },
    
    get_showAbove: function tab_Tooltip$get_showAbove() {
        return this._showAbove$1;
    },
    set_showAbove: function tab_Tooltip$set_showAbove(value) {
        this._showAbove$1 = value;
        return value;
    },
    
    setTooltipBodyAndReposition: function tab_Tooltip$setTooltipBodyAndReposition(body, beforePositioningAction) {
        this.requestLayout(ss.Delegate.create(this, function() {
            if (ss.isValue(beforePositioningAction)) {
                beforePositioningAction();
            }
            this.get_body().empty().append(body);
        }));
    },
    
    show: function tab_Tooltip$show(body, position, showClose) {
        if (ss.isNullOrUndefined(position) || this._suppressTooltip$1) {
            this.close();
            return;
        }
        tab.Log.get(this).debug('Show: position=(%dx, %dy), showClose=%s, body=%o', position.x, position.y, showClose, body);
        this.set_lastLocation(position);
        this._currentShowCloseButton$1 = (ss.isValue(showClose)) ? showClose : this._defaultShowCloseButton$1;
        this.ensureAttachedAndSized();
        this._showTooltipAfterPositioning$1 = true;
        if (this.get_isShown()) {
            this.setTooltipBodyAndReposition(body);
        }
        else {
            this.get_body().empty().append(body);
            this.requestLayout();
        }
    },
    
    move: function tab_Tooltip$move(position) {
        if (!this._isShown$1 || ss.isNullOrUndefined(position) || (ss.isValue(this._showPosition$1) && this._showPosition$1.x === position.x && this._showPosition$1.y === position.y)) {
            return;
        }
        this._lastLocation$1 = position;
        this.requestLayout();
    },
    
    close: function tab_Tooltip$close() {
        this._showTooltipAfterPositioning$1 = false;
        if (!this._isShown$1) {
            return;
        }
        tab.Log.get(this).debug('Close');
        this.detach();
        this._isShown$1 = false;
        this.onClosed();
    },
    
    dispose: function tab_Tooltip$dispose() {
        tab.Log.get(this).debug('Dispose');
        this.close();
        this._closeButton$1.remove_click(ss.Delegate.create(this, this._handleCloseClicked$1));
        this._closeButton$1.dispose();
        if (!tsConfig.is_mobile) {
            $(window).unbind(this.createNamespacedEventName('resize'));
        }
        tab.Tooltip.callBaseMethod(this, 'dispose');
    },
    
    forceLayout: function tab_Tooltip$forceLayout() {
        this._previousShownEventArgs$1 = null;
        this.requestLayout();
    },
    
    requestLayout: function tab_Tooltip$requestLayout(callback) {
        if (ss.isValue(callback)) {
            this._prePositionActions$1.add(callback);
        }
        tab.BrowserViewport.getViewport(ss.Delegate.create(this, this.layoutTooltip));
    },
    
    onShowed: function tab_Tooltip$onShowed(args) {
        if (ss.isValue(this.__showed$1)) {
            this.__showed$1(this, args);
        }
    },
    
    onPrePosition: function tab_Tooltip$onPrePosition() {
        if (ss.isValue(this.__prePosition$1)) {
            this.__prePosition$1();
        }
    },
    
    onPositioned: function tab_Tooltip$onPositioned(args) {
        if (ss.isValue(this.__positioned$1)) {
            this.__positioned$1(this, args);
        }
    },
    
    onClosed: function tab_Tooltip$onClosed() {
        if (ss.isValue(this.__closed$1)) {
            this.__closed$1();
        }
    },
    
    ensureAttachedAndSized: function tab_Tooltip$ensureAttachedAndSized() {
        if (!this.get_element().parent().is(document.body)) {
            this.get_element().appendTo(document.body);
        }
    },
    
    detach: function tab_Tooltip$detach() {
        this.get_element().hide();
        this.get_element().detach();
        this.get_element().unbind(this.get_eventNamespace());
        this.get_element().find('*').unbind(this.get_eventNamespace()).removeClass('hover');
    },
    
    _calculateTooltipPosition$1: function tab_Tooltip$_calculateTooltipPosition$1(position, viewportRect) {
        if (ss.isNullOrUndefined(position) || ss.isNullOrUndefined(viewportRect)) {
            return null;
        }
        this._showPosition$1 = position;
        var originalTop = this.get_element().css('top');
        var originalLeft = this.get_element().css('left');
        this.get_element().css({ top: '0', left: '0' });
        var forceAbove = ss.isValue(this._verticalCutoffForAbovePositioning$1) && position.y >= this._verticalCutoffForAbovePositioning$1 - 16;
        var tooltipHeight = this.get_element().height();
        var tooltipWidth = this.get_element().width();
        var room = viewportRect.getVisibleRoom(position, 1);
        var adjustedHorizontalOffset;
        if (!(room.roomRight >= tooltipWidth + this.get_horizontalOffset()) && (room.roomRight + room.roomLeft) >= tooltipWidth + this.get_horizontalOffset()) {
            adjustedHorizontalOffset = parseInt(Math.max(0, (room.roomRight - tooltipWidth)));
        }
        else {
            adjustedHorizontalOffset = this.get_horizontalOffset();
        }
        var heightPlusOffset = tooltipHeight + this.get_verticalOffset();
        var widthPlusOffset = tooltipWidth + adjustedHorizontalOffset;
        tab.Log.get(this).debug('Calculating X position: roomRight=%d, roomLeft=%d, width+offset=%d', room.roomRight, room.roomLeft, widthPlusOffset);
        var right;
        var x;
        if (room.roomRight >= widthPlusOffset) {
            tab.Log.get(this).debug('right');
            right = true;
            x = position.x + adjustedHorizontalOffset;
        }
        else if (room.roomLeft >= widthPlusOffset) {
            tab.Log.get(this).debug('left');
            right = false;
            x = position.x + room.roomRight - widthPlusOffset;
        }
        else {
            tab.Log.get(this).debug('horizontal fit');
            right = true;
            x = Math.max(0, position.x - widthPlusOffset + room.roomRight);
        }
        tab.Log.get(this).debug('Calculating Y position: roomAbove=%d, roomBelow=%d, height+offset=%d', room.roomAbove, room.roomBelow, heightPlusOffset);
        var y = (this.get_showAbove()) ? this._calculateVerticalPositionPreferAbove$1(position, room, heightPlusOffset, widthPlusOffset) : this._calculateVerticalPositionPreferBelow$1(position, room, heightPlusOffset, widthPlusOffset, forceAbove);
        var above = y <= position.y;
        tab.Log.get(this).debug('open at (%d, %d)', x, y);
        this.get_element().css({ left: originalLeft, top: originalTop });
        var showArgs = new tab.ShownEventArgs();
        if (above) {
            if (right) {
                showArgs.position = 'AR';
            }
            else {
                showArgs.position = 'AL';
            }
        }
        else {
            if (right) {
                showArgs.position = 'BR';
            }
            else {
                showArgs.position = 'BL';
            }
        }
        showArgs.shownX = x;
        showArgs.shownY = y;
        showArgs.origX = position.x;
        showArgs.origY = position.y;
        showArgs.viewport = viewportRect;
        return showArgs;
    },
    
    _positionTooltip$1: function tab_Tooltip$_positionTooltip$1(showArgs) {
        var positionClass = this._positionClassFromRelativePosition$1(showArgs.position);
        if (!this.get_element().hasClass(positionClass)) {
            this.get_element().removeClass(tab.Tooltip._allRelativePositionClasses$1);
            this.get_element().addClass(positionClass);
        }
        this.get_element().css({ left: showArgs.shownX + 'px', top: showArgs.shownY + 'px' });
        this._previousShownEventArgs$1 = showArgs;
    },
    
    _positionClassFromRelativePosition$1: function tab_Tooltip$_positionClassFromRelativePosition$1(relativePosition) {
        var positionClass;
        switch (relativePosition) {
            case 'AR':
                positionClass = 'tab-tooltipAR';
                break;
            case 'AL':
                positionClass = 'tab-tooltipAL';
                break;
            case 'BL':
                positionClass = 'tab-tooltipBL';
                break;
            case 'BR':
            default:
                positionClass = 'tab-tooltipBR';
                break;
        }
        return positionClass;
    },
    
    layoutTooltip: function tab_Tooltip$layoutTooltip(viewport, justPosition) {
        if (justPosition) {
            this._positionTooltip$1(this._calculateTooltipPosition$1(this.get_lastLocation(), viewport));
        }
        else {
            var $enum1 = ss.IEnumerator.getEnumerator(this._prePositionActions$1);
            while ($enum1.moveNext()) {
                var prePositionAction = $enum1.current;
                prePositionAction();
            }
            this._prePositionActions$1.clear();
            this.onPrePosition();
            var shownArgs = this._calculateTooltipPosition$1(this.get_lastLocation(), viewport);
            if (!this._shouldPositionTooltip$1(shownArgs)) {
                tab.Log.get(this).debug('Tooltip layout was requested, but we are not changing position.');
                return;
            }
            this._positionTooltip$1(shownArgs);
            this.onPositioned(shownArgs);
            if (this._showTooltipAfterPositioning$1) {
                this._showTooltipAfterPositioning$1 = false;
                if (this._currentShowCloseButton$1) {
                    this._domTemplate$1.get_closeButton().html('').append(this._closeButton$1.get_element());
                    this._closeButton$1.set_disabled(false);
                }
                else {
                    this._closeButton$1.get_element().remove();
                    this._closeButton$1.set_disabled(true);
                }
                this.get_element().show();
                this._isShown$1 = true;
                this.onShowed(shownArgs);
            }
        }
    },
    
    _shouldPositionTooltip$1: function tab_Tooltip$_shouldPositionTooltip$1(showArgs) {
        if (ss.isNullOrUndefined(showArgs)) {
            return false;
        }
        if (this._showTooltipAfterPositioning$1) {
            return true;
        }
        if (tab.ShownEventArgs.areShownArgsSame(showArgs, this._previousShownEventArgs$1) && parseInt(this.get_element().css('top')) === showArgs.shownY) {
            return false;
        }
        return true;
    },
    
    _calculateVerticalPositionPreferBelow$1: function tab_Tooltip$_calculateVerticalPositionPreferBelow$1(position, room, heightPlusOffset, widthPlusOffset, forceAbove) {
        var y;
        if (!forceAbove && room.roomBelow >= heightPlusOffset) {
            tab.Log.get(this).debug('below');
            y = position.y + this.get_verticalOffset();
            this._verticalCutoffForAbovePositioning$1 = null;
        }
        else if (!forceAbove && room.roomAbove >= heightPlusOffset && room.roomRight >= widthPlusOffset) {
            tab.Log.get(this).debug('side');
            y = position.y + (room.roomBelow - heightPlusOffset + this.get_verticalOffset());
        }
        else if (room.roomAbove >= heightPlusOffset) {
            tab.Log.get(this).debug('above');
            y = position.y - heightPlusOffset;
            if (!ss.isValue(this._verticalCutoffForAbovePositioning$1)) {
                this._verticalCutoffForAbovePositioning$1 = position.y;
            }
        }
        else {
            tab.Log.get(this).debug('vertical fit');
            y = Math.max(0, position.y - room.roomAbove);
        }
        return y;
    },
    
    _calculateVerticalPositionPreferAbove$1: function tab_Tooltip$_calculateVerticalPositionPreferAbove$1(position, room, heightPlusOffset, widthPlusOffset) {
        var y;
        if (room.roomAbove >= heightPlusOffset) {
            tab.Log.get(this).debug('above');
            y = position.y - heightPlusOffset;
            if (!ss.isValue(this._verticalCutoffForAbovePositioning$1)) {
                this._verticalCutoffForAbovePositioning$1 = position.y;
            }
        }
        else if (room.roomBelow >= heightPlusOffset) {
            tab.Log.get(this).debug('below');
            y = position.y + this.get_verticalOffset();
            this._verticalCutoffForAbovePositioning$1 = null;
        }
        else if (room.roomAbove >= heightPlusOffset && room.roomRight >= widthPlusOffset) {
            tab.Log.get(this).debug('side');
            y = position.y + (room.roomBelow - heightPlusOffset + this.get_verticalOffset());
        }
        else {
            tab.Log.get(this).debug('vertical fit');
            y = Math.max(0, position.y - room.roomAbove);
        }
        return y;
    },
    
    _handleCloseClicked$1: function tab_Tooltip$_handleCloseClicked$1() {
        tab.Log.get(this).debug('Close clicked');
        this.close();
    },
    
    setSuppressTooltip: function tab_Tooltip$setSuppressTooltip(suppress) {
        this._suppressTooltip$1 = suppress;
        if (this._suppressTooltip$1) {
            this.close();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipTemplate

tab.TooltipTemplate = function tab_TooltipTemplate() {
    tab.TooltipTemplate.initializeBase(this, [ $("\n<div class='tab-tooltip'>\n  <div class='tab-tooltipContainer'>\n    <div class='tab-tooltipX'></div>\n    <div class='tab-tooltipContent' waiRole='alert'></div>\n  </div>\n  <div class='tab-tooltipConnector'></div>\n</div>") ]);
}
tab.TooltipTemplate.prototype = {
    
    get_body: function tab_TooltipTemplate$get_body() {
        return this.getElementBySelector('.tab-tooltipContent');
    },
    
    get_closeButton: function tab_TooltipTemplate$get_closeButton() {
        return this.getElementBySelector('.tab-tooltipX');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TreeSupport

tab.TreeSupport = function tab_TreeSupport(session, field, levels, isSingleSelect) {
    this.session = session;
    this.field = field;
    this.levels = levels;
    this.isSingleSelect = isSingleSelect;
    this.root = {};
    this.root.schema = null;
    this.root.tuple = tab.$create_TupleStruct(null, false, null);
    this.root.label = '$ROOT$';
    this.root.level = -1;
    this.root.children = null;
}
tab.TreeSupport.prototype = {
    root: null,
    session: null,
    field: null,
    levels: 0,
    isSingleSelect: false,
    
    _isRaggedOrSkipped: function tab_TreeSupport$_isRaggedOrSkipped(tuple) {
        var dataValues = tuple.t;
        if (tab.MiscUtil.isNullOrEmpty(dataValues)) {
            return false;
        }
        var lastDataValue = dataValues[dataValues.length - 1];
        var special = lastDataValue.s;
        var ragged = tableau.types.DataSpecial.DS_RAGGED;
        var skipped = tableau.types.DataSpecial.DS_SKIPPED;
        return (special === ragged || special === skipped);
    },
    
    itemsFromTable: function tab_TreeSupport$itemsFromTable(data, level) {
        var items = [];
        var t = (ss.isValue(data.table)) ? data.table.tuples : null;
        if (ss.isNullOrUndefined(data.table)) {
            return items;
        }
        for (var i = 0; i < t.length; i++) {
            var displayName = tableau.format.formatTupleDisplayName(t[i]);
            var children = null;
            if (!!data.children) {
                children = this.itemsFromTable(data.children[i], level + 1);
            }
            var child = {};
            child.id = tableau.format.formatTupleUniqueName(t[i]);
            child.schema = data.table.schema;
            child.tuple = t[i];
            child.label = displayName;
            child.level = level;
            child.children = children;
            child.isRaggedOrSkipped = this._isRaggedOrSkipped(t[i]);
            items.push(child);
        }
        return items;
    },
    
    _onChange: function tab_TreeSupport$_onChange(item) {
        var node = item.node;
        node.updateCheckState();
        if (ss.isValue(item.node2)) {
            item.node2.updateCheckState();
        }
    },
    
    onChildrenChange: function tab_TreeSupport$onChildrenChange(parent, newChildrenList) {
        parent.children = newChildrenList;
    },
    
    getIdentity: function tab_TreeSupport$getIdentity(item) {
        return item.id;
    },
    
    getLabel: function tab_TreeSupport$getLabel(item) {
        return item.label;
    },
    
    isChecked: function tab_TreeSupport$isChecked(item) {
        return item.tuple.s;
    },
    
    mayHaveChildren: function tab_TreeSupport$mayHaveChildren(item) {
        return item.level + 1 < this.levels;
    },
    
    getRoot: function tab_TreeSupport$getRoot(onComplete, onError) {
        onComplete(this.root);
    },
    
    getChildren: function tab_TreeSupport$getChildren(parent, onComplete, onError) {
        if (ss.isValue(parent.children) || parent === this.root) {
            onComplete(parent.children);
        }
        else {
            var callback = ss.Delegate.create(this, function(result) {
                if (!!!result[0].table) {
                    parent.children = null;
                }
                else {
                    parent.children = this.itemsFromTable(result[0], parent.level + 1);
                }
                onComplete(parent.children);
            });
            var member = {};
            member.schema = parent.schema;
            member.tuples = [parent.tuple];
            this.session.requestHSMChildren(this.field, member, callback, onError);
        }
    },
    
    refresh: function tab_TreeSupport$refresh(table) {
        this._refreshChildren(this.root, table);
    },
    
    _refreshChildren: function tab_TreeSupport$_refreshChildren(parent, table) {
        if (tab.MiscUtil.isNullOrEmpty(parent.children)) {
            return;
        }
        this._refreshItems(parent.children, table[0].table);
        _.each(parent.children, ss.Delegate.create(this, function(child, i) {
            if (!!child.children) {
                if (ss.isValue(table[0].children) && i < table[0].children.length) {
                    this._refreshChildren(child, [ table[0].children[i] ]);
                }
                else {
                    var onComplete = ss.Delegate.create(this, function(newTable) {
                        this._refreshChildren(child, newTable);
                    });
                    var member = {};
                    member.schema = child.schema;
                    member.tuples = [child.tuple];
                    this.session.requestHSMChildren(this.field, member, onComplete, null);
                }
            }
        }));
    },
    
    _refreshItems: function tab_TreeSupport$_refreshItems(items, table) {
        var t = table.tuples;
        for (var i = 0; i < t.length; i++) {
            if (items[i].tuple.s !== t[i].s) {
                items[i].tuple.s = t[i].s;
                this._onChange(items[i]);
            }
        }
        return items;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TreeNode

tab.TreeNode = function tab_TreeNode(param) {
    tab.TreeNode.initializeBase(this);
}
tab.TreeNode.prototype = {
    isChecked: false,
    _clickHandle$2: null,
    tree: null,
    item: null,
    
    dispose: function tab_TreeNode$dispose() {
        this._clickHandle$2.dispose();
        this._clickHandle$2 = null;
    },
    
    destroy: function tab_TreeNode$destroy(preserveDom) {
        this.dispose();
        this.inherited(arguments);
    },
    
    updateCheckState: function tab_TreeNode$updateCheckState() {
        this.isChecked = this.tree.model.isChecked(this.item);
        var checkbox = $(this.labelNode).find('input');
        if (this.isChecked) {
            checkbox.attr('checked', 'checked');
        }
        else {
            checkbox.removeAttr('checked');
        }
    },
    
    setLabelNode: function tab_TreeNode$setLabelNode(label) {
        this.isChecked = this.tree.model.isChecked(this.item);
        var selected = (this.isChecked) ? " checked='checked'" : '';
        var html = '<input type=';
        if (this.tree.model.isSingleSelect) {
            var itemName = this.tree.model.field;
            if (ss.isValue(this.tree.model.session)) {
                itemName += this.tree.model.session.get_viewId();
            }
            html += "'radio' name='FI_" + itemName + "'";
        }
        else {
            html += "'checkbox'";
        }
        html += selected + "/><a title='" + label + "'>" + label + '</a>';
        this.labelNode.innerHTML = html;
        if (ss.isValue(this._clickHandle$2)) {
            this._clickHandle$2.dispose();
        }
        this._clickHandle$2 = new tab.DisposableHolder();
        this._clickHandle$2.add(spiff.EventUtil.bindWithDispose($(this.labelNode.firstChild), 'click', ss.Delegate.create(this, this._onClick$2)));
    },
    
    _onClick$2: function tab_TreeNode$_onClick$2(e) {
        this.isChecked = (this.labelNode.firstChild).checked;
        this.tree.notifyChange(e);
        e.stopPropagation();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Tree

tab.Tree = function tab_Tree(param) {
    tab.Tree.initializeBase(this);
}
tab.Tree.prototype = {
    model: null,
    anchor: null,
    prev_anchor: null,
    anchorIsStart: false,
    
    add_notifyChangeCalled: function tab_Tree$add_notifyChangeCalled(value) {
        this.__notifyChangeCalled$2 = ss.Delegate.combine(this.__notifyChangeCalled$2, value);
    },
    remove_notifyChangeCalled: function tab_Tree$remove_notifyChangeCalled(value) {
        this.__notifyChangeCalled$2 = ss.Delegate.remove(this.__notifyChangeCalled$2, value);
    },
    
    __notifyChangeCalled$2: null,
    
    _createTreeNode: function tab_Tree$_createTreeNode(paramsArg) {
        paramsArg['isChecked'] = this.model.isChecked(paramsArg['item']);
        var node = new tableau.base.widget.hsm._TreeNode(paramsArg);
        (paramsArg['item']).node = node;
        return node;
    },
    
    _mayHaveChildren$2: function tab_Tree$_mayHaveChildren$2(item) {
        return this.model.mayHaveChildren(item);
    },
    
    getIconClass: function tab_Tree$getIconClass(item, opened) {
        return 'HFTreeNodeIcon';
    },
    
    getLabelClass: function tab_Tree$getLabelClass(item, opened) {
        var labelClass = (this.model.isSingleSelect) ? 'HFTreeNodeLabelSS' : 'HFTreeNodeLabel';
        labelClass += (item.isRaggedOrSkipped) ? ' HFTreeNodeRaggedOrSkipped' : '';
        return labelClass;
    },
    
    focusNode: function tab_Tree$focusNode(node) {
        var i = dojo.attr(node.labelNode, 'tabindex');
        if (!!i) {
            dojo.removeAttr(node.labelNode, 'tabindex');
        }
        this.inherited(arguments);
        if (!!i) {
            dojo.attr(node.labelNode, 'tabindex', i);
        }
    },
    
    notifyChange: function tab_Tree$notifyChange(e) {
        if (ss.isValue(this.__notifyChangeCalled$2)) {
            this.__notifyChangeCalled$2(e);
        }
    },
    
    getDepth: function tab_Tree$getDepth(node) {
        var depth = 0;
        while (node !== this.rootNode) {
            depth += 1;
            node = node.getParent();
        }
        return depth;
    },
    
    findEarlierNode: function tab_Tree$findEarlierNode(node1, node2, level) {
        return this.rEarlierContained(this.rootNode, 0, node1, node2, level);
    },
    
    rEarlierContained: function tab_Tree$rEarlierContained(searchNode, searchLevel, n1, n2, targetLevel) {
        if (searchLevel > targetLevel) {
            return null;
        }
        else if (searchLevel < targetLevel) {
            var kids = searchNode.getChildren();
            var l = kids.length;
            for (var i = 0; i < l; i++) {
                var result = this.rEarlierContained(kids[i], searchLevel + 1, n1, n2, targetLevel);
                if (ss.isValue(result)) {
                    return result;
                }
            }
        }
        else {
            if (searchNode === n1) {
                return n1;
            }
            if (searchNode === n2) {
                return n2;
            }
            return null;
        }
        return null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TypeIn

tab.TypeIn = function tab_TypeIn(targetDiv, doUpdateFunc, style) {
    this.div = targetDiv;
    this._doUpdate = doUpdateFunc;
    this._style = style;
    dojo.addClass(this.div, 'tableauWidgetUiTypeIn');
    this._disposables = new tab.DisposableHolder();
}
tab.TypeIn.prototype = {
    queryBox: null,
    div: null,
    outerDiv: null,
    querySpan: null,
    _disposables: null,
    _fieldname: null,
    goButton: null,
    _pattern: null,
    _dataValue: null,
    _isClickingOnActionButton: false,
    _domain: null,
    _cachedAutocomplete: null,
    _autocomplete: false,
    _applyTimer: null,
    _isHittingESC: false,
    _style: null,
    _editingDataValue: false,
    _keyCode: 0,
    _doUpdate: null,
    _autocompleteFunc: null,
    _numberFormat: null,
    
    get_element: function tab_TypeIn$get_element() {
        return $(this.div);
    },
    
    instantiate: function tab_TypeIn$instantiate(pattern, fieldnameArg, dataValue, minValue, maxValue, numberFormatArg, dateFormatArg, dateEditingFormatArg, firstDayOfWeek) {
        this._pattern = pattern;
        this._fieldname = fieldnameArg;
        this._dataValue = dataValue;
        this._numberFormat = numberFormatArg;
        if (ss.isNullOrUndefined(this._pattern)) {
            this._pattern = '';
        }
        this.div.innerHTML = "<div id='typein_" + tableau.format.escapeHTML(fieldnameArg) + "' class='TypeInDiv tab-ctrl-formatted-border tab-ctrl-formatted-darker-border-hover'>" + "<span class='TypeInQuerySpan'><input type='text' class='QueryBox' value='" + tableau.format.escapeHTML(this._pattern) + "'/></span>" + "<span class='goButton' style='display:none'></span></div>";
        this.outerDiv = this.div.firstChild;
        this.querySpan = this.outerDiv.childNodes[0];
        this.queryBox = this.querySpan.childNodes[0];
        this.goButton = this.outerDiv.childNodes[1];
        var stopPropHandler = function(e) {
            e.stopPropagation();
        };
        var jqueryQueryBox = $(this.queryBox);
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'keydown', ss.Delegate.create(this, this._onKeyDown)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'keyup', ss.Delegate.create(this, this._onKeyUp)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'blur', ss.Delegate.create(this, this.onInputBlur)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'focus', ss.Delegate.create(this, this.onQueryBoxFocus)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'click', ss.Delegate.create(this, this._onQueryBoxClick)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'mousedown', stopPropHandler));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'mousemove', stopPropHandler));
        var jqueryGoButton = $(this.goButton);
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'mousedown', ss.Delegate.create(this, this._onButtonMouseDown)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'click', ss.Delegate.create(this, this._onButtonClick)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'mouseenter', ss.Delegate.create(this, this._onGoHover)));
        this._disposables.add(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'mouseleave', ss.Delegate.create(this, this._onGoUnhover)));
        var touchOutsideHandler = ss.Delegate.create(this, function(e, cancelCallback) {
            if (this._patternIsChanged() && !this.isInsideWidget(e)) {
                this.setNewPattern();
                this.queryBox.blur();
            }
        });
        spiff.GlobalTouchWatcher.add_firstTouch(touchOutsideHandler);
        this._disposables.add(new tab.CallOnDispose(function() {
            spiff.GlobalTouchWatcher.remove_firstTouch(touchOutsideHandler);
        }));
        this._isClickingOnActionButton = false;
        this._resetPattern();
    },
    
    isInsideWidget: function tab_TypeIn$isInsideWidget(e) {
        return tab.DomUtil.isEqualOrAncestorOf(this.outerDiv, e.target);
    },
    
    destroy: function tab_TypeIn$destroy() {
        this.dispose();
    },
    
    dispose: function tab_TypeIn$dispose() {
        this._disposables.dispose();
    },
    
    layout: function tab_TypeIn$layout() {
    },
    
    editableValue: function tab_TypeIn$editableValue() {
        return tableau.format.formatDataValue(this._dataValue, null, tableau.format.deriveNumberEditingFormat(this._numberFormat), null, tab.DateTimeAutoFormatMode.showFullDateTime);
    },
    
    setNewState: function tab_TypeIn$setNewState(pattern, domainArg, dataValue, minValue, maxValue) {
        this._pattern = pattern;
        this.queryBox.value = pattern;
        if (ss.isValue(dataValue)) {
            this._dataValue = dataValue;
        }
        else {
            if (ss.isValue(this._dataValue)) {
                var oldValue = this._dataValue;
                this._dataValue = {};
                this._dataValue.s = tableau.types.DataSpecial.DS_NULL;
                this._dataValue.t = oldValue.t;
            }
        }
        this._setButtonInactive();
        this._domain = (domainArg || new Array(0));
        this._cachedAutocomplete = '';
    },
    
    _shouldEditRawDataValue: function tab_TypeIn$_shouldEditRawDataValue() {
        return (tab.FilterModel.isNormalValue(this._dataValue) && !this._autocomplete);
    },
    
    _initializeAutocomplete: function tab_TypeIn$_initializeAutocomplete(d, f) {
        this._cachedAutocomplete = '';
        this._autocomplete = true;
        this._domain = (d || new Array(0));
        this._autocompleteFunc = f;
    },
    
    _setApplyTimer: function tab_TypeIn$_setApplyTimer(func) {
        this.clearTimeout();
        this._applyTimer = window.setTimeout(func, 500);
    },
    
    clearTimeout: function tab_TypeIn$clearTimeout() {
        if (ss.isValue(this._applyTimer)) {
            window.clearTimeout(this._applyTimer);
            this._applyTimer = null;
        }
    },
    
    _startAutocomplete: function tab_TypeIn$_startAutocomplete() {
        if (!this._autocomplete) {
            return;
        }
        if (tab.MiscUtil.isNullOrEmpty(this.queryBox.value)) {
            return;
        }
        if (!this._cachedAutocomplete.toLowerCase().indexOf(this.queryBox.value.toLowerCase())) {
            this.onAutocompleteDone(this._cachedAutocomplete);
            return;
        }
        if (this._domain.length > 0) {
            var current = this.queryBox.value.toLowerCase();
            var domainLength = this._domain.length;
            for (var i = 0; i < domainLength; i++) {
                if (!this._domain[i].toLowerCase().indexOf(current)) {
                    this.onAutocompleteDone(this._domain[i]);
                    return;
                }
            }
        }
        else if (ss.isValue(this._autocompleteFunc)) {
            this._setApplyTimer(ss.Delegate.create(this, function() {
                this._autocompleteFunc(this.queryBox.value, ss.Delegate.create(this, this.onAutocompleteDone), this._fieldname);
            }));
        }
    },
    
    onAutocompleteDone: function tab_TypeIn$onAutocompleteDone(newObj) {
        var newValue = newObj;
        if (tab.MiscUtil.isNullOrEmpty(newValue)) {
            return;
        }
        this._cachedAutocomplete = newValue;
        var current = this.queryBox.value;
        this.queryBox.value = newValue;
        tableau.util.selectText(this.queryBox, current.length, newValue.length);
    },
    
    onQueryBoxFocus: function tab_TypeIn$onQueryBoxFocus(e) {
        this.queryBox.isFocused = true;
        if (this._shouldEditRawDataValue()) {
            this.queryBox.value = this.editableValue();
            this._editingDataValue = true;
        }
    },
    
    _onQueryBoxClick: function tab_TypeIn$_onQueryBoxClick(e) {
        if (this.queryBox.isFocused) {
            this.queryBox.select();
        }
        this.queryBox.isFocused = false;
    },
    
    _onGoHover: function tab_TypeIn$_onGoHover(e) {
        dojo.addClass(this.goButton, 'Hover');
    },
    
    _onGoUnhover: function tab_TypeIn$_onGoUnhover(e) {
        dojo.removeClass(this.goButton, 'Hover');
    },
    
    _patternIsChanged: function tab_TypeIn$_patternIsChanged() {
        if (this._editingDataValue && this._shouldEditRawDataValue()) {
            return this.editableValue() !== this.queryBox.value;
        }
        else {
            return this._pattern !== this.queryBox.value;
        }
    },
    
    _setButtonToProperState: function tab_TypeIn$_setButtonToProperState() {
        var active = (this._style === 'TypeIn') ? this._patternIsChanged() : !String.isNullOrEmpty(this.queryBox.value);
        if (active) {
            this._setButtonActive();
        }
        else {
            this._setButtonInactive();
        }
    },
    
    _setButtonActive: function tab_TypeIn$_setButtonActive() {
        dojo.style(this.goButton, 'display', '');
        dojo.addClass(this.goButton, this._style + 'Active');
        dojo.addClass(this.querySpan, 'ShortQuerySpan');
    },
    
    _setButtonInactive: function tab_TypeIn$_setButtonInactive() {
        dojo.removeClass(this.querySpan, 'ShortQuerySpan');
        dojo.removeClass(this.goButton, this._style + 'Active');
        dojo.style(this.goButton, 'display', 'none');
    },
    
    onInputBlur: function tab_TypeIn$onInputBlur(e) {
        this.queryBox.isFocused = false;
        if (!this._isClickingOnActionButton && !this._isHittingESC) {
            this.setNewPattern();
        }
        this._isHittingESC = false;
    },
    
    _onButtonMouseDown: function tab_TypeIn$_onButtonMouseDown(e) {
        this._isClickingOnActionButton = true;
    },
    
    _onButtonClick: function tab_TypeIn$_onButtonClick(e) {
        this._doButtonAction();
        this._isClickingOnActionButton = false;
    },
    
    _handleESC: function tab_TypeIn$_handleESC(e) {
        this._resetPattern();
        if (dojo.isFF) {
            window.setTimeout(ss.Delegate.create(this, this._resetPattern), 10);
        }
        this._setButtonToProperState();
        e.stopPropagation();
        e.preventDefault();
    },
    
    _onKeyDown: function tab_TypeIn$_onKeyDown(e) {
        if (e.which === 27) {
            this._handleESC(e);
        }
        this._keyCode = e.which;
    },
    
    _onKeyUp: function tab_TypeIn$_onKeyUp(e) {
        switch (e.which) {
            case 13:
                this.clearTimeout();
                this.setNewPattern();
                this.queryBox.blur();
                e.stopPropagation();
                e.preventDefault();
                break;
            case 27:
                this.clearTimeout();
                this._handleESC(e);
                this._isHittingESC = true;
                this.queryBox.blur();
                break;
            case 8:
            case 46:
                this.clearTimeout();
                this._setButtonToProperState();
                break;
            case 16:
                this._setButtonToProperState();
                break;
            default:
                if (this._keyCode === e.which) {
                    this._startAutocomplete();
                    this._setButtonToProperState();
                }
                break;
        }
    },
    
    setPattern: function tab_TypeIn$setPattern(newPattern) {
        this.queryBox.value = newPattern;
        this.clearTimeout();
        this.setNewPattern();
        this.queryBox.blur();
    },
    
    setNewPattern: function tab_TypeIn$setNewPattern() {
        if (this._patternIsChanged()) {
            this._doUpdate(this.queryBox.value);
            if (!this._shouldEditRawDataValue()) {
                this.setNewState(this.queryBox.value);
            }
        }
        else if (this._shouldEditRawDataValue()) {
            this._resetPattern();
        }
        this._editingDataValue = false;
    },
    
    _resetPattern: function tab_TypeIn$_resetPattern() {
        this.queryBox.value = this._pattern;
        this._editingDataValue = false;
        this._setButtonToProperState();
    },
    
    _doButtonAction: function tab_TypeIn$_doButtonAction() {
        if (this._style === 'TypeIn') {
            this._resetPattern();
            this.queryBox.blur();
        }
        else {
            this.queryBox.value = '';
            this.setNewPattern();
        }
        this._setButtonToProperState();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TypeInDateField

tab.TypeInDateField = function tab_TypeInDateField(targetDiv, doUpdateFunc, style, createDatePickerFunc) {
    tab.TypeInDateField.initializeBase(this, [ targetDiv, doUpdateFunc, style ]);
    this._createDatePickerFunc$1 = createDatePickerFunc;
    if (ss.isNullOrUndefined(this._createDatePickerFunc$1)) {
        this._createDatePickerFunc$1 = function(settings) {
            return new tab.DatePicker(settings);
        };
    }
}
tab.TypeInDateField.prototype = {
    _createDatePickerFunc$1: null,
    _calendarControl$1: null,
    _dateFormat$1: null,
    _dateEditingFormat$1: null,
    
    get_calendarElement: function tab_TypeInDateField$get_calendarElement() {
        return this._calendarControl$1.get_element();
    },
    
    dispose: function tab_TypeInDateField$dispose() {
        tab.TypeInDateField.callBaseMethod(this, 'dispose');
        this._calendarControl$1.dispose();
    },
    
    instantiate: function tab_TypeInDateField$instantiate(pattern, fieldnameArg, dataValue, minValue, maxValue, numberFormatArg, dateFormatArg, dateEditingFormatArg, firstDayOfWeek) {
        tab.TypeInDateField.callBaseMethod(this, 'instantiate', [ pattern, fieldnameArg, dataValue, minValue, maxValue, numberFormatArg, dateFormatArg, dateEditingFormatArg, firstDayOfWeek ]);
        this._dateFormat$1 = dateFormatArg;
        this._dateEditingFormat$1 = dateEditingFormatArg;
        var fmt = this._dateFormat$1.locale_formatting_strings;
        var narrowDayNames = fmt.narrowDay;
        narrowDayNames.shift();
        var selectedDate = this._makeDate$1(this._dataValue);
        if (ss.isValue(firstDayOfWeek)) {
            firstDayOfWeek = firstDayOfWeek - 1;
        }
        var settings = new tab.DatePickerSettings(selectedDate, selectedDate, this._makeDate$1(minValue), this._makeDate$1(maxValue), firstDayOfWeek, narrowDayNames, fmt.todayFormatTemplate, ss.Delegate.create(this, function(dateUTC) {
            return tableau.format.formatCustomJSDateTime(dateUTC, tableau.format.mapIcuToOleFormat(this._dateFormat$1.yearMonthFormat), tab.DateTimeAutoFormatMode.showDateOnly, tableau.types.DataType.DT_DATE, this._dateFormat$1.locale, null, null, fmt);
        }), ss.Delegate.create(this, function(dateUTC) {
            return tableau.format.formatCustomJSDateTime(dateUTC, this._dateEditingFormat$1.format, tab.DateTimeAutoFormatMode.showDateOnly, tableau.types.DataType.DT_DATE, this._dateEditingFormat$1.locale, null, null, fmt);
        }));
        this._calendarControl$1 = this._createDatePickerFunc$1(settings);
        this._calendarControl$1.get_element().on('dateSelected', ss.Delegate.create(this, this._dateSelected$1)).appendTo(document.body);
    },
    
    _makeDate$1: function tab_TypeInDateField$_makeDate$1(filterValue) {
        return (tab.FilterModel.isNormalValue(filterValue)) ? new Date(tableau.types.JsDateFromOleDate(filterValue.v)) : null;
    },
    
    editableValue: function tab_TypeInDateField$editableValue() {
        return tableau.format.formatDataValue(this._dataValue, tableau.types.TableauTypesFieldRole.ROLE_MEASURE, this._dateEditingFormat$1, null, tab.DateTimeAutoFormatMode.showFullDateTime);
    },
    
    _dataType$1: function tab_TypeInDateField$_dataType$1() {
        if (ss.isValue(this._dataValue) && ss.isValue(this._dataValue.t)) {
            return this._dataValue.t;
        }
        else {
            return tableau.types.DataType.DT_TIMESTAMP;
        }
    },
    
    setNewState: function tab_TypeInDateField$setNewState(pattern, domainArg, dataValue, minValue, maxValue) {
        tab.TypeInDateField.callBaseMethod(this, 'setNewState', [ pattern, domainArg, dataValue, minValue, maxValue ]);
        this._calendarControl$1.setDateRange(this._makeDate$1(minValue), this._makeDate$1(maxValue));
    },
    
    isInsideWidget: function tab_TypeInDateField$isInsideWidget(e) {
        var calendarElement = this._calendarControl$1.get_element().get(0);
        return tab.TypeInDateField.callBaseMethod(this, 'isInsideWidget', [ e ]) || tab.DomUtil.isEqualOrAncestorOf(calendarElement, e.target);
    },
    
    onQueryBoxFocus: function tab_TypeInDateField$onQueryBoxFocus(e) {
        tab.TypeInDateField.callBaseMethod(this, 'onQueryBoxFocus', [ e ]);
        if (this._calendarControl$1.get_element().is(':hidden')) {
            var selectedDate = this._makeDate$1(this._dataValue);
            this._calendarControl$1.show(selectedDate);
            this._calendarControl$1.positionCalendarByElement($(this.queryBox).closest('.TypeInDiv'));
        }
    },
    
    _dateSelected$1: function tab_TypeInDateField$_dateSelected$1(evt, date) {
        this._calendarControl$1.hide();
        this.setPattern(tableau.format.formatJsDateTime(date, this._dateEditingFormat$1, tab.DateTimeAutoFormatMode.showFullDateTime, this._dataType$1()));
    },
    
    onInputBlur: function tab_TypeInDateField$onInputBlur(e) {
        this._calendarControl$1.hide();
        tab.TypeInDateField.callBaseMethod(this, 'onInputBlur', [ e ]);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TypeInFilterContents

tab.TypeInFilterContents = function tab_TypeInFilterContents() {
    this.templateString = "<div class='TypeInFilter'>" + "<div class='TIFItemsList tab-ctrl-formatted-text' dojoAttachPoint='domItemsList'" + "dojoAttachEvent='onclick:_onItemsListClick,onmouseover:_onItemsListMouseOver,onmouseout:_onItemsListMouseOut,onkeydown:_onItemsKeyDown'>" + "<div class='wcIconSearchRemove' dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:_onXButtonClick,onmouseover:_onXButtonMouseOver,onmouseout:_onXButtonMouseOut'></div>" + '</div>' + "<div class='TIFButtonDiv' dojoAttachPoint='domClearListButtonDiv'>" + "<button class='TIFButton'" + "dojoAttachEvent='onclick:_onClearListButtonClick'>Clear List</button>" + '</div>' + '</div>';
    tab.TypeInFilterContents.initializeBase(this);
}
tab.TypeInFilterContents.prototype = {
    isContainer: false,
    parentFilter: null,
    tuples: null,
    itemName: '',
    role: null,
    domItemsList: null,
    domXButton: null,
    domClearListButtonDiv: null,
    _lastHoveredItem$1: null,
    
    postCreate: function tab_TypeInFilterContents$postCreate() {
        var formatter = tableau.format.formatTupleDisplayName;
        var getter = tableau.FilterItem.getTypeInHtml;
        var itemsHTML = [];
        var visibleCount = 0;
        for (var i = 0; i < this.tuples.length; i++) {
            var tuple = this.tuples[i];
            if (tuple.s) {
                var id = this.itemName + '_' + i;
                var itemHTML = getter(id, formatter(tuple, true, this.role));
                itemsHTML.add(itemHTML);
                visibleCount++;
            }
        }
        this.domItemsList.innerHTML = itemsHTML.join('');
        dojo.style(this.domClearListButtonDiv, 'display', (visibleCount > 3) ? 'block' : 'none');
    },
    
    _onItemsListClick: function tab_TypeInFilterContents$_onItemsListClick(evt) {
        this.parentFilter.onListItemClick(evt);
    },
    
    _onItemsListMouseOver: function tab_TypeInFilterContents$_onItemsListMouseOver(evt) {
        if (!ss.isValue(evt.target) || !dojo.hasClass(evt.target, 'FITypeInItem')) {
            return;
        }
        dojo.addClass(evt.target, 'Hover');
        var node = this._lastHoveredItem$1 = tableau.FilterItem.getNodeFromEvent(evt);
        node.appendChild(this.domXButton);
        dojo.style(this.domXButton, 'top', '2px');
        dojo.style(this.domXButton, 'display', 'block');
    },
    
    _onItemsListMouseOut: function tab_TypeInFilterContents$_onItemsListMouseOut(evt) {
        if (!ss.isValue(evt.relatedTarget) || evt.relatedTarget !== this.domXButton) {
            if (ss.isValue(this._lastHoveredItem$1)) {
                dojo.removeClass(this._lastHoveredItem$1, 'Hover');
            }
            this._lastHoveredItem$1 = null;
            dojo.style(this.domXButton, 'display', 'none');
        }
    },
    
    _onItemsKeyDown: function tab_TypeInFilterContents$_onItemsKeyDown(evt) {
        if (evt.keyCode === dojo.keys.DELETE) {
            this._removeSelectedItemsFromFilter();
            dojo.stopEvent(evt);
        }
    },
    
    _onXButtonClick: function tab_TypeInFilterContents$_onXButtonClick(evt) {
        var table = null;
        evt.stopPropagation();
        evt.preventDefault();
        var node = tableau.FilterItem.getNodeFromEvent(evt);
        if (!ss.isValue(node)) {
            return;
        }
        tableau.FilterItem.setChecked(node, false);
        if (ss.isValue(this.parentFilter.get_oFilter())) {
            table = this.parentFilter.get_oFilter().table;
        }
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            if (ss.isValue(table) && table.actual_size === table.tuples.length) {
                var filterData = new tab.CategoricalFilterData(this.parentFilter.get_oFilter().targetSheets, this.parentFilter.get_field(), this.parentFilter.get_oFilter().exclude, this.getCheckedAliases(this.getUIState()));
                tab.FilterClientCommands.updateCategoricalFilter(filterData);
            }
        }
        this.parentFilter.clearRangeAnchorAndSelection();
        var applyChangesCB = ss.Delegate.create(this.parentFilter, this.parentFilter.applyChanges);
        this.parentFilter.notifyChange(applyChangesCB);
    },
    
    _onXButtonMouseOver: function tab_TypeInFilterContents$_onXButtonMouseOver(evt) {
        dojo.addClass(this.domXButton, 'Hover');
    },
    
    _onXButtonMouseOut: function tab_TypeInFilterContents$_onXButtonMouseOut(evt) {
        dojo.removeClass(this.domXButton, 'Hover');
    },
    
    _onClearListButtonClick: function tab_TypeInFilterContents$_onClearListButtonClick(evt) {
        var node;
        var table = null;
        this.parentFilter.get_searchWidget().clearSearch(true, false);
        for (node = this.domItemsList.firstChild; ss.isValue(node); node = node.nextSibling) {
            tableau.FilterItem.setChecked(node, false);
        }
        this.parentFilter.set_stateId(this.parentFilter.get_stateId() + 1);
        if (ss.isValue(this.parentFilter.get_oFilter())) {
            table = this.parentFilter.get_oFilter().table;
        }
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            if (ss.isValue(table) && table.actual_size === table.tuples.length) {
                var filterData = new tab.CategoricalFilterData(this.parentFilter.get_oFilter().targetSheets, this.parentFilter.get_field(), this.parentFilter.get_oFilter().exclude, this.getCheckedAliases(this.getUIState()));
                tab.FilterClientCommands.updateCategoricalFilter(filterData);
            }
        }
        this.parentFilter.clearRangeAnchorAndSelection();
        var applyChangesCB = ss.Delegate.create(this.parentFilter, this.parentFilter.applyChanges);
        this.parentFilter.notifyChange(applyChangesCB);
        dojo.style(this.domClearListButtonDiv, 'display', 'none');
    },
    
    layout: function tab_TypeInFilterContents$layout(contentSize, horizontalLayout) {
        if (tableau.util.isElementVisible(this.domClearListButtonDiv)) {
            var clearListDivSize = dojo.marginBox(this.domClearListButtonDiv);
            contentSize['h'] = Math.max(0, contentSize['h'] - clearListDivSize['h']);
        }
        if (dojo.isIE < 8) {
            if (contentSize['h'] <= 12) {
                dojo.style(this.domItemsList, 'overflow', 'hidden');
            }
            else {
                dojo.style(this.domItemsList, 'overflow', '');
            }
        }
        dojo.marginBox(this.domItemsList, contentSize);
    },
    
    _removeSelectedItemsFromFilter: function tab_TypeInFilterContents$_removeSelectedItemsFromFilter() {
        this.parentFilter.forEachSelected(function(index, node) {
            tableau.FilterItem.setChecked(node, false);
        });
        this.parentFilter.clearRangeAnchorAndSelection();
        this.parentFilter.notifyChange(null);
    },
    
    getUIState: function tab_TypeInFilterContents$getUIState() {
        var firstItem = this.domItemsList.firstChild, item;
        var state = {};
        for (item = firstItem; ss.isValue(item); item = item.nextSibling) {
            var alias = this.getFormattedAlias(this.tuples[tableau.FilterItem.getIndex(item)]);
            state[alias] = tableau.FilterItem.isChecked(item);
        }
        return state;
    },
    
    getCheckedAliases: function tab_TypeInFilterContents$getCheckedAliases(state) {
        var aliases = [];
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(state));
        while ($enum1.moveNext()) {
            var alias = $enum1.current;
            if (tab.MiscUtil.hasOwnProperty(state, alias)) {
                if (state[alias]) {
                    aliases.add(alias);
                }
            }
        }
        return aliases;
    },
    
    getFormattedAlias: function tab_TypeInFilterContents$getFormattedAlias(tuple) {
        return tableau.format.formatTupleDisplayName(tuple, true, this.role);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.Ubertip

tab.Ubertip = function tab_Ubertip(tooltip, enforceButtonOrderingInMultiselect) {
    this._disposables$1 = new tab.DisposableHolder();
    this._prevWidth$1 = -1;
    tab.Ubertip.initializeBase(this, [ $("\n<div class='tab-ubertip'>\n  <div class='tab-ubertipContent'>\n    <div class='tab-ubertipTooltip'></div>\n    <div class='tab-ubertipActions'></div>\n  </div>\n  <div class='tab-ubertipCommandArea'>\n    <div class='tab-ubertipSelected'></div>\n    <div class='tab-ubertipCommands'></div>\n    <div class='tab-clear'></div>\n  </div>\n</div>") ]);
    this._tooltip$1 = tooltip;
    this._tooltip$1.add_showed(ss.Delegate.create(this, this.handleTooltipShowed));
    this._tooltip$1.add_positioned(ss.Delegate.create(this, this.handleTooltipShowing));
    this._enforceButtonOrderingInMultiselect$1 = enforceButtonOrderingInMultiselect;
}
tab.Ubertip._getCommandKeyFromCommand$1 = function tab_Ubertip$_getCommandKeyFromCommand$1(command) {
    var textKey = '';
    if (String.isNullOrEmpty(command.imageRes)) {
        textKey = 'Command' + command.commandType;
    }
    else {
        if (command.imageRes.toString().endsWith('png')) {
            textKey = tab.TabResources.getResourceName(command.imageRes);
        }
        else {
            textKey = tab.TabResources.lookupFullResourceAlias(command.imageRes);
        }
    }
    return textKey;
}
tab.Ubertip._createPlaceholderButton$1 = function tab_Ubertip$_createPlaceholderButton$1(placeHolderCommand) {
    var button = spiff.LabelButton.newNativeButton();
    if (tsConfig.is_mobile) {
        var textKey = tab.Ubertip._getCommandKeyFromCommand$1(placeHolderCommand);
        button.set_label(tab.Strings.getString(String.format('Ubertip{0}Mobile', textKey)));
    }
    else {
        button.set_label(placeHolderCommand.name);
        button.set_hoverTooltipText(placeHolderCommand.description);
    }
    button.set_disabled(true);
    var classSb = new ss.StringBuilder('tab-command');
    classSb.append(tab.Ubertip._getCommandKeyFromCommand$1(placeHolderCommand));
    button.get_element().addClass(classSb.toString());
    button.get_element().css('visibility', 'hidden');
    return button;
}
tab.Ubertip.prototype = {
    _tooltip$1: null,
    _model$1: null,
    _position$1: null,
    _enforceButtonOrderingInMultiselect$1: false,
    _isActionClicked$1: false,
    _actionDisplayName$1: null,
    
    add_commandExecuted: function tab_Ubertip$add_commandExecuted(value) {
        this.__commandExecuted$1 = ss.Delegate.combine(this.__commandExecuted$1, value);
    },
    remove_commandExecuted: function tab_Ubertip$remove_commandExecuted(value) {
        this.__commandExecuted$1 = ss.Delegate.remove(this.__commandExecuted$1, value);
    },
    
    __commandExecuted$1: null,
    
    add_actionExecuted: function tab_Ubertip$add_actionExecuted(value) {
        this.__actionExecuted$1 = ss.Delegate.combine(this.__actionExecuted$1, value);
    },
    remove_actionExecuted: function tab_Ubertip$remove_actionExecuted(value) {
        this.__actionExecuted$1 = ss.Delegate.remove(this.__actionExecuted$1, value);
    },
    
    __actionExecuted$1: null,
    
    add_ubertipMenuToggled: function tab_Ubertip$add_ubertipMenuToggled(value) {
        this.__ubertipMenuToggled$1 = ss.Delegate.combine(this.__ubertipMenuToggled$1, value);
    },
    remove_ubertipMenuToggled: function tab_Ubertip$remove_ubertipMenuToggled(value) {
        this.__ubertipMenuToggled$1 = ss.Delegate.remove(this.__ubertipMenuToggled$1, value);
    },
    
    __ubertipMenuToggled$1: null,
    
    add_ubertipMenuClosed: function tab_Ubertip$add_ubertipMenuClosed(value) {
        this.__ubertipMenuClosed$1 = ss.Delegate.combine(this.__ubertipMenuClosed$1, value);
    },
    remove_ubertipMenuClosed: function tab_Ubertip$remove_ubertipMenuClosed(value) {
        this.__ubertipMenuClosed$1 = ss.Delegate.remove(this.__ubertipMenuClosed$1, value);
    },
    
    __ubertipMenuClosed$1: null,
    
    get_model: function tab_Ubertip$get_model() {
        return this._model$1;
    },
    set_model: function tab_Ubertip$set_model(value) {
        this._model$1 = value;
        this._initializeFromModel$1();
        return value;
    },
    
    get_isShowingActionAndCommandButtons: function tab_Ubertip$get_isShowingActionAndCommandButtons() {
        return this.get_element().find('.tab-ubertipCommandArea').is(':visible') || this.get_element().find('.tab-ubertipActions').is(':visible');
    },
    
    get__shouldEnforceButtonOrdering$1: function tab_Ubertip$get__shouldEnforceButtonOrdering$1() {
        return this._enforceButtonOrderingInMultiselect$1 && this.hasSummary();
    },
    
    dispose: function tab_Ubertip$dispose() {
        this.get_element().detach();
        this._tooltip$1.remove_showed(ss.Delegate.create(this, this.handleTooltipShowed));
        this._tooltip$1.remove_positioned(ss.Delegate.create(this, this.handleTooltipShowing));
        this._clearDisposeOnClose$1();
        tab.Ubertip.callBaseMethod(this, 'dispose');
    },
    
    hasActions: function tab_Ubertip$hasActions() {
        if (ss.isNullOrUndefined(this.get_model())) {
            return false;
        }
        var hasActionPMs = ss.isValue(this.get_model().actionPMs) && this.get_model().actionPMs.length > 0;
        var hasActions = ss.isValue(this.get_model().actions) && this.get_model().actions.length > 0;
        return hasActionPMs || hasActions;
    },
    
    hasCommands: function tab_Ubertip$hasCommands() {
        if (ss.isNullOrUndefined(this.get_model())) {
            return false;
        }
        return ss.isValue(this.get_model().commands) && this.get_model().commands.length > 0;
    },
    
    hasSummary: function tab_Ubertip$hasSummary() {
        if (ss.isNullOrUndefined(this.get_model())) {
            return false;
        }
        return ss.isValue(this.get_model().selectionHtml);
    },
    
    hasActionsOrSummaryOrCommands: function tab_Ubertip$hasActionsOrSummaryOrCommands() {
        return this.hasActions() || this.hasSummary() || this.hasCommands();
    },
    
    hideMenuActionsAndCommandButtons: function tab_Ubertip$hideMenuActionsAndCommandButtons(shouldRefresh) {
        if (this.get_isShowingActionAndCommandButtons() && shouldRefresh) {
            this._tooltip$1.requestLayout(ss.Delegate.create(this, function() {
                this._hideCommandsAndStopAnimations$1();
                this.get_element().find('.tab-ubertipCommands').css('min-width', '');
            }));
        }
        else {
            this._hideCommandsAndStopAnimations$1();
            this.get_element().find('.tab-ubertipCommands').css('min-width', '');
        }
    },
    
    prepareWidthForPositioning: function tab_Ubertip$prepareWidthForPositioning() {
        this._handleWidth$1();
    },
    
    showMenuActionsAndCommandButtons: function tab_Ubertip$showMenuActionsAndCommandButtons(args) {
        if (this.get_isShowingActionAndCommandButtons()) {
            return;
        }
        this.get_element().css('width', '');
        var oldHeight = this.get_element().outerHeight();
        if (!this._tooltip$1.get_isShown() || !oldHeight) {
            this._showCommandAndActionAreas$1(false);
        }
        else {
            var tooltipPos = this._tooltip$1.get_element().position();
            var room = args.viewport.getVisibleRoom(tab.$create_Point(tooltipPos.left, tooltipPos.top), 1);
            this._showCommandAndActionAreas$1(false);
            this.get_element().find('.tab-ubertipCommands').css('min-width', this._computeMinimumWidthOfCommandBar$1() + 'px');
            var newHeight = this.get_element().outerHeight();
            var actionHeight = this.get_element().find('.tab-ubertipActions').outerHeight();
            var newWidth = this._getAdjustedTooltipWidthToAvoidBadScenarios$1();
            if (newWidth > this._prevWidth$1) {
                this._prevWidth$1 = newWidth;
            }
            this.get_element().width(this._prevWidth$1);
            var doesntHaveEnoughRoomToTheRight = tooltipPos.left + newWidth > tooltipPos.left + room.roomRight;
            var isInBottomRightCornerButtonsWillAddTooMuchHeight = this._position$1 === 'BL' && tooltipPos.top + newHeight > tooltipPos.top + room.roomBelow;
            if (doesntHaveEnoughRoomToTheRight || isInBottomRightCornerButtonsWillAddTooMuchHeight) {
                this._tooltip$1.layoutTooltip(args.viewport, true);
                tooltipPos = this._tooltip$1.get_element().position();
                this.handleTooltipShowing(this, this._tooltip$1.get_previousShownArgs());
                if (this._position$1 === 'AL') {
                    var tempTop = parseInt(this._tooltip$1.get_element().css('top'));
                    this._tooltip$1.get_element().css('top', (tempTop + (newHeight - oldHeight - actionHeight)) + 'px');
                }
            }
            var top = parseInt(this._tooltip$1.get_element().css('top'));
            var topWithConsistentAnchorCorner = top - (newHeight - oldHeight - actionHeight);
            var bottomOfVisibleScreen = tooltipPos.top + room.roomBelow + newHeight;
            var newTop = Math.min(topWithConsistentAnchorCorner, bottomOfVisibleScreen);
            this._hideCommandsAndStopAnimations$1();
            var actionTakeTooMuchRoom = actionHeight > 0 && tooltipPos.top + newHeight > tooltipPos.top + room.roomBelow;
            this._showCommandAndActionAreas$1(!actionTakeTooMuchRoom);
            if (actionTakeTooMuchRoom) {
                var roomBelow = room.roomBelow - oldHeight;
                var heightDifference = newHeight - oldHeight;
                var spaceNeeded = heightDifference - roomBelow;
                newTop = tooltipPos.top - spaceNeeded - 2;
                this._tooltip$1.get_element().css({ top: newTop + 'px' });
            }
            else {
                switch (this._position$1) {
                    case 'AR':
                    case 'AL':
                        if (this._position$1 === 'AL' || (room.roomBelow < newHeight)) {
                            this._tooltip$1.get_element().animate({ top: newTop + 'px' }, 'fast');
                        }
                        break;
                    case 'BR':
                        this._tooltip$1.get_element().css('top', (tooltipPos.top - this.get_element().find('.tab-ubertipCommandArea').height()) + 'px');
                        this._tooltip$1.get_element().animate({ top: newTop + 'px' }, 'fast');
                        break;
                    case 'BL':
                    default:
                        break;
                }
            }
        }
    },
    
    handleRemoteFailure: function tab_Ubertip$handleRemoteFailure() {
        if (this._isActionClicked$1) {
            this._isActionClicked$1 = false;
            if (tab.CommandController.get().get_legacySession().get_waitHandler().isBusy()) {
                tab.CommandController.get().get_legacySession().get_waitHandler().reset();
            }
        }
    },
    
    hideSpinner: function tab_Ubertip$hideSpinner() {
        if (tab.CommandController.get().get_legacySession().get_waitHandler().isBusy()) {
            tab.CommandController.get().get_legacySession().get_waitHandler().reset();
        }
    },
    
    handleTooltipShowing: function tab_Ubertip$handleTooltipShowing(sender, e) {
        if (ss.isValue(this._position$1) && this._position$1 === e.position) {
            return;
        }
        tab.Log.get(this).debug('Update ubertip position: pos=%s', e.position);
        switch (e.position) {
            case 'AL':
            case 'AR':
                this.get_element().find('.tab-ubertipContent').after(this.get_element().find('.tab-ubertipCommandArea'));
                this.get_element().find('.tab-ubertipCommands').before(this.get_element().find('.tab-ubertipSelected'));
                break;
            case 'BL':
            case 'BR':
                this.get_element().find('.tab-ubertipContent').before(this.get_element().find('.tab-ubertipCommandArea'));
                this.get_element().find('.tab-clear').after(this.get_element().find('.tab-ubertipSelected'));
                break;
        }
        this._position$1 = e.position;
    },
    
    handleTooltipShowed: function tab_Ubertip$handleTooltipShowed(sender, e) {
        this._adjustTooltipWidthToAvoidBadScenarios$1();
    },
    
    _adjustTooltipWidthToAvoidBadScenarios$1: function tab_Ubertip$_adjustTooltipWidthToAvoidBadScenarios$1() {
        if (!this.get_element().width()) {
            return;
        }
        var widthForIE = this._getAdjustedTooltipWidthToAvoidBadScenarios$1();
        this.get_element().width(widthForIE);
    },
    
    _getAdjustedTooltipWidthToAvoidBadScenarios$1: function tab_Ubertip$_getAdjustedTooltipWidthToAvoidBadScenarios$1() {
        return Math.min(this.get_element().width() + 1, $(document.body).width() - 2);
    },
    
    updateFromRemote: function tab_Ubertip$updateFromRemote(remoteModel) {
        var localModel = this._model$1;
        this._model$1 = remoteModel;
        if (this._isActionClicked$1) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._model$1.actions);
            while ($enum1.moveNext()) {
                var action = $enum1.current;
                tab.Logger.getLogger(tab.Ubertip).debug('Remote Ubertip complete. Action name=%s', action.name);
                if (action.name === this._actionDisplayName$1) {
                    this._isActionClicked$1 = false;
                    var args = new tab.ActionExecutedEventArgs();
                    args.action = action;
                    this.onActionExecuted(args);
                }
            }
        }
        var needTransition = [];
        var groupPlaceholderCmd = null;
        if (ss.isValue(localModel)) {
            groupPlaceholderCmd = _.find(localModel.placeHolders, function(placeholderCmd) {
                return placeholderCmd.commandType === 10;
            });
        }
        if (ss.isValue(groupPlaceholderCmd)) {
            var groupCmd = _.find(this._model$1.commands, function(cmd) {
                return cmd.commandType === 10;
            });
            if (ss.isValue(groupCmd)) {
                if (!this.get__shouldEnforceButtonOrdering$1()) {
                    this._model$1.commands.remove(groupCmd);
                    this._model$1.commands.add(groupCmd);
                    needTransition.add(this._model$1.commands.length - 1);
                }
            }
            else {
                this._model$1.placeHolders = [];
                this._model$1.placeHolders.add(groupPlaceholderCmd);
            }
        }
        this._initializeFromModel$1(needTransition, true);
    },
    
    updatePartiallyFromRemote: function tab_Ubertip$updatePartiallyFromRemote(remoteModel) {
        if (ss.isNullOrUndefined(remoteModel) || ss.isNullOrUndefined(this._model$1)) {
            return;
        }
        this._model$1.rid = remoteModel.rid;
        this._updateSummaryFromRemote$1(remoteModel);
        this._updateActionsFromRemote$1(remoteModel);
        this._updateCommandsFromRemote$1(remoteModel);
    },
    
    _updateCommandsFromRemote$1: function tab_Ubertip$_updateCommandsFromRemote$1(remoteModel) {
        var needTransition = [];
        var groupPlaceholderCmd = null;
        var groupCmd = null;
        if (ss.isValue(this._model$1)) {
            groupPlaceholderCmd = _.find(this._model$1.placeHolders, function(placeholderCmd) {
                return placeholderCmd.commandType === 10;
            });
            groupCmd = _.find(remoteModel.commands, function(cmd) {
                return cmd.commandType === 10;
            });
        }
        if (ss.isValue(groupCmd)) {
            if (!this.get__shouldEnforceButtonOrdering$1()) {
                remoteModel.commands.remove(groupCmd);
                remoteModel.commands.add(groupCmd);
                needTransition.add(remoteModel.commands.length - 1);
            }
            this._model$1.placeHolders = [];
        }
        else if (ss.isValue(groupPlaceholderCmd)) {
            this._model$1.placeHolders = [];
            this._model$1.placeHolders.add(groupPlaceholderCmd);
        }
        this._model$1.commands = remoteModel.commands;
        this._updateCommands$1(needTransition);
    },
    
    _updateSummaryFromRemote$1: function tab_Ubertip$_updateSummaryFromRemote$1(remoteModel) {
        this._model$1.selectionHtml = remoteModel.selectionHtml;
        this._updateSelected$1();
        if (ss.isValue(this._model$1.selectionHtml)) {
            this._handleWidth$1();
            this._adjustTooltipWidthToAvoidBadScenarios$1();
        }
    },
    
    _updateActionsFromRemote$1: function tab_Ubertip$_updateActionsFromRemote$1(remoteModel) {
        this._handlePreviousClickOnLocalAction$1();
        this._model$1.actionPMs = remoteModel.actionPMs;
        this._model$1.actions = remoteModel.actions;
        this._updateActions$1();
    },
    
    _handlePreviousClickOnLocalAction$1: function tab_Ubertip$_handlePreviousClickOnLocalAction$1() {
        if (this._isActionClicked$1) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._model$1.actions);
            while ($enum1.moveNext()) {
                var action = $enum1.current;
                tab.Logger.getLogger(tab.Ubertip).debug('Remote Ubertip complete. Action name=%s', action.name);
                if (action.name === this._actionDisplayName$1) {
                    this._isActionClicked$1 = false;
                    var args = new tab.ActionExecutedEventArgs();
                    args.action = action;
                    this.onActionExecuted(args);
                }
            }
        }
    },
    
    onCommandExecuted: function tab_Ubertip$onCommandExecuted(args) {
        if (ss.isValue(this.__commandExecuted$1)) {
            this.__commandExecuted$1(this, args);
        }
    },
    
    onActionExecuted: function tab_Ubertip$onActionExecuted(args) {
        if (ss.isValue(this.__actionExecuted$1)) {
            this.__actionExecuted$1(this, args);
        }
    },
    
    _clearDisposeOnClose$1: function tab_Ubertip$_clearDisposeOnClose$1() {
        this._disposables$1.dispose();
    },
    
    _initializeFromModel$1: function tab_Ubertip$_initializeFromModel$1(needTransition, preserveDimension) {
        var shouldHideContent = false;
        var oldTooltipVisble = this._tooltip$1.get_isShown();
        var oldWidth = this.get_element().width();
        var oldContentAreaHeight = this.get_element().find('.tab-ubertipContent').height();
        var oldCommandAreaHeight = this.get_element().find('.tab-ubertipCommandArea').height();
        this._clearDisposeOnClose$1();
        this.get_element().show();
        this._updateTooltip$1();
        this._updateActions$1();
        this._updateCommands$1(needTransition);
        this._updateSelected$1();
        if (ss.isValue(preserveDimension) && preserveDimension && oldTooltipVisble) {
            this.get_element().width(oldWidth);
            if (!oldContentAreaHeight || this.get_element().find('.tab-ubertipContent').hasClass('hide')) {
                shouldHideContent = true;
            }
            else {
                var idealContentAreaHeight = oldContentAreaHeight;
                var newCommandAreaHeight = this.get_element().find('.tab-ubertipCommandArea').height();
                if (!newCommandAreaHeight) {
                    idealContentAreaHeight += oldCommandAreaHeight;
                }
                this.get_element().find('.tab-ubertipContent').height(idealContentAreaHeight);
            }
        }
        else {
            this._handleWidth$1();
        }
        shouldHideContent = shouldHideContent || ((ss.isNullOrUndefined(this._model$1.actions) || !this._model$1.actions.length) && String.isNullOrEmpty(this._model$1.tooltipHtml));
        if (shouldHideContent) {
            this.get_element().find('.tab-ubertipContent').addClass('hide');
        }
        else {
            this.get_element().find('.tab-ubertipContent').removeClass('hide');
        }
    },
    
    _handleWidth$1: function tab_Ubertip$_handleWidth$1() {
        this.get_element().css('width', '');
        this.get_element().find('.tab-ubertipContent').css('height', '');
        this.get_element().find('.tab-ubertipCommandArea').css('height', '');
        var width = this.computeAdjustedTooltipWidth();
        if (width > 0) {
            this.get_element().width(width);
            this._prevWidth$1 = width;
        }
        else if (this.get_element().width() > 0) {
            this._prevWidth$1 = this.get_element().width();
        }
    },
    
    computeAdjustedTooltipWidth: function tab_Ubertip$computeAdjustedTooltipWidth() {
        var width = this.get_element().width();
        var newWidth = -1;
        var maxWhitespace = tab.FeatureParamsLookup.getInt(tab.FeatureParam.maxTooltipWhitespace);
        if (!ss.isValue(maxWhitespace)) {
            maxWhitespace = 70;
        }
        if (width > 0 && this._prevWidth$1 > 0 && this._prevWidth$1 >= width && this._prevWidth$1 - width <= maxWhitespace) {
            newWidth = this._prevWidth$1;
        }
        return newWidth;
    },
    
    _computeMinimumWidthOfCommandBar$1: function tab_Ubertip$_computeMinimumWidthOfCommandBar$1() {
        var totalButtonWidth = 0;
        this.get_element().find('.tab-ubertipCommands').find('li').each(function(index, e) {
            totalButtonWidth += e.firstChild.offsetWidth;
        });
        return totalButtonWidth;
    },
    
    _hideCommandsAndStopAnimations$1: function tab_Ubertip$_hideCommandsAndStopAnimations$1() {
        this._tooltip$1.get_element().stop();
        this.get_element().find('.tab-ubertipActions').stop();
        this.get_element().find('.tab-ubertipCommandArea').stop();
        this.get_element().find('.tab-ubertipActions').hide();
        this.get_element().find('.tab-ubertipCommandArea').hide();
    },
    
    _showCommandAndActionAreas$1: function tab_Ubertip$_showCommandAndActionAreas$1(needsAnimation) {
        if (ss.isNullOrUndefined(this.get_model())) {
            return;
        }
        if (this.hasActions()) {
            if (needsAnimation) {
                this.get_element().find('.tab-ubertipActions').show();
            }
            else {
                this.get_element().find('.tab-ubertipActions').show();
            }
        }
        if (this.hasCommands() || this.hasSummary()) {
            if (needsAnimation) {
                this.get_element().find('.tab-ubertipCommandArea').slideDown('fast');
            }
            else {
                this.get_element().find('.tab-ubertipCommandArea').show();
            }
        }
    },
    
    _updateTooltip$1: function tab_Ubertip$_updateTooltip$1() {
        var tooltipHtml = $(this._model$1.tooltipHtml);
        this.get_element().find('.tab-ubertipTooltip').html('').append(tooltipHtml);
    },
    
    _updateSelected$1: function tab_Ubertip$_updateSelected$1() {
        if (ss.isNullOrUndefined(this._model$1.selectionHtml)) {
            this.get_element().find('.tab-ubertipSelected').html('').addClass('hide');
        }
        else {
            this.get_element().find('.tab-ubertipSelected').html('').append(this._model$1.selectionHtml).removeClass('hide');
        }
    },
    
    _appendMenu$1: function tab_Ubertip$_appendMenu$1(itemWrapper, allCommandsObj, hasVisibleCommand) {
        if (itemWrapper.get_commandsType() !== 'subcommands') {
            return false;
        }
        var subItems = [];
        tab.WidgetUtil.newMenuItemsFromCommands(subItems, itemWrapper.get_commands(), tab.WidgetUtil.createDropdownMenuCommands, tab.PermissionManager.buildCommandPermission());
        if (!subItems.length) {
            return false;
        }
        var b = this._createMenuButton$1(itemWrapper);
        var menuViewModel = new spiff.MenuViewModel();
        menuViewModel.set_menu(new spiff.Menu(subItems));
        var menuButtonClickHandler = ss.Delegate.create(this, function() {
            this._handleMenuButtonClick$1(menuViewModel, b);
        });
        b.add_click(menuButtonClickHandler);
        menuViewModel.add_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
        var tooltipCloseHandler = function() {
            menuViewModel.hide();
        };
        this._tooltip$1.add_closed(tooltipCloseHandler);
        this._disposables$1.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            b.remove_click(menuButtonClickHandler);
            menuViewModel.remove_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
            menuViewModel.remove_hidden(ss.Delegate.create(this, this._handleMenuClosed$1));
            this._tooltip$1.remove_closed(tooltipCloseHandler);
        })));
        if (hasVisibleCommand) {
            allCommandsObj.append($("<li><div class='tab-separator'>&nbsp;</div></li>"));
        }
        var commandObj = $('<li></li>');
        commandObj.append(b.get_element());
        allCommandsObj.append(commandObj);
        this._disposables$1.add(menuViewModel);
        spiff.ObjectRegistry.newView(spiff.MenuView, menuViewModel);
        return true;
    },
    
    _handleMenuClosed$1: function tab_Ubertip$_handleMenuClosed$1() {
        if (ss.isValue(this.__ubertipMenuClosed$1)) {
            this.__ubertipMenuClosed$1();
        }
    },
    
    _handleMenuButtonClick$1: function tab_Ubertip$_handleMenuButtonClick$1(menuViewModel, menuButton) {
        if (menuViewModel.get_visible()) {
            menuViewModel.remove_hidden(ss.Delegate.create(this, this._handleMenuClosed$1));
            menuViewModel.hide();
            if (ss.isValue(this.__ubertipMenuToggled$1)) {
                this.__ubertipMenuToggled$1(false);
            }
        }
        else {
            menuViewModel.add_hidden(ss.Delegate.create(this, this._handleMenuClosed$1));
            var options = spiff.ShowMenuOptions.create(menuButton.get_element(), false, menuButton.get_element().outerWidth(false));
            menuViewModel.show(options);
            if (ss.isValue(this.__ubertipMenuToggled$1)) {
                this.__ubertipMenuToggled$1(true);
            }
        }
    },
    
    _updateCommands$1: function tab_Ubertip$_updateCommands$1(needTransition) {
        var hasVisibleCommand = false;
        var allCommandsObj = $('<ul></ul>');
        if (ss.isValue(this._model$1.commandsAndSubcommands)) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._model$1.commandsAndSubcommands);
            while ($enum1.moveNext()) {
                var commandTuple = $enum1.current;
                var isButton = commandTuple.first;
                var index = commandTuple.second;
                if (isButton) {
                    var command = this._model$1.commands[index];
                    if (ss.isValue(command) && command.status !== 'hidden') {
                        var isTransitionNeeded = ss.isValue(needTransition) && needTransition.contains(index);
                        this._appendButton$1(command, allCommandsObj, hasVisibleCommand, isTransitionNeeded);
                        hasVisibleCommand = true;
                    }
                }
                else {
                    hasVisibleCommand = this._appendMenu$1(this._model$1.subcommands[index], allCommandsObj, hasVisibleCommand) || hasVisibleCommand;
                }
            }
        }
        else if (ss.isValue(this._model$1.commands)) {
            for (var index = 0; index < this._model$1.commands.length; ++index) {
                var command = this._model$1.commands[index];
                if (ss.isValue(command) && command.status !== 'hidden') {
                    var isTransitionNeeded = ss.isValue(needTransition) && needTransition.contains(index);
                    this._appendButton$1(command, allCommandsObj, hasVisibleCommand, isTransitionNeeded);
                    hasVisibleCommand = true;
                }
            }
        }
        this._addDomForCommandPlaceholders$1(allCommandsObj, hasVisibleCommand);
        if (hasVisibleCommand) {
            this.get_element().find('.tab-ubertipCommands').html('').append(allCommandsObj).removeClass('hide');
        }
        else {
            this.get_element().find('.tab-ubertipCommands').html('').addClass('hide');
        }
    },
    
    _appendButton$1: function tab_Ubertip$_appendButton$1(command, allCommandsObj, hasVisibleCommand, isTransitionNeeded) {
        var b = this._createCommandButton$1(command);
        b.set_context(command);
        this._addClickHandler$1(b, ss.Delegate.create(this, this._handleCommandClick$1));
        if (Object.keyExists(tab.Ubertip._placeHolderWidth$1, command.commandType)) {
            b.get_element().width(tab.Ubertip._placeHolderWidth$1[command.commandType]);
        }
        if (isTransitionNeeded) {
            b.get_element().fadeIn();
        }
        if (hasVisibleCommand) {
            allCommandsObj.append($("<li><div class='tab-separator'>&nbsp;</div></li>"));
        }
        var commandObj = $('<li></li>');
        commandObj.append(b.get_element());
        allCommandsObj.append(commandObj);
    },
    
    _createCommandButton$1: function tab_Ubertip$_createCommandButton$1(command) {
        var b = spiff.LabelButton.newNativeButton();
        if (tsConfig.is_mobile) {
            var localizedStringsKey = String.format('Ubertip{0}Mobile', tab.Ubertip._getCommandKeyFromCommand$1(command));
            var labelHtmlContent = tab.Strings.getString(localizedStringsKey);
            if (labelHtmlContent === String.format('!{0}!', localizedStringsKey)) {
                labelHtmlContent = command.name;
            }
            var labelHtml = $('<div>' + labelHtmlContent + '</div>');
            b.setLabelContents(labelHtml);
        }
        else {
            b.set_label(command.name);
            b.set_hoverTooltipText(command.description);
        }
        var classSb = new ss.StringBuilder('tab-command');
        if (String.isNullOrEmpty(command.imageRes)) {
            classSb.append(command.commandType);
        }
        else {
            classSb.append(tab.Ubertip._getCommandKeyFromCommand$1(command));
        }
        classSb.append(' ').append(command.status);
        b.get_element().addClass(classSb.toString());
        if (command.status === 'disabled') {
            b.set_disabled(true);
        }
        this._disposables$1.add(b);
        spiff.HoverAddClassBehavior.attach(b);
        return b;
    },
    
    _createMenuButton$1: function tab_Ubertip$_createMenuButton$1(itemWrapper) {
        var b = spiff.LabelButton.newNativeButton();
        b.set_label(itemWrapper.get_name());
        b.set_hoverTooltipText(itemWrapper.get_description());
        b.get_element().addClass('enabled');
        $('<span>').addClass('tabTooltipMenuDropdownBtnIcon').appendTo(b.get_element());
        this._disposables$1.add(b);
        spiff.HoverAddClassBehavior.attach(b);
        return b;
    },
    
    _addDomForCommandPlaceholders$1: function tab_Ubertip$_addDomForCommandPlaceholders$1(allCommandsObj, hasVisibleCommand) {
        if (ss.isValue(this.get_model().placeHolders)) {
            var $enum1 = ss.IEnumerator.getEnumerator(this.get_model().placeHolders);
            while ($enum1.moveNext()) {
                var placeHolderCmd = $enum1.current;
                var separator = $("<li><div class='tab-separator'>&nbsp;</div></li>");
                var b = tab.Ubertip._createPlaceholderButton$1(placeHolderCmd);
                var commandObj = $('<li></li>');
                commandObj.append(b.get_element());
                if (placeHolderCmd.commandType === 10 && this.get__shouldEnforceButtonOrdering$1() && hasVisibleCommand) {
                    var keepOnlyExclude = _.filter(this._model$1.commands, function(command) {
                        return command.commandType === 2;
                    });
                    if (ss.isValue(keepOnlyExclude)) {
                        var exclude = allCommandsObj.children().get(2);
                        separator.insertAfter(exclude);
                        commandObj.insertAfter(separator);
                    }
                    else {
                        var firstButton = allCommandsObj.children().get(0);
                        commandObj.insertBefore(firstButton);
                        separator.insertBefore(firstButton);
                    }
                }
                else {
                    if (hasVisibleCommand) {
                        allCommandsObj.append(separator);
                    }
                    allCommandsObj.append(commandObj);
                }
                document.documentElement.appendChild(allCommandsObj.first().get(0));
                tab.Ubertip._placeHolderWidth$1[placeHolderCmd.commandType] = b.get_element().innerWidth();
                b.get_element().width(tab.Ubertip._placeHolderWidth$1[placeHolderCmd.commandType]);
                document.documentElement.removeChild(allCommandsObj.first().get(0));
            }
        }
    },
    
    _addClickHandler$1: function tab_Ubertip$_addClickHandler$1(b, handler) {
        var clickHandler = function() {
            handler(b);
        };
        b.add_click(clickHandler);
        this._disposables$1.add(new tab.CallOnDispose(function() {
            b.remove_click(clickHandler);
        }));
    },
    
    _handleCommandClick$1: function tab_Ubertip$_handleCommandClick$1(button) {
        var commandArgs = new tab.CommandExecutedEventArgs();
        commandArgs.command = button.get_context();
        this.onCommandExecuted(commandArgs);
    },
    
    _handleActionClick$1: function tab_Ubertip$_handleActionClick$1(button) {
        var actionArgs = new tab.ActionExecutedEventArgs();
        actionArgs.action = button.get_context();
        this.onActionExecuted(actionArgs);
    },
    
    _handleActionPMClick$1: function tab_Ubertip$_handleActionPMClick$1(button) {
        var actionPM = button.get_context();
        if (tab.ActionUtils.isFilterAction(actionPM) || (tab.ActionUtils.isHighlightAction(actionPM) && !tab.ActionUtils.isTargetOfActionLocal(actionPM))) {
            tab.CommandController.get().get_legacySession().get_waitHandler().showAndLock();
            this._isActionClicked$1 = true;
            this._actionDisplayName$1 = button.get_labelElement().text();
            tab.Logger.getLogger(tab.Ubertip).debug('User cliked on Action name=%s', this._actionDisplayName$1);
        }
        else {
            var visualModel = tab.ModelUtils.getVisualModelFromVisualId(this._model$1.visualId);
            var tupleIds = [ this._model$1.tupleId ];
            tab.UberTipClientCommands.executeUbertipAction(actionPM, tupleIds, visualModel);
        }
    },
    
    _updateActions$1: function tab_Ubertip$_updateActions$1() {
        if ((ss.isNullOrUndefined(this._model$1.actions) || !this._model$1.actions.length) && (ss.isNullOrUndefined(this._model$1.actionPMs) || !this._model$1.actionPMs.length)) {
            this.get_element().find('.tab-ubertipActions').html('').removeClass('invisible').addClass('hide');
        }
        else if (ss.isValue(this._model$1.actions)) {
            var allActionsObj = $('<ul></ul>');
            var $enum1 = ss.IEnumerator.getEnumerator(this._model$1.actions);
            while ($enum1.moveNext()) {
                var action = $enum1.current;
                this._createActionButton$1(allActionsObj, action.name, action, ss.Delegate.create(this, this._handleActionClick$1));
            }
            this.get_element().find('.tab-ubertipActions').html('').append(allActionsObj).removeClass('hide invisible');
        }
        else {
            var allActionsObj = $('<ul></ul>');
            var visualModel = tab.ModelUtils.getVisualModelFromVisualId(this._model$1.visualId);
            var hasFilterOrUrlAction = false;
            var actionCanRunLocally = true;
            var $enum2 = ss.IEnumerator.getEnumerator(this._model$1.actionPMs);
            while ($enum2.moveNext()) {
                var actionPM = $enum2.current;
                var vizDataModel = visualModel.get_vizDataModel();
                var tupleIds = [ this._model$1.tupleId ];
                var dataDictionary = tab.ApplicationModel.get_instance().get_dataDictionary();
                var displayUrl = tab.VizDataUtils.constructUrlFromString(dataDictionary, actionPM.name, vizDataModel, tupleIds, visualModel.get_worksheetName());
                this._createActionButton$1(allActionsObj, displayUrl, actionPM, ss.Delegate.create(this, this._handleActionPMClick$1));
                var actionType = tab.ActionUtils.getActionType(actionPM);
                if (actionType === 'filter' || actionType === 'url') {
                    hasFilterOrUrlAction = true;
                }
                if (actionType === 'url') {
                    var urlPresModel = tab.ActionUtils.getUrlActionPm(actionPM, visualModel, tupleIds);
                    if (urlPresModel == null || String.isNullOrEmpty(displayUrl)) {
                        actionCanRunLocally = false;
                    }
                }
            }
            var paneDescriptorCount = -1;
            if (ss.isValue(visualModel.get_sceneModel())) {
                paneDescriptorCount = visualModel.get_sceneModel().get_paneDescriptorCount();
            }
            else {
                tab.Log.get(this).warn('Creating local action for ubertip but SceneModel does not exist.');
            }
            if ((paneDescriptorCount > 1 && hasFilterOrUrlAction) || !actionCanRunLocally) {
                this.get_element().find('.tab-ubertipActions').html('').append(allActionsObj).removeClass('hide').addClass('invisible');
            }
            else {
                this.get_element().find('.tab-ubertipActions').html('').append(allActionsObj).removeClass('hide invisible');
            }
        }
    },
    
    _createActionButton$1: function tab_Ubertip$_createActionButton$1(allActionsObj, label, context, click) {
        var b = spiff.LabelButton.newAnchorButton();
        b.set_label(label);
        b.get_element().addClass('tab-action');
        b.set_context(context);
        this._addClickHandler$1(b, click);
        this._disposables$1.add(b);
        var actionObj = $('<li></li>');
        actionObj.append(b.get_element());
        allActionsObj.append(actionObj);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.IMenuItem

tab.IMenuItem = function tab_IMenuItem(parameters) {
    tab.IMenuItem.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// tab.OnClickOverride

tab.OnClickOverride = function tab_OnClickOverride() {
    this._isMobile$2 = tsConfig.is_mobile;
    tab.OnClickOverride.initializeBase(this);
}
tab.OnClickOverride.prototype = {
    _DELAY$2: 75,
    _applyTimer$2: null,
    
    postCreate: function tab_OnClickOverride$postCreate() {
        this.inherited(arguments);
        if (this._isMobile$2) {
            var tmp = new tableau.util.NoClickDelay(this.domNode);
        }
    },
    
    _blurItem$2: function tab_OnClickOverride$_blurItem$2() {
        this.getParent().focusChild(this);
    },
    
    _setApplyTimer$2: function tab_OnClickOverride$_setApplyTimer$2(func) {
        if (ss.isValue(this._applyTimer$2)) {
            window.clearTimeout(this._applyTimer$2);
            this._applyTimer$2 = null;
        }
        this._applyTimer$2 = window.setTimeout(func, this._DELAY$2);
    },
    
    _onClick: function tab_OnClickOverride$_onClick(evt) {
        if (this._isMobile$2) {
            if (!this._isReasonableEvent(evt)) {
                return;
            }
            var func = ss.Delegate.create(this, function() {
                this.getParent().onItemClick(this, evt);
                dojo.stopEvent(evt);
            });
            this._blurItem$2();
            this._setApplyTimer$2(func);
        }
        else {
            this.inherited(arguments);
        }
    },
    
    _onHover: function tab_OnClickOverride$_onHover(evt) {
        if (this._isMobile$2) {
            this._onClick(evt);
        }
        else {
            this.inherited(arguments);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.UIMenuItem

tab.UIMenuItem = function tab_UIMenuItem() {
    tab.UIMenuItem.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// tab.UICheckedMenuItem

tab.UICheckedMenuItem = function tab_UICheckedMenuItem() {
    tab.UICheckedMenuItem.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// tab.ViewingToolbar

tab.ViewingToolbar = function tab_ViewingToolbar(app, isTop) {
    this.disposables = new tab.DisposableHolder();
    this.app = app;
    this.isTop = isTop;
    this.subscriptions = [];
}
tab.ViewingToolbar.isEditAllowed = function tab_ViewingToolbar$isEditAllowed() {
    return tsConfig.allow_authoring && !tsConfig.previewMode;
}
tab.ViewingToolbar.isEditDisabled = function tab_ViewingToolbar$isEditDisabled() {
    return !tab.ViewingToolbar.isEditAllowed() || tsConfig.isPublic || tab.ApplicationModel.get_instance().get_workbook().get_isCurrentSheetStoryboard();
}
tab.ViewingToolbar.prototype = {
    app: null,
    isTop: false,
    subscriptions: null,
    toolbarElement: null,
    leftElement: null,
    centerElement: null,
    rightElement: null,
    customViewsButton: null,
    editButton: null,
    viewMetricsDataButton: null,
    shareButtons: null,
    clearSelectionButton: null,
    undoButton: null,
    redoButton: null,
    renderIndicatorButton: null,
    exportButton: null,
    revertButton: null,
    autoUpdateButton: null,
    refreshButton: null,
    subscribeButton: null,
    downloadButton: null,
    guestBrandWatermark: null,
    customViewsViewModel: null,
    customViewsPanel: null,
    activeSheet: null,
    exportMenuView: null,
    exportMenuViewModel: null,
    exportImageEnabled: false,
    exportDataEnabled: false,
    exportCrosstabEnabled: false,
    exportPdfEnabled: false,
    subscribeViewModel: null,
    subscribeView: null,
    _viewChangedListenerHandle: null,
    
    get_element: function tab_ViewingToolbar$get_element() {
        return this.toolbarElement;
    },
    
    get__customViewsViewModel: function tab_ViewingToolbar$get__customViewsViewModel() {
        return this.customViewsViewModel;
    },
    
    createItems: function tab_ViewingToolbar$createItems() {
        this.toolbarElement = $('<div>').addClass('tab-fill').addClass('tab-toolbar');
        this.leftElement = $('<span>').addClass('tab-fill-left');
        this.centerElement = $('<span>').addClass('tab-inline-block');
        this.rightElement = $('<span>').addClass('tab-fill-right');
        this.toolbarElement.append(this.leftElement);
        this.toolbarElement.append(this.centerElement);
        this.toolbarElement.append(this.rightElement);
        if (tsConfig.showShareOptions) {
            this.shareButtons = this.makeShareButtons();
        }
        if (tsConfig.allow_custom_views) {
            this.customViewsButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.customViewsButtonClicked));
            this.customViewsButton.setLeftIcon('tab-width-10').setText(tab.Strings.CustomViewsOriginalView).setRightIcon('tab-icon-cv-toolbar-button');
        }
        if (tab.ViewingToolbar.isEditAllowed()) {
            this.editButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.editButtonClicked));
            this.editButton.get_element().addClass('tab-toolbar-button-edit');
            this.editButton.setText(tab.Strings.ToolbarEdit);
            tab.ApplicationModel.get_instance().get_workbook().withDashboard(ss.Delegate.create(this, function() {
                if (tsConfig.is_mobile_app || tab.ViewingToolbar.isEditDisabled()) {
                    this.editButton.get_element().css('display', 'none');
                    this.editButton.setEnabled(false);
                }
                else {
                    this.editButton.setEnabled(true);
                }
            }));
        }
        if (tsConfig.is_metrics_enabled) {
            this.viewMetricsDataButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.viewMetricsDataButtonClicked));
            this.viewMetricsDataButton.setText(tab.Strings.ToolbarShowPerformanceRecording);
        }
        if (tsConfig.toolbarvis) {
            this.exportButton = new tab.ToolbarIconButton(ss.Delegate.create(this, this.exportButtonClicked));
            this.exportButton.setIcon('tab-icon-export').setTooltip(tab.Strings.ToolbarExport);
            this.revertButton = new tab.ToolbarIconButton(ss.Delegate.create(this, this.revertButtonClicked));
            this.revertButton.setIcon('tab-icon-revert').setTooltip(tab.Strings.ToolbarRevertAll);
            this.autoUpdateButton = new tab.ToolbarIconButton(ss.Delegate.create(this, this.autoUpdateButtonClicked));
            this.autoUpdateButton.setIcon('tab-icon-autoupdate-on').setTooltip(tab.Strings.ToolbarPauseAutomaticUpdates);
            var workbook = tab.ApplicationModel.get_instance().get_workbook();
            workbook.withDashboard(ss.Delegate.create(this, function() {
                if (workbook.get_isCurrentSheetStoryboard()) {
                    this.autoUpdateButton.setEnabled(false);
                }
            }));
            this.refreshButton = new tab.ToolbarIconButton(ss.Delegate.create(this, this.refreshButtonClicked));
            this.refreshButton.setIcon('tab-icon-refresh').setTooltip(tab.Strings.ToolbarRefreshData);
        }
        if (this.isDownloadAllowed()) {
            this.downloadButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.downloadButtonClicked));
            this.downloadButton.setLeftIcon('tab-icon-download').setText(tab.Strings.ToolbarDownload);
            if (tsConfig.is_mobile_app) {
                this.downloadButton.get_element().css('display', 'none');
            }
        }
        if (tsConfig.showShareOptions) {
            var $enum1 = ss.IEnumerator.getEnumerator(this.shareButtons);
            while ($enum1.moveNext()) {
                var button = $enum1.current;
                this.leftElement.append(button.get_element());
            }
        }
        if (tsConfig.allow_custom_views) {
            this.leftElement.append(this.customViewsButton.get_element());
        }
        if (ss.isValue(this.editButton)) {
            this.leftElement.append(this.editButton.get_element());
        }
        if (tsConfig.is_metrics_enabled) {
            this.leftElement.append(this.viewMetricsDataButton.get_element());
        }
        if (tsConfig.toolbarvis) {
            if (!tsConfig.previewMode || tsConfig.isPublic) {
                this.centerElement.append(this.exportButton.get_element());
            }
            this.centerElement.append(this.revertButton.get_element());
            this.centerElement.append(this.autoUpdateButton.get_element());
            this.centerElement.append(this.refreshButton.get_element());
        }
        this.renderIndicatorButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.renderIndicatorButtonClicked));
        this.renderIndicatorButton.setLeftIcon('');
        this._setRenderState(false);
        this.renderIndicatorButton.setEnabled(true);
        this.renderIndicatorButton.setTooltip('Debug mode: The text of this button indicates if we are rendering locally on the web browser (B), or if rendering is occuring server side (S)');
        this.rightElement.append(this.renderIndicatorButton.get_element());
        if (tsConfig.gbrand) {
            var watermarkImage = $('<img>');
            watermarkImage.attr('src', tsConfig.watermarklogo);
            watermarkImage.css('border', '0');
            this.guestBrandWatermark = $('<a>');
            this.guestBrandWatermark.attr('href', tsConfig.serverGuestURI);
            this.guestBrandWatermark.attr('target', '_blank');
            this.guestBrandWatermark.append(watermarkImage);
            this.rightElement.append(this.guestBrandWatermark);
        }
        else {
            if (tsConfig.allow_subscriptions && !tsConfig.is_guest) {
                this.subscribeButton = new tab.ToolbarIconButton(ss.Delegate.create(this, this.subscribeButtonClicked));
                this.subscribeButton.setIcon('tab-toolbar-button-subscribe').setTooltip(tab.Strings.SubscribeButtonTooltip);
                this.subscribeViewModel = new tab.SubscribeViewModel(this.isTop);
                this.subscribeView = new tab.SubscribeView(this.subscribeViewModel, this.subscribeButton.get_element());
                this.rightElement.append(this.subscribeButton.get_element());
                if (!tsConfig.workbook_allow_subscriptions) {
                    this.subscribeButton.get_element().hide();
                }
            }
            if (this.isDownloadAllowed()) {
                this.rightElement.append(this.downloadButton.get_element());
            }
        }
        if (tsConfig.allow_custom_views) {
            this.customViewsViewModel = new tab.CustomViewsViewModel(new tab.CustomizedViewSession(this.app.get_session()), this.isTop);
            this.customViewsPanel = this.makeCustomViewsPanel(this.customViewsViewModel, this.customViewsButton.get_element());
            this.updateCustomViewsButton();
        }
        if (tsConfig.is_metrics_enabled) {
            this.viewMetricsDataButton.setEnabled(true);
        }
        if (tsConfig.toolbarvis) {
            this.revertButton.setEnabled(false);
        }
        var newToolbar = tab.FeatureParamsLookup.getBool(tab.FeatureParam.newToolbar);
        if (ss.isValue(newToolbar) && newToolbar) {
            this.clearSelectionButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.clearSelectionClicked));
            this.clearSelectionButton.setEnabled(true);
            this.clearSelectionButton.setText('Clear');
            this.leftElement.append(this.clearSelectionButton.get_element());
            this.undoButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.undoClicked));
            this.undoButton.setEnabled(true);
            this.undoButton.setText('Undo');
            this.rightElement.append(this.undoButton.get_element());
            this.redoButton = new tab.ToolbarTextButton(ss.Delegate.create(this, this.redoClicked));
            this.redoButton.setEnabled(true);
            this.redoButton.setText('Redo');
            this.rightElement.append(this.redoButton.get_element());
        }
        this.exportMenuViewModel = new spiff.MenuViewModel();
        this.exportMenuViewModel.add_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            this.exportMenuViewModel.remove_menuItemClicked(spiff.MenuViewModel.handleMenuActionItemClicked);
        })));
        this.exportImageEnabled = false;
        this.exportDataEnabled = false;
        this.exportCrosstabEnabled = false;
        this.exportPdfEnabled = false;
        this.createExportMenu();
        this.exportMenuView = this.makeMenuView(this.exportMenuViewModel);
    },
    
    bindEvents: function tab_ViewingToolbar$bindEvents() {
        if (tsConfig.showShareOptions) {
            var $enum1 = ss.IEnumerator.getEnumerator(this.shareButtons);
            while ($enum1.moveNext()) {
                var button = $enum1.current;
                button.bindEvents();
            }
        }
        if (tsConfig.allow_custom_views) {
            this.customViewsButton.bindEvents();
        }
        if (tab.ViewingToolbar.isEditAllowed()) {
            this.editButton.bindEvents();
        }
        if (tsConfig.is_metrics_enabled) {
            this.viewMetricsDataButton.bindEvents();
        }
        if (tsConfig.toolbarvis) {
            this.exportButton.bindEvents();
            this.revertButton.bindEvents();
            this.autoUpdateButton.bindEvents();
            this.refreshButton.bindEvents();
        }
        if (this.isDownloadAllowed()) {
            this.downloadButton.bindEvents();
        }
        if (ss.isValue(this.subscribeButton)) {
            this.subscribeButton.bindEvents();
        }
        if (tsConfig.allow_custom_views) {
            this.customViewsViewModel.add_dirtyChanged(ss.Delegate.create(this, this.handleCustomViewsChange));
            this.customViewsViewModel.add_customViewListChanged(ss.Delegate.create(this, this.handleCustomViewsChange));
            this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
                this.customViewsViewModel.remove_dirtyChanged(ss.Delegate.create(this, this.handleCustomViewsChange));
                this.customViewsViewModel.remove_customViewListChanged(ss.Delegate.create(this, this.handleCustomViewsChange));
            })));
        }
        if (tsConfig.allow_authoring) {
            this.subscriptions.add(dojo.subscribe('activeViewChanged', ss.Delegate.create(this, this.onActiveViewChanged)));
        }
        var newToolbar = tab.FeatureParamsLookup.getBool(tab.FeatureParam.newToolbar);
        if (ss.isValue(newToolbar) && newToolbar) {
            this.clearSelectionButton.bindEvents();
            this.redoButton.bindEvents();
            this.undoButton.bindEvents();
        }
        this.subscriptions.add(dojo.subscribe('modifiedSheetsChanged', ss.Delegate.create(this, this.onModifiedSheetsChanged)));
    },
    
    updateActiveView: function tab_ViewingToolbar$updateActiveView(view) {
        if (ss.isValue(view)) {
            if (ss.isValue(this._viewChangedListenerHandle)) {
                dojo.unsubscribe(this._viewChangedListenerHandle);
            }
            this._viewChangedListenerHandle = view.registerEventListener('selectionChanged', ss.Delegate.create(this, this.updateViewMenuState));
        }
        else if (tsConfig.toolbarvis) {
            this.updateMenus(this.app.getLegacyMenus());
        }
    },
    
    updateMenus: function tab_ViewingToolbar$updateMenus(menus) {
        if (ss.isValue(menus)) {
            var $enum1 = ss.IEnumerator.getEnumerator(menus);
            while ($enum1.moveNext()) {
                var menu = $enum1.current;
                var name = menu.legacyMenuName;
                var states = menu.legacyMenuStates;
                if (ss.isValue(name) && ss.isValue(states)) {
                    var $enum2 = ss.IEnumerator.getEnumerator(states);
                    while ($enum2.moveNext()) {
                        var state = $enum2.current;
                        switch (name) {
                            case 'export':
                                this.exportButton.setEnabled(state !== 'grayed');
                                break;
                            case 'exportimage':
                                this.exportImageEnabled = state !== 'grayed';
                                break;
                            case 'exportdata':
                                this.exportDataEnabled = state !== 'grayed';
                                break;
                            case 'exportcrosstab':
                                this.exportCrosstabEnabled = state !== 'grayed';
                                break;
                            case 'print':
                                this.exportPdfEnabled = state !== 'grayed';
                                break;
                            case 'refreshdata':
                                this.refreshButton.setEnabled(state !== 'grayed');
                                break;
                        }
                    }
                }
            }
            this.createExportMenu();
        }
    },
    
    setStyle: function tab_ViewingToolbar$setStyle(name, value) {
        this.toolbarElement.css(name, value);
    },
    
    setStyles: function tab_ViewingToolbar$setStyles(styles) {
        this.toolbarElement.css(styles);
    },
    
    setAutoUpdate: function tab_ViewingToolbar$setAutoUpdate(autoUpdate) {
        this.setAutoUpdateStatusText(autoUpdate);
    },
    
    hideRefreshButtons: function tab_ViewingToolbar$hideRefreshButtons() {
        this.autoUpdateButton.get_element().css('display', 'none');
        this.refreshButton.get_element().css('display', 'none');
    },
    
    showSubscribeButton: function tab_ViewingToolbar$showSubscribeButton() {
        if (ss.isNullOrUndefined(this.subscribeButton)) {
            return;
        }
        this.subscribeButton.get_element().css('display', '');
    },
    
    layout: function tab_ViewingToolbar$layout() {
        var elementWidth = this.get_element().width();
        if (tsConfig.allow_custom_views) {
            this.customViewsButton.removeTextWidth();
            var extraWidth = elementWidth - (this.leftElement.width() + 10 + this.centerElement.width() + 10 + this.rightElement.width());
            if (elementWidth > 0 && extraWidth < 0) {
                this.customViewsButton.set_textWidth(Math.max(this.customViewsButton.get_textWidth() + extraWidth, 30));
            }
        }
        var centerLeft = (elementWidth - this.centerElement.width()) / 2;
        if (elementWidth > 0 && centerLeft < this.leftElement.width()) {
            centerLeft = this.leftElement.width() + 10;
            this.centerElement.css({ position: 'absolute', left: centerLeft + 'px' });
        }
        else {
            this.centerElement.css('position', 'static');
        }
    },
    
    dispose: function tab_ViewingToolbar$dispose() {
        this.disposables.dispose();
        var $enum1 = ss.IEnumerator.getEnumerator(this.subscriptions);
        while ($enum1.moveNext()) {
            var subscription = $enum1.current;
            dojo.unsubscribe(subscription);
        }
        if (ss.isValue(this.customViewsButton)) {
            this.customViewsButton.dispose();
            this.customViewsButton = null;
        }
        if (ss.isValue(this.editButton)) {
            this.editButton.dispose();
            this.editButton = null;
        }
        if (ss.isValue(this.viewMetricsDataButton)) {
            this.viewMetricsDataButton.dispose();
            this.viewMetricsDataButton = null;
        }
        if (ss.isValue(this.exportButton)) {
            this.exportButton.dispose();
            this.exportButton = null;
        }
        if (ss.isValue(this.revertButton)) {
            this.revertButton.dispose();
            this.revertButton = null;
        }
        if (ss.isValue(this.autoUpdateButton)) {
            this.autoUpdateButton.dispose();
            this.autoUpdateButton = null;
        }
        if (ss.isValue(this.refreshButton)) {
            this.refreshButton.dispose();
            this.refreshButton = null;
        }
        if (ss.isValue(this.subscribeButton)) {
            this.subscribeButton.dispose();
            this.subscribeButton = null;
        }
        if (ss.isValue(this.downloadButton)) {
            this.downloadButton.dispose();
            this.downloadButton = null;
        }
        if (ss.isValue(this.subscribeViewModel)) {
            this.subscribeViewModel.dispose();
            this.subscribeViewModel = null;
        }
        if (ss.isValue(this.subscribeView)) {
            this.subscribeView.dispose();
            this.subscribeView = null;
        }
        if (ss.isValue(this._viewChangedListenerHandle)) {
            dojo.unsubscribe(this._viewChangedListenerHandle);
        }
        if (ss.isValue(this.renderIndicatorButton)) {
            this.renderIndicatorButton.dispose();
            this.renderIndicatorButton = null;
        }
        var newToolbar = tab.FeatureParamsLookup.getBool(tab.FeatureParam.newToolbar);
        if (ss.isValue(newToolbar) && newToolbar) {
            if (ss.isValue(this.clearSelectionButton)) {
                this.clearSelectionButton.dispose();
                this.clearSelectionButton = null;
            }
            if (ss.isValue(this.redoButton)) {
                this.redoButton.dispose();
                this.redoButton = null;
            }
            if (ss.isValue(this.undoButton)) {
                this.undoButton.dispose();
                this.undoButton = null;
            }
        }
        if (ss.isValue(this.get_element())) {
            this.get_element().remove();
        }
        if (ss.isValue(this.customViewsPanel)) {
            this.customViewsPanel.dispose();
            this.customViewsViewModel.dispose();
            this.customViewsPanel = null;
            this.customViewsViewModel = null;
        }
        if (ss.isValue(this.exportMenuView)) {
            this.exportMenuView.dispose();
            this.exportMenuViewModel.dispose();
            this.exportMenuView = null;
            this.exportMenuViewModel = null;
        }
        this.app = null;
        if (ss.isValue(this.toolbarElement)) {
            this.toolbarElement.remove();
        }
        this.toolbarElement = null;
        this.leftElement = null;
        this.centerElement = null;
        this.rightElement = null;
        this.customViewsButton = null;
        this.viewMetricsDataButton = null;
        this.shareButtons = null;
        if (ss.isValue(this.renderIndicatorButton)) {
            this.renderIndicatorButton.dispose();
            this.renderIndicatorButton = null;
        }
        this.guestBrandWatermark = null;
        this.activeSheet = null;
    },
    
    _setRenderState: function tab_ViewingToolbar$_setRenderState(isBrowserRendering) {
        var renderIndicatorText = (isBrowserRendering || false) ? 'B' : 'S';
        this.renderIndicatorButton.setText(renderIndicatorText);
    },
    
    renderIndicatorButtonClicked: function tab_ViewingToolbar$renderIndicatorButtonClicked() {
        alert('Debug mode: The text of this button indicates if we are rendering locally on the web browser (B), or if rendering is occuring server side (S)');
    },
    
    updateViewMenuState: function tab_ViewingToolbar$updateViewMenuState(selectionInfoObject) {
        if (ss.isValue(selectionInfoObject)) {
            var selectionInfo = selectionInfoObject;
            var menus = selectionInfo['menus'];
            if (ss.isValue(menus) && menus.length > 0) {
                if (('legacyMenuName' in menus[0]) && tsConfig.toolbarvis) {
                    this.updateMenus(menus);
                }
                else {
                    tab.Log.get(this).warn('old menus detected!');
                }
            }
        }
    },
    
    toggleMenu: function tab_ViewingToolbar$toggleMenu(menuButtomElement, menu) {
        if (menu.get_visible()) {
            menu.hide();
        }
        else {
            menu.show(spiff.ShowMenuOptions.create(menuButtomElement, !this.isTop));
        }
    },
    
    shareButtonClicked: function tab_ViewingToolbar$shareButtonClicked() {
        this.app.showShareDialog();
        this.app.saveSharedView('link');
    },
    
    facebookButtonClicked: function tab_ViewingToolbar$facebookButtonClicked() {
        this.app.saveSharedView('facebook');
    },
    
    twitterButtonClicked: function tab_ViewingToolbar$twitterButtonClicked() {
        this.app.saveSharedView('twitter');
    },
    
    mailButtonClicked: function tab_ViewingToolbar$mailButtonClicked() {
        this.app.saveSharedView('mail');
    },
    
    linkButtonClicked: function tab_ViewingToolbar$linkButtonClicked() {
        this.app.showShareDialog();
        this.app.saveSharedView('link');
    },
    
    clearSelectionClicked: function tab_ViewingToolbar$clearSelectionClicked() {
        tab.SelectionClientCommands.clearAllSelectionsIncludingMaster();
    },
    
    undoClicked: function tab_ViewingToolbar$undoClicked() {
        tab.WorksheetServerCommands.undo();
    },
    
    redoClicked: function tab_ViewingToolbar$redoClicked() {
        tab.WorksheetServerCommands.redo();
    },
    
    customViewsButtonClicked: function tab_ViewingToolbar$customViewsButtonClicked() {
        this.customViewsViewModel.show();
    },
    
    handleCustomViewsChange: function tab_ViewingToolbar$handleCustomViewsChange(sender, e) {
        this.updateCustomViewsButton();
    },
    
    updateCustomViewsButton: function tab_ViewingToolbar$updateCustomViewsButton() {
        if (this.customViewsViewModel.get_myCustomViews().length > 0 || this.customViewsViewModel.get_otherCustomViews().length > 0) {
            var current = this.customViewsViewModel.get_currentCustomView();
            if (ss.isValue(current)) {
                this.showCustomViewsButton(current.name);
            }
            else {
                if (ss.isValue(tsConfig.current_custom_view_id)) {
                    this.showCustomViewsButton(tab.Strings.CustomViewsUnlistedCustomView);
                }
                else {
                    this.showCustomViewsButton(tab.Strings.CustomViewsOriginalView);
                }
            }
        }
        else {
            if (tsConfig.allow_custom_view_save) {
                this.showCustomViewsButton(tab.Strings.CustomViewsRememberMyChanges);
            }
            else {
                this.customViewsButton.get_element().css('display', 'none');
            }
        }
    },
    
    showCustomViewsButton: function tab_ViewingToolbar$showCustomViewsButton(text) {
        this.customViewsButton.setText(text);
        this.customViewsButton.get_element().css('display', '');
        if (this.customViewsViewModel.get_dirty()) {
            this.customViewsButton.setLeftIcon('tab-icon-cv-toolbar-button-dirty');
        }
        else {
            this.customViewsButton.setLeftIcon('tab-width-10');
        }
    },
    
    editButtonClicked: function tab_ViewingToolbar$editButtonClicked() {
        this.app.get_toolbarCommands()._edit(this.activeSheet);
    },
    
    viewMetricsDataButtonClicked: function tab_ViewingToolbar$viewMetricsDataButtonClicked() {
        this.app.get_toolbarCommands()._saveAndOpenMetricsView();
    },
    
    onActiveViewChanged: function tab_ViewingToolbar$onActiveViewChanged(dataObject) {
        var data = dataObject;
        this.activeSheet = (ss.isValue(data) && ss.isValue(data.newActive)) ? data.newActive.get_sheetid() : null;
    },
    
    createExportMenu: function tab_ViewingToolbar$createExportMenu() {
        this.exportMenuViewModel.set_menu(new spiff.Menu([spiff.MenuItem.newActionItem(tab.Strings.ToolbarExportImage, (this.exportImageEnabled) ? ss.Delegate.create(this, this.exportImage) : null), spiff.MenuItem.newActionItem(tab.Strings.ToolbarExportData, (this.exportDataEnabled) ? ss.Delegate.create(this, this.exportData) : null), spiff.MenuItem.newActionItem(tab.Strings.ToolbarExportCrosstab, (this.exportCrosstabEnabled) ? ss.Delegate.create(this, this.exportCrosstab) : null), spiff.MenuItem.newActionItem(tab.Strings.ToolbarPrintToPdf, (this.exportPdfEnabled) ? ss.Delegate.create(this, this.exportPdf) : null)]));
    },
    
    exportButtonClicked: function tab_ViewingToolbar$exportButtonClicked() {
        this.toggleMenu(this.exportButton.get_element(), this.exportMenuViewModel);
    },
    
    exportImage: function tab_ViewingToolbar$exportImage() {
        this.app.get_toolbarCommands().exportImage();
    },
    
    exportData: function tab_ViewingToolbar$exportData() {
        this.app.get_toolbarCommands().exportData();
    },
    
    exportCrosstab: function tab_ViewingToolbar$exportCrosstab() {
        this.app.get_toolbarCommands().exportCrosstab();
    },
    
    exportPdf: function tab_ViewingToolbar$exportPdf() {
        this.app.get_toolbarCommands().exportPdf();
    },
    
    revertButtonClicked: function tab_ViewingToolbar$revertButtonClicked() {
        this.app.get_toolbarCommands()._revert();
    },
    
    onModifiedSheetsChanged: function tab_ViewingToolbar$onModifiedSheetsChanged(eventData) {
        var modifiedSheets = eventData;
        if (ss.isValue(this.revertButton)) {
            this.revertButton.setEnabled(modifiedSheets.length > 0);
        }
    },
    
    autoUpdateButtonClicked: function tab_ViewingToolbar$autoUpdateButtonClicked() {
        this.app.get_toolbarCommands()._toggleAutoUpdate();
    },
    
    setAutoUpdateStatusText: function tab_ViewingToolbar$setAutoUpdateStatusText(status) {
        if (tsConfig.allow_filter && !tsConfig.isPublic) {
            if (status) {
                this.autoUpdateButton.setIcon('tab-icon-autoupdate-on').setTooltip(tab.Strings.ToolbarPauseAutomaticUpdates);
            }
            else {
                this.autoUpdateButton.setIcon('tab-icon-autoupdate-off').setTooltip(tab.Strings.ToolbarResumeAutomaticUpdates);
            }
        }
    },
    
    refreshButtonClicked: function tab_ViewingToolbar$refreshButtonClicked() {
        this.app.get_toolbarCommands()._refreshData();
    },
    
    subscribeButtonClicked: function tab_ViewingToolbar$subscribeButtonClicked() {
        this.subscribeViewModel.show();
    },
    
    isDownloadAllowed: function tab_ViewingToolbar$isDownloadAllowed() {
        return (!tsConfig.previewMode && !String.isNullOrEmpty(tsConfig.downloadURI)) || tsConfig.is_metrics_view;
    },
    
    downloadButtonClicked: function tab_ViewingToolbar$downloadButtonClicked() {
        this.app.get_toolbarCommands()._downloadWorkbook();
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.WidgetStyle

tab.WidgetStyle = function tab_WidgetStyle() {
}
tab.WidgetStyle.applyFormatting = function tab_WidgetStyle$applyFormatting(domNode, textStyleModel, backgroundColor, lineHeight) {
    tab.WidgetStyle._applyFormattingImpl(domNode.id, textStyleModel, backgroundColor, lineHeight, tab.WidgetStyle._idSelector);
}
tab.WidgetStyle.applyFormattingByClassName = function tab_WidgetStyle$applyFormattingByClassName(className, style) {
    tab.WidgetStyle._applyFormattingImpl(className, style.get_textStyleModel(), style.get_backgroundColor(), style.get_lineHeight(), tab.WidgetStyle._classSelector);
}
tab.WidgetStyle._applyFormattingImpl = function tab_WidgetStyle$_applyFormattingImpl(identifier, textStyleModel, backgroundColor, lineHeight, selector) {
    var textStyle = tab.FormattingConverters._makeFormatStyleDict(textStyleModel);
    if (ss.isValue(lineHeight)) {
        textStyle['line-height'] = lineHeight + 'px';
    }
    if (!Object.keyExists(textStyle, 'font-style')) {
        textStyle['font-style'] = 'normal';
    }
    if (!Object.keyExists(textStyle, 'font-weight')) {
        textStyle['font-weight'] = 'normal';
    }
    if (!Object.keyExists(textStyle, 'text-decoration')) {
        textStyle['text-decoration'] = 'none';
    }
    tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-text'), textStyle);
    delete textStyle['font-size'];
    delete textStyle['line-height'];
    tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-fixedsize'), textStyle);
    if (ss.isValue(textStyleModel.color)) {
        var textColor = { color: textStyleModel.color };
        tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-coloronly'), textColor);
    }
    var widgetStyle = {};
    if (ss.isValue(textStyleModel.color)) {
        widgetStyle['border-color'] = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(textStyleModel.color), (200 / 255));
        tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-darker-border-hover:hover'), widgetStyle);
        widgetStyle['border-color'] = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(textStyleModel.color), (105 / 255));
        tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-border'), widgetStyle);
        tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-border-hover:hover'), widgetStyle);
    }
    if (ss.isValue(backgroundColor)) {
        var baseBackground = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(backgroundColor), (140 / 255));
        var widgetBackground = tab.ColorModel.alphaCompositeSolidDest(baseBackground, new tab.ColorModel(255, 255, 255, 1));
        widgetStyle['background-color'] = widgetBackground.toRgb();
    }
    tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-widget'), widgetStyle);
    delete widgetStyle['border-color'];
    tab.StyleUtil.appendCSSRule(selector(identifier, 'tab-ctrl-formatted-widget:hover'), widgetStyle);
}
tab.WidgetStyle._idSelector = function tab_WidgetStyle$_idSelector(ID, styleClassName) {
    return '[id="' + ID + '"].' + styleClassName + ',' + '[id="' + ID + '"] .' + styleClassName;
}
tab.WidgetStyle._classSelector = function tab_WidgetStyle$_classSelector(IdentifyingClassName, styleClassName) {
    return '.' + IdentifyingClassName + '.' + styleClassName + ',' + '.' + IdentifyingClassName + ' .' + styleClassName;
}


////////////////////////////////////////////////////////////////////////////////
// tab.FormattingStyleInfo

tab.FormattingStyleInfo = function tab_FormattingStyleInfo(textStyleModel, backgroundColor, lineHeight) {
    this._textStyleModel = textStyleModel;
    this._backgroundColor = backgroundColor;
    this._lineHeight = lineHeight;
}
tab.FormattingStyleInfo.prototype = {
    _textStyleModel: null,
    _backgroundColor: null,
    _lineHeight: null,
    
    get_textStyleModel: function tab_FormattingStyleInfo$get_textStyleModel() {
        return this._textStyleModel;
    },
    
    get_backgroundColor: function tab_FormattingStyleInfo$get_backgroundColor() {
        return this._backgroundColor;
    },
    
    get_lineHeight: function tab_FormattingStyleInfo$get_lineHeight() {
        return this._lineHeight;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.DisabledTooltipBehavior

tab.DisabledTooltipBehavior = function tab_DisabledTooltipBehavior() {
}
tab.DisabledTooltipBehavior.prototype = {
    
    attach: function tab_DisabledTooltipBehavior$attach() {
    },
    
    detach: function tab_DisabledTooltipBehavior$detach() {
    },
    
    dispose: function tab_DisabledTooltipBehavior$dispose() {
    },
    
    shownTooltipIsStatic: function tab_DisabledTooltipBehavior$shownTooltipIsStatic() {
        return true;
    },
    
    isHoverAllowed: function tab_DisabledTooltipBehavior$isHoverAllowed(pageCoords) {
        return true;
    },
    
    shouldShowCommandButtons: function tab_DisabledTooltipBehavior$shouldShowCommandButtons() {
        return true;
    },
    
    handleUbertipMenuToggle: function tab_DisabledTooltipBehavior$handleUbertipMenuToggle(areMenuItemsVisible) {
    },
    
    handleUbertipMenuClose: function tab_DisabledTooltipBehavior$handleUbertipMenuClose() {
    },
    
    hoverOverObject: function tab_DisabledTooltipBehavior$hoverOverObject(pageCoords, isSelected, isEmpty, isSameObject) {
    },
    
    hoverOverWhitespace: function tab_DisabledTooltipBehavior$hoverOverWhitespace(pageCoords) {
    },
    
    multiSelectComplete: function tab_DisabledTooltipBehavior$multiSelectComplete(pageAnchorPoint) {
    },
    
    singleSelectComplete: function tab_DisabledTooltipBehavior$singleSelectComplete(pageCoords) {
    },
    
    onPanningOrDragging: function tab_DisabledTooltipBehavior$onPanningOrDragging() {
    },
    
    onScroll: function tab_DisabledTooltipBehavior$onScroll() {
    },
    
    mouseDown: function tab_DisabledTooltipBehavior$mouseDown(pageCoords, objectUnderMouse) {
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipBaseMode

tab.TooltipBaseMode = function tab_TooltipBaseMode(defaultBehavior, contextProvider, visualId) {
    this.disposables = new tab.DisposableHolder();
    this._contextProvider = contextProvider;
    this.visualId = visualId;
    this._tooltip = new tab.Tooltip();
    this._tooltip.add_closed(ss.Delegate.create(this, this._onClose));
    this.get_tooltip().add_prePosition(ss.Delegate.create(this, this._allowHoverIfShown));
    this.get_tooltip().add_showed(ss.Delegate.create(this, this._allowHoverIfShown));
    this._tooltip.get_body().bind('mouseleave.basemode', ss.Delegate.create(this, this._onMouseLeave));
    this._ubertip = new tab.Ubertip(this._tooltip, this.get_ubertipShouldEnforceButtonOrdering());
    this._ubertip.add_actionExecuted(ss.Delegate.create(this, this._onUbertipActionExecuted));
    this._ubertip.add_commandExecuted(ss.Delegate.create(this, this._onUbertipCommandExecuted));
    this._ubertip.add_ubertipMenuToggled(ss.Delegate.create(this, this._onUbertipMenuToggle));
    this._ubertip.add_ubertipMenuClosed(ss.Delegate.create(this, this._onUbertipMenuClose));
    this._defaultBehavior = defaultBehavior;
    this._currentBehavior = defaultBehavior;
    this.tooltipBehaviors = {};
    this.buildBehaviorsDictionary();
    var hoverActions = tab.ActionUtils.getApplicableActions(this.visualId.worksheet, 'on-hover');
    var menuActions = tab.ActionUtils.getApplicableActions(this.visualId.worksheet, 'explicitly');
    this._hoverAndMenuActionCount = hoverActions.length + menuActions.length;
    if (tsConfig.is_mobile) {
        tab.VizEvent.add_mobileVizReduceTransform(ss.Delegate.create(this, this._onMobileVizReduceTransform));
        this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
            tab.VizEvent.remove_mobileVizReduceTransform(ss.Delegate.create(this, this._onMobileVizReduceTransform));
        })));
    }
}
tab.TooltipBaseMode.prototype = {
    _tooltip: null,
    _ubertip: null,
    _defaultBehavior: null,
    tooltipBehaviors: null,
    _contextProvider: null,
    _currentBehavior: null,
    visualId: null,
    readyForHover: true,
    _hoverAndMenuActionCount: 0,
    
    add_tooltipClosed: function tab_TooltipBaseMode$add_tooltipClosed(value) {
        this.__tooltipClosed = ss.Delegate.combine(this.__tooltipClosed, value);
    },
    remove_tooltipClosed: function tab_TooltipBaseMode$remove_tooltipClosed(value) {
        this.__tooltipClosed = ss.Delegate.remove(this.__tooltipClosed, value);
    },
    
    __tooltipClosed: null,
    
    add_mouseExitedTooltip: function tab_TooltipBaseMode$add_mouseExitedTooltip(value) {
        this.__mouseExitedTooltip = ss.Delegate.combine(this.__mouseExitedTooltip, value);
    },
    remove_mouseExitedTooltip: function tab_TooltipBaseMode$remove_mouseExitedTooltip(value) {
        this.__mouseExitedTooltip = ss.Delegate.remove(this.__mouseExitedTooltip, value);
    },
    
    __mouseExitedTooltip: null,
    
    add_ubertipUpdated: function tab_TooltipBaseMode$add_ubertipUpdated(value) {
        this.__ubertipUpdated = ss.Delegate.combine(this.__ubertipUpdated, value);
    },
    remove_ubertipUpdated: function tab_TooltipBaseMode$remove_ubertipUpdated(value) {
        this.__ubertipUpdated = ss.Delegate.remove(this.__ubertipUpdated, value);
    },
    
    __ubertipUpdated: null,
    
    add_ubertipActionExecuted: function tab_TooltipBaseMode$add_ubertipActionExecuted(value) {
        this.__ubertipActionExecuted = ss.Delegate.combine(this.__ubertipActionExecuted, value);
    },
    remove_ubertipActionExecuted: function tab_TooltipBaseMode$remove_ubertipActionExecuted(value) {
        this.__ubertipActionExecuted = ss.Delegate.remove(this.__ubertipActionExecuted, value);
    },
    
    __ubertipActionExecuted: null,
    
    add_ubertipCommandExecuted: function tab_TooltipBaseMode$add_ubertipCommandExecuted(value) {
        this.__ubertipCommandExecuted = ss.Delegate.combine(this.__ubertipCommandExecuted, value);
    },
    remove_ubertipCommandExecuted: function tab_TooltipBaseMode$remove_ubertipCommandExecuted(value) {
        this.__ubertipCommandExecuted = ss.Delegate.remove(this.__ubertipCommandExecuted, value);
    },
    
    __ubertipCommandExecuted: null,
    
    get_isTooltipShown: function tab_TooltipBaseMode$get_isTooltipShown() {
        return this._tooltip.get_isShown();
    },
    
    get_tooltip: function tab_TooltipBaseMode$get_tooltip() {
        return this._tooltip;
    },
    
    get_ubertip: function tab_TooltipBaseMode$get_ubertip() {
        return this._ubertip;
    },
    
    get_currentBehavior: function tab_TooltipBaseMode$get_currentBehavior() {
        return this._getTooltipBehavior(this.get_currentBehaviorType());
    },
    
    get_currentBehaviorType: function tab_TooltipBaseMode$get_currentBehaviorType() {
        return this._currentBehavior;
    },
    
    get_defaultBehaviorType: function tab_TooltipBaseMode$get_defaultBehaviorType() {
        return this._defaultBehavior;
    },
    
    get_ubertipShouldEnforceButtonOrdering: function tab_TooltipBaseMode$get_ubertipShouldEnforceButtonOrdering() {
        return false;
    },
    
    get_multiSelectCompleteBehavior: function tab_TooltipBaseMode$get_multiSelectCompleteBehavior() {
        return 'sticky';
    },
    
    get_hasContextProvider: function tab_TooltipBaseMode$get_hasContextProvider() {
        return ss.isValue(this._contextProvider);
    },
    
    get__tooltipFailureCallback: function tab_TooltipBaseMode$get__tooltipFailureCallback() {
        return ss.Delegate.create(this, function() {
            this._handleUbertipRemoteFailure();
        });
    },
    
    get_testUseOnlyLastHoveredObjectID: function tab_TooltipBaseMode$get_testUseOnlyLastHoveredObjectID() {
        return tab.TooltipBaseMode.lastHoveredObjectId;
    },
    set_testUseOnlyLastHoveredObjectID: function tab_TooltipBaseMode$set_testUseOnlyLastHoveredObjectID(value) {
        tab.TooltipBaseMode.lastHoveredObjectId = value;
        return value;
    },
    
    hoverOverObject: function tab_TooltipBaseMode$hoverOverObject(pageCoords, regionCoords, hoveredObjectId, isObjectSelected, paneDescriptorKey, targetType, regionPart) {
        if (!this.readyForHover) {
            return;
        }
        if (ss.isNullOrUndefined(hoveredObjectId)) {
            tab.Log.get(this).debug('HoverOverObject requires hoveredObject to be specified. Returning early.');
            return;
        }
        var requiredBehavior = this.getHoverBehavior(targetType);
        this.switchTooltipMode(requiredBehavior);
        var isSameObject = (hoveredObjectId === tab.TooltipBaseMode.lastHoveredObjectId);
        var behaviorCallback = ss.Delegate.create(this, function() {
            var isVizTooltipEmpty = regionPart === 'viz' && this.isVizTooltipCurrentlyEmpty();
            this.get_currentBehavior().hoverOverObject(pageCoords, isObjectSelected, isVizTooltipEmpty, isSameObject);
        });
        if (targetType === 'mark' && tab.ApplicationModel.get_instance().get_isLocalRenderMode() && ss.isValue(paneDescriptorKey) && !this.shouldForceRemoteTooltipForObject(targetType, hoveredObjectId)) {
            if (isSameObject) {
                behaviorCallback();
            }
            else {
                var affectedObjects = this.getAffectedObjects('mark', hoveredObjectId);
                this.runBehaviorWithLocalUbertip(behaviorCallback, hoveredObjectId, affectedObjects, regionCoords, paneDescriptorKey, regionPart, targetType, 'on-hover');
            }
        }
        else {
            this.runBehaviorWithRemoteUbertip(behaviorCallback, tab.$create_RectXY(regionCoords.x, regionCoords.y, 0, 0), regionPart);
        }
    },
    
    hoverOverWhitespace: function tab_TooltipBaseMode$hoverOverWhitespace(pageCoords, regionPart) {
        if (!this.readyForHover) {
            return;
        }
        var whitespaceBefore = (tab.TooltipBaseMode.whitespaceObjectId === tab.TooltipBaseMode.lastHoveredObjectId);
        this.get_currentBehavior().hoverOverWhitespace(pageCoords);
        tab.TooltipBaseMode.lastHoveredObjectId = tab.TooltipBaseMode.whitespaceObjectId;
        if (this.get_currentBehavior().isHoverAllowed(pageCoords)) {
            if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode() || (!whitespaceBefore && this.needRemoteCommand(regionPart, 'whitespace', 'on-hover', tab.VizDataUtils.invalidTupleId))) {
                this.runBehaviorWithRemoteUbertip(null, tab.$create_RectXY(-1, -1, 0, 0), regionPart);
            }
        }
        else if (this._tooltip.get_isShown()) {
            this._tooltip.close();
        }
    },
    
    hoverOverCoordinates: function tab_TooltipBaseMode$hoverOverCoordinates(pageCoords, regionCoords, targetType, regionPart) {
        if (!this.readyForHover) {
            return;
        }
        tab.TooltipBaseMode.lastHoveredObjectId = tab.TooltipBaseMode.unknownObjectId;
        var requiredBehavior = this.getHoverBehavior(targetType);
        this.switchTooltipMode(requiredBehavior);
        var behaviorCallback = ss.Delegate.create(this, function() {
            var isVizTooltipEmpty = regionPart === 'viz' && this.isVizTooltipCurrentlyEmpty();
            this.get_currentBehavior().hoverOverObject(pageCoords, false, isVizTooltipEmpty, false);
        });
        this.runBehaviorWithRemoteUbertip(behaviorCallback, tab.$create_RectXY(regionCoords.x, regionCoords.y, 0, 0), regionPart);
    },
    
    singleSelectComplete: function tab_TooltipBaseMode$singleSelectComplete(pageCoords, regionCoords, selectedObjectId, paneDescriptorKey, targetType, regionPart) {
        var requiredBehavior = this.getSingleSelectBehavior(targetType);
        this.switchTooltipMode(requiredBehavior);
        this.suppressHoverIfNecesary();
        var behaviorCallback = this.getSingleSelectBehaviorCallback(pageCoords);
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode() && targetType === 'mark') {
            var affectedTupleIds = this.getAffectedObjects(targetType, selectedObjectId);
            this.runBehaviorWithLocalUbertip(behaviorCallback, selectedObjectId, affectedTupleIds, regionCoords, paneDescriptorKey, regionPart, targetType, 'on-select');
        }
        else {
            var regionSelectionRect = tab.$create_RectXY(regionCoords.x, regionCoords.y, 0, 0);
            this.runBehaviorWithRemoteUbertip(behaviorCallback, regionSelectionRect, regionPart);
        }
    },
    
    singleSelectCoordinates: function tab_TooltipBaseMode$singleSelectCoordinates(pageCoords, regionCoords, regionPart, targetType) {
        var requiredBehavior = this.getSingleSelectBehavior(targetType);
        this.switchTooltipMode(requiredBehavior);
        var behaviorCallback = ss.Delegate.create(this, function() {
            this.get_currentBehavior().singleSelectComplete(pageCoords);
            if (this.get_tooltip().get_isShown()) {
                this.triggerUbertipButtonUpdate();
            }
        });
        this.runBehaviorWithRemoteUbertip(behaviorCallback, tab.$create_RectXY(regionCoords.x, regionCoords.y, 0, 0), regionPart);
    },
    
    multiSelectComplete: function tab_TooltipBaseMode$multiSelectComplete(pageAnchorPoint, regionSelectionRect, regionPart) {
        this.switchTooltipMode(this.get_multiSelectCompleteBehavior());
        this.suppressHoverIfNecesary();
        var behaviorCallback = ss.Delegate.create(this, function() {
            this.get_currentBehavior().multiSelectComplete(pageAnchorPoint);
            tab.TooltipBaseMode.lastHoveredObjectId = tab.TooltipBaseMode.unknownObjectId;
            if (this.get_tooltip().get_isShown()) {
                this.triggerUbertipButtonUpdate();
            }
        });
        this.runBehaviorWithRemoteUbertip(behaviorCallback, regionSelectionRect, regionPart);
    },
    
    onTap: function tab_TooltipBaseMode$onTap() {
    },
    
    onScroll: function tab_TooltipBaseMode$onScroll() {
        this.get_currentBehavior().onScroll();
    },
    
    onMoving: function tab_TooltipBaseMode$onMoving() {
    },
    
    onDragEnd: function tab_TooltipBaseMode$onDragEnd(regionDimension) {
    },
    
    onPanOrDragStart: function tab_TooltipBaseMode$onPanOrDragStart(regionDimension) {
        this.get_currentBehavior().onPanningOrDragging();
    },
    
    onPinchEnd: function tab_TooltipBaseMode$onPinchEnd(regionDimension) {
    },
    
    onPress: function tab_TooltipBaseMode$onPress() {
    },
    
    dispose: function tab_TooltipBaseMode$dispose() {
        if (Object.keyExists(this.tooltipBehaviors, this.get_currentBehaviorType())) {
            this.tooltipBehaviors[this.get_currentBehaviorType()].detach();
        }
        this.disposables.dispose();
        this.get_tooltip().get_body().unbind('mouseleave.basemode');
        this.get_tooltip().dispose();
        this.get_tooltip().remove_closed(ss.Delegate.create(this, this._onClose));
        this.get_tooltip().remove_prePosition(ss.Delegate.create(this, this._allowHoverIfShown));
        this.get_tooltip().remove_showed(ss.Delegate.create(this, this._allowHoverIfShown));
        this.get_ubertip().remove_commandExecuted(ss.Delegate.create(this, this._onUbertipCommandExecuted));
        this.get_ubertip().remove_actionExecuted(ss.Delegate.create(this, this._onUbertipActionExecuted));
        this._ubertip.remove_ubertipMenuToggled(ss.Delegate.create(this, this._onUbertipMenuToggle));
        this._ubertip.remove_ubertipMenuClosed(ss.Delegate.create(this, this._onUbertipMenuClose));
        this.get_ubertip().dispose();
    },
    
    shownTooltipIsStatic: function tab_TooltipBaseMode$shownTooltipIsStatic() {
        return this.get_currentBehavior().shownTooltipIsStatic();
    },
    
    isHoverAllowed: function tab_TooltipBaseMode$isHoverAllowed(pageCoords) {
        return this.get_currentBehavior().isHoverAllowed(pageCoords);
    },
    
    clearTooltipWithFakeHover: function tab_TooltipBaseMode$clearTooltipWithFakeHover() {
        this.hoverOverWhitespace(tab.$create_Point(-1, -1), 'viz');
    },
    
    getSingleSelectBehavior: function tab_TooltipBaseMode$getSingleSelectBehavior(targetType) {
        return this._defaultBehavior;
    },
    
    getHoverBehavior: function tab_TooltipBaseMode$getHoverBehavior(targetType) {
        return this._defaultBehavior;
    },
    
    shouldForceRemoteTooltipForObject: function tab_TooltipBaseMode$shouldForceRemoteTooltipForObject(targetType, interactedObject) {
        return false;
    },
    
    suppressHoverIfNecesary: function tab_TooltipBaseMode$suppressHoverIfNecesary() {
        this.readyForHover = false;
    },
    
    onBehaviorSwitch: function tab_TooltipBaseMode$onBehaviorSwitch() {
    },
    
    modelUpdateCallback: function tab_TooltipBaseMode$modelUpdateCallback(ubertipModel) {
        tab.TooltipBaseMode._latestTupleID = ubertipModel.tupleId;
        this._tooltip.setTooltipBodyAndReposition(this.get_ubertip().get_element(), ss.Delegate.create(this, function() {
            var isMultiSelect = ss.isValue(ubertipModel) && ss.isValue(ubertipModel.selectionHtml);
            if (!isMultiSelect && ubertipModel.tupleId !== tab.TooltipBaseMode._latestTupleID) {
                tab.Log.get(this).debug('Ubertip model is out of date');
                return;
            }
            var previousUbertipModel = this._ubertip.get_model();
            this.updateTooltipFromModel(ubertipModel);
            this.updateUbertipFromModel(ubertipModel);
            if (ss.isValue(this.__ubertipUpdated)) {
                this.__ubertipUpdated(ubertipModel);
            }
            if (ss.isValue(previousUbertipModel) && previousUbertipModel.rid === ubertipModel.rid) {
                this.get_ubertip().updatePartiallyFromRemote(previousUbertipModel);
            }
        }));
    },
    
    updateModelFromServerResponse: function tab_TooltipBaseMode$updateModelFromServerResponse(ubertipModel) {
        this.get_ubertip().updatePartiallyFromRemote(ubertipModel);
    },
    
    updateUbertipFromModel: function tab_TooltipBaseMode$updateUbertipFromModel(ubertipModel) {
        ubertipModel.tooltipOffset = (ss.isValue(this._ubertip.get_model())) ? this._ubertip.get_model().tooltipOffset : null;
        if (!_.isEqual(ubertipModel, this._ubertip.get_model())) {
            this._ubertip.set_model(ubertipModel);
        }
    },
    
    updateTooltipFromModel: function tab_TooltipBaseMode$updateTooltipFromModel(ubertipModel) {
        this.get_tooltip().tupleId = ubertipModel.tupleId;
        if (ss.isValue(ubertipModel.interactedTupleId)) {
            this.get_tooltip().interactedTupleId = ubertipModel.interactedTupleId;
        }
        else {
        }
        if (ss.isValue(ubertipModel.tooltipOffset)) {
            if (ss.isValue(ubertipModel.tooltipOffset.x)) {
                this.get_tooltip().set_horizontalOffset(16 + ubertipModel.tooltipOffset.x);
            }
            if (ss.isValue(ubertipModel.tooltipOffset.y)) {
                this.get_tooltip().set_verticalOffset(16 + ubertipModel.tooltipOffset.y);
            }
        }
        else {
            this.get_tooltip().set_horizontalOffset(16);
            this.get_tooltip().set_verticalOffset(16);
        }
    },
    
    switchTooltipMode: function tab_TooltipBaseMode$switchTooltipMode(tooltipBehaviorType) {
        if (this.get_currentBehaviorType() === tooltipBehaviorType) {
            return false;
        }
        tab.Log.get(this).debug('CurrentBehavior: ' + this._currentBehavior);
        var currentBehavior = this.get_currentBehavior();
        currentBehavior.detach();
        var newBehavior = this._getTooltipBehavior(tooltipBehaviorType);
        newBehavior.attach();
        this._currentBehavior = tooltipBehaviorType;
        this.onBehaviorSwitch();
        tab.Log.get(this).debug('CurrentBehavior: ' + this._currentBehavior);
        return true;
    },
    
    prepareForPositioning: function tab_TooltipBaseMode$prepareForPositioning() {
        if (this.shouldShowCommandButtons() && this.get_ubertip().hasActionsOrSummaryOrCommands()) {
            if (!this._tooltip.get_isShown()) {
                this._ubertip.get_element().css('width', '');
            }
        }
        else {
            this._ubertip.hideMenuActionsAndCommandButtons(false);
            this._ubertip.prepareWidthForPositioning();
        }
    },
    
    triggerUbertipButtonUpdate: function tab_TooltipBaseMode$triggerUbertipButtonUpdate() {
        if (this.shouldShowCommandButtons() && this.get_ubertip().hasActionsOrSummaryOrCommands() && this._ubertip.get_isShowingActionAndCommandButtons()) {
            return;
        }
        this._tooltip.forceLayout();
    },
    
    handleUbertipButtons: function tab_TooltipBaseMode$handleUbertipButtons(sender, args) {
        if (this.shouldShowCommandButtons() && this.get_ubertip().hasActionsOrSummaryOrCommands()) {
            this._ubertip.showMenuActionsAndCommandButtons(args);
        }
        else {
            this._ubertip.hideMenuActionsAndCommandButtons(true);
        }
    },
    
    shouldShowCommandButtons: function tab_TooltipBaseMode$shouldShowCommandButtons() {
        return this.get_currentBehavior().shouldShowCommandButtons();
    },
    
    isVizTooltipCurrentlyEmpty: function tab_TooltipBaseMode$isVizTooltipCurrentlyEmpty() {
        return ss.isValue(this.get_ubertip().get_model()) && tab.MiscUtil.isNullOrEmpty(this.get_ubertip().get_model().tooltipHtml);
    },
    
    getAffectedObjects: function tab_TooltipBaseMode$getAffectedObjects(targetType, interactedObject) {
        var affectedObjects = null;
        if (this.get_hasContextProvider()) {
            if (this._contextProvider.getSelectedObjects(targetType).contains(interactedObject)) {
                affectedObjects = this._contextProvider.getSelectedObjects(targetType);
            }
            else {
                affectedObjects = [ interactedObject ];
            }
        }
        return affectedObjects;
    },
    
    isCurrentObjectSelected: function tab_TooltipBaseMode$isCurrentObjectSelected() {
        if (ss.isNullOrUndefined(this._ubertip.get_model())) {
            return false;
        }
        var tupleSelected = (this.get_hasContextProvider()) ? this._contextProvider.isMarkSelected(this._ubertip.get_model().interactedTupleId) : this._ubertip.get_model().tupleSelected;
        var visualPartsSelected = this._ubertip.get_model().refLineSelected || this._ubertip.get_model().trendLineSelected;
        var axisSelected = (this._ubertip.get_model().imageRegion === 'bottomaxis') || (this._ubertip.get_model().imageRegion === 'leftaxis') || (this._ubertip.get_model().imageRegion === 'rightaxis') || (this._ubertip.get_model().imageRegion === 'topaxis');
        var headerSelected = (this._ubertip.get_model().imageRegion === 'xheader') || (this._ubertip.get_model().imageRegion === 'yheader');
        return tupleSelected || visualPartsSelected || axisSelected || headerSelected;
    },
    
    runBehaviorWithLocalUbertip: function tab_TooltipBaseMode$runBehaviorWithLocalUbertip(tooltipUiBehavior, interactedObjectId, affectedObjectIds, regionCoords, paneDescriptorKey, regionPart, targetType, activationMethod) {
        tab.TooltipBaseMode._tooltipRID += 1;
        tab.TooltipBaseMode._requestVizId = this.visualId;
        var rid = tab.TooltipBaseMode._tooltipRID;
        var cb = ss.Delegate.create(this, function(model) {
            if (!this._isCurrentRID(rid.toString())) {
                if (this.visualId !== tab.TooltipBaseMode._requestVizId) {
                    this.readyForHover = true;
                }
                return;
            }
            if (ss.isValue(model)) {
                model.rid = rid;
                this.modelUpdateCallback(model);
                tab.TooltipBaseMode.lastHoveredObjectId = interactedObjectId;
                if (regionPart === 'viz' && model.isExplicitlyEmpty) {
                    this._closeTooltipAndAllowHover();
                    return;
                }
                if (ss.isValue(tooltipUiBehavior)) {
                    tooltipUiBehavior();
                }
            }
        });
        var info = new tab.LocalUbertipInfo([ interactedObjectId ], affectedObjectIds, paneDescriptorKey, false);
        if (this.needRemoteCommand(regionPart, targetType, activationMethod, interactedObjectId)) {
            var remoteCallback = ss.Delegate.create(this, function(model) {
                if (!this._isCurrentRID(rid.toString()) || !ss.isValue(model)) {
                    return;
                }
                model.rid = rid;
                this.updateModelFromServerResponse(model);
            });
            tab.UberTipClientCommands.localAndRemoteUberTipCommand(regionPart, this.visualId, tab.$create_RectXY(regionCoords.x, regionCoords.y, 0, 0), interactedObjectId, activationMethod, info, cb, remoteCallback, this.get__tooltipFailureCallback());
        }
        else {
            tab.UberTipClientCommands.localOnlyUbertipCommand(this.visualId, info, cb, activationMethod);
        }
    },
    
    runBehaviorWithRemoteUbertip: function tab_TooltipBaseMode$runBehaviorWithRemoteUbertip(tooltipUiBehavior, regionSelectionRect, regionPart, interactedObjectId) {
        tab.TooltipBaseMode._tooltipRID += 1;
        tab.TooltipBaseMode._requestVizId = this.visualId;
        var rid = tab.TooltipBaseMode._tooltipRID;
        var cb = ss.Delegate.create(this, function(model) {
            if (!this._isCurrentRID(rid.toString())) {
                if (this.visualId !== tab.TooltipBaseMode._requestVizId) {
                    this.readyForHover = true;
                }
                return;
            }
            if (ss.isValue(model)) {
                model.rid = rid;
                this.modelUpdateCallback(model);
                if (regionPart === 'viz' && model.isExplicitlyEmpty) {
                    this._closeTooltipAndAllowHover();
                    return;
                }
                if (ss.isValue(tooltipUiBehavior)) {
                    tooltipUiBehavior();
                }
            }
            else {
                this._closeTooltipAndAllowHover();
                tab.TooltipBaseMode.lastHoveredObjectId = tab.TooltipBaseMode.whitespaceObjectId;
            }
        });
        tab.UberTipClientCommands.remoteOnlyUbertipCommand(regionPart, this.visualId, regionSelectionRect, cb, this.get__tooltipFailureCallback(), interactedObjectId);
    },
    
    needRemoteCommand: function tab_TooltipBaseMode$needRemoteCommand(regionPart, targetType, activationMethod, interactedObjectId) {
        if (tsConfig.is_authoring || !tab.ApplicationModel.get_instance().get_isLocalRenderMode() || regionPart !== 'viz' || (targetType !== 'mark' && targetType !== 'whitespace') || activationMethod !== 'on-hover' || this._hoverAndMenuActionCount > 0) {
            return true;
        }
        var hasContextProvider = ss.isValue(this._contextProvider);
        var selection = hasContextProvider && this._contextProvider.isMarkSelected(interactedObjectId);
        return !hasContextProvider || selection;
    },
    
    _handleUbertipRemoteFailure: function tab_TooltipBaseMode$_handleUbertipRemoteFailure() {
        this.get_ubertip().handleRemoteFailure();
        this.readyForHover = true;
    },
    
    _closeTooltipAndAllowHover: function tab_TooltipBaseMode$_closeTooltipAndAllowHover() {
        this._tooltip.close();
        this.readyForHover = true;
    },
    
    _allowHoverIfShown: function tab_TooltipBaseMode$_allowHoverIfShown(sender, e) {
        if (this.get_isTooltipShown()) {
            this.readyForHover = true;
        }
    },
    
    _getTooltipBehavior: function tab_TooltipBaseMode$_getTooltipBehavior(tooltipBehaviorType) {
        return this.tooltipBehaviors[tooltipBehaviorType];
    },
    
    _onClose: function tab_TooltipBaseMode$_onClose() {
        this.readyForHover = true;
        if (ss.isValue(this.__tooltipClosed)) {
            this.__tooltipClosed();
        }
    },
    
    _onUbertipActionExecuted: function tab_TooltipBaseMode$_onUbertipActionExecuted(senderUbertip, args) {
        this.get_tooltip().close();
        if (ss.isValue(this.__ubertipActionExecuted)) {
            this.__ubertipActionExecuted(senderUbertip, args);
        }
    },
    
    _onUbertipCommandExecuted: function tab_TooltipBaseMode$_onUbertipCommandExecuted(senderUbertip, args) {
        this.get_tooltip().close();
        if (ss.isValue(this.__ubertipCommandExecuted)) {
            this.__ubertipCommandExecuted(senderUbertip, args);
        }
    },
    
    _onUbertipMenuToggle: function tab_TooltipBaseMode$_onUbertipMenuToggle(areMenuItemsVisible) {
        this.get_currentBehavior().handleUbertipMenuToggle(areMenuItemsVisible);
    },
    
    _onUbertipMenuClose: function tab_TooltipBaseMode$_onUbertipMenuClose() {
        this.get_currentBehavior().handleUbertipMenuClose();
    },
    
    _onMobileVizReduceTransform: function tab_TooltipBaseMode$_onMobileVizReduceTransform() {
        this._tooltip.close();
    },
    
    _isCurrentRID: function tab_TooltipBaseMode$_isCurrentRID(rid) {
        tab.Log.get(this).debug('response rid: ' + rid + ' | current rid: ' + tab.TooltipBaseMode._tooltipRID.toString());
        if (ss.isValue(rid) && tab.TooltipBaseMode._tooltipRID.toString() !== rid) {
            return false;
        }
        return true;
    },
    
    _onMouseLeave: function tab_TooltipBaseMode$_onMouseLeave(e) {
        if (!this.get_tooltip().get_isShown() || !ss.isValue(this.__mouseExitedTooltip)) {
            return;
        }
        var c = tab.DomUtil.getDojoCoordsJQ(this.get_tooltip().get_body());
        if (c.x > e.pageX || (c.x + c.w) <= e.pageX || c.y > e.pageY || (c.y + c.h) <= e.pageY) {
            this.__mouseExitedTooltip(tab.$create_Point(e.pageX, e.pageY));
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipContextProvider

tab.TooltipContextProvider = function tab_TooltipContextProvider(selectionsModel) {
    this._selectionsModel = selectionsModel;
}
tab.TooltipContextProvider.prototype = {
    _selectionsModel: null,
    
    getSelectedObjects: function tab_TooltipContextProvider$getSelectedObjects(targetType) {
        if (targetType === 'mark') {
            return this._selectionsModel.get_tupleSelection().get_ids();
        }
        else {
            return null;
        }
    },
    
    isMarkSelected: function tab_TooltipContextProvider$isMarkSelected(objectId) {
        return this._selectionsModel.get_tupleSelection().isMarkSelected(objectId);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipDisabledMode

tab.TooltipDisabledMode = function tab_TooltipDisabledMode(contextProvider, visualId) {
    tab.TooltipDisabledMode.initializeBase(this, [ 'disabled', contextProvider, visualId ]);
}
tab.TooltipDisabledMode.prototype = {
    
    get_multiSelectCompleteBehavior: function tab_TooltipDisabledMode$get_multiSelectCompleteBehavior() {
        return 'disabled';
    },
    
    getSingleSelectBehaviorCallback: function tab_TooltipDisabledMode$getSingleSelectBehaviorCallback(pageCoords) {
        return function() {
        };
    },
    
    buildBehaviorsDictionary: function tab_TooltipDisabledMode$buildBehaviorsDictionary() {
        var disabledTooltipBehavior = new tab.DisabledTooltipBehavior();
        this.tooltipBehaviors['disabled'] = disabledTooltipBehavior;
    },
    
    suppressHoverIfNecesary: function tab_TooltipDisabledMode$suppressHoverIfNecesary() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipBaseLegacyMode

tab.TooltipBaseLegacyMode = function tab_TooltipBaseLegacyMode(contextProvider, visualId) {
    tab.TooltipBaseLegacyMode.initializeBase(this, [ 'sticky', contextProvider, visualId ]);
    var legacyTooltipBehavior = this.get_currentBehavior();
    legacyTooltipBehavior.attach();
}
tab.TooltipBaseLegacyMode.prototype = {
    
    onTap: function tab_TooltipBaseLegacyMode$onTap() {
        this.get_tooltip().close();
    },
    
    onPress: function tab_TooltipBaseLegacyMode$onPress() {
        this.get_tooltip().close();
    },
    
    getSingleSelectBehaviorCallback: function tab_TooltipBaseLegacyMode$getSingleSelectBehaviorCallback(pageCoords) {
        return ss.Delegate.create(this, function() {
            this.get_currentBehavior().singleSelectComplete(pageCoords);
        });
    },
    
    shouldForceRemoteTooltipForObject: function tab_TooltipBaseLegacyMode$shouldForceRemoteTooltipForObject(targetType, interactedObject) {
        var affectedObjects = this.getAffectedObjects(targetType, interactedObject);
        return targetType === 'mark' && ss.isValue(affectedObjects) && affectedObjects.length > 1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.TooltipResponsiveMode

tab.TooltipResponsiveMode = function tab_TooltipResponsiveMode(contextProvider, visualId) {
    tab.TooltipResponsiveMode.initializeBase(this, [ 'smooth', contextProvider, visualId ]);
    var smoothTooltipBehavior = this.get_currentBehavior();
    smoothTooltipBehavior.attach();
    smoothTooltipBehavior.add_onMouseStop(ss.Delegate.create(this, this._onMouseStop$1));
    this._uniqueMouseEventType$1 = tab.TooltipResponsiveMode._getNewUniqueMouseMoveEventType$1();
    this._attachMouseHandler$1();
    this.get_tooltip().add_prePosition(ss.Delegate.create(this, this.prepareForPositioning));
    this.get_tooltip().add_positioned(ss.Delegate.create(this, this.handleUbertipButtons));
    this.get_tooltip().add_showed(ss.Delegate.create(this, this.handleUbertipButtons));
}
tab.TooltipResponsiveMode._getNewUniqueMouseMoveEventType$1 = function tab_TooltipResponsiveMode$_getNewUniqueMouseMoveEventType$1() {
    tab.TooltipResponsiveMode._uniqueEventTypeCounter$1++;
    return 'mousemove.TooltipResponsiveMode' + tab.TooltipResponsiveMode._uniqueEventTypeCounter$1;
}
tab.TooltipResponsiveMode.prototype = {
    _uniqueMouseEventType$1: null,
    _mouseHandlerAttached$1: false,
    
    get_ubertipShouldEnforceButtonOrdering: function tab_TooltipResponsiveMode$get_ubertipShouldEnforceButtonOrdering() {
        return true;
    },
    
    dispose: function tab_TooltipResponsiveMode$dispose() {
        var smoothTooltipBehavior = this.tooltipBehaviors['smooth'];
        smoothTooltipBehavior.remove_onMouseStop(ss.Delegate.create(this, this._onMouseStop$1));
        this.get_tooltip().remove_prePosition(ss.Delegate.create(this, this.prepareForPositioning));
        this.get_tooltip().remove_positioned(ss.Delegate.create(this, this.handleUbertipButtons));
        this.get_tooltip().remove_showed(ss.Delegate.create(this, this.handleUbertipButtons));
        this._detachMouseHandler$1();
        tab.TooltipResponsiveMode.callBaseMethod(this, 'dispose');
    },
    
    buildBehaviorsDictionary: function tab_TooltipResponsiveMode$buildBehaviorsDictionary() {
        var legacyTooltipBehavior = spiff.ObjectRegistry.newLegacyTooltipBehavior(tab.ITooltipBehavior, this.get_tooltip());
        var smoothTooltipBehavior = new tab.SmoothTooltipBehavior(this.get_tooltip());
        this.tooltipBehaviors['sticky'] = legacyTooltipBehavior;
        this.tooltipBehaviors['smooth'] = smoothTooltipBehavior;
    },
    
    getSingleSelectBehaviorCallback: function tab_TooltipResponsiveMode$getSingleSelectBehaviorCallback(pageCoords) {
        return ss.Delegate.create(this, function() {
            this.get_currentBehavior().singleSelectComplete(pageCoords);
            if (this.get_tooltip().get_isShown()) {
                this.triggerUbertipButtonUpdate();
            }
            if (!this.isCurrentObjectSelected()) {
                this.switchTooltipMode('smooth');
                this._doShowHide$1();
            }
        });
    },
    
    shouldShowCommandButtons: function tab_TooltipResponsiveMode$shouldShowCommandButtons() {
        var show = tab.TooltipResponsiveMode.callBaseMethod(this, 'shouldShowCommandButtons');
        var hasModel = ss.isValue(this.get_ubertip().get_model());
        var isMultiSelect = hasModel && ss.isValue(this.get_ubertip().get_model().selectionHtml);
        if (!isMultiSelect && hasModel) {
            show = show && this.isCurrentObjectSelected();
        }
        return show;
    },
    
    getSingleSelectBehavior: function tab_TooltipResponsiveMode$getSingleSelectBehavior(targetType) {
        return 'sticky';
    },
    
    getHoverBehavior: function tab_TooltipResponsiveMode$getHoverBehavior(targetType) {
        var behavior = this.get_defaultBehaviorType();
        if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
            if (targetType === 'header' || targetType === 'visualparts') {
                behavior = 'sticky';
            }
            else if (targetType === 'mark') {
                behavior = 'smooth';
            }
            else {
                tab.Log.get(this).debug('unsupported target type: {0}', targetType);
            }
        }
        else {
            if (targetType === 'header') {
                behavior = 'sticky';
            }
            else {
                behavior = 'smooth';
            }
        }
        return behavior;
    },
    
    onDragEnd: function tab_TooltipResponsiveMode$onDragEnd() {
        this.get_tooltip().close();
        tab.TooltipResponsiveMode.callBaseMethod(this, 'onDragEnd');
    },
    
    onBehaviorSwitch: function tab_TooltipResponsiveMode$onBehaviorSwitch() {
        if (this.get_currentBehaviorType() === 'smooth') {
            this._attachMouseHandler$1();
        }
        else {
            this._detachMouseHandler$1();
        }
    },
    
    _onMouseMove$1: function tab_TooltipResponsiveMode$_onMouseMove$1(e) {
        if (this.readyForHover && this.get_currentBehaviorType() === 'smooth') {
            (this.get_currentBehavior()).onMouseMove(e);
        }
    },
    
    _onMouseStop$1: function tab_TooltipResponsiveMode$_onMouseStop$1(position) {
        if (ss.isNullOrUndefined(this.get_ubertip().get_model())) {
            return;
        }
        var switched = false;
        var isSelected = this.isCurrentObjectSelected();
        if (isSelected) {
            switched = this.switchTooltipMode('sticky');
        }
        this._doShowHide$1();
        if (switched && this.get_tooltip().get_isShown()) {
            this.triggerUbertipButtonUpdate();
        }
    },
    
    _doShowHide$1: function tab_TooltipResponsiveMode$_doShowHide$1() {
        if (!this.get_tooltip().get_isShown() && ss.isValue(this.get_tooltip().get_lastLocation()) && this.get_currentBehaviorType() === 'sticky' && this.isVizTooltipCurrentlyEmpty() && this.get_ubertip().hasActionsOrSummaryOrCommands()) {
            this.get_tooltip().show(this.get_tooltip().get_body().children()[0], this.get_tooltip().get_lastLocation());
        }
        else if (this.get_tooltip().get_isShown() && this.get_currentBehaviorType() === 'smooth' && this.isVizTooltipCurrentlyEmpty()) {
            this.get_tooltip().close();
        }
    },
    
    _attachMouseHandler$1: function tab_TooltipResponsiveMode$_attachMouseHandler$1() {
        if (this._mouseHandlerAttached$1) {
            return;
        }
        $(window.document.documentElement).bind(this._uniqueMouseEventType$1, ss.Delegate.create(this, this._onMouseMove$1));
        tab.Log.get(this).debug('Unique mouse event type bound: ' + this._uniqueMouseEventType$1);
        this._mouseHandlerAttached$1 = true;
    },
    
    _detachMouseHandler$1: function tab_TooltipResponsiveMode$_detachMouseHandler$1() {
        if (!this._mouseHandlerAttached$1) {
            return;
        }
        tab.Log.get(this).debug('Unique mouse event type unbound: ' + this._uniqueMouseEventType$1);
        $(window.document.documentElement).unbind(this._uniqueMouseEventType$1);
        this._mouseHandlerAttached$1 = false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.SmoothTooltipBehavior

tab.SmoothTooltipBehavior = function tab_SmoothTooltipBehavior(tooltip) {
    this._disposables = new tab.DisposableHolder();
    tab.Param.verifyValue(tooltip, 'tooltip');
    this._tooltip = tooltip;
    var mouseStopOverride = tab.FeatureParamsLookup.getInt(tab.FeatureParam.buttonDelay);
    if (ss.isValue(mouseStopOverride)) {
        this._mouseStopDetectionTime = (mouseStopOverride || 0);
    }
}
tab.SmoothTooltipBehavior.prototype = {
    _mouseStopDetectionTime: 750,
    _tooltip: null,
    _mouseStopTimeoutHandle: null,
    _timeTooltipShown: null,
    
    add_onMouseStop: function tab_SmoothTooltipBehavior$add_onMouseStop(value) {
        this.__onMouseStop = ss.Delegate.combine(this.__onMouseStop, value);
    },
    remove_onMouseStop: function tab_SmoothTooltipBehavior$remove_onMouseStop(value) {
        this.__onMouseStop = ss.Delegate.remove(this.__onMouseStop, value);
    },
    
    __onMouseStop: null,
    
    attach: function tab_SmoothTooltipBehavior$attach() {
        this._tooltip.add_showed(ss.Delegate.create(this, this._onShowed));
        this._tooltip.add_closed(ss.Delegate.create(this, this._onClose));
        this._tooltip.add_disposed(ss.Delegate.create(this, this._tooltipDisposed));
    },
    
    detach: function tab_SmoothTooltipBehavior$detach() {
        this._disposables.dispose();
        if (ss.isValue(this._tooltip)) {
            this._tooltip.remove_showed(ss.Delegate.create(this, this._onShowed));
            this._tooltip.remove_closed(ss.Delegate.create(this, this._onClose));
            this._tooltip.remove_disposed(ss.Delegate.create(this, this._tooltipDisposed));
        }
    },
    
    dispose: function tab_SmoothTooltipBehavior$dispose() {
        this.detach();
    },
    
    shownTooltipIsStatic: function tab_SmoothTooltipBehavior$shownTooltipIsStatic() {
        return false;
    },
    
    isHoverAllowed: function tab_SmoothTooltipBehavior$isHoverAllowed(pageCoords) {
        return true;
    },
    
    shouldShowCommandButtons: function tab_SmoothTooltipBehavior$shouldShowCommandButtons() {
        return false;
    },
    
    handleUbertipMenuToggle: function tab_SmoothTooltipBehavior$handleUbertipMenuToggle(areMenuItemsVisible) {
    },
    
    handleUbertipMenuClose: function tab_SmoothTooltipBehavior$handleUbertipMenuClose() {
    },
    
    hoverOverObject: function tab_SmoothTooltipBehavior$hoverOverObject(pageCoords, isSelected, isEmpty, isSameObject) {
        if (isEmpty) {
            this._tooltip.close();
        }
        else if (ss.isValue(isSameObject) && isSameObject && this._tooltip.get_isShown()) {
            this._tooltip.move(pageCoords);
        }
        else {
            this.showTooltip(pageCoords);
        }
    },
    
    hoverOverWhitespace: function tab_SmoothTooltipBehavior$hoverOverWhitespace(pageCoords) {
        if (this._tooltip.get_isShown()) {
            this._tooltip.close();
        }
    },
    
    multiSelectComplete: function tab_SmoothTooltipBehavior$multiSelectComplete(pageAnchorPoint) {
        this.showTooltip(pageAnchorPoint);
    },
    
    singleSelectComplete: function tab_SmoothTooltipBehavior$singleSelectComplete(pageCoords) {
        this.showTooltip(pageCoords);
    },
    
    onPanningOrDragging: function tab_SmoothTooltipBehavior$onPanningOrDragging() {
        if (this._tooltip.get_isShown()) {
            this._tooltip.close();
        }
    },
    
    onScroll: function tab_SmoothTooltipBehavior$onScroll() {
        if (this._tooltip.get_isShown()) {
            this._tooltip.close();
        }
    },
    
    mouseDown: function tab_SmoothTooltipBehavior$mouseDown(pageCoords, objectUnderMouse) {
    },
    
    showTooltip: function tab_SmoothTooltipBehavior$showTooltip(pageCoords) {
        tab.Log.get(this).debug('ShowTooltip: position=%o', pageCoords);
        if (this._tooltip.get_isShown() && tab.PointUtil.equals(this._tooltip.get_location(), pageCoords)) {
            return;
        }
        this._tooltip.show(this._tooltip.get_body().children()[0], pageCoords);
    },
    
    _onShowed: function tab_SmoothTooltipBehavior$_onShowed(sender, e) {
        tab.Log.get(this).debug('OnShowed');
        this._cancelTimeouts();
        this._detectMouseStop(tab.$create_Point(e.origX, e.origY));
        this._timeTooltipShown = Date.get_now();
    },
    
    _onClose: function tab_SmoothTooltipBehavior$_onClose() {
        this._tooltip.get_element().unbind('.SmoothTooltipBehavior');
        this._timeTooltipShown = null;
        this._cancelTimeouts();
        tab.Log.get(this).debug('OnClose');
    },
    
    onMouseMove: function tab_SmoothTooltipBehavior$onMouseMove(e) {
        var prevLocation = (this._tooltip.get_lastLocation() || tab.$create_Point(0, 0));
        var location = tab.$create_Point(e.pageX, e.pageY);
        this._tooltip.set_lastLocation(location);
        this._tooltip.move(location);
        var moveDistance = tab.PointUtil.distance(prevLocation, this._tooltip.get_lastLocation());
        if (moveDistance > 0) {
            if (ss.isValue(this._mouseStopTimeoutHandle)) {
                window.clearTimeout(this._mouseStopTimeoutHandle);
                this._mouseStopTimeoutHandle = null;
            }
            this._detectMouseStop(location);
            if (!tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
                this._tooltip.close();
            }
        }
    },
    
    _detectMouseStop: function tab_SmoothTooltipBehavior$_detectMouseStop(stopLocation) {
        if (ss.isValue(this._mouseStopTimeoutHandle)) {
            window.clearTimeout(this._mouseStopTimeoutHandle);
            this._mouseStopTimeoutHandle = null;
        }
        this._mouseStopTimeoutHandle = window.setTimeout(ss.Delegate.create(this, function() {
            tab.Log.get(this).debug("Mouse hasn't moved for %o ms. Tuple: %o", this._mouseStopDetectionTime, this._tooltip.interactedTupleId);
            if (ss.isValue(this.__onMouseStop)) {
                this.__onMouseStop(stopLocation);
            }
        }), this._mouseStopDetectionTime);
    },
    
    _tooltipDisposed: function tab_SmoothTooltipBehavior$_tooltipDisposed(sender, e) {
        this.dispose();
    },
    
    _cancelTimeouts: function tab_SmoothTooltipBehavior$_cancelTimeouts() {
        if (ss.isValue(this._mouseStopTimeoutHandle)) {
            window.clearTimeout(this._mouseStopTimeoutHandle);
            this._mouseStopTimeoutHandle = null;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.NotificationCommandRedirectHandler

tab.NotificationCommandRedirectHandler = function tab_NotificationCommandRedirectHandler() {
}
tab.NotificationCommandRedirectHandler._handleNotification = function tab_NotificationCommandRedirectHandler$_handleNotification(model) {
    var deferred = $.Deferred();
    var notificationPM = model.notificationPresModel;
    tab.ConfirmationViewModel.showNotification(notificationPM.notificationMsg.toString().htmlEncode(), function() {
        deferred.resolve();
    });
    return deferred.promise();
}


////////////////////////////////////////////////////////////////////////////////
// tab.ReferenceLineConstantValueQuickEditCommandRedirectHandler

tab.ReferenceLineConstantValueQuickEditCommandRedirectHandler = function tab_ReferenceLineConstantValueQuickEditCommandRedirectHandler() {
}
tab.ReferenceLineConstantValueQuickEditCommandRedirectHandler._handleConfirmation = function tab_ReferenceLineConstantValueQuickEditCommandRedirectHandler$_handleConfirmation(model) {
    var deferred = $.Deferred();
    if (ss.isValue(model) && tab.FeatureFlags.isEnabled('ConstantRefLineQuickEditor')) {
        var refLinePresModel = model.referenceLine;
        tab.ReferenceLineConstantValueEditorViewModel.constantLinePillDropped(refLinePresModel);
        deferred.resolve();
    }
    return deferred.promise();
}


////////////////////////////////////////////////////////////////////////////////
// tab.ConfirmationCommandRedirectHandler

tab.ConfirmationCommandRedirectHandler = function tab_ConfirmationCommandRedirectHandler() {
}
tab.ConfirmationCommandRedirectHandler._handleConfirmation = function tab_ConfirmationCommandRedirectHandler$_handleConfirmation(model) {
    var deferred = $.Deferred();
    var confirmPM = model.confirmationPresModel;
    var message = $('<div>').append($('<div>').text(confirmPM.confirmationMsg).css('white-space', 'pre-wrap'));
    var msg = message.html();
    tab.ConfirmationViewModel.showConfirmation(msg, function(dlgResult) {
        var commandPM = (dlgResult === 'confirm') ? confirmPM.acceptSimpleCommandModel : confirmPM.declineSimpleCommandModel;
        if (ss.isNullOrUndefined(commandPM)) {
            deferred.resolve();
            return;
        }
        var resultCommand = tab.CommandSerializer.deserialize(tab.SimpleCommandsPresModelWrapper.create(commandPM).get_simpleCommand());
        tab.ServerCommands.executeServerCommand(resultCommand, 'immediately', tab.CommandUtils.createCommandRedirectSuccessHandler(deferred), function() {
            deferred.reject();
        });
    });
    return deferred.promise();
}


////////////////////////////////////////////////////////////////////////////////
// tab.CircleShapeSelector

tab.CircleShapeSelector = function tab_CircleShapeSelector(svgSize) {
    tab.CircleShapeSelector.initializeBase(this, [ svgSize, (tab.ShapeSelectorBase.get_isUsingVml()) ? tab.CircleShapeSelector._htmlTemplateVml$1 : tab.CircleShapeSelector._htmlTemplate$1, 'tvdrag_svg_div' ]);
    this._dragCircle$1 = tab.$create_Circle(tab.$create_PointF(0, 0), 0);
    this._hitTestCircle$1 = tab.$create_Circle(tab.$create_PointF(0, 0), 0);
}
tab.CircleShapeSelector.prototype = {
    _dragCircle$1: null,
    _hitTestCircle$1: null,
    
    get_hitTestingBox: function tab_CircleShapeSelector$get_hitTestingBox() {
        return tab.RectXYUtil.nonemptyify(this._getBoxHelper$1(true));
    },
    
    isSingleSelect: function tab_CircleShapeSelector$isSingleSelect() {
        return this._dragCircle$1.radius < 1;
    },
    
    _getBoxHelper$1: function tab_CircleShapeSelector$_getBoxHelper$1(isForHitTesting) {
        return tab.CircleUtil.boundingBox((isForHitTesting) ? this._hitTestCircle$1 : this._dragCircle$1);
    },
    
    updateSpecificShape: function tab_CircleShapeSelector$updateSpecificShape(lastPoint) {
        var cx = this.get_dragStart().x - this.get_connectNodePos().x;
        var cy = this.get_dragStart().y - this.get_connectNodePos().y;
        var radius = Math.sqrt(Math.pow(cx - lastPoint.x, 2) + Math.pow(cy - lastPoint.y, 2));
        this._dragCircle$1 = tab.$create_Circle(tab.$create_PointF(cx + this.get_drawOffsets().x, cy + this.get_drawOffsets().y), radius);
        this._hitTestCircle$1 = tab.$create_Circle(tab.$create_PointF(cx + this.get_totalScrollOffset().x, cy + this.get_totalScrollOffset().y), radius);
    },
    
    renderShape: function tab_CircleShapeSelector$renderShape() {
        if (tab.ShapeSelectorBase.get_isUsingVml()) {
            var centerX = Math.round(this._dragCircle$1.center.x);
            var centerY = Math.round(this._dragCircle$1.center.y);
            var radius = Math.round(this._dragCircle$1.radius);
            var diameter = radius * 2;
            var Thickness = 1;
            this.get_dom().find('.' + 'voval').css('width', diameter + 'px').css('height', diameter + 'px').css('left', centerX - radius + 'px').css('top', centerY - radius + 'px');
            this.get_dom().find('.' + 'circle_crosshairs').eq(0).css('width', ((4 * 2) - Thickness) + 'px').css('height', Thickness + 'px').css('left', (centerX - 4 + 1) + 'px').css('top', centerY + 'px');
            this.get_dom().find('.' + 'circle_crosshairs').eq(1).css('width', Thickness + 'px').css('height', ((4 * 2) - Thickness) + 'px').css('left', centerX + 'px').css('top', (centerY - 4 + 1) + 'px');
        }
        else {
            this.get_dom().find('svg circle').attr('cx', this._dragCircle$1.center.x.toString()).attr('cy', this._dragCircle$1.center.y.toString()).attr('r', this._dragCircle$1.radius.toString());
            this.get_dom().find('svg  g.' + 'circle_crosshairs' + ' line').eq(0).attr('x1', (this._dragCircle$1.center.x - 4).toString()).attr('x2', (this._dragCircle$1.center.x + 4).toString()).attr('y1', this._dragCircle$1.center.y.toString()).attr('y2', this._dragCircle$1.center.y.toString());
            this.get_dom().find('svg  g.' + 'circle_crosshairs' + ' line').eq(1).attr('x1', this._dragCircle$1.center.x.toString()).attr('x2', this._dragCircle$1.center.x.toString()).attr('y1', (this._dragCircle$1.center.y - 4).toString()).attr('y2', (this._dragCircle$1.center.y + 4).toString());
        }
        this.get_dom().css('display', '');
    },
    
    show: function tab_CircleShapeSelector$show() {
        this.get_dom().find('.selectionShape').show();
    },
    
    hide: function tab_CircleShapeSelector$hide() {
        this.get_dom().find('.selectionShape').hide();
    },
    
    shapeAreaHit: function tab_CircleShapeSelector$shapeAreaHit(clippedSelection, paneDrawInfo, markHitTargetNode, t) {
        return tab.HitTester.circleAreaHit(paneDrawInfo, markHitTargetNode.get_boundingBox(), this._hitTestCircle$1, markHitTargetNode.get_objectId(), t, paneDrawInfo.get_markType());
    },
    
    sendSelectionCommand: function tab_CircleShapeSelector$sendSelectionCommand(region, action, visualId, tooltipCallback) {
        tab.SelectionClientCommands.selectCircleRegionAndDoUbertip(region, this.get_hitTestingBox(), this._hitTestCircle$1, action, visualId, tooltipCallback);
    },
    
    retrieveStateObject: function tab_CircleShapeSelector$retrieveStateObject(shapeState) {
        return (this.isStateObjectTypeCorrect(shapeState)) ? shapeState : new tab.CircleShapeState();
    },
    
    saveCurrentState: function tab_CircleShapeSelector$saveCurrentState(shapeState) {
        if (this.isStateObjectTypeCorrect(shapeState)) {
            var circleShapeState = shapeState;
            circleShapeState.saveCurrentState(this._hitTestCircle$1);
        }
    },
    
    isStateObjectTypeCorrect: function tab_CircleShapeSelector$isStateObjectTypeCorrect(shapeState) {
        if (ss.isValue(shapeState)) {
            if (Type.getInstanceType(shapeState) === tab.CircleShapeState) {
                return true;
            }
            tab.Log.get(this).warn('CircleShapeSelector expects to work on only CircleShapeState objects');
        }
        return false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.CircleShapeState

tab.CircleShapeState = function tab_CircleShapeState() {
    tab.CircleShapeState.initializeBase(this);
    this._currentState$1 = tab.$create_Circle(tab.$create_PointF(0, 0), 0);
    this._lastState$1 = tab.$create_Circle(tab.$create_PointF(0, 0), 0);
}
tab.CircleShapeState.prototype = {
    _currentState$1: null,
    _lastState$1: null,
    
    saveCurrentState: function tab_CircleShapeState$saveCurrentState(dragCircle) {
        this._currentState$1 = tab.CircleUtil.clone(dragCircle);
    },
    
    updateLastState: function tab_CircleShapeState$updateLastState() {
        this._lastState$1 = this._currentState$1;
    },
    
    getStateDiff: function tab_CircleShapeState$getStateDiff() {
        if (!tab.CircleUtil.isEmpty(this._lastState$1)) {
            return tab.CircleUtil.getChangedRects(this._currentState$1, this._lastState$1);
        }
        var changedArea = new Array(1);
        changedArea[0] = tab.CircleUtil.boundingBox(this._currentState$1);
        return changedArea;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PolyShapeSelector

tab.PolyShapeSelector = function tab_PolyShapeSelector(svgSize) {
    tab.PolyShapeSelector.initializeBase(this, [ svgSize, (tab.ShapeSelectorBase.get_isUsingVml()) ? tab.PolyShapeSelector._htmlTemplateVml$1 : "<div><svg class='selectionShape'><path class='tvdrag_svg_marquee'></path></svg></div>", 'tvdrag_svg_div' ]);
    this._dragPoints$1 = [];
    this._hitTestPoints$1 = [];
    this._dictOfPointsWithWorldOffset$1 = {};
}
tab.PolyShapeSelector.prototype = {
    _dragPoints$1: null,
    _hitTestPoints$1: null,
    _dictOfPointsWithWorldOffset$1: null,
    _trail$1: '',
    _closePathEventId$1: null,
    
    get_hitTestingBox: function tab_PolyShapeSelector$get_hitTestingBox() {
        return (!this._dragPoints$1.length) ? tab.$create_RectXY(0, 0, 0, 0) : tab.RectXYUtil.nonemptyify(this._getBoxHelper$1(true));
    },
    
    get_autoScrollAdjustment: function tab_PolyShapeSelector$get_autoScrollAdjustment() {
        return (tab.ApplicationModel.get_instance().get_isLocalRenderMode() || tsConfig.is_mobile) ? this.get_autoScrollOffset() : tab.$create_Point(0, 0);
    },
    
    isSingleSelect: function tab_PolyShapeSelector$isSingleSelect() {
        return !this._dragPoints$1.length;
    },
    
    _getBoxHelper$1: function tab_PolyShapeSelector$_getBoxHelper$1(isForHitTesting) {
        var correctList = (isForHitTesting) ? this._hitTestPoints$1 : this._dragPoints$1;
        var minX = correctList[0].x;
        var maxX = correctList[0].x;
        var minY = correctList[0].y;
        var maxY = correctList[0].y;
        var $enum1 = ss.IEnumerator.getEnumerator(correctList);
        while ($enum1.moveNext()) {
            var p = $enum1.current;
            if (p.x < minX) {
                minX = p.x;
            }
            else if (p.x > maxX) {
                maxX = p.x;
            }
            if (p.y < minY) {
                minY = p.y;
            }
            else if (p.y > maxY) {
                maxY = p.y;
            }
        }
        return tab.$create_RectXY(minX, minY, maxX - minX, maxY - minY);
    },
    
    updateSpecificShape: function tab_PolyShapeSelector$updateSpecificShape(lastPoint) {
        if (!this._dragPoints$1.length) {
            var startX = this.get_dragStart().x - this.get_connectNodePos().x;
            var startY = this.get_dragStart().y - this.get_connectNodePos().y;
            this._addToListOfPoints$1(startX, startY);
        }
        var currentX = lastPoint.x;
        var currentY = lastPoint.y;
        this._addToListOfPoints$1(currentX, currentY);
    },
    
    renderShape: function tab_PolyShapeSelector$renderShape() {
        if (String.isNullOrEmpty(this._trail$1)) {
            return;
        }
        if (tab.ShapeSelectorBase.get_isUsingVml()) {
            var replacement = "<v:polyline class='" + 'vpolyline' + "' filled='False' points='" + this._trail$1 + "'><v:stroke color='" + 'rgb(0, 176, 240)' + "'/></v:polyline>";
            this.get_dom().find('.' + 'vpolyline').replaceWith(replacement);
        }
        else {
            this.get_dom().find('svg path').attr('d', this._trail$1);
            if (ss.isValue(this._closePathEventId$1)) {
                window.clearTimeout(this._closePathEventId$1);
            }
            this._closePathEventId$1 = window.setTimeout(ss.Delegate.create(this, function() {
                this._closeTrail$1();
            }), 300);
        }
        this.get_dom().css('display', '');
    },
    
    _closeTrail$1: function tab_PolyShapeSelector$_closeTrail$1() {
        if (ss.isValue(this._closePathEventId$1)) {
            window.clearTimeout(this._closePathEventId$1);
        }
        this.get_dom().find('svg path').attr('d', this._trail$1 + 'Z');
    },
    
    show: function tab_PolyShapeSelector$show() {
        this._clearShapeData$1();
        this.renderShape();
        this.get_dom().find('.selectionShape').show();
    },
    
    hide: function tab_PolyShapeSelector$hide() {
        this.get_dom().find('.selectionShape').hide();
    },
    
    shapeAreaHit: function tab_PolyShapeSelector$shapeAreaHit(clippedSelection, paneDrawInfo, markHitTargetNode, t) {
        var markIndex = markHitTargetNode.get_objectId();
        var markType = paneDrawInfo.get_markType();
        var hit = tab.HitTester.rectangleAreaHit(paneDrawInfo, markHitTargetNode.get_boundingBox(), clippedSelection, markIndex, t, markType);
        if (!hit) {
            return false;
        }
        var pixelWorldOffset = 0;
        if (t.get_transformType() === tab.TransformationType.worldOffset) {
            pixelWorldOffset = t.get_translateX();
        }
        var offsetSelectionPts = this._retrieveListOfPointsWithWorldOffset$1(pixelWorldOffset);
        if (t.get_transformType() === tab.TransformationType.pixelToDomain) {
            offsetSelectionPts = t.transformPolygon(offsetSelectionPts);
        }
        return tab.HitTester.polyAreaHit(paneDrawInfo, markHitTargetNode.get_boundingBox(), offsetSelectionPts, markIndex, t, markType);
    },
    
    sendSelectionCommand: function tab_PolyShapeSelector$sendSelectionCommand(region, action, visualId, tooltipCallback) {
        tab.SelectionClientCommands.selectPolyRegionAndDoUbertip(region, this.get_hitTestingBox(), this._hitTestPoints$1, action, visualId, tooltipCallback);
    },
    
    retrieveStateObject: function tab_PolyShapeSelector$retrieveStateObject(shapeState) {
        return (this.isStateObjectTypeCorrect(shapeState)) ? shapeState : new tab.PolyShapeState();
    },
    
    saveCurrentState: function tab_PolyShapeSelector$saveCurrentState(shapeState) {
        if (this.isStateObjectTypeCorrect(shapeState)) {
            var polyShapeState = shapeState;
            polyShapeState.saveCurrentState(this._hitTestPoints$1);
        }
    },
    
    isStateObjectTypeCorrect: function tab_PolyShapeSelector$isStateObjectTypeCorrect(shapeState) {
        if (ss.isValue(shapeState)) {
            if (Type.getInstanceType(shapeState) === tab.PolyShapeState) {
                return true;
            }
            tab.Log.get(this).warn('PolyShapeSelector expects to work on only PolyShapeState objects');
        }
        return false;
    },
    
    _clearShapeData$1: function tab_PolyShapeSelector$_clearShapeData$1() {
        this._dragPoints$1.clear();
        this._hitTestPoints$1.clear();
        Object.clearKeys(this._dictOfPointsWithWorldOffset$1);
        this._trail$1 = '';
    },
    
    _addToListOfPoints$1: function tab_PolyShapeSelector$_addToListOfPoints$1(x, y) {
        var dragX = x + this.get_drawOffsets().x + this.get_autoScrollAdjustment().x;
        var dragY = y + this.get_drawOffsets().y + this.get_autoScrollAdjustment().y;
        var hitTestX = x + this.get_totalScrollOffset().x;
        var hitTestY = y + this.get_totalScrollOffset().y;
        this._dragPoints$1.add(tab.$create_Point(dragX, dragY));
        this._hitTestPoints$1.add(tab.$create_Point(hitTestX, hitTestY));
        this._trail$1 = '';
        var autoScrollAdjustment = this.get_autoScrollAdjustment();
        if (tab.ShapeSelectorBase.get_isUsingVml()) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._dragPoints$1);
            while ($enum1.moveNext()) {
                var p = $enum1.current;
                this._trail$1 += (p.x - autoScrollAdjustment.x) + 'px,' + (p.y - autoScrollAdjustment.y) + 'px,';
            }
            this._trail$1 += (this._dragPoints$1[0].x - autoScrollAdjustment.x) + 'px,' + (this._dragPoints$1[0].y - autoScrollAdjustment.y) + 'px';
        }
        else {
            var pathChar = 'M';
            var $enum2 = ss.IEnumerator.getEnumerator(this._dragPoints$1);
            while ($enum2.moveNext()) {
                var p = $enum2.current;
                this._trail$1 += pathChar + (p.x - autoScrollAdjustment.x) + ',' + (p.y - autoScrollAdjustment.y);
                pathChar = 'L';
            }
        }
        Object.clearKeys(this._dictOfPointsWithWorldOffset$1);
    },
    
    _retrieveListOfPointsWithWorldOffset$1: function tab_PolyShapeSelector$_retrieveListOfPointsWithWorldOffset$1(pixelWorldOffset) {
        if (!Object.keyExists(this._dictOfPointsWithWorldOffset$1, pixelWorldOffset)) {
            var offsetPoints = [];
            var worldOffsetX = Math.round(pixelWorldOffset);
            var listOfPointsWithScrollOffset = this._hitTestPoints$1;
            var $enum1 = ss.IEnumerator.getEnumerator(listOfPointsWithScrollOffset);
            while ($enum1.moveNext()) {
                var p = $enum1.current;
                offsetPoints.add(tab.$create_PointF(p.x - worldOffsetX, p.y));
            }
            this._dictOfPointsWithWorldOffset$1[pixelWorldOffset] = offsetPoints;
        }
        return this._dictOfPointsWithWorldOffset$1[pixelWorldOffset];
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.PolyShapeState

tab.PolyShapeState = function tab_PolyShapeState() {
    tab.PolyShapeState.initializeBase(this);
    this._currentState$1 = [];
    this._lastState$1 = 0;
}
tab.PolyShapeState.prototype = {
    _currentState$1: null,
    _lastState$1: 0,
    
    saveCurrentState: function tab_PolyShapeState$saveCurrentState(listOfPoints) {
        if (listOfPoints.length < this._lastState$1) {
            tab.Log.get(this).warn('Current state of PolyShapeState should not have fewer points than last state.');
        }
        this._currentState$1 = listOfPoints.clone();
    },
    
    updateLastState: function tab_PolyShapeState$updateLastState() {
        this._lastState$1 = Math.max(0, this._currentState$1.length - 1);
    },
    
    getStateDiff: function tab_PolyShapeState$getStateDiff() {
        if (!this._currentState$1.length) {
            return new Array(0);
        }
        var top = this._currentState$1[0].y;
        var bottom = top;
        var left = this._currentState$1[0].x;
        var right = left;
        for (var i = this._lastState$1, l = this._currentState$1.length; i < l; i++) {
            top = Math.min(top, this._currentState$1[i].y);
            bottom = Math.max(bottom, this._currentState$1[i].y);
            left = Math.min(left, this._currentState$1[i].x);
            right = Math.max(right, this._currentState$1[i].x);
        }
        var changedArea = new Array(1);
        changedArea[0] = tab.RectXYUtil.nonemptyify(tab.$create_RectXY(left, top, (right - left), (bottom - top)));
        return changedArea;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RectShapeSelector

tab.RectShapeSelector = function tab_RectShapeSelector() {
    tab.RectShapeSelector.initializeBase(this, [ tab.$create_RectXY(0, 0, 0, 0), '<div></div>', 'tvdrag' ]);
    this._dragRect$1 = tab.$create_RectXY(0, 0, 0, 0);
    this._hitTestRect$1 = tab.$create_RectXY(0, 0, 0, 0);
}
tab.RectShapeSelector.prototype = {
    _dragRect$1: null,
    _hitTestRect$1: null,
    
    get_hitTestingBox: function tab_RectShapeSelector$get_hitTestingBox() {
        return tab.RectXYUtil.nonemptyify(this._hitTestRect$1);
    },
    
    isSingleSelect: function tab_RectShapeSelector$isSingleSelect() {
        return this._dragRect$1.w <= 1 && this._dragRect$1.h <= 1;
    },
    
    updateSpecificShape: function tab_RectShapeSelector$updateSpecificShape(lastPoint) {
        var originX = this.get_dragStart().x - this.get_connectNodePos().x;
        var originY = this.get_dragStart().y - this.get_connectNodePos().y;
        var left = Math.round(Math.min(lastPoint.x, originX));
        var right = Math.round(Math.max(lastPoint.x, originX));
        var top = Math.round(Math.min(lastPoint.y, originY));
        var bottom = Math.round(Math.max(lastPoint.y, originY));
        var width = right - left;
        var height = bottom - top;
        this._dragRect$1 = tab.$create_RectXY(left + this.get_drawOffsets().x, top + this.get_drawOffsets().y, width, height);
        this._hitTestRect$1 = tab.$create_RectXY(left + this.get_totalScrollOffset().x, top + this.get_totalScrollOffset().y, width, height);
    },
    
    renderShape: function tab_RectShapeSelector$renderShape() {
        var rect = tab.$create_Rect(this._dragRect$1.x, this._dragRect$1.y, this._dragRect$1.w, this._dragRect$1.h);
        tab.DomUtil.setMarginBoxJQ(this.get_dom(), rect);
        this.get_dom().css('display', '');
    },
    
    show: function tab_RectShapeSelector$show() {
        this.get_dom().addClass('tvdrag_marquee');
    },
    
    hide: function tab_RectShapeSelector$hide() {
        this.get_dom().removeClass('tvdrag_marquee');
    },
    
    shapeAreaHit: function tab_RectShapeSelector$shapeAreaHit(clippedSelection, paneDrawInfo, markHitTargetNode, t) {
        return tab.HitTester.rectangleAreaHit(paneDrawInfo, markHitTargetNode.get_boundingBox(), clippedSelection, markHitTargetNode.get_objectId(), t, paneDrawInfo.get_markType());
    },
    
    sendSelectionCommand: function tab_RectShapeSelector$sendSelectionCommand(region, action, visualId, tooltipCallback) {
        tab.SelectionClientCommands.selectRectRegionAndDoUbertip(region, this.get_hitTestingBox(), action, visualId, tooltipCallback);
    },
    
    retrieveStateObject: function tab_RectShapeSelector$retrieveStateObject(shapeState) {
        return (this.isStateObjectTypeCorrect(shapeState)) ? shapeState : new tab.RectShapeState();
    },
    
    saveCurrentState: function tab_RectShapeSelector$saveCurrentState(shapeState) {
        if (this.isStateObjectTypeCorrect(shapeState)) {
            var rectShapeState = shapeState;
            rectShapeState.saveCurrentState(this.get_hitTestingBox());
        }
    },
    
    isStateObjectTypeCorrect: function tab_RectShapeSelector$isStateObjectTypeCorrect(shapeState) {
        if (ss.isValue(shapeState)) {
            if (Type.getInstanceType(shapeState) === tab.RectShapeState) {
                return true;
            }
            tab.Log.get(this).warn('RectShapeSelector expects to work on only RectShapeState objects');
        }
        return false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.RectShapeState

tab.RectShapeState = function tab_RectShapeState() {
    tab.RectShapeState.initializeBase(this);
    this._currentState$1 = tab.$create_RectXY(0, 0, 0, 0);
    this._lastState$1 = tab.$create_RectXY(0, 0, 0, 0);
}
tab.RectShapeState.prototype = {
    _currentState$1: null,
    _lastState$1: null,
    
    saveCurrentState: function tab_RectShapeState$saveCurrentState(dragRect) {
        this._currentState$1 = tab.RectXYUtil.clone(dragRect);
    },
    
    updateLastState: function tab_RectShapeState$updateLastState() {
        this._lastState$1 = this._currentState$1;
    },
    
    getStateDiff: function tab_RectShapeState$getStateDiff() {
        if (!tab.RectXYUtil.isEmpty(this._lastState$1)) {
            return tab.RectXYUtil.getChangedRects(this._lastState$1, this._currentState$1);
        }
        var changedArea = new Array(1);
        changedArea[0] = this._currentState$1;
        return changedArea;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShapeSelectorBase

tab.ShapeSelectorBase = function tab_ShapeSelectorBase(svgSize, htmlTemplate, divClassName) {
    this._latestPoint = tab.$create_Point(0, 0);
    this._dragStart = tab.$create_Point(0, 0);
    this._connectNodePos = tab.$create_RectXY(0, 0, 0, 0);
    this._totalScrollOffset = tab.$create_Point(0, 0);
    this._autoScrollOffset = tab.$create_Point(0, 0);
    this._svgWidth = svgSize.w.toString();
    this._svgHeight = svgSize.h.toString();
    this._htmlTemplate = htmlTemplate;
    this._divClassName = divClassName;
}
tab.ShapeSelectorBase.get_isUsingVml = function tab_ShapeSelectorBase$get_isUsingVml() {
    return tab.ShapeSelectorBase._isUsingVmlShapes;
}
tab.ShapeSelectorBase.prototype = {
    _svgWidth: null,
    _svgHeight: null,
    _htmlTemplate: null,
    _divClassName: null,
    _dom: null,
    _pi: null,
    
    get_dom: function tab_ShapeSelectorBase$get_dom() {
        return this._dom;
    },
    
    get_pi: function tab_ShapeSelectorBase$get_pi() {
        return this._pi;
    },
    set_pi: function tab_ShapeSelectorBase$set_pi(value) {
        this._pi = value;
        return value;
    },
    
    get_dragStart: function tab_ShapeSelectorBase$get_dragStart() {
        return this._dragStart;
    },
    
    get_connectNodePos: function tab_ShapeSelectorBase$get_connectNodePos() {
        return this._connectNodePos;
    },
    
    get_totalScrollOffset: function tab_ShapeSelectorBase$get_totalScrollOffset() {
        return this._totalScrollOffset;
    },
    
    get_drawOffsets: function tab_ShapeSelectorBase$get_drawOffsets() {
        return (tab.ApplicationModel.get_instance().get_isLocalRenderMode() || tsConfig.is_mobile) ? tab.$create_Point(0, 0) : this.get_totalScrollOffset();
    },
    
    get_autoScrollOffset: function tab_ShapeSelectorBase$get_autoScrollOffset() {
        return this._autoScrollOffset;
    },
    
    get_tooltipAnchor: function tab_ShapeSelectorBase$get_tooltipAnchor() {
        return tab.$create_Point(this._latestPoint.x + this._totalScrollOffset.x, this._latestPoint.y + this._totalScrollOffset.y);
    },
    
    setSingleSelectPoint: function tab_ShapeSelectorBase$setSingleSelectPoint(p) {
        this._latestPoint = tab.$create_Point(p.x, p.y);
    },
    
    dragStarted: function tab_ShapeSelectorBase$dragStarted(dragStartX, dragStartY, connectedNodePosition) {
        this._dragStart = tab.$create_Point(dragStartX, dragStartY);
        this._connectNodePos = connectedNodePosition;
        this._autoScrollOffset = tab.$create_Point(0, 0);
    },
    
    recordScrollingOffsets: function tab_ShapeSelectorBase$recordScrollingOffsets(scrOffset) {
        this._totalScrollOffset = tab.$create_Point(scrOffset.x, scrOffset.y);
    },
    
    updateAndRenderShape: function tab_ShapeSelectorBase$updateAndRenderShape(gestureInfo) {
        this.constrainShape(gestureInfo);
        this.updateSpecificShape(this._latestPoint);
        this.renderShape();
    },
    
    constrainShape: function tab_ShapeSelectorBase$constrainShape(gestureInfo) {
        this._latestPoint = tab.$create_Point(gestureInfo.pageX - this._connectNodePos.x, gestureInfo.pageY - this._connectNodePos.y);
        if (Type.canCast(this, tab.CircleShapeSelector)) {
            return;
        }
        this._latestPoint.y = Math.max(0, Math.min(this._latestPoint.y, this._connectNodePos.h));
        this._latestPoint.x = Math.max(0, Math.min(this._latestPoint.x, this._connectNodePos.w));
    },
    
    shapeScrolled: function tab_ShapeSelectorBase$shapeScrolled(scrolledX, scrolledY) {
        this.get_dragStart().x -= scrolledX;
        this.get_dragStart().y -= scrolledY;
        this._totalScrollOffset.x += scrolledX;
        this._totalScrollOffset.y += scrolledY;
        this._autoScrollOffset.x += scrolledX;
        this._autoScrollOffset.y += scrolledY;
        this.updateSpecificShape(this._latestPoint);
        this.renderShape();
    },
    
    createDomAndAppend: function tab_ShapeSelectorBase$createDomAndAppend(parentNode) {
        this._dom = $(this._htmlTemplate);
        this._dom.addClass(this._divClassName);
        this._dom.css('display', 'none');
        this._dom.find('svg').attr('width', this._svgWidth).attr('height', this._svgHeight);
        parentNode.append(this._dom);
    },
    
    hitTest: function tab_ShapeSelectorBase$hitTest(hitTester, isSingleSelect, sceneInfo) {
        var toSingleSelect = isSingleSelect || this.isSingleSelect();
        return (toSingleSelect) ? this._hitTestPoint(hitTester, sceneInfo) : this.hitTestShape(hitTester, sceneInfo);
    },
    
    _hitTestPoint: function tab_ShapeSelectorBase$_hitTestPoint(hitTester, sceneInfo) {
        var rect = tab.$create_RectXY(this._latestPoint.x, this._latestPoint.y, 1, 1);
        var intersectedBBoxes = hitTester.hitTestBoundingBoxes(rect, true, sceneInfo);
        return hitTester.hitTestSingle(rect, sceneInfo, intersectedBBoxes);
    },
    
    hitTestShape: function tab_ShapeSelectorBase$hitTestShape(hitTester, sceneInfo) {
        var intersectedBBoxes = hitTester.hitTestBoundingBoxes(this.get_hitTestingBox(), false, sceneInfo);
        var selectedIds = [];
        for (var i = intersectedBBoxes.length - 1; i >= 0; i--) {
            var nn = intersectedBBoxes[i];
            var markIndex = nn.get_objectId();
            if (markIndex < 0) {
                tab.Log.get(this).warn('Mark Node has invalid mark index: ' + markIndex);
                continue;
            }
            var paneNode = tab.HitTargetNode.findPaneNode(nn);
            if (ss.isNullOrUndefined(paneNode)) {
                tab.Log.get(this).warn("Couldn't find idx #" + markIndex + "'s pane node.");
                continue;
            }
            var paneDrawInfo = sceneInfo.getPaneDrawInfoFromKey(paneNode.get_paneKey());
            var t = tab.HitTester.getTransformInfo(paneDrawInfo, nn);
            var clippedSelection = tab.RectXYUtil.intersect(this.get_hitTestingBox(), paneNode.get_boundingBox());
            var areaHit = this.shapeAreaHit(clippedSelection, paneDrawInfo, nn, t);
            if (areaHit) {
                selectedIds.push(new tab.HitTestResult(paneDrawInfo.getMarkProperty('tuple_id', markIndex), 1, 1));
            }
        }
        return selectedIds;
    },
    
    updateLastState: function tab_ShapeSelectorBase$updateLastState(shapeState) {
        if (this.isStateObjectTypeCorrect(shapeState)) {
            shapeState.updateLastState();
        }
    },
    
    getStateDiff: function tab_ShapeSelectorBase$getStateDiff(shapeState) {
        if (this.isStateObjectTypeCorrect(shapeState)) {
            this.saveCurrentState(shapeState);
            return shapeState.getStateDiff();
        }
        var changedArea = new Array(1);
        changedArea[0] = this.get_hitTestingBox();
        return changedArea;
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.ShapeStateBase

tab.ShapeStateBase = function tab_ShapeStateBase() {
}


////////////////////////////////////////////////////////////////////////////////
// tab.PresModelBrowserViewModel

tab.PresModelBrowserViewModel = function tab_PresModelBrowserViewModel(pm) {
    tab.PresModelBrowserViewModel.initializeBase(this);
    if (tab.PresModelBrowserViewModel._isObject$1(pm)) {
        if ($.isArray(pm)) {
            this.data = tab.PresModelBrowserViewModel._jsTreeChildArray$1(pm);
        }
        else {
            this.data = tab.PresModelBrowserViewModel._jsTreeChildDictionary$1(pm);
        }
    }
    else {
        this.data = pm.toString();
    }
}
tab.PresModelBrowserViewModel._isObject$1 = function tab_PresModelBrowserViewModel$_isObject$1(value) {
    return typeof(value) === 'object';
}
tab.PresModelBrowserViewModel._jsTreeChildArray$1 = function tab_PresModelBrowserViewModel$_jsTreeChildArray$1(pm) {
    var data = [];
    for (var p = 0; p < pm.length; ++p) {
        data.push(tab.PresModelBrowserViewModel._jsTreeChildElement$1(p.toString(), pm[p]));
    }
    return data;
}
tab.PresModelBrowserViewModel._jsTreeChildDictionary$1 = function tab_PresModelBrowserViewModel$_jsTreeChildDictionary$1(pm) {
    var data = [];
    var $dict1 = pm;
    for (var $key2 in $dict1) {
        var e = { key: $key2, value: $dict1[$key2] };
        data.push(tab.PresModelBrowserViewModel._jsTreeChildElement$1(e.key, e.value));
    }
    return data;
}
tab.PresModelBrowserViewModel._formatKey$1 = function tab_PresModelBrowserViewModel$_formatKey$1(key) {
    return '<strong>' + key + ':</strong> ';
}
tab.PresModelBrowserViewModel._jsTreeChildElement$1 = function tab_PresModelBrowserViewModel$_jsTreeChildElement$1(key, val) {
    if (tab.PresModelBrowserViewModel._isObject$1(val)) {
        if ($.isArray(val)) {
            return { data: tab.PresModelBrowserViewModel._formatKey$1(key), children: tab.PresModelBrowserViewModel._jsTreeChildArray$1(val) };
        }
        else {
            return { data: tab.PresModelBrowserViewModel._formatKey$1(key), children: tab.PresModelBrowserViewModel._jsTreeChildDictionary$1(val) };
        }
    }
    else {
        if (key.endsWith('Json') && ((val).startsWith('{') || (val).startsWith('['))) {
            var parsedVal = null;
            try {
                parsedVal = tab.JsonUtil.parseJson(val);
            }
            catch ($e1) {
            }
            if (ss.isValue(parsedVal)) {
                return tab.PresModelBrowserViewModel._jsTreeChildElement$1(key, parsedVal);
            }
        }
    }
    return tab.PresModelBrowserViewModel._formatKey$1(key) + val;
}
tab.PresModelBrowserViewModel.prototype = {
    data: null
}


////////////////////////////////////////////////////////////////////////////////
// tab.StepperControlViewModel

tab.StepperControlViewModel = function tab_StepperControlViewModel(min, max, stepValue, initValue) {
    tab.StepperControlViewModel.initializeBase(this);
    this._minValue$1 = min;
    this._maxValue$1 = max;
    this._step$1 = stepValue;
    this._val$1 = initValue;
    this._initValue$1 = initValue;
    this._isEnabled$1 = true;
    this._isIncrementEnabled$1 = this._val$1 < this._maxValue$1;
    this._isDecrementEnabled$1 = this._val$1 > this._minValue$1;
}
tab.StepperControlViewModel.prototype = {
    _minValue$1: 0,
    _maxValue$1: 0,
    _step$1: 0,
    _initValue$1: 0,
    _val$1: 0,
    _isEnabled$1: false,
    textClass: null,
    _isIncrementEnabled$1: false,
    _isDecrementEnabled$1: false,
    
    get_isEnabled: function tab_StepperControlViewModel$get_isEnabled() {
        return this._isEnabled$1;
    },
    set_isEnabled: function tab_StepperControlViewModel$set_isEnabled(value) {
        if (this._isEnabled$1 !== value) {
            this._isEnabled$1 = value;
            if (!this._isEnabled$1) {
                this.set_isIncrementEnabled(false);
                this.set_isDecrementEnabled(false);
            }
            else {
                this.set_value((ss.isValue(this.get_value())) ? this.get_value() : this.get_initValue());
                this.set_isIncrementEnabled(this.get_value() < this.get_max());
                this.set_isDecrementEnabled(this.get_value() > this.get_min());
            }
            this.notifyPropertyChanged('IsEnabled');
        }
        return value;
    },
    
    get_isIncrementEnabled: function tab_StepperControlViewModel$get_isIncrementEnabled() {
        return this._isIncrementEnabled$1;
    },
    set_isIncrementEnabled: function tab_StepperControlViewModel$set_isIncrementEnabled(value) {
        if (this._isIncrementEnabled$1 !== value) {
            this._isIncrementEnabled$1 = value;
            this.notifyPropertyChanged('IsIncrementEnabled');
        }
        return value;
    },
    
    get_isDecrementEnabled: function tab_StepperControlViewModel$get_isDecrementEnabled() {
        return this._isDecrementEnabled$1;
    },
    set_isDecrementEnabled: function tab_StepperControlViewModel$set_isDecrementEnabled(value) {
        if (this._isDecrementEnabled$1 !== value) {
            this._isDecrementEnabled$1 = value;
            this.notifyPropertyChanged('IsDecrementEnabled');
        }
        return value;
    },
    
    get_min: function tab_StepperControlViewModel$get_min() {
        return this._minValue$1;
    },
    
    get_max: function tab_StepperControlViewModel$get_max() {
        return this._maxValue$1;
    },
    
    get_initValue: function tab_StepperControlViewModel$get_initValue() {
        return this._initValue$1;
    },
    
    get_step: function tab_StepperControlViewModel$get_step() {
        return this._step$1;
    },
    
    get_value: function tab_StepperControlViewModel$get_value() {
        return this._val$1;
    },
    set_value: function tab_StepperControlViewModel$set_value(value) {
        if (!this._isEnabled$1) {
            return;
        }
        if (this._val$1 !== value) {
            if (ss.isValue(value) && !isNaN(value) && this.isValueWithinRange(value)) {
                this._val$1 = value;
                this.set_isIncrementEnabled(this._val$1 < this.get_max());
                this.set_isDecrementEnabled(this._val$1 > this.get_min());
            }
            this.notifyPropertyChanged('Value');
        }
        return value;
    },
    
    isValueWithinRange: function tab_StepperControlViewModel$isValueWithinRange(value) {
        return value >= this._minValue$1 && value <= this._maxValue$1;
    },
    
    increment: function tab_StepperControlViewModel$increment() {
        this.set_value(this.get_value() + this.get_step());
    },
    
    decrement: function tab_StepperControlViewModel$decrement() {
        this.set_value(this.get_value() - this.get_step());
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.IMapsSearchViewTemplate

tab.IMapsSearchViewTemplate = function() { };
tab.IMapsSearchViewTemplate.prototype = {
    get_template : null,
    get_domRoot : null,
    get_compositeSearchWidget : null
}
tab.IMapsSearchViewTemplate.registerInterface('tab.IMapsSearchViewTemplate');


////////////////////////////////////////////////////////////////////////////////
// tab.MapsSearchViewModel

tab.MapsSearchViewModel = function tab_MapsSearchViewModel(visualIdPresModel) {
    tab.MapsSearchViewModel.initializeBase(this);
    this._visualIdPresModel$1 = visualIdPresModel;
}
tab.MapsSearchViewModel.prototype = {
    _visualIdPresModel$1: null,
    
    add_receivedNewSuggestions: function tab_MapsSearchViewModel$add_receivedNewSuggestions(value) {
        this.__receivedNewSuggestions$1 = ss.Delegate.combine(this.__receivedNewSuggestions$1, value);
    },
    remove_receivedNewSuggestions: function tab_MapsSearchViewModel$remove_receivedNewSuggestions(value) {
        this.__receivedNewSuggestions$1 = ss.Delegate.remove(this.__receivedNewSuggestions$1, value);
    },
    
    __receivedNewSuggestions$1: null,
    
    add_updateTextInputValue: function tab_MapsSearchViewModel$add_updateTextInputValue(value) {
        this.__updateTextInputValue$1 = ss.Delegate.combine(this.__updateTextInputValue$1, value);
    },
    remove_updateTextInputValue: function tab_MapsSearchViewModel$remove_updateTextInputValue(value) {
        this.__updateTextInputValue$1 = ss.Delegate.remove(this.__updateTextInputValue$1, value);
    },
    
    __updateTextInputValue$1: null,
    
    add_onMoveMapToBounds: function tab_MapsSearchViewModel$add_onMoveMapToBounds(value) {
        this.__onMoveMapToBounds$1 = ss.Delegate.combine(this.__onMoveMapToBounds$1, value);
    },
    remove_onMoveMapToBounds: function tab_MapsSearchViewModel$remove_onMoveMapToBounds(value) {
        this.__onMoveMapToBounds$1 = ss.Delegate.remove(this.__onMoveMapToBounds$1, value);
    },
    
    __onMoveMapToBounds$1: null,
    
    commitToSearchString: function tab_MapsSearchViewModel$commitToSearchString(value) {
        value = value.trim();
        this.sendGeographicSearchQuery(value, 1, ss.Delegate.create(this, this.moveToTopGeographicCandidate));
    },
    
    getSuggestionsForSearchString: function tab_MapsSearchViewModel$getSuggestionsForSearchString(value) {
        this.sendGeographicSearchQuery(value, 5, ss.Delegate.create(this, this.processGeographicSuggestions));
    },
    
    moveMapToCandidateBounds: function tab_MapsSearchViewModel$moveMapToCandidateBounds(candidate) {
        if (ss.isValue(this.__updateTextInputValue$1)) {
            this.__updateTextInputValue$1(candidate);
        }
        if (ss.isValue(this.__onMoveMapToBounds$1)) {
            this.__onMoveMapToBounds$1(candidate.mapLatLongRect);
        }
        tab.PaneClientCommands.boundingBoxPan(this._visualIdPresModel$1, candidate.mapLatLongRect);
    },
    
    moveMapToSuggestionListItem: function tab_MapsSearchViewModel$moveMapToSuggestionListItem(listItem) {
        var geographicEntity = listItem.get_data();
        this.moveMapToCandidateBounds(geographicEntity);
    },
    
    moveToTopGeographicCandidate: function tab_MapsSearchViewModel$moveToTopGeographicCandidate(suggestions) {
        var allCandidates = suggestions.geographicSearchCandidateList;
        if (!allCandidates.length) {
            tab.Log.get(this).debug('No results returned');
        }
        else {
            var topCandidate = allCandidates[0];
            tab.Log.get(this).debug('Top candidate: NAME: %s, PARENT: %s, SCORE: %o, BOUNDS: %o', topCandidate.geographicSearchCandidateDisplayName, topCandidate.geographicSearchCandidateParentName, topCandidate.geographicSearchCandidateScore, tab.JsonUtil.toJson(topCandidate.mapLatLongRect));
            this.moveMapToCandidateBounds(topCandidate);
        }
    },
    
    processGeographicSuggestions: function tab_MapsSearchViewModel$processGeographicSuggestions(suggestions) {
        if (!ss.isValue(this.__receivedNewSuggestions$1)) {
            return;
        }
        var listItems = [];
        for (var i = 0; i < Math.min(suggestions.geographicSearchCandidateList.length); i++) {
            listItems.add(suggestions.geographicSearchCandidateList[i]);
        }
        this.__receivedNewSuggestions$1(suggestions.geographicSearchSearchString, listItems);
    },
    
    sendGeographicSearchQuery: function tab_MapsSearchViewModel$sendGeographicSearchQuery(value, maxNumberOfResults, resultsCallback) {
        var locale = tsConfig.workbookLocale || 'en_us';
        tab.PaneClientCommands.geographicSearchQuery(this._visualIdPresModel$1, value, locale, maxNumberOfResults, resultsCallback);
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab.MapsSearchView

tab.MapsSearchView = function tab_MapsSearchView(vm, mapsSearchViewTemplate) {
    tab.MapsSearchView.initializeBase(this, [ vm, mapsSearchViewTemplate.get_template() ]);
    this.mapsSearchViewModel = vm;
    this.mapsSearchViewTemplate = mapsSearchViewTemplate;
    this._compositeSearchWidget$2 = mapsSearchViewTemplate.get_compositeSearchWidget();
    this.set_isVisible(false);
    this.showInitialSearchText(true);
    this.get_compositeSearchWidget().get_domRoot().addClass('tabMapsSearchView');
    this.mapsSearchViewTemplate.get_domRoot().addClass(tab.MapsSearchView.widgetClassNameTranslucent);
    this.get_compositeSearchWidget().add_enterKeyPressed(ss.Delegate.create(this, this.handleEnterKeyPress));
    this.get_compositeSearchWidget().add_searchButtonClicked(ss.Delegate.create(this, this.handleSearchButtonClick));
    this.get_compositeSearchWidget().add_listItemClicked(ss.Delegate.create(this, this.handleListItemClick));
    this.get_compositeSearchWidget().get_textInputView().add_propertyChanged(ss.Delegate.create(this, this._handleInputTextChange$2));
    this.mapsSearchViewModel.add_receivedNewSuggestions(ss.Delegate.create(this, this.showNewSuggestions));
    this.mapsSearchViewModel.add_updateTextInputValue(ss.Delegate.create(this, this.updateSearchTextValue));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_compositeSearchWidget().remove_enterKeyPressed(ss.Delegate.create(this, this.handleEnterKeyPress));
        this.get_compositeSearchWidget().remove_searchButtonClicked(ss.Delegate.create(this, this.handleSearchButtonClick));
        this.get_compositeSearchWidget().remove_listItemClicked(ss.Delegate.create(this, this.handleListItemClick));
        this.get_compositeSearchWidget().get_textInputView().remove_propertyChanged(ss.Delegate.create(this, this._handleInputTextChange$2));
        this.mapsSearchViewModel.remove_receivedNewSuggestions(ss.Delegate.create(this, this.showNewSuggestions));
        this.mapsSearchViewModel.remove_updateTextInputValue(ss.Delegate.create(this, this.updateSearchTextValue));
        this._removeQueryDelayTimer$2();
    })));
    this.disposables.add(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'keydown', ss.Delegate.create(this, this._onInputElementKeyDown$2)));
    this.disposables.add(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'mousedown', ss.Delegate.create(this, this._onInputElementClick$2)));
    this.disposables.add(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'touchstart', ss.Delegate.create(this, this._onInputElementClick$2)));
    this.disposables.add(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'focus', ss.Delegate.create(this, this._onInputElementFocusIn$2)));
    this.disposables.add(spiff.EventUtil.bindWithDispose(this.get_compositeSearchWidget().get_textInputView().get_inputElement(), 'focusout', ss.Delegate.create(this, this._onInputElementFocusOut$2)));
    this.get_compositeSearchWidget().get_textInputView().get_inputElement().bind('paste', ss.Delegate.create(this, this._onInputElementPaste$2));
    this.disposables.add(new tab.CallOnDispose(ss.Delegate.create(this, function() {
        this.get_compositeSearchWidget().get_textInputView().get_inputElement().unbind('paste', ss.Delegate.create(this, this._onInputElementPaste$2));
    })));
    if (tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) {
        this.get_compositeSearchWidget().get_textInputView().get_inputElement().css('line-height', '22px');
    }
}
tab.MapsSearchView.newMapsSearchViewTemplate = function tab_MapsSearchView$newMapsSearchViewTemplate() {
    return new tab._mapsSearchViewTemplate();
}
tab.MapsSearchView.prototype = {
    mapsSearchViewModel: null,
    mapsSearchViewTemplate: null,
    _compositeSearchWidget$2: null,
    _isCollapsed$2: false,
    _isVisible$2: true,
    _previousCommittedSearchText$2: null,
    queryDelayTimer: null,
    showingInitialText: false,
    
    get_compositeSearchWidget: function tab_MapsSearchView$get_compositeSearchWidget() {
        return this._compositeSearchWidget$2;
    },
    
    get_isCollapsed: function tab_MapsSearchView$get_isCollapsed() {
        return this._isCollapsed$2;
    },
    set_isCollapsed: function tab_MapsSearchView$set_isCollapsed(value) {
        this._isCollapsed$2 = value;
        this.mapsSearchViewTemplate.get_domRoot().toggleClass(tab.MapsSearchView._widgetClassNameCollapsed$2, this._isCollapsed$2);
        return value;
    },
    
    get_isVisible: function tab_MapsSearchView$get_isVisible() {
        return this._isVisible$2;
    },
    set_isVisible: function tab_MapsSearchView$set_isVisible(value) {
        if (!!tab.FeatureParamsLookup.getBool(tab.FeatureParam.mapsSearchDebugAlwaysShow)) {
            value = true;
        }
        if (this._isVisible$2 === value) {
            return;
        }
        this._isVisible$2 = value;
        this.mapsSearchViewTemplate.get_domRoot().css('display', (this._isVisible$2) ? '' : 'none');
        return value;
    },
    
    _onInputElementClick$2: function tab_MapsSearchView$_onInputElementClick$2(e) {
        if (!this.showingInitialText) {
            return;
        }
        if ((tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9) || tab.BrowserSupport.get_isSafari()) {
            this.showInitialSearchText(false);
            return;
        }
        e.preventDefault();
        this.get_compositeSearchWidget().get_textInputView().get_inputElement().get(0).focus();
    },
    
    _onInputElementKeyDown$2: function tab_MapsSearchView$_onInputElementKeyDown$2(e) {
        if (!this.showingInitialText) {
            return;
        }
        var k = e.which;
        if (k === 20 || k === 16 || k === 9 || k === 27 || k === 17 || k === 91 || k === 19 || k === 18 || k === 93 || k === 45 || k === 34 || k === 33 || (k >= 112 && k <= 123) || (k >= 144 && k <= 145)) {
            return;
        }
        this.showInitialSearchText(false);
    },
    
    _onInputElementPaste$2: function tab_MapsSearchView$_onInputElementPaste$2(e) {
        if (!this.showingInitialText) {
            return;
        }
        this.showInitialSearchText(false);
    },
    
    _onInputElementFocusIn$2: function tab_MapsSearchView$_onInputElementFocusIn$2(e) {
        this.mapsSearchViewTemplate.get_domRoot().removeClass(tab.MapsSearchView.widgetClassNameTranslucent);
    },
    
    _onInputElementFocusOut$2: function tab_MapsSearchView$_onInputElementFocusOut$2(e) {
        this.mapsSearchViewTemplate.get_domRoot().addClass(tab.MapsSearchView.widgetClassNameTranslucent);
    },
    
    showInitialSearchText: function tab_MapsSearchView$showInitialSearchText(show) {
        if (this.showingInitialText === show) {
            return;
        }
        this.get_compositeSearchWidget().get_textInputView().set_text((show) ? tab.Strings.MapsSearchViewInitialText : '');
        this.get_compositeSearchWidget().get_textInputView().get_inputElement().toggleClass(tab.MapsSearchView._initialTextClassName$2, show);
        if (show && this._isVisible$2 && (!tab.FeatureParamsLookup.getBool(tab.FeatureParam.mapsSearchDebugAlwaysShow))) {
            tab.DomUtil.setSelectionRangeOnInput(this._compositeSearchWidget$2.get_textInputView().get_inputElement().get(0), 0, 0);
        }
        this.showingInitialText = show;
    },
    
    _handleInputTextChange$2: function tab_MapsSearchView$_handleInputTextChange$2(sender, args) {
        this._removeQueryDelayTimer$2();
        if (!this.showingInitialText && this.get_compositeSearchWidget().get_textInputView().get_text() !== this._previousCommittedSearchText$2) {
            if (!this.get_compositeSearchWidget().get_textInputView().get_text().trim().length) {
                this.get_compositeSearchWidget().removeList();
            }
            else {
                this._formatAllSuggestionsListItems$2();
                this._setQueryDelayTimer$2();
            }
        }
        this._previousCommittedSearchText$2 = null;
    },
    
    showNewSuggestions: function tab_MapsSearchView$showNewSuggestions(searchTerm, suggestionsList) {
        if ((searchTerm !== this._compositeSearchWidget$2.get_textInputView().get_text()) || ss.isNullOrUndefined(suggestionsList)) {
            return;
        }
        var suggestionsListItemViewModels = [];
        for (var itemId = 0; itemId < suggestionsList.length; itemId++) {
            var suggestion = suggestionsList[itemId];
            var BaseHtml = '<span/>';
            var listItemLabel = $(BaseHtml);
            this._formatOneSuggestionListItemLabel$2(listItemLabel, suggestion);
            suggestionsListItemViewModels.add(spiff.ListItemViewModel.newFormattedListItem(itemId.toString(), listItemLabel, suggestion));
        }
        this.get_compositeSearchWidget().showList(suggestionsListItemViewModels, this.mapsSearchViewTemplate.get_domRoot());
    },
    
    _formatAllSuggestionsListItems$2: function tab_MapsSearchView$_formatAllSuggestionsListItems$2() {
        if (!ss.isValue(this._compositeSearchWidget$2.get_listViewModel())) {
            return;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(this._compositeSearchWidget$2.get_listViewModel().get_collection());
        while ($enum1.moveNext()) {
            var listItemViewModel = $enum1.current;
            var suggestion = listItemViewModel.get_data();
            this._formatOneSuggestionListItemLabel$2(listItemViewModel.get_label(), suggestion);
        }
    },
    
    _formatOneSuggestionListItemLabel$2: function tab_MapsSearchView$_formatOneSuggestionListItemLabel$2(listItemLabel, suggestion) {
        listItemLabel.empty();
        var BaseHtml = '<span/>';
        var listItemLabelDisplayName = $(BaseHtml);
        var listItemLabelParentName = $(BaseHtml);
        listItemLabelDisplayName.addClass(tab.MapsSearchView.suggestionDisplayClassName);
        var displayName = suggestion.geographicSearchCandidateDisplayName;
        var searchText = this._compositeSearchWidget$2.get_textInputView().get_text().trimEnd();
        if (displayName.toLowerCase().startsWith(searchText.toLowerCase())) {
            var listItemLabelActiveSearchText = $(BaseHtml);
            listItemLabelActiveSearchText.addClass(tab.MapsSearchView.suggestionActiveSearchTextClassName);
            listItemLabelActiveSearchText.text(displayName.substr(0, searchText.length));
            listItemLabelDisplayName.append(listItemLabelActiveSearchText);
            var listItemLabelPlainText = $(BaseHtml);
            listItemLabelPlainText.text(displayName.substr(searchText.length));
            listItemLabelDisplayName.append(listItemLabelPlainText);
        }
        else {
            listItemLabelDisplayName.text(suggestion.geographicSearchCandidateDisplayName);
        }
        listItemLabel.append(listItemLabelDisplayName);
        listItemLabelParentName.addClass(tab.MapsSearchView.suggestionParentClassName);
        listItemLabelParentName.text(suggestion.geographicSearchCandidateParentName);
        listItemLabel.append(listItemLabelParentName);
    },
    
    handleEnterKeyPress: function tab_MapsSearchView$handleEnterKeyPress() {
        this._removeQueryDelayTimer$2();
        if (ss.isValue(this.get_compositeSearchWidget().get_listViewModel())) {
            this.mapsSearchViewModel.moveMapToCandidateBounds(this.get_compositeSearchWidget().get_listViewModel().get_collection()[0].get_data());
            this._compositeSearchWidget$2.removeList();
        }
        else {
            this.mapsSearchViewModel.commitToSearchString(this.get_compositeSearchWidget().get_textInputView().get_text());
        }
    },
    
    handleListItemClick: function tab_MapsSearchView$handleListItemClick(listItem) {
        this._removeQueryDelayTimer$2();
        this._compositeSearchWidget$2.removeList();
        this.mapsSearchViewModel.moveMapToSuggestionListItem(listItem);
    },
    
    handleSearchButtonClick: function tab_MapsSearchView$handleSearchButtonClick() {
        this._removeQueryDelayTimer$2();
        this.set_isCollapsed(!this._isCollapsed$2);
        if (!this._isCollapsed$2) {
            if (String.isNullOrEmpty(this._compositeSearchWidget$2.get_textInputView().get_text())) {
                this.showInitialSearchText(true);
            }
            this._compositeSearchWidget$2.get_textInputView().get_inputElement().focus();
            if (this.showingInitialText) {
                tab.DomUtil.setSelectionRangeOnInput(this._compositeSearchWidget$2.get_textInputView().get_inputElement().get(0), 0, 0);
            }
            else {
                this.selectAllSearchText();
            }
        }
    },
    
    _setQueryDelayTimer$2: function tab_MapsSearchView$_setQueryDelayTimer$2() {
        this.queryDelayTimer = window.setTimeout(ss.Delegate.create(this, this._queryDelayTimerCallback$2), 200);
    },
    
    _removeQueryDelayTimer$2: function tab_MapsSearchView$_removeQueryDelayTimer$2() {
        if (ss.isValue(this.queryDelayTimer)) {
            window.clearTimeout(this.queryDelayTimer);
        }
        this.queryDelayTimer = null;
    },
    
    _queryDelayTimerCallback$2: function tab_MapsSearchView$_queryDelayTimerCallback$2() {
        this.mapsSearchViewModel.getSuggestionsForSearchString(this.get_compositeSearchWidget().get_textInputView().get_text());
        this._removeQueryDelayTimer$2();
    },
    
    updateSearchTextValue: function tab_MapsSearchView$updateSearchTextValue(candidate) {
        var newSearchText = candidate.geographicSearchCandidateDisplayName;
        if (!String.isNullOrEmpty(candidate.geographicSearchCandidateParentName)) {
            newSearchText += ', ' + candidate.geographicSearchCandidateParentName;
        }
        this._previousCommittedSearchText$2 = newSearchText;
        this.get_compositeSearchWidget().get_textInputView().set_text(newSearchText);
    },
    
    selectAllSearchText: function tab_MapsSearchView$selectAllSearchText() {
        tab.DomUtil.selectAllInputText(this._compositeSearchWidget$2.get_textInputView().get_inputElement());
    },
    
    enableUserInteraction: function tab_MapsSearchView$enableUserInteraction(enable) {
        this.get_element().css('pointer-events', (enable) ? 'auto' : 'none');
    }
}


////////////////////////////////////////////////////////////////////////////////
// tab._mapsSearchViewTemplate

tab._mapsSearchViewTemplate = function tab__mapsSearchViewTemplate() {
    tab._mapsSearchViewTemplate.initializeBase(this, [ $("<div class='tabMapsSearchView'><div class='tabMapsSearchView-searchControlsContainer'></div></div>") ]);
    this._compositeSearchWidget$1 = spiff.ObjectRegistry.newView(spiff.CompositeSearchWidget, null);
    var searchControlsContainer = this.getElementBySelector('.tabMapsSearchView-searchControlsContainer');
    this._compositeSearchWidget$1.get_textInputView().addToDom(searchControlsContainer);
    this._compositeSearchWidget$1.get_searchButton().addToDom(searchControlsContainer);
    this._compositeSearchWidget$1.get_clearButton().addToDom(searchControlsContainer);
    this._compositeSearchWidget$1.get_textInputView().get_inputElement().attr('autocomplete', 'off');
    this._compositeSearchWidget$1.get_textInputView().get_inputElement().attr('autocorrect', 'off');
    this._compositeSearchWidget$1.get_textInputView().get_inputElement().attr('autocapitalize', 'off');
    this._compositeSearchWidget$1.get_textInputView().get_inputElement().attr('spellcheck', 'false');
}
tab._mapsSearchViewTemplate.prototype = {
    _compositeSearchWidget$1: null,
    
    get_template: function tab__mapsSearchViewTemplate$get_template() {
        return this;
    },
    
    get_compositeSearchWidget: function tab__mapsSearchViewTemplate$get_compositeSearchWidget() {
        return this._compositeSearchWidget$1;
    },
    
    dispose: function tab__mapsSearchViewTemplate$dispose() {
        tab._mapsSearchViewTemplate.callBaseMethod(this, 'dispose');
        this._compositeSearchWidget$1.dispose();
    }
}


tab.FormattingConverters.registerClass('tab.FormattingConverters');
tab.ApiCrossDomainPresModelsFactory.registerClass('tab.ApiCrossDomainPresModelsFactory');
tab._apiDataSourcesHandler.registerClass('tab._apiDataSourcesHandler');
tab._ApiEnumConverter.registerClass('tab._ApiEnumConverter');
tab.ApiEventHandler.registerClass('tab.ApiEventHandler', null, ss.IDisposable);
tab._apiServerResultBuilder.registerClass('tab._apiServerResultBuilder');
tab._apiFilterHandler.registerClass('tab._apiFilterHandler');
tab._apiParameterHandler.registerClass('tab._apiParameterHandler');
tab._ApiSerializer.registerClass('tab._ApiSerializer');
tab.ApiStorytellingHandler.registerClass('tab.ApiStorytellingHandler', null, ss.IDisposable);
tab.Application.registerClass('tab.Application', null, ss.IDisposable);
tab.CategoricalSelection.registerClass('tab.CategoricalSelection');
tab.ExportPdfDialog.registerClass('tab.ExportPdfDialog', spiff.ModalDialog);
tab.SheetThumbnailTemplate.registerClass('tab.SheetThumbnailTemplate', spiff.Template);
tab.ExportPdfDialogTemplate.registerClass('tab.ExportPdfDialogTemplate', spiff.Template);
tab.VizEvent.registerClass('tab.VizEvent');
tab.CanvasRenderer.registerClass('tab.CanvasRenderer');
tab.MarksRenderer.registerClass('tab.MarksRenderer', tab.CanvasRenderer);
tab.BrowserViewport.registerClass('tab.BrowserViewport');
tab.ExportHelper.registerClass('tab.ExportHelper', null, tab.IExportImageHelper, tab.IExportPdfHelper);
tab.QfButtonUtil.registerClass('tab.QfButtonUtil');
tab.ImageUtil.registerClass('tab.ImageUtil');
tab.CanvasUtil.registerClass('tab.CanvasUtil');
tab.Metrics.registerClass('tab.Metrics');
tab.LocalSearch.registerClass('tab.LocalSearch');
tab.DisplayList2DUtils.registerClass('tab.DisplayList2DUtils');
tab.GeometryUtil.registerClass('tab.GeometryUtil');
tab.HitTestResult.registerClass('tab.HitTestResult');
tab.HitTestDebugger.registerClass('tab.HitTestDebugger');
tab.VisualPartsHitTest.registerClass('tab.VisualPartsHitTest');
tab.LineMarkDrawState.registerClass('tab.LineMarkDrawState');
tab.LineAttribute.registerClass('tab.LineAttribute');
tab.HitTargetColliders.registerClass('tab.HitTargetColliders');
tab.HitTargetNode.registerClass('tab.HitTargetNode');
tab.HitTester.registerClass('tab.HitTester');
tab.HitTestStructureBuilder.registerClass('tab.HitTestStructureBuilder');
tab.RectangleGeom.registerClass('tab.RectangleGeom', null, tab.IHitTargetGeom);
tab.ModifierKeyState.registerClass('tab.ModifierKeyState', null, ss.IDisposable);
tab.PaneDrawInfo.registerClass('tab.PaneDrawInfo');
tab._textRunLayoutInfo.registerClass('tab._textRunLayoutInfo');
tab.DisplayList2DRenderer.registerClass('tab.DisplayList2DRenderer', tab.CanvasRenderer);
tab._groupStatePreserver.registerClass('tab._groupStatePreserver');
tab._contextStatePreserver.registerClass('tab._contextStatePreserver');
tab.FontNormalizer.registerClass('tab.FontNormalizer');
tab.PaneTable2DRenderer.registerClass('tab.PaneTable2DRenderer', tab.CanvasRenderer);
tab.RenderUtil.registerClass('tab.RenderUtil');
tab.TabRenderContext2D.registerClass('tab.TabRenderContext2D');
tab._extraContextState.registerClass('tab._extraContextState');
tab.SceneInfo.registerClass('tab.SceneInfo');
tab.ShapeUtil.registerClass('tab.ShapeUtil');
tab.ResolveSelectAction.registerClass('tab.ResolveSelectAction');
tableau.util.registerClass('tableau.util');
tableau.util.NoClickDelay.registerClass('tableau.util.NoClickDelay');
tab.URIUtil.registerClass('tab.URIUtil');
tab.ViewState2.registerClass('tab.ViewState2');
tab.WidgetUtil.registerClass('tab.WidgetUtil');
tab.ViewController.registerClass('tab.ViewController', null, ss.IDisposable);
tab.ApplicationViewModel.registerClass('tab.ApplicationViewModel', spiff.Widget, tab.IClient, tab.IApiStorytellingClient);
tab._applicationViewModelsClickDetector.registerClass('tab._applicationViewModelsClickDetector');
tab.ApplicationViewModelReal.registerClass('tab.ApplicationViewModelReal', spiff.BaseViewModel);
tab.ConfirmationViewModel.registerClass('tab.ConfirmationViewModel', spiff.BaseViewModel);
tab.CategoricalFilterViewModel.registerClass('tab.CategoricalFilterViewModel', spiff.BaseViewModel, tab.IFilterTypeViewModel);
tab.DownloadViewModel.registerClass('tab.DownloadViewModel', spiff.BaseViewModel, spiff.IUberPopupContent);
tab.ReferenceLineConstantValueEditorViewModel.registerClass('tab.ReferenceLineConstantValueEditorViewModel', spiff.BaseViewModel);
tab.StoryPointCaptionViewModel.registerClass('tab.StoryPointCaptionViewModel', spiff.BaseViewModel, tab.IStoryPointCaptionViewModel);
tab.HierarchicalFilterViewModel.registerClass('tab.HierarchicalFilterViewModel', spiff.BaseViewModel, tab.IFilterTypeViewModel);
tab.QuantitativeFilterViewModel.registerClass('tab.QuantitativeFilterViewModel', spiff.BaseViewModel, tab.IFilterTypeViewModel);
tab.RelativeDateFilterViewModel.registerClass('tab.RelativeDateFilterViewModel', spiff.BaseViewModel, tab.IFilterTypeViewModel);
tab.FlipboardNavigatorViewModel.registerClass('tab.FlipboardNavigatorViewModel', spiff.BaseViewModel, tab.IFlipboardNavigatorViewModel);
tab.FlipboardViewModel.registerClass('tab.FlipboardViewModel', spiff.BaseViewModel);
tab.ParameterControlViewModel.registerClass('tab.ParameterControlViewModel', spiff.BaseViewModel);
tab.QuickFilterDisplayViewModel.registerClass('tab.QuickFilterDisplayViewModel', spiff.BaseViewModel);
tab.ShareViewModel.registerClass('tab.ShareViewModel', spiff.BaseViewModel, spiff.IUberPopupContent);
tab.LegendBaseViewModel.registerClass('tab.LegendBaseViewModel', spiff.BaseViewModel);
tab.QuantitativeColorLegendViewModel.registerClass('tab.QuantitativeColorLegendViewModel', tab.LegendBaseViewModel);
tab.ImageZoneViewModel.registerClass('tab.ImageZoneViewModel', spiff.BaseViewModel);
tab.ToolbarButtonViewModel.registerClass('tab.ToolbarButtonViewModel', spiff.BaseViewModel);
tab.ToolbarViewModel.registerClass('tab.ToolbarViewModel', spiff.BaseViewModel);
tab.WebZoneViewModel.registerClass('tab.WebZoneViewModel', spiff.BaseViewModel);
tab.CategoricalLegendViewModel.registerClass('tab.CategoricalLegendViewModel', tab.LegendBaseViewModel);
tab.TextRegionViewModel.registerClass('tab.TextRegionViewModel', spiff.BaseViewModel);
tab.PageViewModel.registerClass('tab.PageViewModel', spiff.BaseViewModel);
tab.LegacyLegendViewModel.registerClass('tab.LegacyLegendViewModel', tab.LegendBaseViewModel);
tab.DashboardViewModel.registerClass('tab.DashboardViewModel', spiff.BaseViewModel);
tab.LogOnViewModel.registerClass('tab.LogOnViewModel', spiff.BaseViewModel);
tab.NotificationViewModel.registerClass('tab.NotificationViewModel', spiff.BaseViewModel);
tab.PaneTableViewModel.registerClass('tab.PaneTableViewModel', spiff.BaseViewModel);
tab.SubscribeViewModel.registerClass('tab.SubscribeViewModel', spiff.BaseViewModel);
tab.ViewingToolbarCommands.registerClass('tab.ViewingToolbarCommands', null, ss.IDisposable);
tab.VisualListViewModel.registerClass('tab.VisualListViewModel', spiff.BaseViewModel);
tab.WorkbookViewModel.registerClass('tab.WorkbookViewModel', spiff.BaseViewModel);
tab.ZoneViewModel.registerClass('tab.ZoneViewModel', spiff.BaseViewModel);
tab.ContinuousSliderViewModel.registerClass('tab.ContinuousSliderViewModel', spiff.BaseViewModel);
tab.AccordionView.registerClass('tab.AccordionView', spiff.BaseView);
tab.AccordionTemplate.registerClass('tab.AccordionTemplate', spiff.Template);
tab.AccordionItemTemplate.registerClass('tab.AccordionItemTemplate', spiff.Template);
tab.AccordionViewModel.registerClass('tab.AccordionViewModel', spiff.BaseViewModel);
tab.AccordionItem.registerClass('tab.AccordionItem');
tab._accordionItemDropTarget.registerClass('tab._accordionItemDropTarget', null, spiff.IDropTarget);
tab.DownloadView.registerClass('tab.DownloadView', spiff.BaseView);
tab.DownloadTemplate.registerClass('tab.DownloadTemplate', spiff.Template);
tab.ReferenceLineConstantValueEditorView.registerClass('tab.ReferenceLineConstantValueEditorView', spiff.BaseView);
tab._referenceLineConstantValueEditorTemplate.registerClass('tab._referenceLineConstantValueEditorTemplate', spiff.Template);
tab.ToolbarButtonView.registerClass('tab.ToolbarButtonView', spiff.BaseView);
tab.ToolbarButtonTemplate.registerClass('tab.ToolbarButtonTemplate', spiff.Template);
tab.WorkbookView.registerClass('tab.WorkbookView', spiff.BaseView);
tab.WorkbookTemplate.registerClass('tab.WorkbookTemplate', spiff.Template);
tab.BaseLegendView.registerClass('tab.BaseLegendView', spiff.BaseView);
tab.LegendTemplate.registerClass('tab.LegendTemplate', spiff.Template);
tab.CanvasView.registerClass('tab.CanvasView', spiff.BaseView, spiff.IScrollable);
tab.CanvasTemplate.registerClass('tab.CanvasTemplate', spiff.Template);
tab.ConfirmationView.registerClass('tab.ConfirmationView', spiff.BaseView);
tab.ApplicationView.registerClass('tab.ApplicationView', spiff.BaseView);
tab.ApplicationTemplate.registerClass('tab.ApplicationTemplate', spiff.Template);
tab.VisualRegionCanvasView.registerClass('tab.VisualRegionCanvasView', tab.CanvasView, tab.IRegionContentProvider);
tab.PaneTableOverlayView.registerClass('tab.PaneTableOverlayView', tab.VisualRegionCanvasView);
tab._targetObject.registerClass('tab._targetObject');
tab.PresModelBrowserView.registerClass('tab.PresModelBrowserView', spiff.BaseView);
tab.StoryPointCaptionView.registerClass('tab.StoryPointCaptionView', spiff.BaseView);
tab.StoryPointCaptionTemplate.registerClass('tab.StoryPointCaptionTemplate', spiff.Template);
tab.StoryPointCaptionContentTemplate.registerClass('tab.StoryPointCaptionContentTemplate', spiff.Template);
tab.DashboardView.registerClass('tab.DashboardView', spiff.BaseView);
tab.DashboardTemplate.registerClass('tab.DashboardTemplate', spiff.Template);
tab.FlipboardNavigatorView.registerClass('tab.FlipboardNavigatorView', spiff.BaseView);
tab.FlipboardNavigatorTemplate.registerClass('tab.FlipboardNavigatorTemplate', spiff.Template);
tab.FlipboardNavigatorPointsTemplate.registerClass('tab.FlipboardNavigatorPointsTemplate', spiff.Template);
tab.FlipboardView.registerClass('tab.FlipboardView', spiff.BaseView);
tab.FlipboardTemplate.registerClass('tab.FlipboardTemplate', spiff.Template);
tab.PaneTableView.registerClass('tab.PaneTableView', spiff.BaseView);
tab.PaneTableTemplate.registerClass('tab.PaneTableTemplate', spiff.Template);
tab.MapAttributionTemplate.registerClass('tab.MapAttributionTemplate', spiff.Template);
tab.ParameterControlView.registerClass('tab.ParameterControlView', spiff.BaseView);
tab.ParameterControlTemplate.registerClass('tab.ParameterControlTemplate', spiff.Template);
tab.QuantitativeColorLegendView.registerClass('tab.QuantitativeColorLegendView', tab.BaseLegendView);
tab.QuantitativeColorLegendTemplate.registerClass('tab.QuantitativeColorLegendTemplate', tab.LegendTemplate);
tab.ImageZoneView.registerClass('tab.ImageZoneView', spiff.BaseView);
tab.ImageZoneTemplate.registerClass('tab.ImageZoneTemplate', spiff.Template);
tab.FilterWidget.registerClass('tab.FilterWidget', dijit._Widget);
tab.QuantitativeFilter.registerClass('tab.QuantitativeFilter', tab.FilterWidget);
tab.QuantitativeDateFilter.registerClass('tab.QuantitativeDateFilter', tab.QuantitativeFilter);
tab.QuickFilterDisplayView.registerClass('tab.QuickFilterDisplayView', spiff.BaseView);
tab.QuickFilterDisplayTemplate.registerClass('tab.QuickFilterDisplayTemplate', spiff.Template);
tab.ToolbarView.registerClass('tab.ToolbarView', spiff.BaseView);
tab.ToolbarTemplate.registerClass('tab.ToolbarTemplate', spiff.Template);
tab.WebZoneView.registerClass('tab.WebZoneView', spiff.BaseView);
tab.WebZoneTemplate.registerClass('tab.WebZoneTemplate', spiff.Template);
tab.CategoricalLegendView.registerClass('tab.CategoricalLegendView', tab.BaseLegendView);
tab.CategoricalLegendColumnHtmlTemplate.registerClass('tab.CategoricalLegendColumnHtmlTemplate', spiff.Template);
tab.CategoricalLegendItemHtmlTemplate.registerClass('tab.CategoricalLegendItemHtmlTemplate', spiff.Template);
tab.CategoricalLegendTemplate.registerClass('tab.CategoricalLegendTemplate', tab.LegendTemplate);
tab._hackyShapeSwatchRenderer.registerClass('tab._hackyShapeSwatchRenderer', tab.MarksRenderer);
tab.LegacyLegendView.registerClass('tab.LegacyLegendView', tab.BaseLegendView);
tab.LegacyLegendTemplate.registerClass('tab.LegacyLegendTemplate', tab.LegendTemplate);
tab.PageView.registerClass('tab.PageView', spiff.BaseView);
tab.PageTemplate.registerClass('tab.PageTemplate', spiff.Template);
tab.ShareView.registerClass('tab.ShareView', spiff.BaseView);
tab.ShareTemplate.registerClass('tab.ShareTemplate', spiff.Template);
tab.SimpleRegionCanvasView.registerClass('tab.SimpleRegionCanvasView', tab.VisualRegionCanvasView);
tab.LogOnView.registerClass('tab.LogOnView', spiff.BaseView);
tab.NotificationView.registerClass('tab.NotificationView', spiff.BaseView);
tab.PaneTableCanvasView.registerClass('tab.PaneTableCanvasView', tab.VisualRegionCanvasView);
tab.SubscribeView.registerClass('tab.SubscribeView', spiff.BaseView);
tab.ZoneView.registerClass('tab.ZoneView', spiff.BaseView);
tab.ZoneTemplate.registerClass('tab.ZoneTemplate', spiff.Template);
tab.ActionExecutedEventArgs.registerClass('tab.ActionExecutedEventArgs', ss.EventArgs);
tab.TextRegionView.registerClass('tab.TextRegionView', spiff.BaseView);
tab.TextRegionTemplate.registerClass('tab.TextRegionTemplate', spiff.Template);
tab.TiledImageViewModel.registerClass('tab.TiledImageViewModel', spiff.BaseViewModel);
tab.TiledImageView.registerClass('tab.TiledImageView', spiff.BaseView, spiff.IScrollable);
tab.TiledImageTemplate.registerClass('tab.TiledImageTemplate', spiff.Template);
tab.ComboBoxView.registerClass('tab.ComboBoxView', spiff.BaseView);
tab.ComboBoxTemplate.registerClass('tab.ComboBoxTemplate', spiff.Template);
tab.ComboBoxViewModel.registerClass('tab.ComboBoxViewModel', spiff.BaseViewModel);
tab.ComboBoxItem.registerClass('tab.ComboBoxItem');
tab.CustomComboBoxItem.registerClass('tab.CustomComboBoxItem', tab.ComboBoxItem);
tab.ComboBoxMenuTheme.registerClass('tab.ComboBoxMenuTheme', spiff.MenuViewTheme);
tab.ComboBoxDropdownMenuTheme.registerClass('tab.ComboBoxDropdownMenuTheme', spiff.MenuViewTheme);
tab.AuthorByline.registerClass('tab.AuthorByline', null, ss.IDisposable);
tab.CategoricalFilter.registerClass('tab.CategoricalFilter', tab.FilterWidget, tab.IQuickfilterOfSearchWidget, tab.ICategoricalSelectionWidget);
tab.BaseMode.registerClass('tab.BaseMode', Object, ss.IDisposable);
tab.BaseDropdown.registerClass('tab.BaseDropdown', tab.BaseMode);
tab.CheckDropdown.registerClass('tab.CheckDropdown', tab.BaseDropdown);
tab.Checklist.registerClass('tab.Checklist', tab.BaseMode);
tab.HierarchicalFilter.registerClass('tab.HierarchicalFilter', tab.FilterWidget, tab.IQuickfilterOfSearchWidget);
tab.Pattern.registerClass('tab.Pattern', tab.BaseMode);
tab.SimpleDropdown.registerClass('tab.SimpleDropdown', tab.BaseDropdown);
tab.SliderCatmode.registerClass('tab.SliderCatmode', tab.BaseMode);
tab.TypeInCatmode.registerClass('tab.TypeInCatmode', tab.BaseMode);
tab.Radiolist.registerClass('tab.Radiolist', tab.BaseMode);
tab.CommandExecutedEventArgs.registerClass('tab.CommandExecutedEventArgs', ss.EventArgs);
tab.ConditionalsWidget.registerClass('tab.ConditionalsWidget', dijit._Widget);
tab.ContinuousSlider.registerClass('tab.ContinuousSlider', spiff.BaseView);
tab._continuousSliderTemplate.registerClass('tab._continuousSliderTemplate', spiff.Template);
tab.CurrentPagePanel.registerClass('tab.CurrentPagePanel', dijit._Widget);
tab.CustomViewsPanel.registerClass('tab.CustomViewsPanel', spiff.Widget);
tab.CustomViewsViewModel.registerClass('tab.CustomViewsViewModel');
tab.CustomizedViewChange.registerClass('tab.CustomizedViewChange');
tab.DateFilterWidget.registerClass('tab.DateFilterWidget', tab.FilterWidget);
tab.DatePicker.registerClass('tab.DatePicker', spiff.Widget);
tab.DatePickerSettings.registerClass('tab.DatePickerSettings');
tab.DojoWidgets.registerClass('tab.DojoWidgets');
tableau.FilterItem.registerClass('tableau.FilterItem');
tab.FilterItemUtil.registerClass('tab.FilterItemUtil');
tab.FilterPanel.registerClass('tab.FilterPanel', dijit._Widget, ss.IDisposable);
tab.FloatingZoomToolbar.registerClass('tab.FloatingZoomToolbar', spiff.Widget);
tab.IteratorButtons.registerClass('tab.IteratorButtons', null, ss.IDisposable);
tab.IteratorButtonTemplate.registerClass('tab.IteratorButtonTemplate', spiff.Template);
tab.HorizontalIteratorButtonTemplate.registerClass('tab.HorizontalIteratorButtonTemplate', tab.IteratorButtonTemplate);
tab.VerticalIteratorButtonTemplate.registerClass('tab.VerticalIteratorButtonTemplate', tab.IteratorButtonTemplate);
tab.IDropDownSelect.registerClass('tab.IDropDownSelect', Object);
tab.DownloadQueue.registerClass('tab.DownloadQueue');
tab._downloadWorker.registerClass('tab._downloadWorker');
tab.ImageDownloaderImageData.registerClass('tab.ImageDownloaderImageData');
tab.ImageLoadedEventArgs.registerClass('tab.ImageLoadedEventArgs', ss.EventArgs);
tab.WorkerDoneEventArgs.registerClass('tab.WorkerDoneEventArgs', ss.EventArgs);
tab.WorkerTimeoutEventArgs.registerClass('tab.WorkerTimeoutEventArgs', ss.EventArgs);
tab.LeafletMapControl.registerClass('tab.LeafletMapControl', null, ss.IDisposable);
tab._leafletMapTemplate.registerClass('tab._leafletMapTemplate', spiff.Template);
tab.ZoomComputer.registerClass('tab.ZoomComputer');
tab.DialogUnderlay.registerClass('tab.DialogUnderlay', dijit.DialogUnderlay);
tab.LegacyDialog.registerClass('tab.LegacyDialog', dijit.Dialog);
tab.SearchWidgetBase.registerClass('tab.SearchWidgetBase', dijit._Widget, tab.ISearchWidget);
tab.FilteringSearchWidget.registerClass('tab.FilteringSearchWidget', tab.SearchWidgetBase);
tab.OverlayImage.registerClass('tab.OverlayImage', spiff.Widget, tab.IMovable);
tab.OverlayPanel.registerClass('tab.OverlayPanel', spiff.Widget);
tab.ParameterControl.registerClass('tab.ParameterControl', dijit._Widget);
tab.ParamUIBase.registerClass('tab.ParamUIBase', Object, ss.IDisposable);
tab.ParamUITypeIn.registerClass('tab.ParamUITypeIn', tab.ParamUIBase);
tab.ParamUITypeInDateField.registerClass('tab.ParamUITypeInDateField', tab.ParamUITypeIn);
tab.ParamUICompact.registerClass('tab.ParamUICompact', tab.ParamUIBase);
tab.ParamUIList.registerClass('tab.ParamUIList', tab.ParamUIBase);
tab.ParamUISlider.registerClass('tab.ParamUISlider', tab.ParamUIBase);
tab.PendingChangesManager.registerClass('tab.PendingChangesManager');
tab.RelativeDateFilter.registerClass('tab.RelativeDateFilter', tab.DateFilterWidget, ss.IDisposable);
tab.RelativeDatePickFilter.registerClass('tab.RelativeDatePickFilter', tab.FilterWidget, ss.IDisposable);
tab.SearchWidget.registerClass('tab.SearchWidget', tab.SearchWidgetBase, tab.ICategoricalSelectionWidget);
tab.ShareDialog.registerClass('tab.ShareDialog', tab.LegacyDialog);
tab.ShareDialogUtil.registerClass('tab.ShareDialogUtil');
tab.ShownEventArgs.registerClass('tab.ShownEventArgs', ss.EventArgs);
tab.Slider.registerClass('tab.Slider', null, tab.ISlider, ss.IDisposable);
tab.SmallSearchWidget.registerClass('tab.SmallSearchWidget', tab.SearchWidgetBase);
tab.Social.registerClass('tab.Social');
tab.StepperControlView.registerClass('tab.StepperControlView', spiff.BaseView);
tab.StepperControlTemplate.registerClass('tab.StepperControlTemplate', spiff.Template);
tab.TabbedNavigation.registerClass('tab.TabbedNavigation', dijit._Widget);
tab.TabEventArgs.registerClass('tab.TabEventArgs', ss.EventArgs);
tab.TabView.registerClass('tab.TabView', spiff.Widget);
tab.TiledViewerRegion.registerClass('tab.TiledViewerRegion');
tab._controlledAnimation.registerClass('tab._controlledAnimation');
tab.SimpleListContentFormatter.registerClass('tab.SimpleListContentFormatter', null, tab.IContentFormatter);
tab.ChecklistContentFormatter.registerClass('tab.ChecklistContentFormatter', tab.SimpleListContentFormatter);
tab.ContentFetchedEventArgs.registerClass('tab.ContentFetchedEventArgs', ss.EventArgs);
tab.FetchInfo.registerClass('tab.FetchInfo');
tab.FilterContentFetcher.registerClass('tab.FilterContentFetcher', null, tab.IContentFetcher);
tab.FilterListUI.registerClass('tab.FilterListUI', null, tab.ITiledWidgetUI);
tab.ListGridModel.registerClass('tab.ListGridModel', null, tab.ITiledGridModel);
tab.RadiolistContentFormatter.registerClass('tab.RadiolistContentFormatter', tab.ChecklistContentFormatter);
tab.ScrolledEventArgs.registerClass('tab.ScrolledEventArgs', ss.EventArgs);
tab.TiledWidget.registerClass('tab.TiledWidget');
tab.TiledWidgetFactory.registerClass('tab.TiledWidgetFactory');
tab._tileInfo.registerClass('tab._tileInfo');
tab.TiledWindow.registerClass('tab.TiledWindow', null, tab.IRegionContentProvider, spiff.IScrollable);
tab._versionedImageElement.registerClass('tab._versionedImageElement');
tab.ToggleSwitch.registerClass('tab.ToggleSwitch');
tab.ToolbarButton.registerClass('tab.ToolbarButton', spiff.Widget);
tab.ToolbarIconButton.registerClass('tab.ToolbarIconButton', tab.ToolbarButton);
tab.ToolbarTextButton.registerClass('tab.ToolbarTextButton', tab.ToolbarButton);
tab.Tooltip.registerClass('tab.Tooltip', spiff.Widget, tab.IMovable);
tab.TooltipTemplate.registerClass('tab.TooltipTemplate', spiff.Template);
tab.TreeSupport.registerClass('tab.TreeSupport');
tab.TreeNode.registerClass('tab.TreeNode', dijit._TreeNode, ss.IDisposable);
tab.Tree.registerClass('tab.Tree', dijit.Tree);
tab.TypeIn.registerClass('tab.TypeIn', null, ss.IDisposable);
tab.TypeInDateField.registerClass('tab.TypeInDateField', tab.TypeIn);
tab.TypeInFilterContents.registerClass('tab.TypeInFilterContents', dijit._Widget);
tab.Ubertip.registerClass('tab.Ubertip', spiff.Widget);
tab.OnClickOverride.registerClass('tab.OnClickOverride', dijit.MenuItem);
tab.UIMenuItem.registerClass('tab.UIMenuItem', tab.OnClickOverride);
tab.IMenuItem.registerClass('tab.IMenuItem', tab.UIMenuItem);
tab.UICheckedMenuItem.registerClass('tab.UICheckedMenuItem', tab.OnClickOverride);
tab.ViewingToolbar.registerClass('tab.ViewingToolbar', null, ss.IDisposable);
tab.WidgetStyle.registerClass('tab.WidgetStyle');
tab.FormattingStyleInfo.registerClass('tab.FormattingStyleInfo');
tab.DisabledTooltipBehavior.registerClass('tab.DisabledTooltipBehavior', null, tab.ITooltipBehavior, ss.IDisposable);
tab.TooltipBaseMode.registerClass('tab.TooltipBaseMode');
tab.TooltipContextProvider.registerClass('tab.TooltipContextProvider');
tab.TooltipDisabledMode.registerClass('tab.TooltipDisabledMode', tab.TooltipBaseMode);
tab.TooltipBaseLegacyMode.registerClass('tab.TooltipBaseLegacyMode', tab.TooltipBaseMode);
tab.TooltipResponsiveMode.registerClass('tab.TooltipResponsiveMode', tab.TooltipBaseMode);
tab.SmoothTooltipBehavior.registerClass('tab.SmoothTooltipBehavior', null, tab.ITooltipBehavior, ss.IDisposable);
tab.NotificationCommandRedirectHandler.registerClass('tab.NotificationCommandRedirectHandler');
tab.ReferenceLineConstantValueQuickEditCommandRedirectHandler.registerClass('tab.ReferenceLineConstantValueQuickEditCommandRedirectHandler');
tab.ConfirmationCommandRedirectHandler.registerClass('tab.ConfirmationCommandRedirectHandler');
tab.ShapeSelectorBase.registerClass('tab.ShapeSelectorBase');
tab.CircleShapeSelector.registerClass('tab.CircleShapeSelector', tab.ShapeSelectorBase);
tab.ShapeStateBase.registerClass('tab.ShapeStateBase');
tab.CircleShapeState.registerClass('tab.CircleShapeState', tab.ShapeStateBase);
tab.PolyShapeSelector.registerClass('tab.PolyShapeSelector', tab.ShapeSelectorBase);
tab.PolyShapeState.registerClass('tab.PolyShapeState', tab.ShapeStateBase);
tab.RectShapeSelector.registerClass('tab.RectShapeSelector', tab.ShapeSelectorBase);
tab.RectShapeState.registerClass('tab.RectShapeState', tab.ShapeStateBase);
tab.PresModelBrowserViewModel.registerClass('tab.PresModelBrowserViewModel', spiff.BaseViewModel);
tab.StepperControlViewModel.registerClass('tab.StepperControlViewModel', spiff.BaseViewModel);
tab.MapsSearchViewModel.registerClass('tab.MapsSearchViewModel', spiff.BaseViewModel);
tab.MapsSearchView.registerClass('tab.MapsSearchView', spiff.BaseView);
tab._mapsSearchViewTemplate.registerClass('tab._mapsSearchViewTemplate', spiff.Template, tab.IMapsSearchViewTemplate, ss.IDisposable);
tab.FormattingConverters._weightConversionArray = [ new ss.Tuple('thin', '100'), new ss.Tuple('extra-light', '200'), new ss.Tuple('extra light', '200'), new ss.Tuple('light', '300'), new ss.Tuple('normal', '400'), new ss.Tuple('regular', '400'), new ss.Tuple('book', '400'), new ss.Tuple('medium', '500'), new ss.Tuple('demi-bold', '600'), new ss.Tuple('semi-bold', '600'), new ss.Tuple('demi', '600'), new ss.Tuple('bold', '700'), new ss.Tuple('heavy', '800'), new ss.Tuple('black', '900') ];
tab.FormattingConverters._stretchConversionArray = [ new ss.Tuple('compressed', 'extra-condensed'), new ss.Tuple('narrow', 'condensed'), new ss.Tuple('condensed', 'condensed') ];
tab.FormattingConverters._styleConversionArray = [ new ss.Tuple('italic', 'italic') ];
tab.Application._instance = null;
tab.Application._started = false;
tab.Application.__starting = null;
tab.Application.__started = null;
tab.ExportPdfDialog._localizedTemplate$3 = null;
(function () {
    spiff.ObjectRegistry.registerType(tab.ExportPdfDialog, tab.ExportPdfDialog);
})();
tab.SheetThumbnailTemplate.template = "\n<li class='tab-pdfdlg-sheet'>\n    <button class='tab-pdfdlg-thumbnail-button'>\n        <span class='tab-pdfdlg-button-icon tab-pdfdlg-thumbnail'></span>\n        <div class='tab-pdfdlg-note'></div>\n    </button>\n</li>";
tab.ExportPdfDialogTemplate.template = "\n<div class='tab-pdfdlg-body'>\n    <div class='tab-pdfdlg-select-group'>\n        <div class='pdf-only tab-pdfdlg-selector'>\n            <label for='pdfdlgPageSize'>{0}:</label><br />\n            <select id='pdfdlgPageSize' name='pageSize'></select>\n        </div>\n        <div class='png-only tab-pdfdlg-selector'>\n            <label for='pdfdlgImageSize'>{1}:</label><br />\n            <input name='imageHeight'></input>\n            <input name='imageWidth'></input>\n        </div>\n        <div class='tab-pdfdlg-selector'>\n            <label for='pdfdlgScaling'>{2}:</label><br />\n            <select id='pdfdlgScaling' name='scaling'></select>\n        </div>\n    </div>\n    <h3 class='pdf-only'>{3}:</h3>\n    <div class='tab-pdfdlg-button-group tab-pdfdlg-group-orientation'>\n        <button class='left pdf-only' name='orientation' value='portrait'>\n            <span class='tab-pdfdlg-portrait-icon tab-pdfdlg-button-icon'></span>\n            <div class='tab-pdfdlg-note'>{4}</div>\n        </button><button class='right pdf-only' name='orientation' value='landscape'>\n            <span class='tab-pdfdlg-landscape-icon tab-pdfdlg-button-icon'></span>\n            <div class='tab-pdfdlg-note'>{5}</div>\n        </button>\n    </div>\n    <h3>{6}:</h3>\n    <div>\n        <div class='tab-pdfdlg-button-group tab-pdfdlg-dashboard-content-mode'>\n            <button class='selected left' name='dashboard-content' value='dashboard'>\n                <span class='tab-pdfdlg-dashboard-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{8}</div>\n            </button><button class='' name='dashboard-content' value='all-dashboard'>\n                <span class='tab-pdfdlg-dash-sheets-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{7}</div>\n            </button><button class='right' name='dashboard-content' value='all'>\n                <span class='tab-pdfdlg-workbook-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{9}</div>\n            </button>\n        </div>\n        <div class='tab-pdfdlg-button-group tab-pdfdlg-story-content-mode'>\n            <button class='left selected' name='story-content' value='this-sheet'>\n                <span class='tab-pdfdlg-story-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{12}</div>\n            </button><button class='right' name='story-content' value='all'>\n                <span class='tab-pdfdlg-workbook-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{9}</div>\n            </button>\n        </div>\n        <div class='tab-pdfdlg-button-group tab-pdfdlg-worksheet-content-mode'>\n            <button class='left selected' name='worksheet-content' value='this-sheet'>\n                <span class='tab-pdfdlg-worksheet-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{10}</div>\n            </button><button class='right' name='worksheet-content' value='all'>\n                <span class='tab-pdfdlg-workbook-icon tab-pdfdlg-button-icon'></span>\n                <div class='tab-pdfdlg-note'>{9}</div>\n            </button>\n        </div>\n    </div>\n    <h3>{11}:</h3>\n    <div class='tab-pdfdlg-sheets-container'>\n        <ul class='tab-pdfdlg-sheet-list'></ul>\n    </div>\n    <div class='tab-dialog-footer'>\n        <div class='tab-pdfdlg-status'>\n            <img class='tab-pdfdlg-spinner' src='/images/30x30REV.gif' />\n            <span class='tab-dialog-status-msg'></span>\n        </div>\n        <div class='tab-dialog-actions'></div>\n    </div>\n</div>";
tab.VizEvent.__mobileVizExpandTransform = null;
tab.VizEvent.__mobileVizReduceTransform = null;
tab.BrowserViewport._layoutInfoCallback = null;
tab.BrowserViewport._vizOffset = null;
tab.BrowserViewport._isMessageHandlerAttached = false;
(function () {
    if (tabBootstrap.Utility.get_embedMode() === 'embeddedNotInWg') {
        tab.BrowserViewport.get__log().debug('Adding layoutinfo message handler');
        if (ss.isValue(window.addEventListener)) {
            window.self.addEventListener('message', tab.BrowserViewport._handleMessage, false);
        }
        else {
            window.self.attachEvent('onmessage', tab.BrowserViewport._handleMessage);
        }
        tab.BrowserViewport._isMessageHandlerAttached = true;
    }
    if (tab.BrowserSupport.get_isIE()) {
        tab.BrowserViewport._addUnloadHandler();
    }
})();
tab.GeometryUtil.halfPI = 0.5 * Math.PI;
tab.GeometryUtil.onePI = Math.PI;
tab.GeometryUtil.oneAndHalfPI = 1.5 * Math.PI;
tab.GeometryUtil.twoPI = 2 * Math.PI;
tab.GeometryUtil._maxWedgeIntersectionAngle = Math.PI * 0.15;
tab.HitTestDebugger._instance = null;
tab.HitTestDebugger._binAlternation = 0;
tab.VisualPartsHitTest.visualPartNearHitTestExpansionPixels = 7;
tab.HitTargetColliders.simpleRectangleCollider = null;
(function () {
    tab.HitTargetColliders.simpleRectangleCollider = function(geom, selectionRect) {
        var left1 = geom.get_geom().x;
        var right1 = geom.get_geom().x + geom.get_geom().w;
        var top1 = geom.get_geom().y;
        var bottom1 = geom.get_geom().y + geom.get_geom().h;
        var left2 = selectionRect.x;
        var right2 = selectionRect.x + selectionRect.w;
        var top2 = selectionRect.y;
        var bottom2 = selectionRect.y + selectionRect.h;
        if (bottom1 < top2) {
            return false;
        }
        if (top1 > bottom2) {
            return false;
        }
        if (right1 < left2) {
            return false;
        }
        if (left1 > right2) {
            return false;
        }
        return true;
    };
})();
tab.PaneDrawInfo.renderPassOrder = [ 'normalUnderPass', 'normalOnPass', 'highlightedUnderPass', 'highlightedOnPass', 'selectedUnderPass', 'selectedOnPass' ];
tab.PaneDrawInfo.drawRoleOrder = [ 'background', 'marks', 'underLabel', 'label', 'foreground' ];
tab.PaneDrawInfo.shapeMapping = { '0': 'shapeIDCircle', '1': 'shapeIDSquare', '2': 'shapeIDPlus', '3': 'shapeIDTimes', '4': 'shapeIDAsterisk', '5': 'shapeIDDiamond', '6': 'shapeIDTriangle', '7': 'shapeIDDownTriangle', '8': 'shapeIDLeftTriangle', '9': 'shapeIDRightTriangle', '4194304': 'shapeIDFilledCircle', '4194305': 'shapeIDFilledSquare', '4194306': 'shapeIDFilledPlus', '4194307': 'shapeIDFilledTimes', '4194308': 'shapeIDFilledStar', '4194309': 'shapeIDFilledDiamond', '4194310': 'shapeIDFilledTriangle', '4194311': 'shapeIDFilledDownTriangle', '4194312': 'shapeIDFilledLeftTriangle', '4194313': 'shapeIDFilledRightTriangle', '-4194304': 'shapeIDUnscaledFilledCircle' };
tab.PaneDrawInfo._markColorIndexKey = 'color' + '_idx';
tab.PaneDrawInfo._combinedFontTerms = [ 'font', 'font_size', 'font_style', 'font_weight' ];
tab.PaneDrawInfo._colorTypeNames = [ 'color', 'border_color', 'halo_color', 'selected_halo_color', 'highlighted_halo_color', 'selected_multi_prim_halo_color', 'text_style_color', 'background_color' ];
tab.PaneDrawInfo._columnsToConvertToXDomainCoords = [ 'x', 'x1', 'x_prev', 'x_next', 'cell_x' ];
tab.PaneDrawInfo._columnsToConvertToWidthDomainCoords = [ 'clip_width' ];
tab.PaneDrawInfo._columnsToConvertToYDomainCoords = [ 'y', 'y1', 'y_prev', 'y_next', 'cell_y' ];
tab.PaneDrawInfo._columnsToConvertToHeightDomainCoords = [ 'clip_height' ];
tab.PaneDrawInfo._paneFlagMapping = null;
tab.PaneDrawInfo._markFlagMapping = null;
tab.PaneDrawInfo._floatColumnsMappedToInt = { theta: tab.$create_PointF(0, 1), theta1: tab.$create_PointF(0, 1), size: tab.$create_PointF(0, 4096), text_run_x: tab.$create_PointF(0, 4096), text_run_direction_x: tab.$create_PointF(0, 4096), text_run_y: tab.$create_PointF(0, 4096), text_run_direction_y: tab.$create_PointF(0, 4096) };
(function () {
    tab.PaneDrawInfo._paneFlagMapping = {};
    tab.PaneDrawInfo._paneFlagMapping['enable-pan-x'] = 1 << 0;
    tab.PaneDrawInfo._paneFlagMapping['enable-pan-y'] = 1 << 1;
    tab.PaneDrawInfo._paneFlagMapping['enable-zoom-x'] = 1 << 2;
    tab.PaneDrawInfo._paneFlagMapping['enable-zoom-y'] = 1 << 3;
    tab.PaneDrawInfo._paneFlagMapping['enable-scale-x'] = 1 << 4;
    tab.PaneDrawInfo._paneFlagMapping['enable-scale-y'] = 1 << 5;
    tab.PaneDrawInfo._paneFlagMapping['clip-to-cell-x'] = 1 << 6;
    tab.PaneDrawInfo._paneFlagMapping['clip-to-cell-y'] = 1 << 7;
    tab.PaneDrawInfo._paneFlagMapping['clip-to-cell-for-selection'] = 1 << 8;
    tab.PaneDrawInfo._paneFlagMapping['x-axis-on-top'] = 1 << 9;
    tab.PaneDrawInfo._paneFlagMapping['y-axis-on-right'] = 1 << 10;
    tab.PaneDrawInfo._paneFlagMapping['has-cells-x'] = 1 << 11;
    tab.PaneDrawInfo._paneFlagMapping['has-cells-y'] = 1 << 12;
    tab.PaneDrawInfo._markFlagMapping = {};
    tab.PaneDrawInfo._markFlagMapping['end'] = 1 << 0;
    tab.PaneDrawInfo._markFlagMapping['endprimitive'] = 1 << 1;
    tab.PaneDrawInfo._markFlagMapping['closedprimitive'] = 1 << 2;
    tab.PaneDrawInfo._markFlagMapping['marked'] = 1 << 3;
    tab.PaneDrawInfo._markFlagMapping['markediflabel'] = 1 << 4;
    tab.PaneDrawInfo._markFlagMapping['debug'] = 1 << 7;
    tab.PaneDrawInfo._markFlagMapping['user'] = 1 << 16;
    var $enum1 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo._columnsToConvertToXDomainCoords);
    while ($enum1.moveNext()) {
        var xColName = $enum1.current;
        tab.PaneDrawInfo._floatColumnsMappedToInt[xColName] = tab.$create_PointF(0, 0);
    }
    var $enum2 = ss.IEnumerator.getEnumerator(tab.PaneDrawInfo._columnsToConvertToYDomainCoords);
    while ($enum2.moveNext()) {
        var yColName = $enum2.current;
        tab.PaneDrawInfo._floatColumnsMappedToInt[yColName] = tab.$create_PointF(0, 0);
    }
})();
tab.CanvasRenderer.halfPI = 0.5 * Math.PI;
tab.CanvasRenderer.onePI = Math.PI;
tab.CanvasRenderer.oneAndHalfPI = 1.5 * Math.PI;
tab.CanvasRenderer.twoPI = 2 * Math.PI;
tab.CanvasRenderer.angleEpsilon = 0.000174;
tab.DisplayList2DRenderer._scrollableXParts$1 = [ 'x-labels', 'bottom-axis', 'top-axis' ];
tab.DisplayList2DRenderer._scrollableYParts$1 = [ 'y-labels', 'left-axis', 'right-axis' ];
tab.FontNormalizer._instance = null;
tab.FontNormalizer._fontMap = null;
tab.TabRenderContext2D.defaultColor = 'rgb(0,0,0)';
tab.TabRenderContext2D.defaultLinePattern = 'solid';
tab.TabRenderContext2D.defaultLineDashDashed = [ 3, 1 ];
tab.TabRenderContext2D.defaultLineDashDotted = [ 1, 1 ];
tab.TabRenderContext2D.defaultLineWidth = 1;
tab.TabRenderContext2D.defaultLineJoin = 'bevel';
tab.TabRenderContext2D.defaultLineCap = 'butt';
tab.TabRenderContext2D.defaultTextColor = 'rgb(0,0,0)';
tab.TabRenderContext2D.defaultTextBaseline = 'alphabetic';
tab.TabRenderContext2D.defaultTextAlign = 'start';
tab.TabRenderContext2D.defaultTextAngle = 0;
tab.TabRenderContext2D.defaultFontName = 'Arial';
tab.TabRenderContext2D.defaultFontSize = 8;
tab.TabRenderContext2D.defaultTextUnderline = false;
tableau.util._deferredCalls = [];
tableau.util.bIsAnimationShown = false;
tableau.util.has3D = window.WebKitCSSMatrix !== undefined && new WebKitCSSMatrix().m11 !== undefined;
(function () {
    if (tab.BrowserSupport.get_isMac()) {
        dojo.addClass(document.documentElement, 'tb_mac');
    }
})();
tab.ReferenceLineConstantValueEditorViewModel.__showReferenceLineConstantValueEditor$1 = null;
tab.ShareViewModel.currentViewPath = '/shared/';
tab.ShareViewModel._defaultFacebookUrl$1 = 'http://facebook.com';
tab.QuantitativeColorLegendViewModel.modelChangedProperty = 'ModelChanged';
tab.LegendBaseViewModel.horizontalIteratorButtonSize = 12;
tab.LegendBaseViewModel.horizontalIteratorButtonHolderWidth = 2 * (12 + 2);
tab.LegendBaseViewModel.parentZoneSizeChangedKey = 'ParentZoneSizeChanged';
tab.LegendBaseViewModel.newZoneParentKey = 'newZoneParent';
tab.CategoricalLegendViewModel._defaultBackgroundColor$2 = new tab.ColorModel(0, 0, 0, 1);
tab.PaneTableViewModel.blackListVisualParts = [ 'left-axis', 'right-axis', 'y-labels', 'x-labels', 'top-axis', 'bottom-axis', 'title', 'caption' ];
tab.SubscribeViewModel.modeEmail = 0;
tab.SubscribeViewModel.modeSubscribe = 1;
tab.ViewingToolbarCommands._uriPattern = new RegExp('^https?://[^/]+(.*)$');
tab.VisualListViewModel.propertyHoverNode = 'HoverNode';
tab.ZoneViewModel.isActiveZonePropertyName = 'isActiveZone';
tab.AccordionViewModel.propertyActiveItem = 'ActiveItem';
tab.AccordionViewModel.propertyAllItems = 'AllItems';
(function () {
    spiff.ObjectRegistry.registerType(tab.DownloadView, tab.DownloadView);
})();
tab.DownloadTemplate._htmlTemplate$1 = "<div class='tab-downloadView tab-toolbarFlyout'>" + "<div class='tab-downloadApplication'>" + "<div class='tab-explanationTitle' />" + "<div class='tab-explanationBody' />" + "<div class='tab-downloadAction'>" + "<div class='tab-availablePlatforms' />" + "<div class='tab-downloadAppButton' />" + '</div>' + '</div>' + "<div class='tab-downloadSeparator' />" + "<div class='tab-downloadButtons'>" + '</div>' + '</div>';
tab._referenceLineConstantValueEditorTemplate._htmlTemplate$1 = "<div class='refLineConstantValueEditor'>" + "<span class='refLineConstantValueEditorTitle'></span>" + "<span><input class='refLineConstantValueEditorInput' type='text'/></span>" + '</div>';
tab.ToolbarButtonTemplate._htmlTemplate$1 = "\n<div class='tabToolbarButton'>\n    <span class='" + 'tabToolbarButtonImg' + "' />\n    <span class='tabToolbarButtonText' />\n</div>";
(function () {
    spiff.ObjectRegistry.registerType(tab.WorkbookView, tab.WorkbookView);
})();
tab.BaseLegendView.controlsMargin = 2;
tab.LegendTemplate.legendHighlighterClass = 'tabLegendHighlighter';
tab.LegendTemplate.legendHighlighterSelector = '.' + 'tabLegendHighlighter';
(function () {
    spiff.ObjectRegistry.registerType(tab.ConfirmationView, tab.ConfirmationView);
})();
(function () {
    spiff.ObjectRegistry.registerType(tab.ApplicationView, tab.ApplicationView);
})();
tab.PresModelBrowserView._viewTemplate2$2 = "' class='pres_model_browser'>" + "<input type='text' class='pres_model_search_text' />" + "<button class='pres_model_hide'>x</button>" + "<button class='pres_model_search'>Search</button>" + "<button class='pres_model_expand'>Expand all</button>" + "<div class='tree'></div>" + '</div>';
(function () {
    spiff.ObjectRegistry.registerType(tab.StoryPointCaptionView, tab.StoryPointCaptionView);
})();
tab.StoryPointCaptionTemplate._htmlTemplate$1 = "<span class='tabStoryPoint'>\n" + "<div class='tabStoryPointToolbar'><div class='tabStoryRevert'></div></div>\n" + "<div class='tabStoryPointCaption tabUnformattedStoryPoint'>" + "<div class='tabStoryPointCaptionTop'/><div class='tabStoryPointCaptionBottom'/>" + '</div></span>';
(function () {
    spiff.ObjectRegistry.registerType(tab.DashboardView, tab.DashboardView);
})();
tab.FlipboardNavigatorView.storyPointToolbarHeight = 20;
tab.FlipboardNavigatorView.formattedStoryPointSelector = '.tabFormattedFlipboardNav .tabFlipboardNavScroller ' + '.tabScroller .tabScrollerContent .tabFlipboardNavPoints .tabStoryPoint';
tab.FlipboardNavigatorView.selectedStoryPointBoxSelector = '.tabStoryPointCaption.tabFormattedStoryPoint.tabCurrent';
tab.FlipboardNavigatorView.unselectedStoryPointBoxSelector = '.tabStoryPointCaption.tabFormattedStoryPoint';
tab.FlipboardNavigatorView.selectedStoryPointTextSelector = '.tabStoryPointCaption.tabFormattedStoryPoint.tabCurrent' + ' .tabCustomScroller .tabScrollerContentWindow .tabScrollerContent .tabStoryPointContent';
tab.FlipboardNavigatorView.unselectedStoryPointTextSelector = '.tabStoryPointCaption.tabFormattedStoryPoint' + ' .tabCustomScroller .tabScrollerContentWindow .tabScrollerContent .tabStoryPointContent';
tab.FlipboardNavigatorView.selectedStoryPointNativeScrollerTopBottomSelector = '.tabStoryPointCaption.tabFormattedStoryPoint.tabCurrent .tabStoryPointCaptionTop,' + '.tabStoryPointCaption.tabFormattedStoryPoint.tabCurrent .tabStoryPointCaptionBottom';
tab.FlipboardNavigatorView.unselectedStoryPointNativeScrollerTopBottomSelector = '.tabStoryPointCaption.tabFormattedStoryPoint .tabStoryPointCaptionTop,' + '.tabStoryPointCaption.tabFormattedStoryPoint .tabStoryPointCaptionBottom';
tab.FlipboardNavigatorView.selectedStoryPointNativeScrollerTextSelector = '.tabStoryPointCaption.tabFormattedStoryPoint.tabCurrent' + ' .tabScroller .tabScrollerContent .tabStoryPointContent';
tab.FlipboardNavigatorView.unselectedStoryPointNativeScrollerTextSelector = '.tabStoryPointCaption.tabFormattedStoryPoint' + ' .tabScroller .tabScrollerContent .tabStoryPointContent';
tab.FlipboardNavigatorView.storyStyleSheetId = 'appendedStoryStyle';
(function () {
    spiff.ObjectRegistry.registerType(tab.FlipboardNavigatorView, tab.FlipboardNavigatorView);
})();
tab.FlipboardNavigatorTemplate._htmlTemplate$1 = "<div class='tabFlipboardNav tabUnformattedFlipboardNav'>" + "<span class='tabFlipboardNavPrevious'><div class='tabStoryLeftArrow'/></span>" + "<span class='tabFlipboardNavScroller'/><span class='tabFlipboardNavNext'><div class='tabStoryRightArrow'/></span>" + '</div>';
tab.FlipboardView.scrollBarThickness = 24;
(function () {
    spiff.ObjectRegistry.registerType(tab.FlipboardView, tab.FlipboardView);
})();
tab.PaneTableView.suppressVizTooltipsAndOverlays = 'tabSuppressVizTooltipsAndOverlays';
tab.PaneTableView.scrollableXRegions = [ 'xheader', 'bottomaxis', 'topaxis', 'viz' ];
tab.PaneTableView.scrollableYRegions = [ 'yheader', 'leftaxis', 'rightaxis', 'viz' ];
tab.PaneTableView.headerRegions = [ 'yheader', 'xheader', 'leftaxis', 'rightaxis', 'bottomaxis', 'topaxis', 'uleft', 'uright' ];
tab.PaneTableTemplate._bordersHTML$1 = "<div class='tvViewportBorder tvLeftBorder' />" + "<div class='tvViewportBorder tvRightBorder' />" + "<div class='tvViewportBorder tvTopBorder' />" + "<div class='tvViewportBorder tvBottomBorder' />";
tab.MapAttributionTemplate._htmlTemplate$1 = "<div class='tabMapAttribution'>" + "<div class='tabMapAttributionBackground' />" + "<a class='tabMapAttributionLink'></a>" + '</div>';
(function () {
    spiff.ObjectRegistry.registerType(tab.ParameterControlView, tab.ParameterControlView);
})();
(function () {
    spiff.ObjectRegistry.registerType(tab.QuickFilterDisplayView, tab.QuickFilterDisplayView);
})();
(function () {
    spiff.ObjectRegistry.registerType(tab.ToolbarView, tab.ToolbarView);
})();
tab.CategoricalLegendView._sizeSwatchFillColor$3 = new tab.ColorModel(216, 216, 216, 1);
tab.CategoricalLegendView._sizeSwatchBorderColor$3 = new tab.ColorModel(178, 178, 178, 1);
tab.CategoricalLegendTemplate._iconHighlighterHTMLTemplate$2 = "<div class='" + 'tabLegendHighlighter' + "'/>";
(function () {
    spiff.ObjectRegistry.registerType(tab.PageView, tab.PageView);
})();
(function () {
    spiff.ObjectRegistry.registerType(tab.ShareView, tab.ShareView);
})();
tab.ShareTemplate.linkTemplate = "\n            <div class='tab-shareLinkSection'>\n                <span class='tab-shareLinkTitle tab-shareTitle'/>\n                <input class='tab-shareLinkInput tab-shareInput' type='text'/>\n                <div class='tab-shareLinkSocial'/>\n            </div>";
tab.ShareTemplate.embedTemplate = "\n            <div class='tab-shareEmbedSection'>\n                <span class='tab-shareEmbedTitle tab-shareTitle'/>\n                <input class='tab-shareEmbedInput tab-shareInput'/>\n            </div>";
tab.ShareTemplate.viewStateTemplate = "\n            <div class='tab-shareViewStateSection'>\n                <span class='tab-shareCurrentView tab-shareViewToggle'/><span class='tab-shareOriginalView tab-shareViewToggle'/>\n            </div>";
tab.LogOnView._logOnCompleteCallback$2 = null;
(function () {
    spiff.ObjectRegistry.registerType(tab.LogOnView, tab.LogOnView);
})();
(function () {
    spiff.ObjectRegistry.registerType(tab.NotificationView, tab.NotificationView);
})();
tab.SubscribeView.minPanelDistanceFromEdge = 10;
(function () {
    spiff.ObjectRegistry.registerType(tab.SubscribeView, tab.SubscribeView);
})();
tab.ZoneView._transparentDashboardObjects$2 = [ 'bitmap', 'text', 'layout-free-form', 'empty', 'map', 'color', 'size', 'shape' ];
tab.ZoneView._suppressTooltipOverZones$2 = [ 'bitmap', 'color', 'shape', 'size', 'map', 'text', 'text-block', 'web', 'paramctrl', 'filter', 'empty', 'current-page' ];
tab.ZoneView._presModelBrowser$2 = null;
(function () {
    spiff.ObjectRegistry.registerType(tab.ZoneView, tab.ZoneView);
})();
tab.ZoneTemplate._htmlTemplate$1 = "<div class='tab-zone'>" + "<div class='wcHighlight wcHighlightTop'/>" + "<div class='wcHighlight wcHighlightBottom'/>" + "<div class='wcHighlight wcHighlightLeft'/>" + "<div class='wcHighlight wcHighlightRight'/>" + '</div>';
tab.Checklist.getFilterItemHtml = tableau.FilterItem.formatChecklistFilterItemHtml;
tab.HierarchicalFilter._white$2 = new tab.ColorModel(255, 255, 255, 1);
tab.HierarchicalFilter._borderColorAlpha$2 = 60 / 255;
tab.HierarchicalFilter._borderColorLighterAlpha$2 = 105 / 255;
tab.HierarchicalFilter._backgroundColorLightestAlpha$2 = 100 / 255;
tab.HierarchicalFilter._backgroundColorLightAlpha$2 = 140 / 255;
tab.HierarchicalFilter._backgroundColorLightestOverride$2 = new tab.ColorModel(234, 234, 234, 1);
tab.HierarchicalFilter._backgroundColorLightOverride$2 = new tab.ColorModel(241, 241, 241, 1);
(function () {
    spiff.ObjectRegistry.registerType(tab.ContinuousSlider, tab.ContinuousSlider);
})();
tab._continuousSliderTemplate.template = "<div class='tabHorizontalSlider'>\n</div>'";
tab.CustomViewsPanel.minPanelWidth = 200;
tab.CustomViewsPanel.minPanelHeight = 200;
tab.CustomViewsPanel.minPanelDistanceFromEdge = 10;
tab.CustomViewsPanel.spacing = 7;
tab.CustomViewsPanel.log = tab.Logger.getLogger(tab.CustomViewsPanel);
tab.CustomViewsViewModel.modeSelect = 0;
tab.CustomViewsViewModel.modeManage = 1;
tab.CustomViewsViewModel._log = tab.Logger.getLogger(tab.CustomViewsViewModel);
tab.DojoWidgets._categoricalFilterTemplate = "<div class='CategoricalFilter'>" + "<div class='CategoricalFilterBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<div class='FilterTitle' dojoAttachPoint='domTitleBar'></div>" + "<div dojoType='dijit.form.Button' class='CFButton CFResetButton' showlabel='false'" + "dojoAttachPoint='resetButton' dojoAttachEvent='onClick:toggleReset'" + "iconClass='wcIconNonfiltered'>Showing all values</div>" + "<div dojoType='dijit.form.Button' class='CFButton CFSearchButton' showlabel='false'" + "dojoAttachPoint='searchButton' dojoAttachEvent='onClick:toggleSearchUI'" + "iconClass='wcIconSearch'>Search</div>" + "<div dojoType='dijit.form.Button' class='CFButton CFDomainButton' showlabel='false'" + "dojoAttachPoint='domainButton' dojoAttachEvent='onClick:toggleDomain'" + "iconClass='wcIconDomainAll'>Show Fewer Values</div>" + "<div dojoType='dijit.form.Button' dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'" + "class='CFButton CFMenuButton' dojoAttachPoint='menuButton' name='type'></div>" + '</div>' + "<div dojoAttachPoint='searchDiv'></div>" + "<div class='CFContent' dojoAttachPoint='domContent'></div>" + "<div class='CFHorizScroll' dojoAttachPoint='domHorizScroll' dojoAttachEvent='onscroll:doscrollHoriz'>" + "<div dojoAttachPoint='domHorizScrollContent'></div>" + '</div>' + "<div dojoType='tableau.base.widget.ConditionalsWidget' dojoAttachPoint='conditionals'></div>" + '</div>' + '</div>';
tab.DojoWidgets._parameterControlTemplate = "<div class='ParameterControl'>" + "<div class='ParameterControlBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<div class='ParamTitle' dojoAttachPoint='domTitleBar'></div>" + '</div>' + "<div class='PCContent' dojoAttachPoint='domContent'></div>" + '</div>' + '</div>';
tab.DojoWidgets._searchWidgetTemplate = "<div class='Search'>" + "<div class='SearchBox' dojoAttachPoint='domQuerySection'>" + "<textarea rows='1' class='QueryBox' spellcheck='false'" + "dojoAttachPoint='domQueryBox'" + "dojoAttachEvent='onkeydown:onQueryBoxKeyDown,onpaste:onQueryBoxPaste'></textarea>" + "<span class='wcSearchX' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<img class='searchBusyImg' title='${CANCEL_SEARCH_TOOLTIP}' src='${busy_gif_url}'" + "dojoAttachPoint='domSearchBusyImg'" + "dojoAttachEvent='onclick:onSearchBusyImgClick'></img>" + "<span class='wcIconSearch' title='${SEARCH_TOOLTIP}'" + "dojoAttachPoint='domSearchButton'" + "dojoAttachEvent='onclick:onSearchButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<span class='wcIconSearchAdd' title='${ADD_ITEM_CTRL_ENTER}'" + "dojoAttachPoint='domSearchAddButton'" + "dojoAttachEvent='onclick:onSearchAddButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + '</div>' + "<div class='SearchResults' dojoAttachPoint='domResults' dojoAttachEvent='onclick:onListItemClick'></div>" + '</div>';
(function () {
    dojo.require('tableau.base.BaseClient');
    var superClasses = null;
    superClasses = [ dijit._Widget ];
    dojo.declare('tableau.base.widget.FilterWidget', superClasses, (tab.FilterWidget).prototype);
    superClasses = [ tableau.base.widget.FilterWidget ];
    dojo.declare('tableau.base.widget.DateFilterWidget', superClasses, (tab.DateFilterWidget).prototype);
    superClasses = [ tableau.base.widget.FilterWidget, dijit._Contained, dijit._Templated ];
    (tab.CategoricalFilter).prototype.templateString = tab.DojoWidgets._categoricalFilterTemplate;
    dojo.declare('tableau.base.widget.CategoricalFilter', superClasses, (tab.CategoricalFilter).prototype);
    superClasses = [ dijit._Widget, dijit._Contained, dijit._Templated ];
    dojo.declare('tableau.base.widget.ConditionalsWidget', superClasses, (tab.ConditionalsWidget).prototype);
    superClasses = [ dijit.layout._LayoutWidget, dijit._Templated ];
    dojo.declare('tableau.base.widget.TabbedNavigation', superClasses, (tab.TabbedNavigation).prototype);
    superClasses = [ dijit.layout._LayoutWidget, dijit._Templated ];
    dojo.declare('tableau.base.widget.CurrentPagePanel', superClasses, (tab.CurrentPagePanel).prototype);
    dojo.declare('tableau.base.widget.catmode.BaseMode', [ dijit._Contained ], (tab.BaseMode).prototype);
    dojo.declare('tableau.base.widget.catmode.Checklist', [ tableau.base.widget.catmode.BaseMode ], (tab.Checklist).prototype);
    dojo.declare('tableau.base.widget.catmode.BaseDropdown', [ tableau.base.widget.catmode.BaseMode ], (tab.BaseDropdown).prototype);
    dojo.declare('tableau.base.widget.catmode.SimpleDropdown', [ tableau.base.widget.catmode.BaseDropdown ], (tab.SimpleDropdown).prototype);
    dojo.declare('tableau.base.widget.catmode.CheckDropdown', [ tableau.base.widget.catmode.BaseDropdown ], (tab.CheckDropdown).prototype);
    dojo.declare('tableau.base.widget.catmode.Pattern', [ tableau.base.widget.catmode.BaseMode ], (tab.Pattern).prototype);
    dojo.declare('tableau.base.widget.catmode.Slider', [ tableau.base.widget.catmode.BaseMode ], (tab.SliderCatmode).prototype);
    dojo.declare('tableau.base.widget.catmode.TypeIn', [ tableau.base.widget.catmode.BaseMode ], (tab.TypeInCatmode).prototype);
    dojo.declare('tableau.base.widget.catmode.Radiolist', [ tableau.base.widget.catmode.BaseMode ], (tab.Radiolist).prototype);
    dojo.declare('tableau.base.widget.ui.iDropDownSelect', [ dojox.form.DropDownSelect ], (tab.IDropDownSelect).prototype);
    dojo.declare('tableau.base.widget.ui.Slider', new Array(0), (tab.Slider).prototype);
    dojo.declare('tableau.base.widget.ui.TypeIn', new Array(0), (tab.TypeIn).prototype);
    dojo.declare('tableau.base.widget.ui.TypeInDateField', [ tab.TypeIn ], (tab.TypeInDateField).prototype);
    dojo.declare('tableau.base.widget.ui.onClickOverride', null, (tab.OnClickOverride).prototype);
    dojo.declare('tableau.base.widget.ui.iMenuItem', [ dijit.MenuItem, tab.OnClickOverride ], (tab.UIMenuItem).prototype);
    dojo.declare('tableau.base.widget.ui.iCheckedMenuItem', [ dijit.CheckedMenuItem, tab.OnClickOverride ], (tab.UICheckedMenuItem).prototype);
    dojo.declare('tableau.base.widget.hsm.TreeModel', null, (tab.TreeSupport).prototype);
    dojo.declare('tableau.base.widget.hsm.Tree', [ dijit.Tree ], (tab.Tree).prototype);
    dojo.declare('tableau.base.widget.hsm._TreeNode', [ dijit._TreeNode ], (tab.TreeNode).prototype);
    superClasses = [ tableau.base.widget.FilterWidget, dijit._Contained, dijit._Templated ];
    dojo.declare('tableau.base.widget.HierarchicalFilter', superClasses, (tab.HierarchicalFilter).prototype);
    superClasses = [ tableau.base.widget.FilterWidget, dijit._Contained, dijit._Templated ];
    dojo.declare('tableau.base.widget.QuantitativeFilter', superClasses, (tab.QuantitativeFilter).prototype);
    superClasses = [ tableau.base.widget.DateFilterWidget, dijit._Contained, dijit._Templated ];
    dojo.declare('tableau.base.widget.RelativeDateFilter', superClasses, (tab.RelativeDateFilter).prototype);
    superClasses = [ tableau.base.widget.FilterWidget, dijit._Contained, dijit._Templated ];
    dojo.declare('tableau.base.widget.RelativeDatePickFilter', superClasses, (tab.RelativeDatePickFilter).prototype);
    superClasses = [ tableau.base.widget.QuantitativeFilter ];
    dojo.declare('tableau.base.widget.QuantitativeDateFilter', superClasses, (tab.QuantitativeDateFilter).prototype);
    superClasses = [ dijit._Widget, dijit._Templated ];
    (tab.ParameterControl).prototype.templateString = tab.DojoWidgets._parameterControlTemplate;
    dojo.declare('tableau.base.widget.ParameterControl', superClasses, (tab.ParameterControl).prototype);
    dojo.declare('tableau.base.widget.paramui.Base', [ dijit._Contained ], (tab.ParamUIBase).prototype);
    dojo.declare('tableau.base.widget.paramui.TypeIn', [ tableau.base.widget.paramui.Base ], (tab.ParamUITypeIn).prototype);
    dojo.declare('tableau.base.widget.paramui.TypeInDateField', [ tab.ParamUITypeIn ], (tab.ParamUITypeInDateField).prototype);
    dojo.declare('tableau.base.widget.paramui.Compact', [ tableau.base.widget.paramui.Base ], (tab.ParamUICompact).prototype);
    dojo.declare('tableau.base.widget.paramui.List', [ tableau.base.widget.paramui.Base ], (tab.ParamUIList).prototype);
    dojo.declare('tableau.base.widget.paramui.Slider', [ tableau.base.widget.paramui.Base ], (tab.ParamUISlider).prototype);
    superClasses = [ dijit._Widget, dijit._Templated, dijit._Contained ];
    dojo.declare('tableau.base.widget.SearchWidgetBase', superClasses, (tab.SearchWidgetBase).prototype);
    superClasses = [ tableau.base.widget.SearchWidgetBase ];
    (tab.SearchWidget).prototype.templateString = tab.DojoWidgets._searchWidgetTemplate;
    dojo.declare('tableau.base.widget.SearchWidget', superClasses, (tab.SearchWidget).prototype);
    dojo.declare('tableau.base.widget.SmallSearchWidget', [ tableau.base.widget.SearchWidgetBase ], (tab.SmallSearchWidget).prototype);
    dojo.declare('tableau.base.widget.FilteringSearchWidget', [ tableau.base.widget.SearchWidgetBase ], (tab.FilteringSearchWidget).prototype);
    superClasses = [ dijit._Widget, dijit._Templated, dijit._Contained ];
    dojo.declare('tableau.base.widget.TypeInFilterContents', superClasses, (tab.TypeInFilterContents).prototype);
    superClasses = [ dijit.layout._LayoutWidget, dijit._Templated ];
    dojo.declare('tableau.base.widget.FilterPanel', superClasses, (tab.FilterPanel).prototype);
    superClasses = [ dijit.DialogUnderlay ];
    dojo.declare('tableau.base.widget.DialogUnderlay', superClasses, (tab.DialogUnderlay).prototype);
    superClasses = [ dijit.Dialog ];
    dojo.declare('tableau.base.widget.Dialog', superClasses, (tab.LegacyDialog).prototype);
    superClasses = [ tableau.base.widget.Dialog ];
    dojo.declare('tableau.base.widget.ShareDialog', superClasses, (tab.ShareDialog).prototype);
})();
tab.FilterItemUtil.unknownItemIndex = -2;
tab.FilterItemUtil.allItemIndex = -1;
tab.FilterItemUtil._ALL = tab.Strings.QuickFilterAll;
tab.HorizontalIteratorButtonTemplate._htmlTemplate$2 = "<div class='tabCatLegendScrollButtonHolder'>" + "<span class='tabCatLegendScrollPrev'/>" + "<span class='tabCatLegendScrollNext'/>" + '</div>';
tab.VerticalIteratorButtonTemplate._htmlTemplate$2 = "<div class='tabCatLegendScrollButtonHolder'>" + "<span class='tabCatLegendScrollPrev'/>" + '<br>' + "<span class='tabCatLegendScrollNext'/>" + '</div>';
tab.LeafletMapControl._alignmentCorrect = tab.$create_Point(1, 1);
tab.LeafletMapControl._northPole = new ss.Tuple(90, 0);
tab.LeafletMapControl._southPole = new ss.Tuple(-90, 0);
tab._leafletMapTemplate._htmlTemplate$1 = '<div>' + "<div class='tabLeafletMapHolder' />" + "<div class='tabLeftBarnDoor' />" + "<div class='tabRightBarnDoor' />" + '</div>';
tab.FilteringSearchWidget.minimumDomainSize = 5;
tab.RelativeDateFilter._anchoredDescriptions$3 = null;
tab.RelativeDateFilter._nonAnchoredDescriptions$3 = null;
tab.RelativeDatePickFilter.pickerDurationsInteger = [1, 7, 30, 90, 365, 1825];
tab.RelativeDatePickFilter.pickerDurations = ['0d', '-7d', '-30d', '-90d', '-365d', '-1825d'];
tab.RelativeDatePickFilter.pickerStrings = [tab.Strings.RelDatePickerOneDayAbbrev, tab.Strings.RelDatePickerOneWeekAbbrev, tab.Strings.RelDatePickerOneMonthAbbrev, tab.Strings.RelDatePickerThreeMonthsAbbrev, tab.Strings.RelDatePickerOneYearAbbrev, tab.Strings.RelDatePickerFiveYearsAbbrev];
tab.SearchWidgetBase.noSearchPerformed = -1;
tab.ShareDialog._shareVizHeaderLink$4 = (tsConfig.isPublic) ? "<a class='shareVizHeaderLink' href='/' id='share_header_link' tabindex='-1' target='_blank'><img id='share_header_logo'/></a>" : '';
tab.ShareDialogUtil._waitingLinkMessage = tab.Strings.ShareDialogWaitingLinkMessage;
tab.ShareDialogUtil._waitingEmbedMessage = tab.Strings.ShareDialogWaitingEmbedMessage;
tab.ShareDialogUtil.share_settings = tab.$create_ShareSettings();
tab.ShareDialogUtil._popup = null;
tab.ShareDialogUtil._justSetPopup = null;
(function () {
    if (tab.BrowserSupport.get_addEventListener()) {
        document.addEventListener('click', tab.ShareDialogUtil.hideActivePopup, false);
    }
    else if ((typeof(document.attachEvent) === 'function')) {
        document.attachEvent('onclick', function() {
            tab.ShareDialogUtil.hideActivePopup(null);
        });
    }
    else {
        document.onclick = tab.ShareDialogUtil.hideActivePopup;
    }
})();
tab.Slider.tableauSliderTemplate = "<div class='dijit dijitReset'>" + "<div class='dijitReset tableauSlider' dojoAttachPoint='tableauSlider'>" + "<table class='dijit dijitReset' cellspacing='0' cellpadding='0' border='0' rules='none' dojoAttachEvent='onkeypress:_onKeyPress'>" + "<tr class='dijitReset'>" + "<td class='dijitReset'></td>" + "<td dojoAttachPoint='containerNode,topDecoration' class='dijitReset' style='text-align:center;width:100%;'></td>" + "<td class='dijitReset'></td>" + '</tr>' + "<tr class='dijitReset'>" + "<td class='dijitReset'>" + "<div class='dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderLeftBumper dijitSliderLeftBumper' dojoAttachEvent='onclick:_onClkDecBumper'></div>" + '</td>' + "<td class='dijitReset'>" + "<input dojoAttachPoint='valueNode' type='hidden' name='${name}'>" + "<div class='dijitReset dijitSliderBarContainerH' waiRole='presentation' dojoAttachPoint='sliderBarContainer'>" + "<div waiRole='presentation' dojoAttachPoint='progressBar' class='dijitSliderBar dijitSliderBarH dijitSliderProgressBar dijitSliderProgressBarH' dojoAttachEvent='onclick:_onBarClick'>" + "<div class='dijitSliderMoveable dijitSliderMoveableH'>" + "<div dojoAttachPoint='sliderHandle,focusNode' class='dijitSliderImageHandle dijitSliderImageHandleH' dojoAttachEvent='onmousedown:_onHandleClick' waiRole='slider' valuemin='${minimum}' valuemax='${maximum}'></div>" + '</div>' + '</div>' + "<div waiRole='presentation' dojoAttachPoint='remainingBar' class='dijitSliderBar dijitSliderBarH dijitSliderRemainingBar dijitSliderRemainingBarH' dojoAttachEvent='onclick:_onBarClick'></div>" + '</div>' + '</td>' + "<td class='dijitReset'>" + "<div class='dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderRightBumper dijitSliderRightBumper' dojoAttachEvent='onclick:_onClkIncBumper'></div>" + '</td>' + '</tr>' + "<tr class='dijitReset'>" + "<td class='dijitReset'></td>" + "<td dojoAttachPoint='containerNode,bottomDecoration' class='dijitReset'></td>" + "<td class='dijitReset'></td>" + '</tr>' + '</table>' + '</div>' + "<div class='dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH tableauArrowDec' style='display:none' dojoAttachPoint='decrementButton'>" + "<div class='dijitSliderDecrementIconH' tabIndex='-1'>" + "<span class='dijitSliderButtonInner'>-</span>" + '</div>' + '</div>' + "<div class='dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH tableauArrowInc' style='display:none' dojoAttachPoint='incrementButton'>" + "<div class='dijitSliderIncrementIconH' tabIndex='-1'>" + "<span class='dijitSliderButtonInner'>+</span>" + '</div>' + '</div>' + '</div>';
tab.Slider._simpleTooltipTemplate = "<div class='dijitTooltip dijitTooltipLeft' id='dojoTooltip'>" + "<div class='dijitTooltipContainer' dojoAttachpoint='coreArea'>" + "<div class='dijitTooltipContents' dojoAttachPoint='containerNode' waiRole='alert'></div></div>" + "<div class='dijitTooltipConnector'></div>" + '</div>';
tab.StepperControlView.incrementButtonClassName = 'tabDecrementButton';
tab.StepperControlView.decrementButtonClassName = 'tabIncrementButton';
(function () {
    spiff.ObjectRegistry.registerType(tab.StepperControlView, tab.StepperControlView);
})();
tab.TiledViewerRegion.windowLog = null;
tab.TiledViewerRegion.paneBorderMaskSize = 2;
tab.TiledViewerRegion.canvasBorderPixels = 1;
tab.TiledViewerRegion.zoomAnimationTime = 777;
tab.TiledViewerRegion.minZoomAnimationTime = 500;
tab.FilterListUI._scrollVelocityThreshold = 100;
tab.TiledWidget._logger = tab.Logger.getLogger(tab.TiledWidget);
tab.Tooltip.defaultVerticalOffset = 16;
tab.Tooltip.defaultHorizonalOffset = 16;
tab.Tooltip.belowRightClass = 'tab-tooltipBR';
tab.Tooltip.belowLeftClass = 'tab-tooltipBL';
tab.Tooltip.aboveRightClass = 'tab-tooltipAR';
tab.Tooltip.aboveLeftClass = 'tab-tooltipAL';
tab.Tooltip._allRelativePositionClasses$1 = 'tab-tooltipAR' + ' ' + 'tab-tooltipAL' + ' ' + 'tab-tooltipBL' + ' ' + 'tab-tooltipBR';
tab.Tooltip._tooltipElement$1 = null;
tab.Ubertip._placeHolderWidth$1 = null;
(function () {
    tab.Ubertip._placeHolderWidth$1 = {};
})();
tab.TooltipBaseMode.whitespaceObjectId = -1;
tab.TooltipBaseMode.unknownObjectId = -2;
tab.TooltipBaseMode._tooltipRID = 0;
tab.TooltipBaseMode._requestVizId = null;
tab.TooltipBaseMode._latestTupleID = null;
tab.TooltipBaseMode.lastHoveredObjectId = tab.TooltipBaseMode.unknownObjectId;
tab.TooltipResponsiveMode._uniqueEventTypeCounter$1 = 0;
(function () {
    tab.CommandRedirectRegistry.registerHandler('command-redirect-notification', tab.NotificationCommandRedirectHandler._handleNotification);
})();
(function () {
    tab.CommandRedirectRegistry.registerHandler('command-redirect-quick-edit', tab.ReferenceLineConstantValueQuickEditCommandRedirectHandler._handleConfirmation);
})();
(function () {
    tab.CommandRedirectRegistry.registerHandler('command-redirect-confirmation', tab.ConfirmationCommandRedirectHandler._handleConfirmation);
})();
tab.CircleShapeSelector._crosshairTemplate$1 = "<line class='circle_crosshair' x1='0' y1='0' x2='0' y2='0'></line>" + "<line class='circle_crosshair' x1='0' y1='0' x2='0' y2='0'></line>";
tab.CircleShapeSelector._halfCrosshairTemplateVml$1 = "<v:rect class='" + 'circle_crosshairs' + "'><v:fill color='" + 'rgb(0, 176, 240)' + "'/><v:stroke color='" + 'rgb(0, 176, 240)' + "'/></v:rect>";
tab.CircleShapeSelector._crosshairTemplateVml$1 = tab.CircleShapeSelector._halfCrosshairTemplateVml$1 + tab.CircleShapeSelector._halfCrosshairTemplateVml$1;
tab.CircleShapeSelector._htmlTemplate$1 = "<div><svg class='selectionShape'><circle class='tvdrag_svg_marquee'></circle>" + "<g class='" + 'circle_crosshairs' + "'>" + tab.CircleShapeSelector._crosshairTemplate$1 + '</g></svg></div>';
tab.CircleShapeSelector._htmlTemplateVml$1 = "<div><div class='selectionShape'><v:oval class='" + 'voval' + "'><v:fill opacity='25%' color='" + 'rgb(0, 176, 240)' + "'/>" + "<v:stroke color='" + 'rgb(0, 176, 240)' + "'/></v:oval>" + tab.CircleShapeSelector._crosshairTemplateVml$1 + '</div>';
tab.PolyShapeSelector._htmlTemplateVml$1 = "<div><div class='selectionShape'><v:polyline class='" + 'vpolyline' + "'></v:polyline></div>";
tab.ShapeSelectorBase._isUsingVmlShapes = tab.BrowserSupport.get_isIE() && tab.BrowserSupport.get_browserVersion() < 9;
tab.ShapeSelectorBase.vmlColor = 'rgb(0, 176, 240)';
tab.StepperControlViewModel.valueProperty = 'Value';
tab.StepperControlViewModel.enabledProperty = 'IsEnabled';
tab.StepperControlViewModel.incrementEnabledProperty = 'IsIncrementEnabled';
tab.StepperControlViewModel.decrementEnabledProperty = 'IsDecrementEnabled';
tab.MapsSearchView.widgetClassName = 'tabMapsSearchView';
tab.MapsSearchView._widgetClassNameCollapsed$2 = 'tabMapsSearchView' + 'Collapsed';
tab.MapsSearchView._initialTextClassName$2 = 'tabMapsSearchView' + 'InitialText';
tab.MapsSearchView.widgetClassNameTranslucent = 'tabMapsSearchView' + 'Translucent';
tab.MapsSearchView.suggestionDisplayClassName = 'tabMapsSearchView' + 'SuggestionDisplayName';
tab.MapsSearchView.suggestionActiveSearchTextClassName = 'tabMapsSearchView' + 'SuggestionActiveSearchText';
tab.MapsSearchView.suggestionParentClassName = 'tabMapsSearchView' + 'SuggestionParentName';
tab.MapsSearchView.queryDelayTimerMs = 200;
(function () {
    spiff.ObjectRegistry.registerType(tab.MapsSearchView, tab.MapsSearchView);
})();
});

//! This script was generated using Script# v0.7.4.0
