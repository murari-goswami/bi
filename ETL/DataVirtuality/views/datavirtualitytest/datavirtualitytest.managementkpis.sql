-- Name: datavirtualitytest.managementkpis
-- Created: 2015-04-24 18:17:13
-- Updated: 2015-04-24 18:17:13

CREATE VIEW datavirtualitytest.managementkpis AS
SELECT stock.date_created, stock.stock_entry_quantity, stock.stock_entry_reserved, shipped.stock_shipped_anzahl_order, shipped.stock_anzahl_shipped_order_position_id, shipped.stock_sum_shipped_retail_price, shipped.stock_sum_shipped_purchase_price, shipped.own_stock_anzahl_shipped_order_position_id, shipped.own_stock_shipped_anzahl_order, shipped.own_stock_sum_shipped_retail_price, shipped.own_stock_sum_shipped_purchase_price, shipped.z_stock_shipped_anzahl_order, shipped.z_stock_anzahl_shipped_order_position_id, shipped.z_stock_sum_shipped_retail_price, shipped.z_stock_sum_shipped_purchase_price, shipped.chf_stock_shipped_anzahl_order, shipped.chf_stock_anzahl_shipped_order_position_id, shipped.chf_stock_sum_shipped_retail_price, shipped.chf_stock_sum_shipped_purchase_price, returned.stock_returned_anzahl_order, returned.stock_anzahl_returned_order_position_id, returned.stock_sum_returned_retail_price, returned.stock_sum_returned_purchase_price, returned.own_stock_returned_anzahl_order, returned.own_stock_anzahl_returned_order_position_id, returned.own_stock_sum_returned_retail_price, returned.own_stock_sum_returned_purchase_price, returned.z_stock_returned_anzahl_order, returned.z_stock_anzahl_returned_order_position_id, returned.z_stock_sum_returned_retail_price, returned.z_stock_sum_returned_purchase_price, returned.chf_stock_returned_anzahl_order, returned.chf_stock_anzahl_returned_order_position_id, returned.chf_stock_sum_returned_retail_price, returned.chf_stock_sum_returned_purchase_price, picked.stock_picked_anzahl_order, picked.stock_anzahl_picked_order_position_id, picked.stock_sum_picked_retail_price, picked.stock_sum_picked_purchase_price, picked.own_stock_picked_anzahl_order, picked.own_stock_anzahl_picked_order_position_id, picked.own_stock_sum_picked_retail_price, picked.own_stock_sum_picked_purchase_price, picked.z_stock_picked_anzahl_order, picked.z_stock_anzahl_picked_order_position_id, picked.z_stock_sum_picked_retail_price, picked.z_stock_sum_picked_purchase_price, picked.chf_stock_picked_anzahl_order, picked.chf_stock_anzahl_picked_order_position_id, picked.chf_stock_sum_picked_retail_price, picked.chf_stock_sum_picked_purchase_price, created.own_stock_created_anzahl_order, created.own_stock_anzahl_created_order_position_id, created.own_stock_sum_created_retail_price, created.own_stock_sum_created_purchase_price, created.z_stock_created_anzahl_order, created.z_stock_anzahl_created_order_position_id, created.z_stock_sum_created_retail_price, created.z_stock_sum_created_purchase_price, created.chf_stock_created_anzahl_order, created.chf_stock_anzahl_created_order_position_id, created.chf_stock_sum_created_retail_price, created.chf_stock_sum_created_purchase_price, created.stock_created_anzahl_order, created.stock_anzahl_created_order_position_id, created.stock_sum_created_retail_price, created.stock_sum_created_purchase_price, inv.stock_entry_quantity_retail_price_sum, inv.stock_entry_reserved_retail_price_sum, shippingmails.nb_shipping_mails, retourmails.nb_retouren_mails, datedeliverd.quantity_good, datedeliverd.quantity_good_min_retail_price_sum, datedeliverd.quantity_good_max_retail_price_sum FROM ((((((((SELECT cast(timestampadd(SQL_TSI_DAY, -1, han.stock_entry_history.date_created) AS date) AS date_created, SUM(quantity) AS stock_entry_quantity, SUM(reserved) AS stock_entry_reserved FROM han.stock_entry_history GROUP BY 1) AS stock LEFT OUTER JOIN (SELECT cast(op.date_shipped AS date) AS date_shipped, COUNT(DISTINCT op.order_id) AS stock_shipped_anzahl_order, COUNT(DISTINCT op.id) AS stock_anzahl_shipped_order_position_id, SUM((op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END)) AS stock_sum_shipped_retail_price, SUM((op.quantity * purchase_price)) AS stock_sum_shipped_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.order_id END) AS own_stock_shipped_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.id END) AS own_stock_anzahl_shipped_order_position_id, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS own_stock_sum_shipped_retail_price, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * purchase_price) END) AS own_stock_sum_shipped_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.order_id END) AS z_stock_shipped_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.id END) AS z_stock_anzahl_shipped_order_position_id, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS z_stock_sum_shipped_retail_price, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * purchase_price) END) AS z_stock_sum_shipped_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.order_id END) AS chf_stock_shipped_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.id END) AS chf_stock_anzahl_shipped_order_position_id, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS chf_stock_sum_shipped_retail_price, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * purchase_price) END) AS chf_stock_sum_shipped_purchase_price FROM postgres.order_position AS op INNER JOIN postgres.customer_order AS co ON co.id = op.order_id WHERE (op.state >= '128') AND (op.state <= '1024') AND (op.date_shipped IS NOT NULL) GROUP BY 1) AS shipped ON date_shipped = stock.date_created) LEFT OUTER JOIN (SELECT cast(op.date_returned AS date) AS date_returned, COUNT(DISTINCT op.order_id) AS stock_returned_anzahl_order, COUNT(DISTINCT op.id) AS stock_anzahl_returned_order_position_id, SUM((op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END)) AS stock_sum_returned_retail_price, SUM((op.quantity * purchase_price)) AS stock_sum_returned_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.order_id END) AS own_stock_returned_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.id END) AS own_stock_anzahl_returned_order_position_id, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS own_stock_sum_returned_retail_price, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * purchase_price) END) AS own_stock_sum_returned_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.order_id END) AS z_stock_returned_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.id END) AS z_stock_anzahl_returned_order_position_id, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS z_stock_sum_returned_retail_price, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * purchase_price) END) AS z_stock_sum_returned_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.order_id END) AS chf_stock_returned_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.id END) AS chf_stock_anzahl_returned_order_position_id, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS chf_stock_sum_returned_retail_price, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * purchase_price) END) AS chf_stock_sum_returned_purchase_price FROM postgres.order_position AS op INNER JOIN postgres.customer_order AS co ON co.id = op.order_id WHERE (op.state >= '128') AND (op.state <= '1024') AND (op.date_returned IS NOT NULL) GROUP BY 1) AS returned ON returned.date_returned = stock.date_created) LEFT OUTER JOIN (SELECT cast(co.date_picked AS date) AS date_created, COUNT(DISTINCT co.id) AS stock_created_anzahl_order, COUNT(DISTINCT op.id) AS stock_anzahl_created_order_position_id, SUM((op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END)) AS stock_sum_created_retail_price, SUM((op.quantity * purchase_price)) AS stock_sum_created_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN co.id END) AS own_stock_created_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.id END) AS own_stock_anzahl_created_order_position_id, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS own_stock_sum_created_retail_price, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * purchase_price) END) AS own_stock_sum_created_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN co.id END) AS z_stock_created_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.id END) AS z_stock_anzahl_created_order_position_id, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS z_stock_sum_created_retail_price, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * purchase_price) END) AS z_stock_sum_created_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN co.id END) AS chf_stock_created_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.id END) AS chf_stock_anzahl_created_order_position_id, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS chf_stock_sum_created_retail_price, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * purchase_price) END) AS chf_stock_sum_created_purchase_price FROM postgres.order_position AS op INNER JOIN postgres.customer_order AS co ON co.id = op.order_id WHERE (op.state <> '2048') AND (op.state <> '8') AND (op.date_created IS NOT NULL) GROUP BY 1) AS created ON created.date_created = stock.date_created) LEFT OUTER JOIN (SELECT cast(co.date_picked AS date) AS date_picked, COUNT(DISTINCT op.order_id) AS stock_picked_anzahl_order, COUNT(DISTINCT op.id) AS stock_anzahl_picked_order_position_id, SUM((op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END)) AS stock_sum_picked_retail_price, SUM((op.quantity * purchase_price)) AS stock_sum_picked_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.order_id END) AS own_stock_picked_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 2 THEN op.id END) AS own_stock_anzahl_picked_order_position_id, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS own_stock_sum_picked_retail_price, SUM(CASE WHEN stock_location_id = 2 THEN (op.quantity * purchase_price) END) AS own_stock_sum_picked_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.order_id END) AS z_stock_picked_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 1 THEN op.id END) AS z_stock_anzahl_picked_order_position_id, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS z_stock_sum_picked_retail_price, SUM(CASE WHEN stock_location_id = 1 THEN (op.quantity * purchase_price) END) AS z_stock_sum_picked_purchase_price, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.order_id END) AS chf_stock_picked_anzahl_order, COUNT(DISTINCT CASE WHEN stock_location_id = 3 THEN op.id END) AS chf_stock_anzahl_picked_order_position_id, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * CASE WHEN currency_code = 'CHF' THEN (retail_price * 0.8) WHEN currency_code IN ('SEK', 'DKK') THEN (retail_price * 0.1) ELSE retail_price END) END) AS chf_stock_sum_picked_retail_price, SUM(CASE WHEN stock_location_id = 3 THEN (op.quantity * purchase_price) END) AS chf_stock_sum_picked_purchase_price FROM postgres.order_position AS op INNER JOIN postgres.customer_order AS co ON co.id = op.order_id WHERE (op.state >= '128') AND (op.state <= '1024') AND (op.date_picked IS NOT NULL) GROUP BY 1) AS picked ON picked.date_picked = stock.date_created) LEFT OUTER JOIN (SELECT cast(received_date_time AS date) AS retoure_recieved_date, COUNT(DISTINCT supplierorderid) AS nb_retouren_mails FROM han.allretouremails GROUP BY 1) AS retourmails ON retourmails.retoure_recieved_date = stock.date_created) LEFT OUTER JOIN (SELECT cast(date_created AS date) AS date_delivered, SUM(cast(quantity_good AS integer)) AS quantity_good, SUM((cast(quantity_good AS integer) * min_price)) AS quantity_good_min_retail_price_sum, SUM((cast(quantity_good AS integer) * max_price)) AS quantity_good_max_retail_price_sum FROM postgres.doc_data_stock_mutation LEFT OUTER JOIN (SELECT article_id, MIN(price) AS min_price, MAX(price) AS max_price FROM postgres.article_price WHERE supplier_id = 15 GROUP BY 1) AS ap ON ap.article_id = postgres.doc_data_stock_mutation.customer_article_number WHERE (booking_code = 1) AND (po_number IN (SELECT cast(id AS string) FROM postgres.purchase_order WHERE stock_location_id = 2)) GROUP BY cast(date_created AS date)) AS datedeliverd ON datedeliverd.date_delivered = stock.date_created) LEFT OUTER JOIN (SELECT cast(timestampadd(SQL_TSI_DAY, -1, han.stock_entry_history.date_created) AS date) AS date_created, SUM((han.stock_entry_history.quantity * cast(ad.price_retail_de AS bigdecimal))) AS stock_entry_quantity_retail_price_sum, SUM((han.stock_entry_history.reserved * cast(ad.price_retail_de AS bigdecimal))) AS stock_entry_reserved_retail_price_sum FROM han.stock_entry_history LEFT OUTER JOIN (SELECT ads.id, ads.price_retail_de, sas.article_id FROM postgres.article_details AS ads LEFT OUTER JOIN postgres.supplier_article AS sas ON sas.id = ads.id WHERE ads.id IN (SELECT sa.id FROM postgres.supplier_article AS sa WHERE supplier_id = 15)) AS ad ON han.stock_entry_history.sku = ad.article_id GROUP BY 1) AS inv ON inv.date_created = stock.date_created) LEFT OUTER JOIN (SELECT cast(recieveddate AS date) AS recieveddate, COUNT(DISTINCT orderid) AS nb_shipping_mails FROM han.dhlpackagestatus GROUP BY 1) AS shippingmails ON shippingmails.recieveddate = stock.date_created


